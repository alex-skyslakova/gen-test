task_name,task_description,language_name,code,code_length,line_count,generated_code,file_path,compilation_status,runtime_errors_count,line_coverage_percent,branch_coverage_percent,assertions_density,assertions_mccabe_ratio,tests_pass_percentage,execution_time_sec,warnings_count,warnings,timeout_occurred
100 doors,"There are 100 doors in a row that are all initially closed.

You make 100 passes by the doors.

The first time through, visit every door and  toggle  the door  (if the door is closed,  open it;   if it is open,  close it).

The second time, only visit every 2nd door   (door #2, #4, #6, ...),   and toggle it.

The third time, visit every 3rd door   (door #3, #6, #9, ...), etc,   until you only visit the 100th door.



Task

Answer the question:   what state are the doors in after the last pass?   Which are open, which are closed?


Alternate:
As noted in this page's   discussion page,   the only doors that remain open are those whose numbers are perfect squares.

Opening only those doors is an   optimization   that may also be expressed;
however, as should be obvious, this defeats the intent of comparing implementations across programming languages.



",Python," 
doors = [False] * 100
for i in range(100):
   for j in range(i, 100, i+1):
       doors[j] = not doors[j]
   print(""Door %d:"" % (i+1), 'open' if doors[i] else 'close')
 ",171,7,"import unittest

class Test100Doors(unittest.TestCase):
    def test_doors_states(self):
        doors = [False] * 100
        for i in range(100):
            for j in range(i, 100, i+1):
                doors[j] = not doors[j]
        
        # Only doors with perfect square indices should be open
        expected_open_doors = {i*i for i in range(1, 11)}  # 1, 4, 9, 16, ..., 100
        actual_open_doors = {index + 1 for index, state in enumerate(doors) if state}

        self.assertEqual(expected_open_doors, actual_open_doors)

    def test_all_doors_toggled(self):
        doors = [False] * 100
        for i in range(100):
            for j in range(i, 100, i+1):
                doors[j] = not doors[j]
        
        # Check that all doors have been toggled at least once
        toggled_doors = [False] * 100
        for i in range(100):
            for j in range(i, 100, i+1):
                toggled_doors[j] = True

        self.assertTrue(all(toggled_doors))

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/100_doors/test_gpt_4o_2024_08_06_100_doors.py,CompileStatus.OK,0.0,77.78,77.55,0.09,,100.0,0.511315107345581,7.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_100_doors', 'obj': '', 'line': 9, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/100_doors/test_gpt_4o_2024_08_06_100_doors.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_100_doors', 'obj': '', 'line': 21, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/100_doors/test_gpt_4o_2024_08_06_100_doors.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_100_doors', 'obj': '', 'line': 27, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/100_doors/test_gpt_4o_2024_08_06_100_doors.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_100_doors', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/100_doors/test_gpt_4o_2024_08_06_100_doors.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_100_doors', 'obj': 'Test100Doors', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 18, 'path': 'data/generated/docs_python/100_doors/test_gpt_4o_2024_08_06_100_doors.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_100_doors', 'obj': 'Test100Doors.test_doors_states', 'line': 4, 'column': 4, 'endLine': 4, 'endColumn': 25, 'path': 'data/generated/docs_python/100_doors/test_gpt_4o_2024_08_06_100_doors.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_100_doors', 'obj': 'Test100Doors.test_all_doors_toggled', 'line': 16, 'column': 4, 'endLine': 16, 'endColumn': 30, 'path': 'data/generated/docs_python/100_doors/test_gpt_4o_2024_08_06_100_doors.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
100 prisoners,"

The Problem

 100 prisoners are individually numbered 1 to 100
 A room having a cupboard of 100 opaque drawers numbered 1 to 100, that cannot be seen from outside.
 Cards numbered 1 to 100 are placed randomly, one to a drawer, and the drawers all closed; at the start.
 Prisoners start outside the room
 They can decide some strategy before any enter the room.
 Prisoners enter the room one by one, can open a drawer, inspect the card number in the drawer, then close the drawer.
 A prisoner can open no more than 50 drawers.
 A prisoner tries to find his own number.
 A prisoner finding his own number is then held apart from the others.
 If all 100 prisoners find their own numbers then they will all be pardoned. If any don't then all sentences stand.


The task

 Simulate several thousand instances of the game where the prisoners randomly open drawers
 Simulate several thousand instances of the game where the prisoners use the optimal strategy mentioned in the Wikipedia article, of:
 First opening the drawer whose outside number is his prisoner number.
 If the card within has his number then he succeeds otherwise he opens the drawer with the same number as that of the revealed card. (until he opens his maximum).


Show and compare the computed probabilities of success for the two strategies, here, on this page.




References

 The unbelievable solution to the 100 prisoner puzzle standupmaths (Video).
 wp:100 prisoners problem
 100 Prisoners Escape Puzzle DataGenetics.
 Random permutation statistics#One hundred prisoners on Wikipedia.

",Python,"import random
 
def play_random(n):
    # using 0-99 instead of ranges 1-100
    pardoned = 0
    in_drawer = list(range(100))
    sampler = list(range(100))
    for _round in range(n):
        random.shuffle(in_drawer)
        found = False
        for prisoner in range(100):
            found = False
            for reveal in random.sample(sampler, 50):
                card = in_drawer[reveal]
                if card == prisoner:
                    found = True
                    break
            if not found:
                break
        if found:
            pardoned += 1
    return pardoned / n * 100   # %
 
def play_optimal(n):
    # using 0-99 instead of ranges 1-100
    pardoned = 0
    in_drawer = list(range(100))
    for _round in range(n):
        random.shuffle(in_drawer)
        for prisoner in range(100):
            reveal = prisoner
            found = False
            for go in range(50):
                card = in_drawer[reveal]
                if card == prisoner:
                    found = True
                    break
                reveal = card
            if not found:
                break
        if found:
            pardoned += 1
    return pardoned / n * 100   # %
 
if __name__ == '__main__':
    n = 100_000
    print("" Simulation count:"", n)
    print(f"" Random play wins: {play_random(n):4.1f}% of simulations"")
    print(f""Optimal play wins: {play_optimal(n):4.1f}% of simulations"")",1441,49,"import unittest
from unittest.mock import patch
import random
from io import StringIO
import sys

# Assuming the functions play_random and play_optimal are imported from 100_prisoners.py

class TestPrisonersProblem(unittest.TestCase):

    def test_play_random(self):
        # Test the play_random function with a fixed seed for reproducibility
        random.seed(0)
        result = play_random(1000)
        self.assertIsInstance(result, float)
        self.assertGreaterEqual(result, 0.0)
        self.assertLessEqual(result, 100.0)

    def test_play_optimal(self):
        # Test the play_optimal function with a fixed seed for reproducibility
        random.seed(0)
        result = play_optimal(1000)
        self.assertIsInstance(result, float)
        self.assertGreaterEqual(result, 0.0)
        self.assertLessEqual(result, 100.0)

    def test_output(self):
        # Test the output of the main block
        with patch('sys.stdout', new=StringIO()) as fake_out:
            n = 1000
            random.seed(0)
            print("" Simulation count:"", n)
            print(f"" Random play wins: {play_random(n):4.1f}% of simulations"")
            print(f""Optimal play wins: {play_optimal(n):4.1f}% of simulations"")
            output = fake_out.getvalue().strip()
            self.assertIn(""Simulation count: 1000"", output)
            self.assertIn(""Random play wins:"", output)
            self.assertIn(""Optimal play wins:"", output)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/100_prisoners/test_gpt_4o_2024_08_06_100_prisoners.py,CompileStatus.OK,0.0,25.33,20.95,0.29,0.64,,0.6711409091949463,10.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_100_prisoners', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/100_prisoners/test_gpt_4o_2024_08_06_100_prisoners.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_100_prisoners', 'obj': 'TestPrisonersProblem', 'line': 9, 'column': 0, 'endLine': 9, 'endColumn': 26, 'path': 'data/generated/docs_python/100_prisoners/test_gpt_4o_2024_08_06_100_prisoners.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_100_prisoners', 'obj': 'TestPrisonersProblem.test_play_random', 'line': 11, 'column': 4, 'endLine': 11, 'endColumn': 24, 'path': 'data/generated/docs_python/100_prisoners/test_gpt_4o_2024_08_06_100_prisoners.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_100_prisoners', 'obj': 'TestPrisonersProblem.test_play_random', 'line': 14, 'column': 17, 'endLine': 14, 'endColumn': 28, 'path': 'data/generated/docs_python/100_prisoners/test_gpt_4o_2024_08_06_100_prisoners.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'play_random'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_100_prisoners', 'obj': 'TestPrisonersProblem.test_play_optimal', 'line': 19, 'column': 4, 'endLine': 19, 'endColumn': 25, 'path': 'data/generated/docs_python/100_prisoners/test_gpt_4o_2024_08_06_100_prisoners.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_100_prisoners', 'obj': 'TestPrisonersProblem.test_play_optimal', 'line': 22, 'column': 17, 'endLine': 22, 'endColumn': 29, 'path': 'data/generated/docs_python/100_prisoners/test_gpt_4o_2024_08_06_100_prisoners.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'play_optimal'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_100_prisoners', 'obj': 'TestPrisonersProblem.test_output', 'line': 27, 'column': 4, 'endLine': 27, 'endColumn': 19, 'path': 'data/generated/docs_python/100_prisoners/test_gpt_4o_2024_08_06_100_prisoners.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_100_prisoners', 'obj': 'TestPrisonersProblem.test_output', 'line': 33, 'column': 40, 'endLine': 33, 'endColumn': 51, 'path': 'data/generated/docs_python/100_prisoners/test_gpt_4o_2024_08_06_100_prisoners.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'play_random'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_100_prisoners', 'obj': 'TestPrisonersProblem.test_output', 'line': 34, 'column': 40, 'endLine': 34, 'endColumn': 52, 'path': 'data/generated/docs_python/100_prisoners/test_gpt_4o_2024_08_06_100_prisoners.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'play_optimal'"", 'message-id': 'E0602'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_100_prisoners', 'obj': '', 'line': 5, 'column': 0, 'endLine': 5, 'endColumn': 10, 'path': 'data/generated/docs_python/100_prisoners/test_gpt_4o_2024_08_06_100_prisoners.py', 'symbol': 'unused-import', 'message': 'Unused import sys', 'message-id': 'W0611'}]",False
24 game,"The 24 Game tests one's mental arithmetic.



Task
Write a program that randomly chooses and displays four digits, each from 1 ──► 9 (inclusive) with repetitions allowed.

The program should prompt for the player to enter an arithmetic expression using just those, and all of those four digits, used exactly once each. The program should check then evaluate the expression.

The goal is for the player to enter an expression that (numerically) evaluates to 24.

 Only the following operators/functions are allowed: multiplication, division, addition, subtraction
 Division should use floating point or rational arithmetic, etc, to preserve remainders.
 Brackets are allowed, if using an infix expression evaluator.
 Forming multiple digit numbers from the supplied digits is disallowed. (So an answer of 12+12 when given 1, 2, 2, and 1 is wrong).
 The order of the digits when given does not have to be preserved.


Notes
 The type of expression evaluator used is not mandated. An RPN evaluator is equally acceptable for example.
 The task is not for the program to generate the expression, or test whether an expression is even possible.


Related tasks
 24 game/Solve


Reference
 The 24 Game on h2g2.

",Python,"'''
 The 24 Game
 
 Given any four digits in the range 1 to 9, which may have repetitions,
 Using just the +, -, *, and / operators; and the possible use of
 brackets, (), show how to make an answer of 24.
 
 An answer of ""q"" will quit the game.
 An answer of ""!"" will generate a new set of four digits.
 Otherwise you are repeatedly asked for an expression until it evaluates to 24
 
 Note: you cannot form multiple digit numbers from the supplied digits,
 so an answer of 12+12 when given 1, 2, 2, and 1 would not be allowed.
 
'''
 
from __future__ import division, print_function
import random, ast, re
import sys
 
if sys.version_info[0] < 3: input = raw_input
 
def choose4():
    'four random digits >0 as characters'
    return [str(random.randint(1,9)) for i in range(4)]
 
def welcome(digits):
    print (__doc__)
    print (""Your four digits: "" + ' '.join(digits))
 
def check(answer, digits):
    allowed = set('() +-*/\t'+''.join(digits))
    ok = all(ch in allowed for ch in answer) and \
         all(digits.count(dig) == answer.count(dig) for dig in set(digits)) \
         and not re.search('\d\d', answer)
    if ok:
        try:
            ast.parse(answer)
        except:
            ok = False
    return ok
 
def main():
    digits = choose4()
    welcome(digits)
    trial = 0
    answer = ''
    chk = ans = False
    while not (chk and ans == 24):
        trial +=1
        answer = input(""Expression %i: "" % trial)
        chk = check(answer, digits)
        if answer.lower() == 'q':
            break
        if answer == '!':
            digits = choose4()
            print (""New digits:"", ' '.join(digits))
            continue
        if not chk:
            print (""The input '%s' was wonky!"" % answer)
        else:
            ans = eval(answer)
            print ("" = "", ans)
            if ans == 24:
                print (""Thats right!"")
    print (""Thank you and goodbye"")
 
if __name__ == '__main__': main() ",1958,68,"import unittest
from unittest.mock import patch
import random
import re
import ast

# Assuming the functions from the provided code are imported here
# from 24_game import choose4, check

class Test24Game(unittest.TestCase):

    def test_choose4(self):
        # Test that choose4 returns a list of four digits
        digits = choose4()
        self.assertEqual(len(digits), 4)
        for digit in digits:
            self.assertIn(digit, '123456789')

    def test_check_valid_expression(self):
        # Test valid expressions
        digits = ['1', '2', '3', '4']
        self.assertTrue(check('1+2+3+18', digits))
        self.assertTrue(check('(1+3)*(2+4)', digits))
        self.assertTrue(check('4*3*2/1', digits))

    def test_check_invalid_expression(self):
        # Test invalid expressions
        digits = ['1', '2', '3', '4']
        self.assertFalse(check('12+12', digits))  # Multiple digit numbers
        self.assertFalse(check('1+2+3+5', digits))  # Using a digit not in the list
        self.assertFalse(check('1+2+3+', digits))  # Incomplete expression
        self.assertFalse(check('1+2+3+4+5', digits))  # Extra digit
        self.assertFalse(check('1++2+3+4', digits))  # Invalid syntax

    def test_check_expression_with_repeated_digits(self):
        # Test expressions with repeated digits
        digits = ['2', '2', '3', '3']
        self.assertTrue(check('2*3+2*3', digits))
        self.assertFalse(check('2*3+2*2', digits))  # Using '2' three times

    def test_check_expression_with_brackets(self):
        # Test expressions with brackets
        digits = ['1', '2', '3', '4']
        self.assertTrue(check('(1+3)*(2+4)', digits))
        self.assertFalse(check('(1+3)*(2+4', digits))  # Unmatched brackets

    @patch('builtins.input', side_effect=['1+2+3+18', 'q'])
    def test_main_quit(self, mock_input):
        with patch('sys.stdout') as mock_stdout:
            main()
            self.assertIn(""Thank you and goodbye"", mock_stdout.getvalue())

    @patch('builtins.input', side_effect=['!', 'q'])
    def test_main_new_digits(self, mock_input):
        with patch('sys.stdout') as mock_stdout:
            main()
            self.assertIn(""New digits:"", mock_stdout.getvalue())

    @patch('builtins.input', side_effect=['1+2+3+4', 'q'])
    def test_main_invalid_input(self, mock_input):
        with patch('sys.stdout') as mock_stdout:
            main()
            self.assertIn(""The input '1+2+3+4' was wonky!"", mock_stdout.getvalue())

    @patch('builtins.input', side_effect=['(1+3)*(2+4)', 'q'])
    def test_main_correct_answer(self, mock_input):
        with patch('sys.stdout') as mock_stdout:
            main()
            self.assertIn(""Thats right!"", mock_stdout.getvalue())

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/24_game/test_gpt_4o_2024_08_06_24_game.py,CompileStatus.OK,0.0,38.95,37.4,0.34,1.06,,0.7875018119812012,35.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_24_game', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/24_game/test_gpt_4o_2024_08_06_24_game.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_24_game', 'obj': 'Test24Game', 'line': 10, 'column': 0, 'endLine': 10, 'endColumn': 16, 'path': 'data/generated/docs_python/24_game/test_gpt_4o_2024_08_06_24_game.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_24_game', 'obj': 'Test24Game.test_choose4', 'line': 12, 'column': 4, 'endLine': 12, 'endColumn': 20, 'path': 'data/generated/docs_python/24_game/test_gpt_4o_2024_08_06_24_game.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_24_game', 'obj': 'Test24Game.test_choose4', 'line': 14, 'column': 17, 'endLine': 14, 'endColumn': 24, 'path': 'data/generated/docs_python/24_game/test_gpt_4o_2024_08_06_24_game.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'choose4'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_24_game', 'obj': 'Test24Game.test_check_valid_expression', 'line': 19, 'column': 4, 'endLine': 19, 'endColumn': 35, 'path': 'data/generated/docs_python/24_game/test_gpt_4o_2024_08_06_24_game.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_24_game', 'obj': 'Test24Game.test_check_valid_expression', 'line': 22, 'column': 24, 'endLine': 22, 'endColumn': 29, 'path': 'data/generated/docs_python/24_game/test_gpt_4o_2024_08_06_24_game.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'check'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_24_game', 'obj': 'Test24Game.test_check_valid_expression', 'line': 23, 'column': 24, 'endLine': 23, 'endColumn': 29, 'path': 'data/generated/docs_python/24_game/test_gpt_4o_2024_08_06_24_game.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'check'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_24_game', 'obj': 'Test24Game.test_check_valid_expression', 'line': 24, 'column': 24, 'endLine': 24, 'endColumn': 29, 'path': 'data/generated/docs_python/24_game/test_gpt_4o_2024_08_06_24_game.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'check'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_24_game', 'obj': 'Test24Game.test_check_invalid_expression', 'line': 26, 'column': 4, 'endLine': 26, 'endColumn': 37, 'path': 'data/generated/docs_python/24_game/test_gpt_4o_2024_08_06_24_game.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_24_game', 'obj': 'Test24Game.test_check_invalid_expression', 'line': 29, 'column': 25, 'endLine': 29, 'endColumn': 30, 'path': 'data/generated/docs_python/24_game/test_gpt_4o_2024_08_06_24_game.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'check'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_24_game', 'obj': 'Test24Game.test_check_invalid_expression', 'line': 30, 'column': 25, 'endLine': 30, 'endColumn': 30, 'path': 'data/generated/docs_python/24_game/test_gpt_4o_2024_08_06_24_game.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'check'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_24_game', 'obj': 'Test24Game.test_check_invalid_expression', 'line': 31, 'column': 25, 'endLine': 31, 'endColumn': 30, 'path': 'data/generated/docs_python/24_game/test_gpt_4o_2024_08_06_24_game.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'check'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_24_game', 'obj': 'Test24Game.test_check_invalid_expression', 'line': 32, 'column': 25, 'endLine': 32, 'endColumn': 30, 'path': 'data/generated/docs_python/24_game/test_gpt_4o_2024_08_06_24_game.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'check'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_24_game', 'obj': 'Test24Game.test_check_invalid_expression', 'line': 33, 'column': 25, 'endLine': 33, 'endColumn': 30, 'path': 'data/generated/docs_python/24_game/test_gpt_4o_2024_08_06_24_game.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'check'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_24_game', 'obj': 'Test24Game.test_check_expression_with_repeated_digits', 'line': 35, 'column': 4, 'endLine': 35, 'endColumn': 50, 'path': 'data/generated/docs_python/24_game/test_gpt_4o_2024_08_06_24_game.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_24_game', 'obj': 'Test24Game.test_check_expression_with_repeated_digits', 'line': 38, 'column': 24, 'endLine': 38, 'endColumn': 29, 'path': 'data/generated/docs_python/24_game/test_gpt_4o_2024_08_06_24_game.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'check'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_24_game', 'obj': 'Test24Game.test_check_expression_with_repeated_digits', 'line': 39, 'column': 25, 'endLine': 39, 'endColumn': 30, 'path': 'data/generated/docs_python/24_game/test_gpt_4o_2024_08_06_24_game.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'check'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_24_game', 'obj': 'Test24Game.test_check_expression_with_brackets', 'line': 41, 'column': 4, 'endLine': 41, 'endColumn': 43, 'path': 'data/generated/docs_python/24_game/test_gpt_4o_2024_08_06_24_game.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_24_game', 'obj': 'Test24Game.test_check_expression_with_brackets', 'line': 44, 'column': 24, 'endLine': 44, 'endColumn': 29, 'path': 'data/generated/docs_python/24_game/test_gpt_4o_2024_08_06_24_game.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'check'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_24_game', 'obj': 'Test24Game.test_check_expression_with_brackets', 'line': 45, 'column': 25, 'endLine': 45, 'endColumn': 30, 'path': 'data/generated/docs_python/24_game/test_gpt_4o_2024_08_06_24_game.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'check'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_24_game', 'obj': 'Test24Game.test_main_quit', 'line': 48, 'column': 4, 'endLine': 48, 'endColumn': 22, 'path': 'data/generated/docs_python/24_game/test_gpt_4o_2024_08_06_24_game.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_24_game', 'obj': 'Test24Game.test_main_quit', 'line': 50, 'column': 12, 'endLine': 50, 'endColumn': 16, 'path': 'data/generated/docs_python/24_game/test_gpt_4o_2024_08_06_24_game.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'main'"", 'message-id': 'E0602'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_24_game', 'obj': 'Test24Game.test_main_quit', 'line': 48, 'column': 29, 'endLine': 48, 'endColumn': 39, 'path': 'data/generated/docs_python/24_game/test_gpt_4o_2024_08_06_24_game.py', 'symbol': 'unused-argument', 'message': ""Unused argument 'mock_input'"", 'message-id': 'W0613'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_24_game', 'obj': 'Test24Game.test_main_new_digits', 'line': 54, 'column': 4, 'endLine': 54, 'endColumn': 28, 'path': 'data/generated/docs_python/24_game/test_gpt_4o_2024_08_06_24_game.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_24_game', 'obj': 'Test24Game.test_main_new_digits', 'line': 56, 'column': 12, 'endLine': 56, 'endColumn': 16, 'path': 'data/generated/docs_python/24_game/test_gpt_4o_2024_08_06_24_game.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'main'"", 'message-id': 'E0602'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_24_game', 'obj': 'Test24Game.test_main_new_digits', 'line': 54, 'column': 35, 'endLine': 54, 'endColumn': 45, 'path': 'data/generated/docs_python/24_game/test_gpt_4o_2024_08_06_24_game.py', 'symbol': 'unused-argument', 'message': ""Unused argument 'mock_input'"", 'message-id': 'W0613'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_24_game', 'obj': 'Test24Game.test_main_invalid_input', 'line': 60, 'column': 4, 'endLine': 60, 'endColumn': 31, 'path': 'data/generated/docs_python/24_game/test_gpt_4o_2024_08_06_24_game.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_24_game', 'obj': 'Test24Game.test_main_invalid_input', 'line': 62, 'column': 12, 'endLine': 62, 'endColumn': 16, 'path': 'data/generated/docs_python/24_game/test_gpt_4o_2024_08_06_24_game.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'main'"", 'message-id': 'E0602'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_24_game', 'obj': 'Test24Game.test_main_invalid_input', 'line': 60, 'column': 38, 'endLine': 60, 'endColumn': 48, 'path': 'data/generated/docs_python/24_game/test_gpt_4o_2024_08_06_24_game.py', 'symbol': 'unused-argument', 'message': ""Unused argument 'mock_input'"", 'message-id': 'W0613'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_24_game', 'obj': 'Test24Game.test_main_correct_answer', 'line': 66, 'column': 4, 'endLine': 66, 'endColumn': 32, 'path': 'data/generated/docs_python/24_game/test_gpt_4o_2024_08_06_24_game.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_24_game', 'obj': 'Test24Game.test_main_correct_answer', 'line': 68, 'column': 12, 'endLine': 68, 'endColumn': 16, 'path': 'data/generated/docs_python/24_game/test_gpt_4o_2024_08_06_24_game.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'main'"", 'message-id': 'E0602'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_24_game', 'obj': 'Test24Game.test_main_correct_answer', 'line': 66, 'column': 39, 'endLine': 66, 'endColumn': 49, 'path': 'data/generated/docs_python/24_game/test_gpt_4o_2024_08_06_24_game.py', 'symbol': 'unused-argument', 'message': ""Unused argument 'mock_input'"", 'message-id': 'W0613'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_24_game', 'obj': '', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 13, 'path': 'data/generated/docs_python/24_game/test_gpt_4o_2024_08_06_24_game.py', 'symbol': 'unused-import', 'message': 'Unused import random', 'message-id': 'W0611'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_24_game', 'obj': '', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 9, 'path': 'data/generated/docs_python/24_game/test_gpt_4o_2024_08_06_24_game.py', 'symbol': 'unused-import', 'message': 'Unused import re', 'message-id': 'W0611'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_24_game', 'obj': '', 'line': 5, 'column': 0, 'endLine': 5, 'endColumn': 10, 'path': 'data/generated/docs_python/24_game/test_gpt_4o_2024_08_06_24_game.py', 'symbol': 'unused-import', 'message': 'Unused import ast', 'message-id': 'W0611'}]",False
24 game/Solve,"task

Write a program that takes four digits, either from user input or by random generation, and computes arithmetic expressions following the rules of the 24 game.

Show examples of solutions generated by the program.



Related task

   Arithmetic Evaluator

",Python,"'''
 The 24 Game Player
 
 Given any four digits in the range 1 to 9, which may have repetitions,
 Using just the +, -, *, and / operators; and the possible use of
 brackets, (), show how to make an answer of 24.
 
 An answer of ""q""  will quit the game.
 An answer of ""!""  will generate a new set of four digits.
 An answer of ""!!"" will ask you for a new set of four digits.
 An answer of ""?""  will compute an expression for the current digits.
 
 Otherwise you are repeatedly asked for an expression until it evaluates to 24
 
 Note: you cannot form multiple digit numbers from the supplied digits,
 so an answer of 12+12 when given 1, 2, 2, and 1 would not be allowed.
 
'''
 
from   __future__ import division, print_function
from   itertools  import permutations, combinations, product, \
                         chain
from   pprint     import pprint as pp
from   fractions  import Fraction as F
import random, ast, re
import sys
 
if sys.version_info[0] < 3:
    input = raw_input
    from itertools import izip_longest as zip_longest
else:
    from itertools import zip_longest
 
 
def choose4():
    'four random digits >0 as characters'
    return [str(random.randint(1,9)) for i in range(4)]
 
def ask4():
    'get four random digits >0 from the player'
    digits = ''
    while len(digits) != 4 or not all(d in '123456789' for d in digits):
        digits = input('Enter the digits to solve for: ')
        digits = ''.join(digits.strip().split())
    return list(digits)
 
def welcome(digits):
    print (__doc__)
    print (""Your four digits: "" + ' '.join(digits))
 
def check(answer, digits):
    allowed = set('() +-*/\t'+''.join(digits))
    ok = all(ch in allowed for ch in answer) and \
         all(digits.count(dig) == answer.count(dig) for dig in set(digits)) \
         and not re.search('\d\d', answer)
    if ok:
        try:
            ast.parse(answer)
        except:
            ok = False
    return ok
 
def solve(digits):
    """"""\
    >>> for digits in '3246 4788 1111 123456 1127 3838'.split():
            solve(list(digits))
 
 
    Solution found: 2 + 3 * 6 + 4
    '2 + 3 * 6 + 4'
    Solution found: ( 4 + 7 - 8 ) * 8
    '( 4 + 7 - 8 ) * 8'
    No solution found for: 1 1 1 1
    '!'
    Solution found: 1 + 2 + 3 * ( 4 + 5 ) - 6
    '1 + 2 + 3 * ( 4 + 5 ) - 6'
    Solution found: ( 1 + 2 ) * ( 1 + 7 )
    '( 1 + 2 ) * ( 1 + 7 )'
    Solution found: 8 / ( 3 - 8 / 3 )
    '8 / ( 3 - 8 / 3 )'
    >>> """"""
    digilen = len(digits)
    # length of an exp without brackets
    exprlen = 2 * digilen - 1
    # permute all the digits
    digiperm = sorted(set(permutations(digits)))
    # All the possible operator combinations
    opcomb   = list(product('+-*/', repeat=digilen-1))
    # All the bracket insertion points:
    brackets = ( [()] + [(x,y)
                         for x in range(0, exprlen, 2)
                         for y in range(x+4, exprlen+2, 2)
                         if (x,y) != (0,exprlen+1)]
                 + [(0, 3+1, 4+2, 7+3)] ) # double brackets case
    for d in digiperm:
        for ops in opcomb:
            if '/' in ops:
                d2 = [('F(%s)' % i) for i in d] # Use Fractions for accuracy
            else:
                d2 = d
            ex = list(chain.from_iterable(zip_longest(d2, ops, fillvalue='')))
            for b in brackets:
                exp = ex[::]
                for insertpoint, bracket in zip(b, '()'*(len(b)//2)):
                    exp.insert(insertpoint, bracket)
                txt = ''.join(exp)
                try:
                    num = eval(txt)
                except ZeroDivisionError:
                    continue
                if num == 24:
                    if '/' in ops:
                        exp = [ (term if not term.startswith('F(') else term[2])
                               for term in exp ]
                    ans = ' '.join(exp).rstrip()
                    print (""Solution found:"",ans)
                    return ans
    print (""No solution found for:"", ' '.join(digits))
    return '!'
 
def main():
    digits = choose4()
    welcome(digits)
    trial = 0
    answer = ''
    chk = ans = False
    while not (chk and ans == 24):
        trial +=1
        answer = input(""Expression %i: "" % trial)
        chk = check(answer, digits)
        if answer == '?':
            solve(digits)
            answer = '!'
        if answer.lower() == 'q':
            break
        if answer == '!':
            digits = choose4()
            trial = 0
            print (""\nNew digits:"", ' '.join(digits))
            continue
        if answer == '!!':
            digits = ask4()
            trial = 0
            print (""\nNew digits:"", ' '.join(digits))
            continue
        if not chk:
            print (""The input '%s' was wonky!"" % answer)
        else:
            if '/' in answer:
                # Use Fractions for accuracy in divisions
                answer = ''.join( (('F(%s)' % char) if char in '123456789' else char)
                                  for char in answer )
            ans = eval(answer)
            print ("" = "", ans)
            if ans == 24:
                print (""Thats right!"")
    print (""Thank you and goodbye"")
 
main()",5231,159,"import unittest
from unittest.mock import patch
from io import StringIO
import random

class Test24GameSolve(unittest.TestCase):

    def test_choose4(self):
        # Test that choose4 returns a list of four digits between 1 and 9
        digits = choose4()
        self.assertEqual(len(digits), 4)
        for digit in digits:
            self.assertIn(digit, '123456789')

    def test_ask4_valid_input(self):
        # Test ask4 with valid input
        with patch('builtins.input', return_value='1234'):
            digits = ask4()
            self.assertEqual(digits, ['1', '2', '3', '4'])

    def test_ask4_invalid_input(self):
        # Test ask4 with invalid input followed by valid input
        with patch('builtins.input', side_effect=['abcd', '123']):
            digits = ask4()
            self.assertEqual(digits, ['1', '2', '3'])

    def test_check_valid_expression(self):
        # Test check with a valid expression
        self.assertTrue(check('2 + 3 * 6 + 4', ['2', '3', '6', '4']))

    def test_check_invalid_expression(self):
        # Test check with an invalid expression
        self.assertFalse(check('12 + 12', ['1', '2', '2', '1']))

    def test_solve_with_solution(self):
        # Test solve with a set of digits that has a solution
        with patch('sys.stdout', new=StringIO()) as fake_out:
            result = solve(['3', '2', '4', '6'])
            self.assertIn(""Solution found:"", fake_out.getvalue())
            self.assertEqual(result, '2 + 3 * 6 + 4')

    def test_solve_no_solution(self):
        # Test solve with a set of digits that has no solution
        with patch('sys.stdout', new=StringIO()) as fake_out:
            result = solve(['1', '1', '1', '1'])
            self.assertIn(""No solution found for:"", fake_out.getvalue())
            self.assertEqual(result, '!')

    def test_main_quit(self):
        # Test main function with quit command
        with patch('builtins.input', side_effect=['q']), patch('sys.stdout', new=StringIO()) as fake_out:
            main()
            self.assertIn(""Thank you and goodbye"", fake_out.getvalue())

    def test_main_generate_new_digits(self):
        # Test main function with generate new digits command
        with patch('builtins.input', side_effect=['!', 'q']), patch('sys.stdout', new=StringIO()) as fake_out:
            main()
            self.assertIn(""New digits:"", fake_out.getvalue())

    def test_main_user_input_digits(self):
        # Test main function with user input digits command
        with patch('builtins.input', side_effect=['!!', '1234', 'q']), patch('sys.stdout', new=StringIO()) as fake_out:
            main()
            self.assertIn(""New digits: 1 2 3 4"", fake_out.getvalue())

    def test_main_solve_command(self):
        # Test main function with solve command
        with patch('builtins.input', side_effect=['?', 'q']), patch('sys.stdout', new=StringIO()) as fake_out:
            main()
            self.assertIn(""Solution found:"", fake_out.getvalue())

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/24_game_solve/test_gpt_4o_2024_08_06_24_game_solve.py,CompileStatus.OK,0.0,25.0,24.88,0.28,0.34,,0.7557709217071533,29.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_24_game_solve', 'obj': '', 'line': 51, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/24_game_solve/test_gpt_4o_2024_08_06_24_game_solve.py', 'symbol': 'line-too-long', 'message': 'Line too long (105/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_24_game_solve', 'obj': '', 'line': 57, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/24_game_solve/test_gpt_4o_2024_08_06_24_game_solve.py', 'symbol': 'line-too-long', 'message': 'Line too long (110/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_24_game_solve', 'obj': '', 'line': 63, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/24_game_solve/test_gpt_4o_2024_08_06_24_game_solve.py', 'symbol': 'line-too-long', 'message': 'Line too long (119/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_24_game_solve', 'obj': '', 'line': 69, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/24_game_solve/test_gpt_4o_2024_08_06_24_game_solve.py', 'symbol': 'line-too-long', 'message': 'Line too long (110/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_24_game_solve', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/24_game_solve/test_gpt_4o_2024_08_06_24_game_solve.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_24_game_solve', 'obj': 'Test24GameSolve', 'line': 6, 'column': 0, 'endLine': 6, 'endColumn': 21, 'path': 'data/generated/docs_python/24_game_solve/test_gpt_4o_2024_08_06_24_game_solve.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_24_game_solve', 'obj': 'Test24GameSolve.test_choose4', 'line': 8, 'column': 4, 'endLine': 8, 'endColumn': 20, 'path': 'data/generated/docs_python/24_game_solve/test_gpt_4o_2024_08_06_24_game_solve.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_24_game_solve', 'obj': 'Test24GameSolve.test_choose4', 'line': 10, 'column': 17, 'endLine': 10, 'endColumn': 24, 'path': 'data/generated/docs_python/24_game_solve/test_gpt_4o_2024_08_06_24_game_solve.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'choose4'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_24_game_solve', 'obj': 'Test24GameSolve.test_ask4_valid_input', 'line': 15, 'column': 4, 'endLine': 15, 'endColumn': 29, 'path': 'data/generated/docs_python/24_game_solve/test_gpt_4o_2024_08_06_24_game_solve.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_24_game_solve', 'obj': 'Test24GameSolve.test_ask4_valid_input', 'line': 18, 'column': 21, 'endLine': 18, 'endColumn': 25, 'path': 'data/generated/docs_python/24_game_solve/test_gpt_4o_2024_08_06_24_game_solve.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'ask4'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_24_game_solve', 'obj': 'Test24GameSolve.test_ask4_invalid_input', 'line': 21, 'column': 4, 'endLine': 21, 'endColumn': 31, 'path': 'data/generated/docs_python/24_game_solve/test_gpt_4o_2024_08_06_24_game_solve.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_24_game_solve', 'obj': 'Test24GameSolve.test_ask4_invalid_input', 'line': 24, 'column': 21, 'endLine': 24, 'endColumn': 25, 'path': 'data/generated/docs_python/24_game_solve/test_gpt_4o_2024_08_06_24_game_solve.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'ask4'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_24_game_solve', 'obj': 'Test24GameSolve.test_check_valid_expression', 'line': 27, 'column': 4, 'endLine': 27, 'endColumn': 35, 'path': 'data/generated/docs_python/24_game_solve/test_gpt_4o_2024_08_06_24_game_solve.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_24_game_solve', 'obj': 'Test24GameSolve.test_check_valid_expression', 'line': 29, 'column': 24, 'endLine': 29, 'endColumn': 29, 'path': 'data/generated/docs_python/24_game_solve/test_gpt_4o_2024_08_06_24_game_solve.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'check'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_24_game_solve', 'obj': 'Test24GameSolve.test_check_invalid_expression', 'line': 31, 'column': 4, 'endLine': 31, 'endColumn': 37, 'path': 'data/generated/docs_python/24_game_solve/test_gpt_4o_2024_08_06_24_game_solve.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_24_game_solve', 'obj': 'Test24GameSolve.test_check_invalid_expression', 'line': 33, 'column': 25, 'endLine': 33, 'endColumn': 30, 'path': 'data/generated/docs_python/24_game_solve/test_gpt_4o_2024_08_06_24_game_solve.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'check'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_24_game_solve', 'obj': 'Test24GameSolve.test_solve_with_solution', 'line': 35, 'column': 4, 'endLine': 35, 'endColumn': 32, 'path': 'data/generated/docs_python/24_game_solve/test_gpt_4o_2024_08_06_24_game_solve.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_24_game_solve', 'obj': 'Test24GameSolve.test_solve_with_solution', 'line': 38, 'column': 21, 'endLine': 38, 'endColumn': 26, 'path': 'data/generated/docs_python/24_game_solve/test_gpt_4o_2024_08_06_24_game_solve.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'solve'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_24_game_solve', 'obj': 'Test24GameSolve.test_solve_no_solution', 'line': 42, 'column': 4, 'endLine': 42, 'endColumn': 30, 'path': 'data/generated/docs_python/24_game_solve/test_gpt_4o_2024_08_06_24_game_solve.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_24_game_solve', 'obj': 'Test24GameSolve.test_solve_no_solution', 'line': 45, 'column': 21, 'endLine': 45, 'endColumn': 26, 'path': 'data/generated/docs_python/24_game_solve/test_gpt_4o_2024_08_06_24_game_solve.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'solve'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_24_game_solve', 'obj': 'Test24GameSolve.test_main_quit', 'line': 49, 'column': 4, 'endLine': 49, 'endColumn': 22, 'path': 'data/generated/docs_python/24_game_solve/test_gpt_4o_2024_08_06_24_game_solve.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_24_game_solve', 'obj': 'Test24GameSolve.test_main_quit', 'line': 52, 'column': 12, 'endLine': 52, 'endColumn': 16, 'path': 'data/generated/docs_python/24_game_solve/test_gpt_4o_2024_08_06_24_game_solve.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'main'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_24_game_solve', 'obj': 'Test24GameSolve.test_main_generate_new_digits', 'line': 55, 'column': 4, 'endLine': 55, 'endColumn': 37, 'path': 'data/generated/docs_python/24_game_solve/test_gpt_4o_2024_08_06_24_game_solve.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_24_game_solve', 'obj': 'Test24GameSolve.test_main_generate_new_digits', 'line': 58, 'column': 12, 'endLine': 58, 'endColumn': 16, 'path': 'data/generated/docs_python/24_game_solve/test_gpt_4o_2024_08_06_24_game_solve.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'main'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_24_game_solve', 'obj': 'Test24GameSolve.test_main_user_input_digits', 'line': 61, 'column': 4, 'endLine': 61, 'endColumn': 35, 'path': 'data/generated/docs_python/24_game_solve/test_gpt_4o_2024_08_06_24_game_solve.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_24_game_solve', 'obj': 'Test24GameSolve.test_main_user_input_digits', 'line': 64, 'column': 12, 'endLine': 64, 'endColumn': 16, 'path': 'data/generated/docs_python/24_game_solve/test_gpt_4o_2024_08_06_24_game_solve.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'main'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_24_game_solve', 'obj': 'Test24GameSolve.test_main_solve_command', 'line': 67, 'column': 4, 'endLine': 67, 'endColumn': 31, 'path': 'data/generated/docs_python/24_game_solve/test_gpt_4o_2024_08_06_24_game_solve.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_24_game_solve', 'obj': 'Test24GameSolve.test_main_solve_command', 'line': 70, 'column': 12, 'endLine': 70, 'endColumn': 16, 'path': 'data/generated/docs_python/24_game_solve/test_gpt_4o_2024_08_06_24_game_solve.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'main'"", 'message-id': 'E0602'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_24_game_solve', 'obj': '', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 13, 'path': 'data/generated/docs_python/24_game_solve/test_gpt_4o_2024_08_06_24_game_solve.py', 'symbol': 'unused-import', 'message': 'Unused import random', 'message-id': 'W0611'}]",False
A+B,"A+B   ─── a classic problem in programming contests,   it's given so contestants can gain familiarity with the online judging system being used.



Task

Given two integers,   A and B.

Their sum needs to be calculated.



Input data

Two integers are written in the input stream, separated by space(s):





(
−
1000
≤
A
,
B
≤
+
1000
)


{\displaystyle (-1000\leq A,B\leq +1000)}




Output data

The required output is one integer:   the sum of A and B.



Example



 input  

 output  


 2 2

 4


 3 2

 5


",Python,"try: raw_input
except: raw_input = input
 
print(sum(map(int, raw_input().split())))",84,4,"import subprocess
import unittest

class TestSumAB(unittest.TestCase):

    def run_script(self, input_data):
        """"""Helper function to run the script with given input and return the output.""""""
        process = subprocess.Popen(
            ['python3', 'a_b.py'],
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        stdout, stderr = process.communicate(input=input_data)
        return stdout.strip(), stderr.strip()

    def test_positive_numbers(self):
        input_data = ""2 2\n""
        expected_output = ""4""
        output, _ = self.run_script(input_data)
        self.assertEqual(output, expected_output)

    def test_mixed_numbers(self):
        input_data = ""3 2\n""
        expected_output = ""5""
        output, _ = self.run_script(input_data)
        self.assertEqual(output, expected_output)

    def test_negative_numbers(self):
        input_data = ""-5 -3\n""
        expected_output = ""-8""
        output, _ = self.run_script(input_data)
        self.assertEqual(output, expected_output)

    def test_zero(self):
        input_data = ""0 0\n""
        expected_output = ""0""
        output, _ = self.run_script(input_data)
        self.assertEqual(output, expected_output)

    def test_large_numbers(self):
        input_data = ""1000 1000\n""
        expected_output = ""2000""
        output, _ = self.run_script(input_data)
        self.assertEqual(output, expected_output)

    def test_large_negative_numbers(self):
        input_data = ""-1000 -1000\n""
        expected_output = ""-2000""
        output, _ = self.run_script(input_data)
        self.assertEqual(output, expected_output)

    def test_mixed_sign_numbers(self):
        input_data = ""-1000 1000\n""
        expected_output = ""0""
        output, _ = self.run_script(input_data)
        self.assertEqual(output, expected_output)

    def test_single_space_separation(self):
        input_data = ""7 3\n""
        expected_output = ""10""
        output, _ = self.run_script(input_data)
        self.assertEqual(output, expected_output)

    def test_multiple_space_separation(self):
        input_data = ""7    3\n""
        expected_output = ""10""
        output, _ = self.run_script(input_data)
        self.assertEqual(output, expected_output)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/a_b/test_gpt_4o_2024_08_06_a_b.py,CompileStatus.OK,0.0,98.25,96.61,0.16,,100.0,3.705549955368042,12.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_a_b', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/a_b/test_gpt_4o_2024_08_06_a_b.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_a_b', 'obj': 'TestSumAB', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 15, 'path': 'data/generated/docs_python/a_b/test_gpt_4o_2024_08_06_a_b.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'refactor', 'module': 'test_gpt_4o_2024_08_06_a_b', 'obj': 'TestSumAB.run_script', 'line': 8, 'column': 18, 'endLine': 14, 'endColumn': 9, 'path': 'data/generated/docs_python/a_b/test_gpt_4o_2024_08_06_a_b.py', 'symbol': 'consider-using-with', 'message': ""Consider using 'with' for resource-allocating operations"", 'message-id': 'R1732'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_a_b', 'obj': 'TestSumAB.test_positive_numbers', 'line': 18, 'column': 4, 'endLine': 18, 'endColumn': 29, 'path': 'data/generated/docs_python/a_b/test_gpt_4o_2024_08_06_a_b.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_a_b', 'obj': 'TestSumAB.test_mixed_numbers', 'line': 24, 'column': 4, 'endLine': 24, 'endColumn': 26, 'path': 'data/generated/docs_python/a_b/test_gpt_4o_2024_08_06_a_b.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_a_b', 'obj': 'TestSumAB.test_negative_numbers', 'line': 30, 'column': 4, 'endLine': 30, 'endColumn': 29, 'path': 'data/generated/docs_python/a_b/test_gpt_4o_2024_08_06_a_b.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_a_b', 'obj': 'TestSumAB.test_zero', 'line': 36, 'column': 4, 'endLine': 36, 'endColumn': 17, 'path': 'data/generated/docs_python/a_b/test_gpt_4o_2024_08_06_a_b.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_a_b', 'obj': 'TestSumAB.test_large_numbers', 'line': 42, 'column': 4, 'endLine': 42, 'endColumn': 26, 'path': 'data/generated/docs_python/a_b/test_gpt_4o_2024_08_06_a_b.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_a_b', 'obj': 'TestSumAB.test_large_negative_numbers', 'line': 48, 'column': 4, 'endLine': 48, 'endColumn': 35, 'path': 'data/generated/docs_python/a_b/test_gpt_4o_2024_08_06_a_b.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_a_b', 'obj': 'TestSumAB.test_mixed_sign_numbers', 'line': 54, 'column': 4, 'endLine': 54, 'endColumn': 31, 'path': 'data/generated/docs_python/a_b/test_gpt_4o_2024_08_06_a_b.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_a_b', 'obj': 'TestSumAB.test_single_space_separation', 'line': 60, 'column': 4, 'endLine': 60, 'endColumn': 36, 'path': 'data/generated/docs_python/a_b/test_gpt_4o_2024_08_06_a_b.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_a_b', 'obj': 'TestSumAB.test_multiple_space_separation', 'line': 66, 'column': 4, 'endLine': 66, 'endColumn': 38, 'path': 'data/generated/docs_python/a_b/test_gpt_4o_2024_08_06_a_b.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
ABC problem,"ABC problem

You are encouraged to solve this task according to the task description, using any language you may know.
You are given a collection of ABC blocks   (maybe like the ones you had when you were a kid).

There are twenty blocks with two letters on each block.

A complete alphabet is guaranteed amongst all sides of the blocks.

The sample collection of blocks:

 (B O)
 (X K)
 (D Q)
 (C P)
 (N A)
 (G T)
 (R E)
 (T G)
 (Q D)
 (F S)
 (J W)
 (H U)
 (V I)
 (A N)
 (O B)
 (E R)
 (F S)
 (L Y)
 (P C)
 (Z M)



Task

Write a function that takes a string (word) and determines whether the word can be spelled with the given collection of blocks.



The rules are simple:

   Once a letter on a block is used that block cannot be used again
   The function should be case-insensitive
   Show the output on this page for the following 7 words in the following example


Example

    >>> can_make_word(""A"")
    True
    >>> can_make_word(""BARK"")
    True
    >>> can_make_word(""BOOK"")
    False
    >>> can_make_word(""TREAT"")
    True
    >>> can_make_word(""COMMON"")
    False
    >>> can_make_word(""SQUAD"")
    True
    >>> can_make_word(""CONFUSE"")
    True

Other tasks related to string operations:

Metrics
 Array length
 String length
 Copy a string
 Empty string  (assignment)
Counting
 Word frequency
 Letter frequency
 Jewels and stones
 I before E except after C
 Bioinformatics/base count
 Count occurrences of a substring
 Count how many vowels and consonants occur in a string
Remove/replace
 XXXX redacted
 Conjugate a Latin verb
 Remove vowels from a string
 String interpolation (included)
 Strip block comments
 Strip comments from a string
 Strip a set of characters from a string
 Strip whitespace from a string -- top and tail
 Strip control codes and extended characters from a string
Anagrams/Derangements/shuffling
 Word wheel
 ABC problem
 Sattolo cycle
 Knuth shuffle
 Ordered words
 Superpermutation minimisation
 Textonyms (using a phone text pad)
 Anagrams
 Anagrams/Deranged anagrams
 Permutations/Derangements
Find/Search/Determine
 ABC words
 Odd words
 Word ladder
 Semordnilap
 Word search
 Wordiff  (game)
 String matching
 Tea cup rim text
 Alternade words
 Changeable words
 State name puzzle
 String comparison
 Unique characters
 Unique characters in each string
 Extract file extension
 Levenshtein distance
 Palindrome detection
 Common list elements
 Longest common suffix
 Longest common prefix
 Compare a list of strings
 Longest common substring
 Find common directory path
 Words from neighbour ones
 Change e letters to i in words
 Non-continuous subsequences
 Longest common subsequence
 Longest palindromic substrings
 Longest increasing subsequence
 Words containing ""the"" substring
 Sum of the digits of n is substring of n
 Determine if a string is numeric
 Determine if a string is collapsible
 Determine if a string is squeezable
 Determine if a string has all unique characters
 Determine if a string has all the same characters
 Longest substrings without repeating characters
 Find words which contains all the vowels
 Find words which contains most consonants
 Find words which contains more than 3 vowels
 Find words which first and last three letters are equals
 Find words which odd letters are consonants and even letters are vowels or vice_versa
Formatting
 Substring
 Rep-string
 Word wrap
 String case
 Align columns
 Literals/String
 Repeat a string
 Brace expansion
 Brace expansion using ranges
 Reverse a string
 Phrase reversals
 Comma quibbling
 Special characters
 String concatenation
 Substring/Top and tail
 Commatizing numbers
 Reverse words in a string
 Suffixation of decimal numbers
 Long literals, with continuations
 Numerical and alphabetical suffixes
 Abbreviations, easy
 Abbreviations, simple
 Abbreviations, automatic
Song lyrics/poems/Mad Libs/phrases
 Mad Libs
 Magic 8-ball
 99 Bottles of Beer
 The Name Game (a song)
 The Old lady swallowed a fly
 The Twelve Days of Christmas
Tokenize
 Text between
 Tokenize a string
 Word break problem
 Tokenize a string with escaping
 Split a character string based on change of character
Sequences
 Show ASCII table
 De Bruijn sequences
 Self-referential sequences
 Generate lower case ASCII alphabet



",Python," 
'''
Note that this code is broken, e.g., it won't work when
blocks = [(""A"", ""B""), (""A"",""C"")] and the word is ""AB"", where the answer
should be True, but the code returns False.
'''
blocks = [(""B"", ""O""),
          (""X"", ""K""),
          (""D"", ""Q""),
          (""C"", ""P""),
          (""N"", ""A""),
          (""G"", ""T""),
          (""R"", ""E""),
          (""T"", ""G""),
          (""Q"", ""D""),
          (""F"", ""S""),
          (""J"", ""W""),
          (""H"", ""U""),
          (""V"", ""I""),
          (""A"", ""N""),
          (""O"", ""B""),
          (""E"", ""R""),
          (""F"", ""S""),
          (""L"", ""Y""),
          (""P"", ""C""),
          (""Z"", ""M"")]
 
 
def can_make_word(word, block_collection=blocks):
    """"""
    Return True if `word` can be made from the blocks in `block_collection`.
 
    >>> can_make_word("""")
    False
    >>> can_make_word(""a"")
    True
    >>> can_make_word(""bark"")
    True
    >>> can_make_word(""book"")
    False
    >>> can_make_word(""treat"")
    True
    >>> can_make_word(""common"")
    False
    >>> can_make_word(""squad"")
    True
    >>> can_make_word(""coNFused"")
    True
    """"""
    if not word:
        return False
 
    blocks_remaining = block_collection[:]
    for char in word.upper():
        for block in blocks_remaining:
            if char in block:
                blocks_remaining.remove(block)
                break
        else:
            return False
    return True
 
 
if __name__ == ""__main__"":
    import doctest
    doctest.testmod()
    print("", "".join(""'%s': %s"" % (w, can_make_word(w)) for w in
                    ["""", ""a"", ""baRk"", ""booK"", ""treat"",
                     ""COMMON"", ""squad"", ""Confused""]))
 ",1641,70,"import unittest

class TestCanMakeWord(unittest.TestCase):
    def setUp(self):
        self.blocks = [
            (""B"", ""O""),
            (""X"", ""K""),
            (""D"", ""Q""),
            (""C"", ""P""),
            (""N"", ""A""),
            (""G"", ""T""),
            (""R"", ""E""),
            (""T"", ""G""),
            (""Q"", ""D""),
            (""F"", ""S""),
            (""J"", ""W""),
            (""H"", ""U""),
            (""V"", ""I""),
            (""A"", ""N""),
            (""O"", ""B""),
            (""E"", ""R""),
            (""F"", ""S""),
            (""L"", ""Y""),
            (""P"", ""C""),
            (""Z"", ""M"")
        ]

    def test_empty_string(self):
        self.assertFalse(can_make_word("""", self.blocks))

    def test_single_letter(self):
        self.assertTrue(can_make_word(""A"", self.blocks))
        self.assertTrue(can_make_word(""a"", self.blocks))

    def test_word_bark(self):
        self.assertTrue(can_make_word(""BARK"", self.blocks))
        self.assertTrue(can_make_word(""bark"", self.blocks))

    def test_word_book(self):
        self.assertFalse(can_make_word(""BOOK"", self.blocks))
        self.assertFalse(can_make_word(""book"", self.blocks))

    def test_word_treat(self):
        self.assertTrue(can_make_word(""TREAT"", self.blocks))
        self.assertTrue(can_make_word(""treat"", self.blocks))

    def test_word_common(self):
        self.assertFalse(can_make_word(""COMMON"", self.blocks))
        self.assertFalse(can_make_word(""common"", self.blocks))

    def test_word_squad(self):
        self.assertTrue(can_make_word(""SQUAD"", self.blocks))
        self.assertTrue(can_make_word(""squad"", self.blocks))

    def test_word_confuse(self):
        self.assertTrue(can_make_word(""CONFUSE"", self.blocks))
        self.assertTrue(can_make_word(""confuse"", self.blocks))

    def test_case_insensitivity(self):
        self.assertTrue(can_make_word(""CoNfUsE"", self.blocks))

    def test_repeated_letters(self):
        self.assertFalse(can_make_word(""AA"", [(""A"", ""B""), (""A"", ""C"")]))
        self.assertTrue(can_make_word(""AB"", [(""A"", ""B""), (""A"", ""C"")]))

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/abc_problem/test_gpt_4o_2024_08_06_abc_problem.py,CompileStatus.OK,0.0,50.0,40.62,0.53,3.6,,0.7605161666870117,30.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_abc_problem', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/abc_problem/test_gpt_4o_2024_08_06_abc_problem.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_abc_problem', 'obj': 'TestCanMakeWord', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 21, 'path': 'data/generated/docs_python/abc_problem/test_gpt_4o_2024_08_06_abc_problem.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_abc_problem', 'obj': 'TestCanMakeWord.test_empty_string', 'line': 28, 'column': 4, 'endLine': 28, 'endColumn': 25, 'path': 'data/generated/docs_python/abc_problem/test_gpt_4o_2024_08_06_abc_problem.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_abc_problem', 'obj': 'TestCanMakeWord.test_empty_string', 'line': 29, 'column': 25, 'endLine': 29, 'endColumn': 38, 'path': 'data/generated/docs_python/abc_problem/test_gpt_4o_2024_08_06_abc_problem.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'can_make_word'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_abc_problem', 'obj': 'TestCanMakeWord.test_single_letter', 'line': 31, 'column': 4, 'endLine': 31, 'endColumn': 26, 'path': 'data/generated/docs_python/abc_problem/test_gpt_4o_2024_08_06_abc_problem.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_abc_problem', 'obj': 'TestCanMakeWord.test_single_letter', 'line': 32, 'column': 24, 'endLine': 32, 'endColumn': 37, 'path': 'data/generated/docs_python/abc_problem/test_gpt_4o_2024_08_06_abc_problem.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'can_make_word'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_abc_problem', 'obj': 'TestCanMakeWord.test_single_letter', 'line': 33, 'column': 24, 'endLine': 33, 'endColumn': 37, 'path': 'data/generated/docs_python/abc_problem/test_gpt_4o_2024_08_06_abc_problem.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'can_make_word'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_abc_problem', 'obj': 'TestCanMakeWord.test_word_bark', 'line': 35, 'column': 4, 'endLine': 35, 'endColumn': 22, 'path': 'data/generated/docs_python/abc_problem/test_gpt_4o_2024_08_06_abc_problem.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_abc_problem', 'obj': 'TestCanMakeWord.test_word_bark', 'line': 36, 'column': 24, 'endLine': 36, 'endColumn': 37, 'path': 'data/generated/docs_python/abc_problem/test_gpt_4o_2024_08_06_abc_problem.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'can_make_word'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_abc_problem', 'obj': 'TestCanMakeWord.test_word_bark', 'line': 37, 'column': 24, 'endLine': 37, 'endColumn': 37, 'path': 'data/generated/docs_python/abc_problem/test_gpt_4o_2024_08_06_abc_problem.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'can_make_word'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_abc_problem', 'obj': 'TestCanMakeWord.test_word_book', 'line': 39, 'column': 4, 'endLine': 39, 'endColumn': 22, 'path': 'data/generated/docs_python/abc_problem/test_gpt_4o_2024_08_06_abc_problem.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_abc_problem', 'obj': 'TestCanMakeWord.test_word_book', 'line': 40, 'column': 25, 'endLine': 40, 'endColumn': 38, 'path': 'data/generated/docs_python/abc_problem/test_gpt_4o_2024_08_06_abc_problem.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'can_make_word'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_abc_problem', 'obj': 'TestCanMakeWord.test_word_book', 'line': 41, 'column': 25, 'endLine': 41, 'endColumn': 38, 'path': 'data/generated/docs_python/abc_problem/test_gpt_4o_2024_08_06_abc_problem.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'can_make_word'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_abc_problem', 'obj': 'TestCanMakeWord.test_word_treat', 'line': 43, 'column': 4, 'endLine': 43, 'endColumn': 23, 'path': 'data/generated/docs_python/abc_problem/test_gpt_4o_2024_08_06_abc_problem.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_abc_problem', 'obj': 'TestCanMakeWord.test_word_treat', 'line': 44, 'column': 24, 'endLine': 44, 'endColumn': 37, 'path': 'data/generated/docs_python/abc_problem/test_gpt_4o_2024_08_06_abc_problem.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'can_make_word'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_abc_problem', 'obj': 'TestCanMakeWord.test_word_treat', 'line': 45, 'column': 24, 'endLine': 45, 'endColumn': 37, 'path': 'data/generated/docs_python/abc_problem/test_gpt_4o_2024_08_06_abc_problem.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'can_make_word'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_abc_problem', 'obj': 'TestCanMakeWord.test_word_common', 'line': 47, 'column': 4, 'endLine': 47, 'endColumn': 24, 'path': 'data/generated/docs_python/abc_problem/test_gpt_4o_2024_08_06_abc_problem.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_abc_problem', 'obj': 'TestCanMakeWord.test_word_common', 'line': 48, 'column': 25, 'endLine': 48, 'endColumn': 38, 'path': 'data/generated/docs_python/abc_problem/test_gpt_4o_2024_08_06_abc_problem.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'can_make_word'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_abc_problem', 'obj': 'TestCanMakeWord.test_word_common', 'line': 49, 'column': 25, 'endLine': 49, 'endColumn': 38, 'path': 'data/generated/docs_python/abc_problem/test_gpt_4o_2024_08_06_abc_problem.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'can_make_word'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_abc_problem', 'obj': 'TestCanMakeWord.test_word_squad', 'line': 51, 'column': 4, 'endLine': 51, 'endColumn': 23, 'path': 'data/generated/docs_python/abc_problem/test_gpt_4o_2024_08_06_abc_problem.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_abc_problem', 'obj': 'TestCanMakeWord.test_word_squad', 'line': 52, 'column': 24, 'endLine': 52, 'endColumn': 37, 'path': 'data/generated/docs_python/abc_problem/test_gpt_4o_2024_08_06_abc_problem.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'can_make_word'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_abc_problem', 'obj': 'TestCanMakeWord.test_word_squad', 'line': 53, 'column': 24, 'endLine': 53, 'endColumn': 37, 'path': 'data/generated/docs_python/abc_problem/test_gpt_4o_2024_08_06_abc_problem.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'can_make_word'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_abc_problem', 'obj': 'TestCanMakeWord.test_word_confuse', 'line': 55, 'column': 4, 'endLine': 55, 'endColumn': 25, 'path': 'data/generated/docs_python/abc_problem/test_gpt_4o_2024_08_06_abc_problem.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_abc_problem', 'obj': 'TestCanMakeWord.test_word_confuse', 'line': 56, 'column': 24, 'endLine': 56, 'endColumn': 37, 'path': 'data/generated/docs_python/abc_problem/test_gpt_4o_2024_08_06_abc_problem.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'can_make_word'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_abc_problem', 'obj': 'TestCanMakeWord.test_word_confuse', 'line': 57, 'column': 24, 'endLine': 57, 'endColumn': 37, 'path': 'data/generated/docs_python/abc_problem/test_gpt_4o_2024_08_06_abc_problem.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'can_make_word'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_abc_problem', 'obj': 'TestCanMakeWord.test_case_insensitivity', 'line': 59, 'column': 4, 'endLine': 59, 'endColumn': 31, 'path': 'data/generated/docs_python/abc_problem/test_gpt_4o_2024_08_06_abc_problem.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_abc_problem', 'obj': 'TestCanMakeWord.test_case_insensitivity', 'line': 60, 'column': 24, 'endLine': 60, 'endColumn': 37, 'path': 'data/generated/docs_python/abc_problem/test_gpt_4o_2024_08_06_abc_problem.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'can_make_word'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_abc_problem', 'obj': 'TestCanMakeWord.test_repeated_letters', 'line': 62, 'column': 4, 'endLine': 62, 'endColumn': 29, 'path': 'data/generated/docs_python/abc_problem/test_gpt_4o_2024_08_06_abc_problem.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_abc_problem', 'obj': 'TestCanMakeWord.test_repeated_letters', 'line': 63, 'column': 25, 'endLine': 63, 'endColumn': 38, 'path': 'data/generated/docs_python/abc_problem/test_gpt_4o_2024_08_06_abc_problem.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'can_make_word'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_abc_problem', 'obj': 'TestCanMakeWord.test_repeated_letters', 'line': 64, 'column': 24, 'endLine': 64, 'endColumn': 37, 'path': 'data/generated/docs_python/abc_problem/test_gpt_4o_2024_08_06_abc_problem.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'can_make_word'"", 'message-id': 'E0602'}]",False
AKS test for primes,"The AKS algorithm for testing whether a number is prime is a polynomial-time algorithm based on an elementary theorem about Pascal triangles.

The theorem on which the test is based can be stated as follows:

   a number  



p


{\displaystyle p}

   is prime   if and only if   all the coefficients of the polynomial expansion of




(
x
−
1

)

p


−
(

x

p


−
1
)


{\displaystyle (x-1)^{p}-(x^{p}-1)}


are divisible by  



p


{\displaystyle p}

.



Example

Using  



p
=
3


{\displaystyle p=3}

:

         (x-1)^3 - (x^3 - 1)
            = (x^3 - 3x^2 + 3x - 1) - (x^3 - 1)
            = -3x^2 + 3x



And all the coefficients are divisible by 3,   so 3 is prime.





 Note:
This task is not the AKS primality test.   It is an inefficient exponential time algorithm discovered in the late 1600s and used as an introductory lemma in the AKS derivation.



Task



 Create a function/subroutine/method that given  



p


{\displaystyle p}

   generates the coefficients of the expanded polynomial representation of  



(
x
−
1

)

p




{\displaystyle (x-1)^{p}}

.
 Use the function to show here the polynomial expansions of  



(
x
−
1

)

p




{\displaystyle (x-1)^{p}}

   for  



p


{\displaystyle p}

   in the range   0   to at least   7,   inclusive.
 Use the previous function in creating another function that when given  



p


{\displaystyle p}

   returns whether  



p


{\displaystyle p}

   is prime using the theorem.
 Use your test to generate a list of all primes under   35.
 As a stretch goal,   generate all primes under   50   (needs integers larger than 31-bit).


References

 Agrawal-Kayal-Saxena (AKS) primality test (Wikipedia)
 Fool-Proof Test for Primes - Numberphile (Video). The accuracy of this video is disputed -- at best it is an oversimplification.

",Python,"def expand_x_1(n):
# This version uses a generator and thus less computations
    c =1
    for i in range(n//2+1):
        c = c*(n-i)//(i+1)
        yield c
 
def aks(p):
    if p==2:
        return True
 
    for i in expand_x_1(p):
        if i % p:
# we stop without computing all possible solutions
            return False
    return True",345,16,"import unittest

class TestAKSAlgorithm(unittest.TestCase):

    def test_expand_x_1(self):
        # Test the expand_x_1 function for various values of n
        self.assertEqual(list(expand_x_1(0)), [1])
        self.assertEqual(list(expand_x_1(1)), [1])
        self.assertEqual(list(expand_x_1(2)), [1, 1])
        self.assertEqual(list(expand_x_1(3)), [1, 2])
        self.assertEqual(list(expand_x_1(4)), [1, 3, 3])
        self.assertEqual(list(expand_x_1(5)), [1, 4, 6])
        self.assertEqual(list(expand_x_1(6)), [1, 5, 10, 10])
        self.assertEqual(list(expand_x_1(7)), [1, 6, 15, 20])

    def test_aks(self):
        # Test the aks function for known primes and non-primes
        self.assertTrue(aks(2))
        self.assertTrue(aks(3))
        self.assertFalse(aks(4))
        self.assertTrue(aks(5))
        self.assertFalse(aks(6))
        self.assertTrue(aks(7))
        self.assertFalse(aks(8))
        self.assertFalse(aks(9))
        self.assertFalse(aks(10))
        self.assertTrue(aks(11))
        self.assertFalse(aks(12))
        self.assertTrue(aks(13))
        self.assertFalse(aks(14))
        self.assertFalse(aks(15))
        self.assertFalse(aks(16))
        self.assertTrue(aks(17))
        self.assertFalse(aks(18))
        self.assertTrue(aks(19))
        self.assertFalse(aks(20))
        self.assertFalse(aks(21))
        self.assertFalse(aks(22))
        self.assertTrue(aks(23))
        self.assertFalse(aks(24))
        self.assertFalse(aks(25))
        self.assertFalse(aks(26))
        self.assertFalse(aks(27))
        self.assertFalse(aks(28))
        self.assertTrue(aks(29))
        self.assertFalse(aks(30))
        self.assertTrue(aks(31))
        self.assertFalse(aks(32))
        self.assertFalse(aks(33))
        self.assertFalse(aks(34))

    def test_primes_under_35(self):
        # Generate list of primes under 35
        primes_under_35 = [p for p in range(2, 35) if aks(p)]
        self.assertEqual(primes_under_35, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31])

    def test_primes_under_50(self):
        # Generate list of primes under 50
        primes_under_50 = [p for p in range(2, 50) if aks(p)]
        self.assertEqual(primes_under_50, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47])

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py,CompileStatus.OK,0.0,16.92,17.72,0.81,7.17,,0.6844589710235596,53.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': '', 'line': 4, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': '', 'line': 15, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': '', 'line': 51, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': '', 'line': 56, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': 'TestAKSAlgorithm', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 22, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': 'TestAKSAlgorithm.test_expand_x_1', 'line': 5, 'column': 4, 'endLine': 5, 'endColumn': 23, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': 'TestAKSAlgorithm.test_expand_x_1', 'line': 7, 'column': 30, 'endLine': 7, 'endColumn': 40, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'expand_x_1'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': 'TestAKSAlgorithm.test_expand_x_1', 'line': 8, 'column': 30, 'endLine': 8, 'endColumn': 40, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'expand_x_1'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': 'TestAKSAlgorithm.test_expand_x_1', 'line': 9, 'column': 30, 'endLine': 9, 'endColumn': 40, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'expand_x_1'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': 'TestAKSAlgorithm.test_expand_x_1', 'line': 10, 'column': 30, 'endLine': 10, 'endColumn': 40, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'expand_x_1'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': 'TestAKSAlgorithm.test_expand_x_1', 'line': 11, 'column': 30, 'endLine': 11, 'endColumn': 40, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'expand_x_1'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': 'TestAKSAlgorithm.test_expand_x_1', 'line': 12, 'column': 30, 'endLine': 12, 'endColumn': 40, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'expand_x_1'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': 'TestAKSAlgorithm.test_expand_x_1', 'line': 13, 'column': 30, 'endLine': 13, 'endColumn': 40, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'expand_x_1'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': 'TestAKSAlgorithm.test_expand_x_1', 'line': 14, 'column': 30, 'endLine': 14, 'endColumn': 40, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'expand_x_1'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': 'TestAKSAlgorithm.test_aks', 'line': 16, 'column': 4, 'endLine': 16, 'endColumn': 16, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': 'TestAKSAlgorithm.test_aks', 'line': 18, 'column': 24, 'endLine': 18, 'endColumn': 27, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'aks'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': 'TestAKSAlgorithm.test_aks', 'line': 19, 'column': 24, 'endLine': 19, 'endColumn': 27, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'aks'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': 'TestAKSAlgorithm.test_aks', 'line': 20, 'column': 25, 'endLine': 20, 'endColumn': 28, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'aks'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': 'TestAKSAlgorithm.test_aks', 'line': 21, 'column': 24, 'endLine': 21, 'endColumn': 27, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'aks'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': 'TestAKSAlgorithm.test_aks', 'line': 22, 'column': 25, 'endLine': 22, 'endColumn': 28, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'aks'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': 'TestAKSAlgorithm.test_aks', 'line': 23, 'column': 24, 'endLine': 23, 'endColumn': 27, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'aks'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': 'TestAKSAlgorithm.test_aks', 'line': 24, 'column': 25, 'endLine': 24, 'endColumn': 28, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'aks'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': 'TestAKSAlgorithm.test_aks', 'line': 25, 'column': 25, 'endLine': 25, 'endColumn': 28, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'aks'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': 'TestAKSAlgorithm.test_aks', 'line': 26, 'column': 25, 'endLine': 26, 'endColumn': 28, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'aks'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': 'TestAKSAlgorithm.test_aks', 'line': 27, 'column': 24, 'endLine': 27, 'endColumn': 27, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'aks'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': 'TestAKSAlgorithm.test_aks', 'line': 28, 'column': 25, 'endLine': 28, 'endColumn': 28, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'aks'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': 'TestAKSAlgorithm.test_aks', 'line': 29, 'column': 24, 'endLine': 29, 'endColumn': 27, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'aks'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': 'TestAKSAlgorithm.test_aks', 'line': 30, 'column': 25, 'endLine': 30, 'endColumn': 28, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'aks'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': 'TestAKSAlgorithm.test_aks', 'line': 31, 'column': 25, 'endLine': 31, 'endColumn': 28, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'aks'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': 'TestAKSAlgorithm.test_aks', 'line': 32, 'column': 25, 'endLine': 32, 'endColumn': 28, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'aks'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': 'TestAKSAlgorithm.test_aks', 'line': 33, 'column': 24, 'endLine': 33, 'endColumn': 27, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'aks'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': 'TestAKSAlgorithm.test_aks', 'line': 34, 'column': 25, 'endLine': 34, 'endColumn': 28, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'aks'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': 'TestAKSAlgorithm.test_aks', 'line': 35, 'column': 24, 'endLine': 35, 'endColumn': 27, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'aks'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': 'TestAKSAlgorithm.test_aks', 'line': 36, 'column': 25, 'endLine': 36, 'endColumn': 28, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'aks'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': 'TestAKSAlgorithm.test_aks', 'line': 37, 'column': 25, 'endLine': 37, 'endColumn': 28, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'aks'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': 'TestAKSAlgorithm.test_aks', 'line': 38, 'column': 25, 'endLine': 38, 'endColumn': 28, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'aks'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': 'TestAKSAlgorithm.test_aks', 'line': 39, 'column': 24, 'endLine': 39, 'endColumn': 27, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'aks'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': 'TestAKSAlgorithm.test_aks', 'line': 40, 'column': 25, 'endLine': 40, 'endColumn': 28, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'aks'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': 'TestAKSAlgorithm.test_aks', 'line': 41, 'column': 25, 'endLine': 41, 'endColumn': 28, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'aks'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': 'TestAKSAlgorithm.test_aks', 'line': 42, 'column': 25, 'endLine': 42, 'endColumn': 28, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'aks'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': 'TestAKSAlgorithm.test_aks', 'line': 43, 'column': 25, 'endLine': 43, 'endColumn': 28, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'aks'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': 'TestAKSAlgorithm.test_aks', 'line': 44, 'column': 25, 'endLine': 44, 'endColumn': 28, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'aks'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': 'TestAKSAlgorithm.test_aks', 'line': 45, 'column': 24, 'endLine': 45, 'endColumn': 27, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'aks'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': 'TestAKSAlgorithm.test_aks', 'line': 46, 'column': 25, 'endLine': 46, 'endColumn': 28, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'aks'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': 'TestAKSAlgorithm.test_aks', 'line': 47, 'column': 24, 'endLine': 47, 'endColumn': 27, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'aks'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': 'TestAKSAlgorithm.test_aks', 'line': 48, 'column': 25, 'endLine': 48, 'endColumn': 28, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'aks'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': 'TestAKSAlgorithm.test_aks', 'line': 49, 'column': 25, 'endLine': 49, 'endColumn': 28, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'aks'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': 'TestAKSAlgorithm.test_aks', 'line': 50, 'column': 25, 'endLine': 50, 'endColumn': 28, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'aks'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': 'TestAKSAlgorithm.test_primes_under_35', 'line': 52, 'column': 4, 'endLine': 52, 'endColumn': 28, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': 'TestAKSAlgorithm.test_primes_under_35', 'line': 54, 'column': 54, 'endLine': 54, 'endColumn': 57, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'aks'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': 'TestAKSAlgorithm.test_primes_under_50', 'line': 57, 'column': 4, 'endLine': 57, 'endColumn': 28, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_aks_test_for_primes', 'obj': 'TestAKSAlgorithm.test_primes_under_50', 'line': 59, 'column': 54, 'endLine': 59, 'endColumn': 57, 'path': 'data/generated/docs_python/aks_test_for_primes/test_gpt_4o_2024_08_06_aks_test_for_primes.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'aks'"", 'message-id': 'E0602'}]",False
"Abbreviations, automatic","The use of   abbreviations   (also sometimes called synonyms, nicknames, AKAs, or aliases)   can be an

easy way to add flexibility when specifying or using commands, sub─commands, options, etc.



It would make a list of words easier to maintain   (as words are added, changed, and/or deleted)   if
the minimum abbreviation length of that list could be automatically (programmatically) determined.



For this task, use the list (below) of the days-of-the-week names that are expressed in about a hundred languages   (note that there is a blank line in the list).

Sunday Monday Tuesday Wednesday Thursday Friday Saturday
Sondag Maandag Dinsdag Woensdag Donderdag Vrydag Saterdag
E_djelë E_hënë E_martë E_mërkurë E_enjte E_premte E_shtunë
Ehud Segno Maksegno Erob Hamus Arbe Kedame
Al_Ahad Al_Ithinin Al_Tholatha'a Al_Arbia'a Al_Kamis Al_Gomia'a Al_Sabit
Guiragui Yergou_shapti Yerek_shapti Tchorek_shapti Hink_shapti Ourpat Shapat
domingu llunes martes miércoles xueves vienres sábadu
Bazar_gÜnÜ Birinci_gÜn Çkinci_gÜn ÜçÜncÜ_gÜn DÖrdÜncÜ_gÜn Bes,inci_gÜn Altòncò_gÜn
Igande Astelehen Astearte Asteazken Ostegun Ostiral Larunbat
Robi_bar Shom_bar Mongal_bar Budhh_bar BRihashpati_bar Shukro_bar Shoni_bar
Nedjelja Ponedeljak Utorak Srijeda Cxetvrtak Petak Subota
Disul Dilun Dimeurzh Dimerc'her Diriaou Digwener Disadorn
nedelia ponedelnik vtornik sriada chetvartak petak sabota
sing_kei_yaht sing_kei_yat sing_kei_yee sing_kei_saam sing_kei_sie sing_kei_ng sing_kei_luk
Diumenge Dilluns Dimarts Dimecres Dijous Divendres Dissabte
Dzeenkk-eh Dzeehn_kk-ehreh Dzeehn_kk-ehreh_nah_kay_dzeeneh Tah_neesee_dzeehn_neh Deehn_ghee_dzee-neh Tl-oowey_tts-el_dehlee Dzeentt-ahzee
dy_Sul dy_Lun dy_Meurth dy_Mergher dy_You dy_Gwener dy_Sadorn
Dimanch Lendi Madi Mèkredi Jedi Vandredi Samdi
nedjelja ponedjeljak utorak srijeda cxetvrtak petak subota
nede^le ponde^lí úterÿ str^eda c^tvrtek pátek sobota
Sondee Mondee Tiisiday Walansedee TOOsedee Feraadee Satadee
s0ndag mandag tirsdag onsdag torsdag fredag l0rdag
zondag maandag dinsdag woensdag donderdag vrijdag zaterdag
Diman^co Lundo Mardo Merkredo ^Jaùdo Vendredo Sabato
pÜhapäev esmaspäev teisipäev kolmapäev neljapäev reede laupäev

Diu_prima Diu_sequima Diu_tritima Diu_quartima Diu_quintima Diu_sextima Diu_sabbata
sunnudagur mánadagur tÿsdaguy mikudagur hósdagur friggjadagur leygardagur
Yek_Sham'beh Do_Sham'beh Seh_Sham'beh Cha'har_Sham'beh Panj_Sham'beh Jom'eh Sham'beh
sunnuntai maanantai tiistai keskiviiko torsktai perjantai lauantai
dimanche lundi mardi mercredi jeudi vendredi samedi
Snein Moandei Tiisdei Woansdei Tonersdei Freed Sneon
Domingo Segunda_feira Martes Mércores Joves Venres Sábado
k'vira orshabati samshabati otkhshabati khutshabati p'arask'evi shabati
Sonntag Montag Dienstag Mittwoch Donnerstag Freitag Samstag
Kiriaki' Defte'ra Tri'ti Teta'rti Pe'mpti Paraskebi' Sa'bato
ravivaar somvaar mangalvaar budhvaar guruvaar shukravaar shanivaar
pópule pó`akahi pó`alua pó`akolu pó`ahá pó`alima pó`aono
Yom_rishon Yom_sheni Yom_shlishi Yom_revi'i Yom_chamishi Yom_shishi Shabat
ravivara somavar mangalavar budhavara brahaspativar shukravara shanivar
vasárnap hétfö kedd szerda csütörtök péntek szombat
Sunnudagur Mánudagur ╞riδjudagur Miδvikudagar Fimmtudagur FÖstudagur Laugardagur
sundio lundio mardio merkurdio jovdio venerdio saturdio
Minggu Senin Selasa Rabu Kamis Jumat Sabtu
Dominica Lunedi Martedi Mercuridi Jovedi Venerdi Sabbato
Dé_Domhnaigh Dé_Luain Dé_Máirt Dé_Ceadaoin Dé_ardaoin Dé_hAoine Dé_Sathairn
domenica lunedí martedí mercoledí giovedí venerdí sabato
Nichiyou_bi Getzuyou_bi Kayou_bi Suiyou_bi Mokuyou_bi Kin'you_bi Doyou_bi
Il-yo-il Wol-yo-il Hwa-yo-il Su-yo-il Mok-yo-il Kum-yo-il To-yo-il
Dies_Dominica Dies_Lunæ Dies_Martis Dies_Mercurii Dies_Iovis Dies_Veneris Dies_Saturni
sve-tdien pirmdien otrdien tresvdien ceturtdien piektdien sestdien
Sekmadienis Pirmadienis Antradienis Trec^iadienis Ketvirtadienis Penktadienis S^es^tadienis
Wangu Kazooba Walumbe Mukasa Kiwanuka Nnagawonye Wamunyi
xing-_qi-_rì xing-_qi-_yi-. xing-_qi-_èr xing-_qi-_san-. xing-_qi-_sì xing-_qi-_wuv. xing-_qi-_liù
Jedoonee Jelune Jemayrt Jecrean Jardaim Jeheiney Jesam
Jabot Manre Juje Wonje Taije Balaire Jarere
geminrongo minòmishi mártes mièrkoles misheushi bèrnashi mishábaro
Ahad Isnin Selasa Rabu Khamis Jumaat Sabtu
sφndag mandag tirsdag onsdag torsdag fredag lφrdag
lo_dimenge lo_diluns lo_dimarç lo_dimèrcres lo_dijòus lo_divendres lo_dissabte
djadomingo djaluna djamars djarason djaweps djabièrna djasabra
Niedziela Poniedzial/ek Wtorek S,roda Czwartek Pia,tek Sobota
Domingo segunda-feire terça-feire quarta-feire quinta-feire sexta-feira såbado
Domingo Lunes martes Miercoles Jueves Viernes Sabado
Duminicª Luni Mart'i Miercuri Joi Vineri Sâmbªtª
voskresenie ponedelnik vtornik sreda chetverg pyatnitsa subbota
Sunday Di-luain Di-màirt Di-ciadain Di-ardaoin Di-haoine Di-sathurne
nedjelja ponedjeljak utorak sreda cxetvrtak petak subota
Sontaha Mmantaha Labobedi Laboraro Labone Labohlano Moqebelo
Iridha- Sandhudha- Anga.haruwa-dha- Badha-dha- Brahaspa.thindha- Sikura-dha- Sena.sura-dha-
nedel^a pondelok utorok streda s^tvrtok piatok sobota
Nedelja Ponedeljek Torek Sreda Cxetrtek Petek Sobota
domingo lunes martes miércoles jueves viernes sábado
sonde mundey tude-wroko dride-wroko fode-wroko freyda Saturday
Jumapili Jumatatu Jumanne Jumatano Alhamisi Ijumaa Jumamosi
söndag måndag tisdag onsdag torsdag fredag lordag
Linggo Lunes Martes Miyerkoles Huwebes Biyernes Sabado
Lé-pài-jít Pài-it Pài-jï Pài-sañ Pài-sì Pài-gÖ. Pài-lák
wan-ar-tit wan-tjan wan-ang-kaan wan-phoet wan-pha-ru-hat-sa-boh-die wan-sook wan-sao
Tshipi Mosupologo Labobedi Laboraro Labone Labotlhano Matlhatso
Pazar Pazartesi Sali Çar,samba Per,sembe Cuma Cumartesi
nedilya ponedilok vivtorok sereda chetver pyatnytsya subota
Chu?_Nhâ.t Thú*_Hai Thú*_Ba Thú*_Tu* Thú*_Na'm Thú*_Sáu Thú*_Ba?y
dydd_Sul dyds_Llun dydd_Mawrth dyds_Mercher dydd_Iau dydd_Gwener dyds_Sadwrn
Dibeer Altine Talaata Allarba Al_xebes Aljuma Gaaw
iCawa uMvulo uLwesibini uLwesithathu uLuwesine uLwesihlanu uMgqibelo
zuntik montik dinstik mitvokh donershtik fraytik shabes
iSonto uMsombuluko uLwesibili uLwesithathu uLwesine uLwesihlanu uMgqibelo
Dies_Dominica Dies_Lunæ Dies_Martis Dies_Mercurii Dies_Iovis Dies_Veneris Dies_Saturni
Bazar_gÜnÜ Bazar_ærtæsi Çærs,ænbæ_axs,amò Çærs,ænbæ_gÜnÜ CÜmæ_axs,amò CÜmæ_gÜnÜ CÜmæ_Senbæ
Sun Moon Mars Mercury Jove Venus Saturn
zondag maandag dinsdag woensdag donderdag vrijdag zaterdag
KoseEraa GyoOraa BenEraa Kuoraa YOwaaraa FeEraa Memenaa
Sonntag Montag Dienstag Mittwoch Donnerstag Freitag Sonnabend
Domingo Luns Terza_feira Corta_feira Xoves Venres Sábado
Dies_Solis Dies_Lunae Dies_Martis Dies_Mercurii Dies_Iovis Dies_Veneris Dies_Sabbatum
xing-_qi-_tiàn xing-_qi-_yi-. xing-_qi-_èr xing-_qi-_san-. xing-_qi-_sì xing-_qi-_wuv. xing-_qi-_liù
djadomingu djaluna djamars djarason djaweps djabièrnè djasabra
Killachau Atichau Quoyllurchau Illapachau Chaskachau Kuychichau Intichau

Caveat:   The list (above) most surely contains errors (or, at the least, differences) of what the actual (or true) names for the days-of-the-week.



To make this Rosetta Code task page as small as possible, if processing the complete list, read the days-of-the-week from a file (that is created from the above list).



Notes concerning the above list of words

   each line has a list of days-of-the-week for a language, separated by at least one blank
   the words on each line happen to be in order, from Sunday ──► Saturday
   most lines have words in mixed case and some have all manner of accented words and other characters
   some words were translated to the nearest character that was available to code page   437
   the characters in the words are not restricted except that they may not have imbedded blanks
   for this example, the use of an underscore (_) was used to indicate a blank in a word


Task

   The list of words   (days of the week)   needn't be verified/validated.
   Write a function to find the (numeric) minimum length abbreviation for each line that would make abbreviations unique.
   A blank line   (or a null line)   should return a null string.
   Process and show the output for at least the first five lines of the file.
   Show all output here.

Other tasks related to string operations:

Metrics
 Array length
 String length
 Copy a string
 Empty string  (assignment)
Counting
 Word frequency
 Letter frequency
 Jewels and stones
 I before E except after C
 Bioinformatics/base count
 Count occurrences of a substring
 Count how many vowels and consonants occur in a string
Remove/replace
 XXXX redacted
 Conjugate a Latin verb
 Remove vowels from a string
 String interpolation (included)
 Strip block comments
 Strip comments from a string
 Strip a set of characters from a string
 Strip whitespace from a string -- top and tail
 Strip control codes and extended characters from a string
Anagrams/Derangements/shuffling
 Word wheel
 ABC problem
 Sattolo cycle
 Knuth shuffle
 Ordered words
 Superpermutation minimisation
 Textonyms (using a phone text pad)
 Anagrams
 Anagrams/Deranged anagrams
 Permutations/Derangements
Find/Search/Determine
 ABC words
 Odd words
 Word ladder
 Semordnilap
 Word search
 Wordiff  (game)
 String matching
 Tea cup rim text
 Alternade words
 Changeable words
 State name puzzle
 String comparison
 Unique characters
 Unique characters in each string
 Extract file extension
 Levenshtein distance
 Palindrome detection
 Common list elements
 Longest common suffix
 Longest common prefix
 Compare a list of strings
 Longest common substring
 Find common directory path
 Words from neighbour ones
 Change e letters to i in words
 Non-continuous subsequences
 Longest common subsequence
 Longest palindromic substrings
 Longest increasing subsequence
 Words containing ""the"" substring
 Sum of the digits of n is substring of n
 Determine if a string is numeric
 Determine if a string is collapsible
 Determine if a string is squeezable
 Determine if a string has all unique characters
 Determine if a string has all the same characters
 Longest substrings without repeating characters
 Find words which contains all the vowels
 Find words which contains most consonants
 Find words which contains more than 3 vowels
 Find words which first and last three letters are equals
 Find words which odd letters are consonants and even letters are vowels or vice_versa
Formatting
 Substring
 Rep-string
 Word wrap
 String case
 Align columns
 Literals/String
 Repeat a string
 Brace expansion
 Brace expansion using ranges
 Reverse a string
 Phrase reversals
 Comma quibbling
 Special characters
 String concatenation
 Substring/Top and tail
 Commatizing numbers
 Reverse words in a string
 Suffixation of decimal numbers
 Long literals, with continuations
 Numerical and alphabetical suffixes
 Abbreviations, easy
 Abbreviations, simple
 Abbreviations, automatic
Song lyrics/poems/Mad Libs/phrases
 Mad Libs
 Magic 8-ball
 99 Bottles of Beer
 The Name Game (a song)
 The Old lady swallowed a fly
 The Twelve Days of Christmas
Tokenize
 Text between
 Tokenize a string
 Word break problem
 Tokenize a string with escaping
 Split a character string based on change of character
Sequences
 Show ASCII table
 De Bruijn sequences
 Self-referential sequences
 Generate lower case ASCII alphabet



",Python,"def shortest_abbreviation_length(line, list_size):
    words = line.split()
    word_count = len(words)
    # Can't give true answer with unexpected number of entries
    if word_count != list_size:
        raise ValueError(f'Not enough entries, expected {list_size} found {word_count}')
 
    # Find the small slice length that gives list_size unique values
    abbreviation_length = 1
    abbreviations = set()
    while(True):
        abbreviations = {word[:abbreviation_length] for word in words}
        if len(abbreviations) == list_size:
            return abbreviation_length
        abbreviation_length += 1
        abbreviations.clear()
 
def automatic_abbreviations(filename, words_per_line):
    with open(filename) as file:
        for line in file:
            line = line.rstrip()
            if len(line) > 0:
                length = shortest_abbreviation_length(line, words_per_line)
                print(f'{length:2} {line}')
            else:
                print()
 
automatic_abbreviations('daysOfWeek.txt', 7)",1034,28,"import unittest

class TestAbbreviationsAutomatic(unittest.TestCase):
    def test_shortest_abbreviation_length(self):
        # Test with a normal line
        line = ""Sunday Monday Tuesday Wednesday Thursday Friday Saturday""
        self.assertEqual(shortest_abbreviation_length(line, 7), 3)

        # Test with a line with unique first letters
        line = ""Sun Mon Tue Wed Thu Fri Sat""
        self.assertEqual(shortest_abbreviation_length(line, 7), 1)

        # Test with a line where all words are the same
        line = ""Day Day Day Day Day Day Day""
        self.assertEqual(shortest_abbreviation_length(line, 7), 3)

        # Test with a line with mixed case
        line = ""sunday Monday tuesday Wednesday thursday Friday saturday""
        self.assertEqual(shortest_abbreviation_length(line, 7), 3)

        # Test with a line with special characters
        line = ""Sondag Maandag Dinsdag Woensdag Donderdag Vrydag Saterdag""
        self.assertEqual(shortest_abbreviation_length(line, 7), 3)

        # Test with a line with underscores
        line = ""E_djelë E_hënë E_martë E_mërkurë E_enjte E_premte E_shtunë""
        self.assertEqual(shortest_abbreviation_length(line, 7), 3)

        # Test with a line with unexpected number of entries
        line = ""Sunday Monday Tuesday""
        with self.assertRaises(ValueError):
            shortest_abbreviation_length(line, 7)

    def test_automatic_abbreviations(self):
        # Create a temporary file with test data
        with open('test_daysOfWeek.txt', 'w') as file:
            file.write(""Sunday Monday Tuesday Wednesday Thursday Friday Saturday\n"")
            file.write(""Sondag Maandag Dinsdag Woensdag Donderdag Vrydag Saterdag\n"")
            file.write(""E_djelë E_hënë E_martë E_mërkurë E_enjte E_premte E_shtunë\n"")
            file.write(""\n"")
            file.write(""Ehud Segno Maksegno Erob Hamus Arbe Kedame\n"")

        # Capture the output of the function
        from io import StringIO
        import sys

        captured_output = StringIO()
        sys.stdout = captured_output
        automatic_abbreviations('test_daysOfWeek.txt', 7)
        sys.stdout = sys.__stdout__

        # Check the output
        expected_output = "" 3 Sunday Monday Tuesday Wednesday Thursday Friday Saturday\n"" \
                          "" 3 Sondag Maandag Dinsdag Woensdag Donderdag Vrydag Saterdag\n"" \
                          "" 3 E_djelë E_hënë E_martë E_mërkurë E_enjte E_premte E_shtunë\n"" \
                          ""\n"" \
                          "" 2 Ehud Segno Maksegno Erob Hamus Arbe Kedame\n""
        self.assertEqual(captured_output.getvalue(), expected_output)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/abbreviations_automatic/test_gpt_4o_2024_08_06_abbreviations_automatic.py,CompileStatus.OK,0.0,31.58,28.0,0.21,1.0,,0.7835390567779541,15.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_abbreviations_automatic', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/abbreviations_automatic/test_gpt_4o_2024_08_06_abbreviations_automatic.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_abbreviations_automatic', 'obj': 'TestAbbreviationsAutomatic', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 32, 'path': 'data/generated/docs_python/abbreviations_automatic/test_gpt_4o_2024_08_06_abbreviations_automatic.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_abbreviations_automatic', 'obj': 'TestAbbreviationsAutomatic.test_shortest_abbreviation_length', 'line': 4, 'column': 4, 'endLine': 4, 'endColumn': 41, 'path': 'data/generated/docs_python/abbreviations_automatic/test_gpt_4o_2024_08_06_abbreviations_automatic.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_abbreviations_automatic', 'obj': 'TestAbbreviationsAutomatic.test_shortest_abbreviation_length', 'line': 7, 'column': 25, 'endLine': 7, 'endColumn': 53, 'path': 'data/generated/docs_python/abbreviations_automatic/test_gpt_4o_2024_08_06_abbreviations_automatic.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'shortest_abbreviation_length'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_abbreviations_automatic', 'obj': 'TestAbbreviationsAutomatic.test_shortest_abbreviation_length', 'line': 11, 'column': 25, 'endLine': 11, 'endColumn': 53, 'path': 'data/generated/docs_python/abbreviations_automatic/test_gpt_4o_2024_08_06_abbreviations_automatic.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'shortest_abbreviation_length'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_abbreviations_automatic', 'obj': 'TestAbbreviationsAutomatic.test_shortest_abbreviation_length', 'line': 15, 'column': 25, 'endLine': 15, 'endColumn': 53, 'path': 'data/generated/docs_python/abbreviations_automatic/test_gpt_4o_2024_08_06_abbreviations_automatic.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'shortest_abbreviation_length'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_abbreviations_automatic', 'obj': 'TestAbbreviationsAutomatic.test_shortest_abbreviation_length', 'line': 19, 'column': 25, 'endLine': 19, 'endColumn': 53, 'path': 'data/generated/docs_python/abbreviations_automatic/test_gpt_4o_2024_08_06_abbreviations_automatic.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'shortest_abbreviation_length'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_abbreviations_automatic', 'obj': 'TestAbbreviationsAutomatic.test_shortest_abbreviation_length', 'line': 23, 'column': 25, 'endLine': 23, 'endColumn': 53, 'path': 'data/generated/docs_python/abbreviations_automatic/test_gpt_4o_2024_08_06_abbreviations_automatic.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'shortest_abbreviation_length'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_abbreviations_automatic', 'obj': 'TestAbbreviationsAutomatic.test_shortest_abbreviation_length', 'line': 27, 'column': 25, 'endLine': 27, 'endColumn': 53, 'path': 'data/generated/docs_python/abbreviations_automatic/test_gpt_4o_2024_08_06_abbreviations_automatic.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'shortest_abbreviation_length'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_abbreviations_automatic', 'obj': 'TestAbbreviationsAutomatic.test_shortest_abbreviation_length', 'line': 32, 'column': 12, 'endLine': 32, 'endColumn': 40, 'path': 'data/generated/docs_python/abbreviations_automatic/test_gpt_4o_2024_08_06_abbreviations_automatic.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'shortest_abbreviation_length'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_abbreviations_automatic', 'obj': 'TestAbbreviationsAutomatic.test_automatic_abbreviations', 'line': 34, 'column': 4, 'endLine': 34, 'endColumn': 36, 'path': 'data/generated/docs_python/abbreviations_automatic/test_gpt_4o_2024_08_06_abbreviations_automatic.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_abbreviations_automatic', 'obj': 'TestAbbreviationsAutomatic.test_automatic_abbreviations', 'line': 36, 'column': 13, 'endLine': 36, 'endColumn': 45, 'path': 'data/generated/docs_python/abbreviations_automatic/test_gpt_4o_2024_08_06_abbreviations_automatic.py', 'symbol': 'unspecified-encoding', 'message': 'Using open without explicitly specifying an encoding', 'message-id': 'W1514'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_abbreviations_automatic', 'obj': 'TestAbbreviationsAutomatic.test_automatic_abbreviations', 'line': 44, 'column': 8, 'endLine': 44, 'endColumn': 31, 'path': 'data/generated/docs_python/abbreviations_automatic/test_gpt_4o_2024_08_06_abbreviations_automatic.py', 'symbol': 'import-outside-toplevel', 'message': 'Import outside toplevel (io.StringIO)', 'message-id': 'C0415'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_abbreviations_automatic', 'obj': 'TestAbbreviationsAutomatic.test_automatic_abbreviations', 'line': 45, 'column': 8, 'endLine': 45, 'endColumn': 18, 'path': 'data/generated/docs_python/abbreviations_automatic/test_gpt_4o_2024_08_06_abbreviations_automatic.py', 'symbol': 'import-outside-toplevel', 'message': 'Import outside toplevel (sys)', 'message-id': 'C0415'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_abbreviations_automatic', 'obj': 'TestAbbreviationsAutomatic.test_automatic_abbreviations', 'line': 49, 'column': 8, 'endLine': 49, 'endColumn': 31, 'path': 'data/generated/docs_python/abbreviations_automatic/test_gpt_4o_2024_08_06_abbreviations_automatic.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'automatic_abbreviations'"", 'message-id': 'E0602'}]",False
"Abbreviations, easy","This task is an easier (to code) variant of the Rosetta Code task:    Abbreviations, simple.



For this task, the following   command table   will be used:

   Add ALTer  BAckup Bottom  CAppend Change SCHANGE  CInsert CLAst COMPress COpy
   COUnt COVerlay CURsor DELete CDelete Down DUPlicate Xedit EXPand EXTract Find
   NFind NFINDUp NFUp CFind FINdup FUp FOrward GET Help HEXType Input POWerinput
   Join SPlit SPLTJOIN  LOAD  Locate CLocate  LOWercase UPPercase  LPrefix MACRO
   MErge MODify MOve MSG Next Overlay PARSE PREServe PURge PUT PUTD  Query  QUIT
   READ  RECover REFRESH RENum REPeat  Replace CReplace  RESet  RESTore  RGTLEFT
   RIght LEft  SAVE  SET SHift SI  SORT  SOS  STAck STATus  TOP TRAnsfer Type Up



Notes concerning the above   command table:

   it can be thought of as one long literal string   (with blanks at end-of-lines)
   it may have superfluous blanks
   it may be in any case (lower/upper/mixed)
   the order of the words in the   command table   must be preserved as shown
   the user input(s) may be in any case (upper/lower/mixed)
   commands will be restricted to the Latin alphabet   (A ──► Z,   a ──► z)
   A valid abbreviation is a word that has:
   at least the minimum length of the number of capital letters of the word in the command table
   compares equal (regardless of case) to the leading characters of the word in the command table
   a length not longer than the word in the command table
   ALT,   aLt,   ALTE,   and   ALTER   are all abbreviations of   ALTer
   AL,   ALF,   ALTERS,   TER,   and   A   aren't valid abbreviations of   ALTer
   The number of capital letters in   ALTer   indicates that any abbreviation for   ALTer   must be at least three letters
   Any word longer than five characters can't be an abbreviation for   ALTer
   o,   ov,   oVe,   over,   overL,   overla   are all acceptable abbreviations for   Overlay
   if there isn't any lowercase letters in the word in the command table,   then there isn't an abbreviation permitted


Task

   The command table needn't be verified/validated.
   Write a function to validate if the user ""words""   (given as input)   are valid   (in the command table).
   If the word   is   valid,   then return the full uppercase version of that ""word"".
   If the word isn't valid,   then return the lowercase string:    *error*        (7 characters).
   A blank input   (or a null input)   should return a null string.
   Show all output here.


An example test case to be used for this task

For a user string of:

 riG   rePEAT copies  put mo   rest    types   fup.    6       poweRin

the computer program should return the string:

 RIGHT REPEAT *error* PUT MOVE RESTORE *error* *error* *error* POWERINPUT


Other tasks related to string operations:

Metrics
 Array length
 String length
 Copy a string
 Empty string  (assignment)
Counting
 Word frequency
 Letter frequency
 Jewels and stones
 I before E except after C
 Bioinformatics/base count
 Count occurrences of a substring
 Count how many vowels and consonants occur in a string
Remove/replace
 XXXX redacted
 Conjugate a Latin verb
 Remove vowels from a string
 String interpolation (included)
 Strip block comments
 Strip comments from a string
 Strip a set of characters from a string
 Strip whitespace from a string -- top and tail
 Strip control codes and extended characters from a string
Anagrams/Derangements/shuffling
 Word wheel
 ABC problem
 Sattolo cycle
 Knuth shuffle
 Ordered words
 Superpermutation minimisation
 Textonyms (using a phone text pad)
 Anagrams
 Anagrams/Deranged anagrams
 Permutations/Derangements
Find/Search/Determine
 ABC words
 Odd words
 Word ladder
 Semordnilap
 Word search
 Wordiff  (game)
 String matching
 Tea cup rim text
 Alternade words
 Changeable words
 State name puzzle
 String comparison
 Unique characters
 Unique characters in each string
 Extract file extension
 Levenshtein distance
 Palindrome detection
 Common list elements
 Longest common suffix
 Longest common prefix
 Compare a list of strings
 Longest common substring
 Find common directory path
 Words from neighbour ones
 Change e letters to i in words
 Non-continuous subsequences
 Longest common subsequence
 Longest palindromic substrings
 Longest increasing subsequence
 Words containing ""the"" substring
 Sum of the digits of n is substring of n
 Determine if a string is numeric
 Determine if a string is collapsible
 Determine if a string is squeezable
 Determine if a string has all unique characters
 Determine if a string has all the same characters
 Longest substrings without repeating characters
 Find words which contains all the vowels
 Find words which contains most consonants
 Find words which contains more than 3 vowels
 Find words which first and last three letters are equals
 Find words which odd letters are consonants and even letters are vowels or vice_versa
Formatting
 Substring
 Rep-string
 Word wrap
 String case
 Align columns
 Literals/String
 Repeat a string
 Brace expansion
 Brace expansion using ranges
 Reverse a string
 Phrase reversals
 Comma quibbling
 Special characters
 String concatenation
 Substring/Top and tail
 Commatizing numbers
 Reverse words in a string
 Suffixation of decimal numbers
 Long literals, with continuations
 Numerical and alphabetical suffixes
 Abbreviations, easy
 Abbreviations, simple
 Abbreviations, automatic
Song lyrics/poems/Mad Libs/phrases
 Mad Libs
 Magic 8-ball
 99 Bottles of Beer
 The Name Game (a song)
 The Old lady swallowed a fly
 The Twelve Days of Christmas
Tokenize
 Text between
 Tokenize a string
 Word break problem
 Tokenize a string with escaping
 Split a character string based on change of character
Sequences
 Show ASCII table
 De Bruijn sequences
 Self-referential sequences
 Generate lower case ASCII alphabet



",Python,"command_table_text = \
""""""Add ALTer  BAckup Bottom  CAppend Change SCHANGE  CInsert CLAst COMPress COpy
COUnt COVerlay CURsor DELete CDelete Down DUPlicate Xedit EXPand EXTract Find
NFind NFINDUp NFUp CFind FINdup FUp FOrward GET Help HEXType Input POWerinput
Join SPlit SPLTJOIN  LOAD  Locate CLocate  LOWercase UPPercase  LPrefix MACRO
MErge MODify MOve MSG Next Overlay PARSE PREServe PURge PUT PUTD  Query  QUIT
READ  RECover REFRESH RENum REPeat  Replace CReplace  RESet  RESTore  RGTLEFT
RIght LEft  SAVE  SET SHift SI  SORT  SOS  STAck STATus  TOP TRAnsfer Type Up""""""
 
user_words = ""riG   rePEAT copies  put mo   rest    types   fup.    6       poweRin""
 
def find_abbreviations_length(command_table_text):
    """""" find the minimal abbreviation length for each word by counting capital letters.
        a word that does not have capital letters gets it's full length as the minimum.
    """"""
    command_table = dict()
    for word in command_table_text.split():
        abbr_len = sum(1 for c in word if c.isupper())
        if abbr_len == 0:
            abbr_len = len(word)
        command_table[word] = abbr_len
    return command_table
 
def find_abbreviations(command_table):
    """""" for each command insert all possible abbreviations""""""
    abbreviations = dict()
    for command, min_abbr_len in command_table.items():
        for l in range(min_abbr_len, len(command)+1):
            abbr = command[:l].lower()
            abbreviations[abbr] = command.upper()
    return abbreviations
 
def parse_user_string(user_string, abbreviations):
    user_words = [word.lower() for word in user_string.split()]
    commands = [abbreviations.get(user_word, ""*error*"") for user_word in user_words]
    return "" "".join(commands)
 
command_table = find_abbreviations_length(command_table_text)
abbreviations_table = find_abbreviations(command_table)
 
full_words = parse_user_string(user_words, abbreviations_table)
 
print(""user words:"", user_words)
print(""full words:"", full_words)",1987,44,"import unittest

class TestAbbreviations(unittest.TestCase):
    def setUp(self):
        self.command_table_text = """"""Add ALTer  BAckup Bottom  CAppend Change SCHANGE  CInsert CLAst COMPress COpy
        COUnt COVerlay CURsor DELete CDelete Down DUPlicate Xedit EXPand EXTract Find
        NFind NFINDUp NFUp CFind FINdup FUp FOrward GET Help HEXType Input POWerinput
        Join SPlit SPLTJOIN  LOAD  Locate CLocate  LOWercase UPPercase  LPrefix MACRO
        MErge MODify MOve MSG Next Overlay PARSE PREServe PURge PUT PUTD  Query  QUIT
        READ  RECover REFRESH RENum REPeat  Replace CReplace  RESet  RESTore  RGTLEFT
        RIght LEft  SAVE  SET SHift SI  SORT  SOS  STAck STATus  TOP TRAnsfer Type Up""""""

        self.command_table = find_abbreviations_length(self.command_table_text)
        self.abbreviations_table = find_abbreviations(self.command_table)

    def test_valid_abbreviations(self):
        user_words = ""riG rePEAT put mo rest poweRin""
        expected_output = ""RIGHT REPEAT PUT MOVE RESTORE POWERINPUT""
        result = parse_user_string(user_words, self.abbreviations_table)
        self.assertEqual(result, expected_output)

    def test_invalid_abbreviations(self):
        user_words = ""copies types fup.""
        expected_output = ""*error* *error* *error*""
        result = parse_user_string(user_words, self.abbreviations_table)
        self.assertEqual(result, expected_output)

    def test_mixed_valid_invalid(self):
        user_words = ""riG rePEAT copies put mo rest types fup. poweRin""
        expected_output = ""RIGHT REPEAT *error* PUT MOVE RESTORE *error* *error* POWERINPUT""
        result = parse_user_string(user_words, self.abbreviations_table)
        self.assertEqual(result, expected_output)

    def test_blank_input(self):
        user_words = """"
        expected_output = """"
        result = parse_user_string(user_words, self.abbreviations_table)
        self.assertEqual(result, expected_output)

    def test_null_input(self):
        user_words = None
        expected_output = """"
        result = parse_user_string(user_words or """", self.abbreviations_table)
        self.assertEqual(result, expected_output)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/abbreviations_easy/test_gpt_4o_2024_08_06_abbreviations_easy.py,CompileStatus.OK,0.0,18.64,16.0,0.15,0.45,,0.7575149536132812,16.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_abbreviations_easy', 'obj': '', 'line': 5, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/abbreviations_easy/test_gpt_4o_2024_08_06_abbreviations_easy.py', 'symbol': 'line-too-long', 'message': 'Line too long (114/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_abbreviations_easy', 'obj': '', 'line': 12, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/abbreviations_easy/test_gpt_4o_2024_08_06_abbreviations_easy.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_abbreviations_easy', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/abbreviations_easy/test_gpt_4o_2024_08_06_abbreviations_easy.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_abbreviations_easy', 'obj': 'TestAbbreviations', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 23, 'path': 'data/generated/docs_python/abbreviations_easy/test_gpt_4o_2024_08_06_abbreviations_easy.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_abbreviations_easy', 'obj': 'TestAbbreviations.setUp', 'line': 13, 'column': 29, 'endLine': 13, 'endColumn': 54, 'path': 'data/generated/docs_python/abbreviations_easy/test_gpt_4o_2024_08_06_abbreviations_easy.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'find_abbreviations_length'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_abbreviations_easy', 'obj': 'TestAbbreviations.setUp', 'line': 14, 'column': 35, 'endLine': 14, 'endColumn': 53, 'path': 'data/generated/docs_python/abbreviations_easy/test_gpt_4o_2024_08_06_abbreviations_easy.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'find_abbreviations'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_abbreviations_easy', 'obj': 'TestAbbreviations.test_valid_abbreviations', 'line': 16, 'column': 4, 'endLine': 16, 'endColumn': 32, 'path': 'data/generated/docs_python/abbreviations_easy/test_gpt_4o_2024_08_06_abbreviations_easy.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_abbreviations_easy', 'obj': 'TestAbbreviations.test_valid_abbreviations', 'line': 19, 'column': 17, 'endLine': 19, 'endColumn': 34, 'path': 'data/generated/docs_python/abbreviations_easy/test_gpt_4o_2024_08_06_abbreviations_easy.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'parse_user_string'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_abbreviations_easy', 'obj': 'TestAbbreviations.test_invalid_abbreviations', 'line': 22, 'column': 4, 'endLine': 22, 'endColumn': 34, 'path': 'data/generated/docs_python/abbreviations_easy/test_gpt_4o_2024_08_06_abbreviations_easy.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_abbreviations_easy', 'obj': 'TestAbbreviations.test_invalid_abbreviations', 'line': 25, 'column': 17, 'endLine': 25, 'endColumn': 34, 'path': 'data/generated/docs_python/abbreviations_easy/test_gpt_4o_2024_08_06_abbreviations_easy.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'parse_user_string'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_abbreviations_easy', 'obj': 'TestAbbreviations.test_mixed_valid_invalid', 'line': 28, 'column': 4, 'endLine': 28, 'endColumn': 32, 'path': 'data/generated/docs_python/abbreviations_easy/test_gpt_4o_2024_08_06_abbreviations_easy.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_abbreviations_easy', 'obj': 'TestAbbreviations.test_mixed_valid_invalid', 'line': 31, 'column': 17, 'endLine': 31, 'endColumn': 34, 'path': 'data/generated/docs_python/abbreviations_easy/test_gpt_4o_2024_08_06_abbreviations_easy.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'parse_user_string'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_abbreviations_easy', 'obj': 'TestAbbreviations.test_blank_input', 'line': 34, 'column': 4, 'endLine': 34, 'endColumn': 24, 'path': 'data/generated/docs_python/abbreviations_easy/test_gpt_4o_2024_08_06_abbreviations_easy.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_abbreviations_easy', 'obj': 'TestAbbreviations.test_blank_input', 'line': 37, 'column': 17, 'endLine': 37, 'endColumn': 34, 'path': 'data/generated/docs_python/abbreviations_easy/test_gpt_4o_2024_08_06_abbreviations_easy.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'parse_user_string'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_abbreviations_easy', 'obj': 'TestAbbreviations.test_null_input', 'line': 40, 'column': 4, 'endLine': 40, 'endColumn': 23, 'path': 'data/generated/docs_python/abbreviations_easy/test_gpt_4o_2024_08_06_abbreviations_easy.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_abbreviations_easy', 'obj': 'TestAbbreviations.test_null_input', 'line': 43, 'column': 17, 'endLine': 43, 'endColumn': 34, 'path': 'data/generated/docs_python/abbreviations_easy/test_gpt_4o_2024_08_06_abbreviations_easy.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'parse_user_string'"", 'message-id': 'E0602'}]",False
"Abbreviations, simple","The use of   abbreviations   (also sometimes called synonyms, nicknames, AKAs, or aliases)   can be an

easy way to add flexibility when specifying or using commands, sub─commands, options, etc.



For this task, the following   command table   will be used:

   add 1  alter 3  backup 2  bottom 1  Cappend 2  change 1  Schange  Cinsert 2  Clast 3
   compress 4 copy 2 count 3 Coverlay 3 cursor 3  delete 3 Cdelete 2  down 1  duplicate
   3 xEdit 1 expand 3 extract 3  find 1 Nfind 2 Nfindup 6 NfUP 3 Cfind 2 findUP 3 fUP 2
   forward 2  get  help 1 hexType 4  input 1 powerInput 3  join 1 split 2 spltJOIN load
   locate 1 Clocate 2 lowerCase 3 upperCase 3 Lprefix 2  macro  merge 2 modify 3 move 2
   msg  next 1 overlay 1 parse preserve 4 purge 3 put putD query 1 quit  read recover 3
   refresh renum 3 repeat 3 replace 1 Creplace 2 reset 3 restore 4 rgtLEFT right 2 left
   2  save  set  shift 2  si  sort  sos  stack 3 status 4 top  transfer 3  type 1  up 1



Notes concerning the above   command table:

   it can be thought of as one long literal string   (with blanks at end-of-lines)
   it may have superfluous blanks
   it may be in any case (lower/upper/mixed)
   the order of the words in the   command table   must be preserved as shown
   the user input(s) may be in any case (upper/lower/mixed)
   commands will be restricted to the Latin alphabet   (A ──► Z,   a ──► z)
   a command is followed by an optional number, which indicates the minimum abbreviation
   A valid abbreviation is a word that has:
   at least the minimum length of the word's minimum number in the command table
   compares equal (regardless of case) to the leading characters of the word in the command table
   a length not longer than the word in the command table
   ALT,   aLt,   ALTE,   and   ALTER   are all abbreviations of   ALTER 3
   AL,   ALF,   ALTERS,   TER,   and   A   aren't valid abbreviations of   ALTER 3
   The   3   indicates that any abbreviation for   ALTER   must be at least three characters
   Any word longer than five characters can't be an abbreviation for   ALTER
   o,   ov,   oVe,   over,   overL,   overla   are all acceptable abbreviations for   overlay 1
   if there isn't a number after the command,   then there isn't an abbreviation permitted


Task

   The command table needn't be verified/validated.
   Write a function to validate if the user ""words""   (given as input)   are valid   (in the command table).
   If the word   is   valid,   then return the full uppercase version of that ""word"".
   If the word isn't valid,   then return the lowercase string:    *error*        (7 characters).
   A blank input   (or a null input)   should return a null string.
   Show all output here.


An example test case to be used for this task

For a user string of:

 riG   rePEAT copies  put mo   rest    types   fup.    6       poweRin

the computer program should return the string:

 RIGHT REPEAT *error* PUT MOVE RESTORE *error* *error* *error* POWERINPUT


Other tasks related to string operations:

Metrics
 Array length
 String length
 Copy a string
 Empty string  (assignment)
Counting
 Word frequency
 Letter frequency
 Jewels and stones
 I before E except after C
 Bioinformatics/base count
 Count occurrences of a substring
 Count how many vowels and consonants occur in a string
Remove/replace
 XXXX redacted
 Conjugate a Latin verb
 Remove vowels from a string
 String interpolation (included)
 Strip block comments
 Strip comments from a string
 Strip a set of characters from a string
 Strip whitespace from a string -- top and tail
 Strip control codes and extended characters from a string
Anagrams/Derangements/shuffling
 Word wheel
 ABC problem
 Sattolo cycle
 Knuth shuffle
 Ordered words
 Superpermutation minimisation
 Textonyms (using a phone text pad)
 Anagrams
 Anagrams/Deranged anagrams
 Permutations/Derangements
Find/Search/Determine
 ABC words
 Odd words
 Word ladder
 Semordnilap
 Word search
 Wordiff  (game)
 String matching
 Tea cup rim text
 Alternade words
 Changeable words
 State name puzzle
 String comparison
 Unique characters
 Unique characters in each string
 Extract file extension
 Levenshtein distance
 Palindrome detection
 Common list elements
 Longest common suffix
 Longest common prefix
 Compare a list of strings
 Longest common substring
 Find common directory path
 Words from neighbour ones
 Change e letters to i in words
 Non-continuous subsequences
 Longest common subsequence
 Longest palindromic substrings
 Longest increasing subsequence
 Words containing ""the"" substring
 Sum of the digits of n is substring of n
 Determine if a string is numeric
 Determine if a string is collapsible
 Determine if a string is squeezable
 Determine if a string has all unique characters
 Determine if a string has all the same characters
 Longest substrings without repeating characters
 Find words which contains all the vowels
 Find words which contains most consonants
 Find words which contains more than 3 vowels
 Find words which first and last three letters are equals
 Find words which odd letters are consonants and even letters are vowels or vice_versa
Formatting
 Substring
 Rep-string
 Word wrap
 String case
 Align columns
 Literals/String
 Repeat a string
 Brace expansion
 Brace expansion using ranges
 Reverse a string
 Phrase reversals
 Comma quibbling
 Special characters
 String concatenation
 Substring/Top and tail
 Commatizing numbers
 Reverse words in a string
 Suffixation of decimal numbers
 Long literals, with continuations
 Numerical and alphabetical suffixes
 Abbreviations, easy
 Abbreviations, simple
 Abbreviations, automatic
Song lyrics/poems/Mad Libs/phrases
 Mad Libs
 Magic 8-ball
 99 Bottles of Beer
 The Name Game (a song)
 The Old lady swallowed a fly
 The Twelve Days of Christmas
Tokenize
 Text between
 Tokenize a string
 Word break problem
 Tokenize a string with escaping
 Split a character string based on change of character
Sequences
 Show ASCII table
 De Bruijn sequences
 Self-referential sequences
 Generate lower case ASCII alphabet



",Python," 
 
command_table_text = """"""add 1  alter 3  backup 2  bottom 1  Cappend 2  change 1  Schange  Cinsert 2  Clast 3
   compress 4 copy 2 count 3 Coverlay 3 cursor 3  delete 3 Cdelete 2  down 1  duplicate
   3 xEdit 1 expand 3 extract 3  find 1 Nfind 2 Nfindup 6 NfUP 3 Cfind 2 findUP 3 fUP 2
   forward 2  get  help 1 hexType 4  input 1 powerInput 3  join 1 split 2 spltJOIN load
   locate 1 Clocate 2 lowerCase 3 upperCase 3 Lprefix 2  macro  merge 2 modify 3 move 2
   msg  next 1 overlay 1 parse preserve 4 purge 3 put putD query 1 quit  read recover 3
   refresh renum 3 repeat 3 replace 1 Creplace 2 reset 3 restore 4 rgtLEFT right 2 left
   2  save  set  shift 2  si  sort  sos  stack 3 status 4 top  transfer 3  type 1  up 1""""""
 
user_words = ""riG   rePEAT copies  put mo   rest    types   fup.    6       poweRin""
 
 
def find_abbreviations_length(command_table_text):
    """""" find the minimal abbreviation length for each word.
        a word that does not have minimum abbreviation length specified
        gets it's full lengths as the minimum.
    """"""
    command_table = dict()
    input_iter = iter(command_table_text.split())
 
    word = None
    try:
        while True:
            if word is None:
                word = next(input_iter)
            abbr_len = next(input_iter, len(word))
            try:
                command_table[word] = int(abbr_len)
                word = None
            except ValueError:
                command_table[word] = len(word)
                word = abbr_len
    except StopIteration:
        pass
    return command_table
 
 
def find_abbreviations(command_table):
    """""" for each command insert all possible abbreviations""""""
    abbreviations = dict()
    for command, min_abbr_len in command_table.items():
        for l in range(min_abbr_len, len(command)+1):
            abbr = command[:l].lower()
            abbreviations[abbr] = command.upper()
    return abbreviations
 
 
def parse_user_string(user_string, abbreviations):
    user_words = [word.lower() for word in user_string.split()]
    commands = [abbreviations.get(user_word, ""*error*"") for user_word in user_words]
    return "" "".join(commands)
 
 
command_table = find_abbreviations_length(command_table_text)
abbreviations_table = find_abbreviations(command_table)
 
full_words = parse_user_string(user_words, abbreviations_table)
 
print(""user words:"", user_words)
print(""full words:"", full_words)
 ",2424,63,"import unittest

class TestAbbreviations(unittest.TestCase):
    def setUp(self):
        self.command_table_text = """"""add 1  alter 3  backup 2  bottom 1  Cappend 2  change 1  Schange  Cinsert 2  Clast 3
           compress 4 copy 2 count 3 Coverlay 3 cursor 3  delete 3 Cdelete 2  down 1  duplicate
           3 xEdit 1 expand 3 extract 3  find 1 Nfind 2 Nfindup 6 NfUP 3 Cfind 2 findUP 3 fUP 2
           forward 2  get  help 1 hexType 4  input 1 powerInput 3  join 1 split 2 spltJOIN load
           locate 1 Clocate 2 lowerCase 3 upperCase 3 Lprefix 2  macro  merge 2 modify 3 move 2
           msg  next 1 overlay 1 parse preserve 4 purge 3 put putD query 1 quit  read recover 3
           refresh renum 3 repeat 3 replace 1 Creplace 2 reset 3 restore 4 rgtLEFT right 2 left
           2  save  set  shift 2  si  sort  sos  stack 3 status 4 top  transfer 3  type 1  up 1""""""

        self.command_table = find_abbreviations_length(self.command_table_text)
        self.abbreviations_table = find_abbreviations(self.command_table)

    def test_valid_abbreviations(self):
        user_words = ""riG rePEAT put mo rest poweRin""
        expected_output = ""RIGHT REPEAT PUT MOVE RESTORE POWERINPUT""
        result = parse_user_string(user_words, self.abbreviations_table)
        self.assertEqual(result, expected_output)

    def test_invalid_abbreviations(self):
        user_words = ""copies types fup. 6""
        expected_output = ""*error* *error* *error* *error*""
        result = parse_user_string(user_words, self.abbreviations_table)
        self.assertEqual(result, expected_output)

    def test_mixed_valid_invalid(self):
        user_words = ""riG rePEAT copies put mo rest types fup. 6 poweRin""
        expected_output = ""RIGHT REPEAT *error* PUT MOVE RESTORE *error* *error* *error* POWERINPUT""
        result = parse_user_string(user_words, self.abbreviations_table)
        self.assertEqual(result, expected_output)

    def test_empty_input(self):
        user_words = """"
        expected_output = """"
        result = parse_user_string(user_words, self.abbreviations_table)
        self.assertEqual(result, expected_output)

    def test_null_input(self):
        user_words = None
        expected_output = """"
        result = parse_user_string(user_words, self.abbreviations_table)
        self.assertEqual(result, expected_output)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/abbreviations_simple/test_gpt_4o_2024_08_06_abbreviations_simple.py,CompileStatus.OK,0.0,15.94,14.81,0.15,0.45,,0.7218937873840332,16.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_abbreviations_simple', 'obj': '', 'line': 5, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/abbreviations_simple/test_gpt_4o_2024_08_06_abbreviations_simple.py', 'symbol': 'line-too-long', 'message': 'Line too long (121/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_abbreviations_simple', 'obj': '', 'line': 13, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/abbreviations_simple/test_gpt_4o_2024_08_06_abbreviations_simple.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_abbreviations_simple', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/abbreviations_simple/test_gpt_4o_2024_08_06_abbreviations_simple.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_abbreviations_simple', 'obj': 'TestAbbreviations', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 23, 'path': 'data/generated/docs_python/abbreviations_simple/test_gpt_4o_2024_08_06_abbreviations_simple.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_abbreviations_simple', 'obj': 'TestAbbreviations.setUp', 'line': 14, 'column': 29, 'endLine': 14, 'endColumn': 54, 'path': 'data/generated/docs_python/abbreviations_simple/test_gpt_4o_2024_08_06_abbreviations_simple.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'find_abbreviations_length'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_abbreviations_simple', 'obj': 'TestAbbreviations.setUp', 'line': 15, 'column': 35, 'endLine': 15, 'endColumn': 53, 'path': 'data/generated/docs_python/abbreviations_simple/test_gpt_4o_2024_08_06_abbreviations_simple.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'find_abbreviations'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_abbreviations_simple', 'obj': 'TestAbbreviations.test_valid_abbreviations', 'line': 17, 'column': 4, 'endLine': 17, 'endColumn': 32, 'path': 'data/generated/docs_python/abbreviations_simple/test_gpt_4o_2024_08_06_abbreviations_simple.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_abbreviations_simple', 'obj': 'TestAbbreviations.test_valid_abbreviations', 'line': 20, 'column': 17, 'endLine': 20, 'endColumn': 34, 'path': 'data/generated/docs_python/abbreviations_simple/test_gpt_4o_2024_08_06_abbreviations_simple.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'parse_user_string'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_abbreviations_simple', 'obj': 'TestAbbreviations.test_invalid_abbreviations', 'line': 23, 'column': 4, 'endLine': 23, 'endColumn': 34, 'path': 'data/generated/docs_python/abbreviations_simple/test_gpt_4o_2024_08_06_abbreviations_simple.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_abbreviations_simple', 'obj': 'TestAbbreviations.test_invalid_abbreviations', 'line': 26, 'column': 17, 'endLine': 26, 'endColumn': 34, 'path': 'data/generated/docs_python/abbreviations_simple/test_gpt_4o_2024_08_06_abbreviations_simple.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'parse_user_string'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_abbreviations_simple', 'obj': 'TestAbbreviations.test_mixed_valid_invalid', 'line': 29, 'column': 4, 'endLine': 29, 'endColumn': 32, 'path': 'data/generated/docs_python/abbreviations_simple/test_gpt_4o_2024_08_06_abbreviations_simple.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_abbreviations_simple', 'obj': 'TestAbbreviations.test_mixed_valid_invalid', 'line': 32, 'column': 17, 'endLine': 32, 'endColumn': 34, 'path': 'data/generated/docs_python/abbreviations_simple/test_gpt_4o_2024_08_06_abbreviations_simple.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'parse_user_string'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_abbreviations_simple', 'obj': 'TestAbbreviations.test_empty_input', 'line': 35, 'column': 4, 'endLine': 35, 'endColumn': 24, 'path': 'data/generated/docs_python/abbreviations_simple/test_gpt_4o_2024_08_06_abbreviations_simple.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_abbreviations_simple', 'obj': 'TestAbbreviations.test_empty_input', 'line': 38, 'column': 17, 'endLine': 38, 'endColumn': 34, 'path': 'data/generated/docs_python/abbreviations_simple/test_gpt_4o_2024_08_06_abbreviations_simple.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'parse_user_string'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_abbreviations_simple', 'obj': 'TestAbbreviations.test_null_input', 'line': 41, 'column': 4, 'endLine': 41, 'endColumn': 23, 'path': 'data/generated/docs_python/abbreviations_simple/test_gpt_4o_2024_08_06_abbreviations_simple.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_abbreviations_simple', 'obj': 'TestAbbreviations.test_null_input', 'line': 44, 'column': 17, 'endLine': 44, 'endColumn': 34, 'path': 'data/generated/docs_python/abbreviations_simple/test_gpt_4o_2024_08_06_abbreviations_simple.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'parse_user_string'"", 'message-id': 'E0602'}]",False
Abundant odd numbers,"An Abundant number is a number n for which the   sum of divisors   σ(n) > 2n,

or,   equivalently,   the   sum of proper divisors   (or aliquot sum)       s(n) > n.



E.G.

12   is abundant, it has the proper divisors     1,2,3,4 & 6     which sum to   16   ( > 12 or n);

       or alternately,   has the sigma sum of   1,2,3,4,6 & 12   which sum to   28   ( > 24 or 2n).



Abundant numbers are common, though even abundant numbers seem to be much more common than odd abundant numbers.

To make things more interesting, this task is specifically about finding   odd abundant numbers.



Task
Find and display here: at least the first 25 abundant odd numbers and either their proper divisor sum or sigma sum.
Find and display here: the one thousandth abundant odd number and either its proper divisor sum or sigma sum.
Find and display here: the first abundant odd number greater than one billion (109) and either its proper divisor sum or sigma sum.


References

   OEIS:A005231: Odd abundant numbers (odd numbers n whose sum of divisors exceeds 2n)
   American Journal of Mathematics, Vol. 35, No. 4 (Oct., 1913), pp. 413-422 - Finiteness of the Odd Perfect and Primitive Abundant Numbers with n Distinct Prime Factors (LE Dickson)

",Python,"#!/usr/bin/python
# Abundant odd numbers - Python
 
oddNumber  = 1
aCount  = 0
dSum  = 0
 
from math import sqrt
 
def divisorSum(n):
    sum = 1
    i = int(sqrt(n)+1)
 
    for d in range (2, i):
        if n % d == 0:
            sum += d
            otherD = n // d
            if otherD != d:
                sum += otherD
    return sum
 
print (""The first 25 abundant odd numbers:"")
while aCount  < 25:
    dSum  = divisorSum(oddNumber )
    if dSum  > oddNumber :
        aCount  += 1
        print(""{0:5} proper divisor sum: {1}"". format(oddNumber ,dSum ))
    oddNumber  += 2
 
while aCount  < 1000:
    dSum  = divisorSum(oddNumber )
    if dSum  > oddNumber :
        aCount  += 1
    oddNumber  += 2
print (""\n1000th abundant odd number:"")
print (""    "",(oddNumber - 2),"" proper divisor sum: "",dSum)
 
oddNumber  = 1000000001
found  = False
while not found :
    dSum  = divisorSum(oddNumber )
    if dSum  > oddNumber :
        found  = True
        print (""\nFirst abundant odd number > 1 000 000 000:"")
        print (""    "",oddNumber,"" proper divisor sum: "",dSum)
    oddNumber  += 2",1100,46,"import unittest
from abundant_odd_numbers import divisorSum

class TestAbundantOddNumbers(unittest.TestCase):

    def test_divisor_sum(self):
        # Test divisorSum function with known values
        self.assertEqual(divisorSum(1), 1)
        self.assertEqual(divisorSum(3), 1)
        self.assertEqual(divisorSum(5), 1)
        self.assertEqual(divisorSum(7), 1)
        self.assertEqual(divisorSum(9), 4)  # 1 + 3
        self.assertEqual(divisorSum(15), 9)  # 1 + 3 + 5

    def test_first_25_abundant_odd_numbers(self):
        # Expected first 25 abundant odd numbers and their proper divisor sums
        expected_results = [
            (945, 975), (1575, 1965), (2205, 2655), (2835, 3459), (3465, 4179),
            (4095, 4965), (4725, 5775), (5355, 6585), (5775, 7137), (6435, 7995),
            (6615, 8265), (6825, 8559), (7245, 9111), (7425, 9369), (7875, 9945),
            (8190, 10395), (8505, 10851), (8925, 11439), (9555, 12285), (10395, 13365),
            (10545, 13545), (11385, 14625), (11655, 14985), (12285, 15885), (12615, 16335)
        ]

        odd_number = 1
        a_count = 0
        results = []

        while a_count < 25:
            d_sum = divisorSum(odd_number)
            if d_sum > odd_number:
                results.append((odd_number, d_sum))
                a_count += 1
            odd_number += 2

        self.assertEqual(results, expected_results)

    def test_1000th_abundant_odd_number(self):
        # Expected 1000th abundant odd number and its proper divisor sum
        expected_result = (2480625, 3359235)

        odd_number = 1
        a_count = 0

        while a_count < 1000:
            d_sum = divisorSum(odd_number)
            if d_sum > odd_number:
                a_count += 1
            odd_number += 2

        self.assertEqual((odd_number - 2, d_sum), expected_result)

    def test_first_abundant_odd_number_greater_than_one_billion(self):
        # Expected first abundant odd number greater than one billion and its proper divisor sum
        expected_result = (1000000001, 1342177281)

        odd_number = 1000000001
        found = False

        while not found:
            d_sum = divisorSum(odd_number)
            if d_sum > odd_number:
                found = True
                result = (odd_number, d_sum)
            odd_number += 2

        self.assertEqual(result, expected_result)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/abundant_odd_numbers/test_gpt_4o_2024_08_06_abundant_odd_numbers.py,CompileStatus.OK,0.0,,,0.18,2.25,25.0,14.20084023475647,16.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_abundant_odd_numbers', 'obj': '', 'line': 24, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/abundant_odd_numbers/test_gpt_4o_2024_08_06_abundant_odd_numbers.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_abundant_odd_numbers', 'obj': '', 'line': 28, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/abundant_odd_numbers/test_gpt_4o_2024_08_06_abundant_odd_numbers.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_abundant_odd_numbers', 'obj': '', 'line': 35, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/abundant_odd_numbers/test_gpt_4o_2024_08_06_abundant_odd_numbers.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_abundant_odd_numbers', 'obj': '', 'line': 41, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/abundant_odd_numbers/test_gpt_4o_2024_08_06_abundant_odd_numbers.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_abundant_odd_numbers', 'obj': '', 'line': 44, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/abundant_odd_numbers/test_gpt_4o_2024_08_06_abundant_odd_numbers.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_abundant_odd_numbers', 'obj': '', 'line': 50, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/abundant_odd_numbers/test_gpt_4o_2024_08_06_abundant_odd_numbers.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_abundant_odd_numbers', 'obj': '', 'line': 56, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/abundant_odd_numbers/test_gpt_4o_2024_08_06_abundant_odd_numbers.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_abundant_odd_numbers', 'obj': '', 'line': 59, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/abundant_odd_numbers/test_gpt_4o_2024_08_06_abundant_odd_numbers.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_abundant_odd_numbers', 'obj': '', 'line': 66, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/abundant_odd_numbers/test_gpt_4o_2024_08_06_abundant_odd_numbers.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_abundant_odd_numbers', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/abundant_odd_numbers/test_gpt_4o_2024_08_06_abundant_odd_numbers.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_abundant_odd_numbers', 'obj': 'TestAbundantOddNumbers', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 28, 'path': 'data/generated/docs_python/abundant_odd_numbers/test_gpt_4o_2024_08_06_abundant_odd_numbers.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_abundant_odd_numbers', 'obj': 'TestAbundantOddNumbers.test_divisor_sum', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 24, 'path': 'data/generated/docs_python/abundant_odd_numbers/test_gpt_4o_2024_08_06_abundant_odd_numbers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_abundant_odd_numbers', 'obj': 'TestAbundantOddNumbers.test_first_25_abundant_odd_numbers', 'line': 15, 'column': 4, 'endLine': 15, 'endColumn': 42, 'path': 'data/generated/docs_python/abundant_odd_numbers/test_gpt_4o_2024_08_06_abundant_odd_numbers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_abundant_odd_numbers', 'obj': 'TestAbundantOddNumbers.test_1000th_abundant_odd_number', 'line': 38, 'column': 4, 'endLine': 38, 'endColumn': 39, 'path': 'data/generated/docs_python/abundant_odd_numbers/test_gpt_4o_2024_08_06_abundant_odd_numbers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_abundant_odd_numbers', 'obj': 'TestAbundantOddNumbers.test_first_abundant_odd_number_greater_than_one_billion', 'line': 53, 'column': 4, 'endLine': 53, 'endColumn': 63, 'path': 'data/generated/docs_python/abundant_odd_numbers/test_gpt_4o_2024_08_06_abundant_odd_numbers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_abundant_odd_numbers', 'obj': 'TestAbundantOddNumbers.test_first_abundant_odd_number_greater_than_one_billion', 'line': 67, 'column': 25, 'endLine': 67, 'endColumn': 31, 'path': 'data/generated/docs_python/abundant_odd_numbers/test_gpt_4o_2024_08_06_abundant_odd_numbers.py', 'symbol': 'possibly-used-before-assignment', 'message': ""Possibly using variable 'result' before assignment"", 'message-id': 'E0606'}]",False
Active object,"In object-oriented programming an object is active when its state depends on clock. Usually an active object encapsulates a task that updates the object's state. To the outer world the object looks like a normal object with methods that can be called from outside. Implementation of such methods must have a certain synchronization mechanism with the encapsulated task in order to prevent object's state corruption.

A typical instance of an active object is an animation widget. The widget state changes with the time, while as an object it has all properties of a normal widget.

The task

Implement an active integrator object. The object has an input and output. The input can be set using the method Input. The input is a function of time. The output can be queried using the method Output. The object integrates its input over the time and the result becomes the object's output. So if the input is K(t) and the output is S, the object state S is changed to S + (K(t1) + K(t0)) * (t1 - t0) / 2, i.e. it integrates K using the trapeze method. Initially K is constant 0 and S is 0.

In order to test the object:

 set its input to sin (2π f t), where the frequency f=0.5Hz. The phase is irrelevant.
 wait 2s
 set the input to constant 0
 wait 0.5s
Verify that now the object's output is approximately 0 (the sine has the period of 2s). The accuracy of the result will depend on the OS scheduler time slicing and the accuracy of the clock.
",Python,"from time import time, sleep
from threading import Thread
 
class Integrator(Thread):
    'continuously integrate a function `K`, at each `interval` seconds'
    def __init__(self, K=lambda t:0, interval=1e-4):
        Thread.__init__(self)
        self.interval  = interval
        self.K   = K
        self.S   = 0.0
        self.__run = True
        self.start()
 
    def run(self):
        ""entry point for the thread""
        interval = self.interval
        start = time()
        t0, k0 = 0, self.K(0)
        while self.__run:
            sleep(interval)
            t1 = time() - start
            k1 = self.K(t1)
            self.S += (k1 + k0)*(t1 - t0)/2.0
            t0, k0 = t1, k1
 
    def join(self):
        self.__run = False
        Thread.join(self)
 
if __name__ == ""__main__"":
    from math import sin, pi
 
    ai = Integrator(lambda t: sin(pi*t))
    sleep(2)
    print(ai.S)
    ai.K = lambda t: 0
    sleep(0.5)
    print(ai.S)",956,38,"import unittest
from time import sleep
from math import sin, pi
from active_object import Integrator

class TestActiveIntegrator(unittest.TestCase):

    def test_integration_of_sine_wave(self):
        # Frequency of 0.5 Hz
        frequency = 0.5
        ai = Integrator(lambda t: sin(2 * pi * frequency * t))

        # Wait for 2 seconds to integrate the sine wave
        sleep(2)

        # Set input to constant 0
        ai.K = lambda t: 0

        # Wait for 0.5 seconds
        sleep(0.5)

        # Check if the output is approximately 0
        self.assertAlmostEqual(ai.S, 0, delta=0.1)

        # Stop the integrator thread
        ai.join()

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/active_object/test_gpt_4o_2024_08_06_active_object.py,CompileStatus.OK,0.0,82.61,75.81,0.07,0.25,100.0,3.1034412384033203,8.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_active_object', 'obj': '', 'line': 12, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/active_object/test_gpt_4o_2024_08_06_active_object.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_active_object', 'obj': '', 'line': 15, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/active_object/test_gpt_4o_2024_08_06_active_object.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_active_object', 'obj': '', 'line': 18, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/active_object/test_gpt_4o_2024_08_06_active_object.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_active_object', 'obj': '', 'line': 21, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/active_object/test_gpt_4o_2024_08_06_active_object.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_active_object', 'obj': '', 'line': 24, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/active_object/test_gpt_4o_2024_08_06_active_object.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_active_object', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/active_object/test_gpt_4o_2024_08_06_active_object.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_active_object', 'obj': 'TestActiveIntegrator', 'line': 6, 'column': 0, 'endLine': 6, 'endColumn': 26, 'path': 'data/generated/docs_python/active_object/test_gpt_4o_2024_08_06_active_object.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_active_object', 'obj': 'TestActiveIntegrator.test_integration_of_sine_wave', 'line': 8, 'column': 4, 'endLine': 8, 'endColumn': 37, 'path': 'data/generated/docs_python/active_object/test_gpt_4o_2024_08_06_active_object.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Additive primes,"Definitions
In mathematics, additive primes are prime numbers for which the sum of their decimal digits are also primes.



Task
Write a program to determine (and show here) all additive primes less than 500.

Optionally, show the number of additive primes.



Also see

   the OEIS entry:   A046704 additive primes.
   the prime-numbers entry:   additive primes.
   the geeks for geeks entry: additive prime number.
   the prime-numbers fandom: additive primes.

",Python,"def is_prime(n: int) -> bool:
    if n <= 3:
        return n > 1
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i ** 2 <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True
 
def digit_sum(n: int) -> int:
    sum = 0
    while n > 0:
        sum += n % 10
        n //= 10
    return sum
 
def main() -> None:
    additive_primes = 0
    for i in range(2, 500):
        if is_prime(i) and is_prime(digit_sum(i)):
            additive_primes += 1
            print(i, end="" "")
    print(f""\nFound {additive_primes} additive primes less than 500"")
 
if __name__ == ""__main__"":
    main()",664,29,"import unittest
from additive_primes import is_prime, digit_sum

class TestAdditivePrimes(unittest.TestCase):

    def test_is_prime(self):
        # Test known primes
        self.assertTrue(is_prime(2))
        self.assertTrue(is_prime(3))
        self.assertTrue(is_prime(5))
        self.assertTrue(is_prime(7))
        self.assertTrue(is_prime(11))
        self.assertTrue(is_prime(13))
        self.assertTrue(is_prime(17))
        self.assertTrue(is_prime(19))
        self.assertTrue(is_prime(23))
        self.assertTrue(is_prime(29))

        # Test known non-primes
        self.assertFalse(is_prime(0))
        self.assertFalse(is_prime(1))
        self.assertFalse(is_prime(4))
        self.assertFalse(is_prime(6))
        self.assertFalse(is_prime(8))
        self.assertFalse(is_prime(9))
        self.assertFalse(is_prime(10))
        self.assertFalse(is_prime(12))
        self.assertFalse(is_prime(14))
        self.assertFalse(is_prime(15))
        self.assertFalse(is_prime(16))
        self.assertFalse(is_prime(18))
        self.assertFalse(is_prime(20))

    def test_digit_sum(self):
        # Test digit sums
        self.assertEqual(digit_sum(0), 0)
        self.assertEqual(digit_sum(1), 1)
        self.assertEqual(digit_sum(12), 3)
        self.assertEqual(digit_sum(123), 6)
        self.assertEqual(digit_sum(456), 15)
        self.assertEqual(digit_sum(789), 24)
        self.assertEqual(digit_sum(999), 27)

    def test_additive_primes(self):
        # Known additive primes less than 500
        expected_additive_primes = [
            2, 3, 5, 7, 11, 17, 23, 29, 41, 43, 47, 61, 67, 83, 89, 101, 113,
            131, 137, 139, 167, 173, 179, 181, 191, 223, 229, 233, 239, 263,
            269, 271, 281, 283, 293, 311, 313, 317, 337, 347, 353, 359, 367,
            373, 379, 383, 389, 419, 421, 431, 433, 439, 461, 463, 467, 479,
            487, 491, 499
        ]

        additive_primes = []
        for i in range(2, 500):
            if is_prime(i) and is_prime(digit_sum(i)):
                additive_primes.append(i)

        self.assertEqual(additive_primes, expected_additive_primes)
        self.assertEqual(len(additive_primes), len(expected_additive_primes))

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/additive_primes/test_gpt_4o_2024_08_06_additive_primes.py,CompileStatus.OK,0.0,87.32,83.87,0.64,2.46,66.67,0.6564171314239502,12.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_additive_primes', 'obj': '', 'line': 18, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/additive_primes/test_gpt_4o_2024_08_06_additive_primes.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_additive_primes', 'obj': '', 'line': 47, 'column': 77, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/additive_primes/test_gpt_4o_2024_08_06_additive_primes.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_additive_primes', 'obj': '', 'line': 48, 'column': 76, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/additive_primes/test_gpt_4o_2024_08_06_additive_primes.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_additive_primes', 'obj': '', 'line': 49, 'column': 76, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/additive_primes/test_gpt_4o_2024_08_06_additive_primes.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_additive_primes', 'obj': '', 'line': 50, 'column': 76, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/additive_primes/test_gpt_4o_2024_08_06_additive_primes.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_additive_primes', 'obj': '', 'line': 53, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/additive_primes/test_gpt_4o_2024_08_06_additive_primes.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_additive_primes', 'obj': '', 'line': 58, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/additive_primes/test_gpt_4o_2024_08_06_additive_primes.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_additive_primes', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/additive_primes/test_gpt_4o_2024_08_06_additive_primes.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_additive_primes', 'obj': 'TestAdditivePrimes', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 24, 'path': 'data/generated/docs_python/additive_primes/test_gpt_4o_2024_08_06_additive_primes.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_additive_primes', 'obj': 'TestAdditivePrimes.test_is_prime', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 21, 'path': 'data/generated/docs_python/additive_primes/test_gpt_4o_2024_08_06_additive_primes.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_additive_primes', 'obj': 'TestAdditivePrimes.test_digit_sum', 'line': 34, 'column': 4, 'endLine': 34, 'endColumn': 22, 'path': 'data/generated/docs_python/additive_primes/test_gpt_4o_2024_08_06_additive_primes.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_additive_primes', 'obj': 'TestAdditivePrimes.test_additive_primes', 'line': 44, 'column': 4, 'endLine': 44, 'endColumn': 28, 'path': 'data/generated/docs_python/additive_primes/test_gpt_4o_2024_08_06_additive_primes.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Almost prime,"A   k-Almost-prime   is a natural number  



n


{\displaystyle n}

   that is the product of  



k


{\displaystyle k}

   (possibly identical) primes.



Example

1-almost-primes,   where  



k
=
1


{\displaystyle k=1}

,   are the prime numbers themselves.

2-almost-primes,   where  



k
=
2


{\displaystyle k=2}

,   are the   semiprimes.



Task

Write a function/method/subroutine/... that generates k-almost primes and use it to create a table here of the first ten members of k-Almost primes for  



1
<=
K
<=
5


{\displaystyle 1<=K<=5}

.



Related tasks

   Semiprime
   Category:Prime Numbers

",Python,"from prime_decomposition import decompose
from itertools import islice, count
try:
    from functools import reduce
except:
    pass
 
 
def almostprime(n, k=2):
    d = decompose(n)
    try:
        terms = [next(d) for i in range(k)]
        return reduce(int.__mul__, terms, 1) == n
    except:
        return False
 
if __name__ == '__main__':
    for k in range(1,6):
        print('%i: %r' % (k, list(islice((n for n in count() if almostprime(n, k)), 10))))",465,19,"import unittest
from almost_prime import almostprime

class TestAlmostPrime(unittest.TestCase):

    def test_1_almost_prime(self):
        # 1-almost-primes are prime numbers
        expected_1_almost_primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]
        result = list(islice((n for n in count(2) if almostprime(n, 1)), 10))
        self.assertEqual(result, expected_1_almost_primes)

    def test_2_almost_prime(self):
        # 2-almost-primes are semiprimes
        expected_2_almost_primes = [4, 6, 9, 10, 14, 15, 21, 22, 25, 26]
        result = list(islice((n for n in count(2) if almostprime(n, 2)), 10))
        self.assertEqual(result, expected_2_almost_primes)

    def test_3_almost_prime(self):
        # 3-almost-primes
        expected_3_almost_primes = [8, 12, 18, 20, 27, 28, 30, 32, 44, 45]
        result = list(islice((n for n in count(2) if almostprime(n, 3)), 10))
        self.assertEqual(result, expected_3_almost_primes)

    def test_4_almost_prime(self):
        # 4-almost-primes
        expected_4_almost_primes = [16, 24, 36, 40, 54, 56, 60, 64, 72, 80]
        result = list(islice((n for n in count(2) if almostprime(n, 4)), 10))
        self.assertEqual(result, expected_4_almost_primes)

    def test_5_almost_prime(self):
        # 5-almost-primes
        expected_5_almost_primes = [32, 48, 72, 80, 108, 112, 120, 128, 144, 160]
        result = list(islice((n for n in count(2) if almostprime(n, 5)), 10))
        self.assertEqual(result, expected_5_almost_primes)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/almost_prime/test_gpt_4o_2024_08_06_almost_prime.py,CompileStatus.OK,0.0,7.32,4.92,0.2,1.67,,0.750817060470581,17.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_almost_prime', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/almost_prime/test_gpt_4o_2024_08_06_almost_prime.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_almost_prime', 'obj': 'TestAlmostPrime', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 21, 'path': 'data/generated/docs_python/almost_prime/test_gpt_4o_2024_08_06_almost_prime.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_almost_prime', 'obj': 'TestAlmostPrime.test_1_almost_prime', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 27, 'path': 'data/generated/docs_python/almost_prime/test_gpt_4o_2024_08_06_almost_prime.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_almost_prime', 'obj': 'TestAlmostPrime.test_1_almost_prime', 'line': 9, 'column': 22, 'endLine': 9, 'endColumn': 28, 'path': 'data/generated/docs_python/almost_prime/test_gpt_4o_2024_08_06_almost_prime.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'islice'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_almost_prime', 'obj': 'TestAlmostPrime.test_1_almost_prime', 'line': 9, 'column': 41, 'endLine': 9, 'endColumn': 46, 'path': 'data/generated/docs_python/almost_prime/test_gpt_4o_2024_08_06_almost_prime.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'count'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_almost_prime', 'obj': 'TestAlmostPrime.test_2_almost_prime', 'line': 12, 'column': 4, 'endLine': 12, 'endColumn': 27, 'path': 'data/generated/docs_python/almost_prime/test_gpt_4o_2024_08_06_almost_prime.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_almost_prime', 'obj': 'TestAlmostPrime.test_2_almost_prime', 'line': 15, 'column': 22, 'endLine': 15, 'endColumn': 28, 'path': 'data/generated/docs_python/almost_prime/test_gpt_4o_2024_08_06_almost_prime.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'islice'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_almost_prime', 'obj': 'TestAlmostPrime.test_2_almost_prime', 'line': 15, 'column': 41, 'endLine': 15, 'endColumn': 46, 'path': 'data/generated/docs_python/almost_prime/test_gpt_4o_2024_08_06_almost_prime.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'count'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_almost_prime', 'obj': 'TestAlmostPrime.test_3_almost_prime', 'line': 18, 'column': 4, 'endLine': 18, 'endColumn': 27, 'path': 'data/generated/docs_python/almost_prime/test_gpt_4o_2024_08_06_almost_prime.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_almost_prime', 'obj': 'TestAlmostPrime.test_3_almost_prime', 'line': 21, 'column': 22, 'endLine': 21, 'endColumn': 28, 'path': 'data/generated/docs_python/almost_prime/test_gpt_4o_2024_08_06_almost_prime.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'islice'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_almost_prime', 'obj': 'TestAlmostPrime.test_3_almost_prime', 'line': 21, 'column': 41, 'endLine': 21, 'endColumn': 46, 'path': 'data/generated/docs_python/almost_prime/test_gpt_4o_2024_08_06_almost_prime.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'count'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_almost_prime', 'obj': 'TestAlmostPrime.test_4_almost_prime', 'line': 24, 'column': 4, 'endLine': 24, 'endColumn': 27, 'path': 'data/generated/docs_python/almost_prime/test_gpt_4o_2024_08_06_almost_prime.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_almost_prime', 'obj': 'TestAlmostPrime.test_4_almost_prime', 'line': 27, 'column': 22, 'endLine': 27, 'endColumn': 28, 'path': 'data/generated/docs_python/almost_prime/test_gpt_4o_2024_08_06_almost_prime.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'islice'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_almost_prime', 'obj': 'TestAlmostPrime.test_4_almost_prime', 'line': 27, 'column': 41, 'endLine': 27, 'endColumn': 46, 'path': 'data/generated/docs_python/almost_prime/test_gpt_4o_2024_08_06_almost_prime.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'count'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_almost_prime', 'obj': 'TestAlmostPrime.test_5_almost_prime', 'line': 30, 'column': 4, 'endLine': 30, 'endColumn': 27, 'path': 'data/generated/docs_python/almost_prime/test_gpt_4o_2024_08_06_almost_prime.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_almost_prime', 'obj': 'TestAlmostPrime.test_5_almost_prime', 'line': 33, 'column': 22, 'endLine': 33, 'endColumn': 28, 'path': 'data/generated/docs_python/almost_prime/test_gpt_4o_2024_08_06_almost_prime.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'islice'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_almost_prime', 'obj': 'TestAlmostPrime.test_5_almost_prime', 'line': 33, 'column': 41, 'endLine': 33, 'endColumn': 46, 'path': 'data/generated/docs_python/almost_prime/test_gpt_4o_2024_08_06_almost_prime.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'count'"", 'message-id': 'E0602'}]",False
Amicable pairs,"Two integers



N


{\displaystyle N}

 and



M


{\displaystyle M}

 are said to be amicable pairs if



N
≠
M


{\displaystyle N\neq M}

 and the sum of the proper divisors of



N


{\displaystyle N}

 (




s
u
m

(

p
r
o
p
D
i
v
s

(
N
)
)


{\displaystyle \mathrm {sum} (\mathrm {propDivs} (N))}

)



=
M


{\displaystyle =M}

 as well as




s
u
m

(

p
r
o
p
D
i
v
s

(
M
)
)
=
N


{\displaystyle \mathrm {sum} (\mathrm {propDivs} (M))=N}

.



Example

1184 and 1210 are an amicable pair, with proper divisors:

   1, 2, 4, 8, 16, 32, 37, 74, 148, 296, 592   and
   1, 2, 5, 10, 11, 22, 55, 110, 121, 242, 605   respectively.


Task

Calculate and show here the Amicable pairs below 20,000; (there are eight).



Related tasks
 Proper divisors
 Abundant, deficient and perfect number classifications
 Aliquot sequence classifications and its amicable classification.

",Python,"from proper_divisors import proper_divs
 
def amicable(rangemax=20000):
    n2divsum = {n: sum(proper_divs(n)) for n in range(1, rangemax + 1)}
    for num, divsum in n2divsum.items():
        if num < divsum and divsum <= rangemax and n2divsum[divsum] == num:
            yield num, divsum
 
if __name__ == '__main__':
    for num, divsum in amicable():
        print('Amicable pair: %i and %i With proper divisors:\n    %r\n    %r'
              % (num, divsum, sorted(proper_divs(num)), sorted(proper_divs(divsum))))",519,12,"import unittest
from amicable_pairs import amicable
from proper_divisors import proper_divs

class TestAmicablePairs(unittest.TestCase):

    def test_amicable_pairs_below_20000(self):
        expected_pairs = [
            (220, 284),
            (1184, 1210),
            (2620, 2924),
            (5020, 5564),
            (6232, 6368),
            (10744, 10856),
            (12285, 14595),
            (17296, 18416)
        ]
        result_pairs = list(amicable(20000))
        self.assertEqual(result_pairs, expected_pairs)

    def test_proper_divisors(self):
        # Test proper divisors for a known number
        self.assertEqual(sorted(proper_divs(220)), [1, 2, 4, 5, 10, 11, 20, 22, 44, 55, 110])
        self.assertEqual(sorted(proper_divs(284)), [1, 2, 4, 71, 142])

    def test_no_amicable_pairs_below_100(self):
        result_pairs = list(amicable(100))
        self.assertEqual(result_pairs, [])

    def test_amicable_pair_properties(self):
        # Test that the sum of proper divisors of each number in a pair equals the other number
        for num, divsum in amicable(20000):
            self.assertEqual(sum(proper_divs(num)), divsum)
            self.assertEqual(sum(proper_divs(divsum)), num)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/amicable_pairs/test_gpt_4o_2024_08_06_amicable_pairs.py,CompileStatus.OK,0.0,10.34,6.98,0.21,1.0,,1.021536111831665,7.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_amicable_pairs', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/amicable_pairs/test_gpt_4o_2024_08_06_amicable_pairs.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_amicable_pairs', 'obj': '', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 39, 'path': 'data/generated/docs_python/amicable_pairs/test_gpt_4o_2024_08_06_amicable_pairs.py', 'symbol': 'import-error', 'message': ""Unable to import 'proper_divisors'"", 'message-id': 'E0401'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_amicable_pairs', 'obj': 'TestAmicablePairs', 'line': 5, 'column': 0, 'endLine': 5, 'endColumn': 23, 'path': 'data/generated/docs_python/amicable_pairs/test_gpt_4o_2024_08_06_amicable_pairs.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_amicable_pairs', 'obj': 'TestAmicablePairs.test_amicable_pairs_below_20000', 'line': 7, 'column': 4, 'endLine': 7, 'endColumn': 39, 'path': 'data/generated/docs_python/amicable_pairs/test_gpt_4o_2024_08_06_amicable_pairs.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_amicable_pairs', 'obj': 'TestAmicablePairs.test_proper_divisors', 'line': 21, 'column': 4, 'endLine': 21, 'endColumn': 28, 'path': 'data/generated/docs_python/amicable_pairs/test_gpt_4o_2024_08_06_amicable_pairs.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_amicable_pairs', 'obj': 'TestAmicablePairs.test_no_amicable_pairs_below_100', 'line': 26, 'column': 4, 'endLine': 26, 'endColumn': 40, 'path': 'data/generated/docs_python/amicable_pairs/test_gpt_4o_2024_08_06_amicable_pairs.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_amicable_pairs', 'obj': 'TestAmicablePairs.test_amicable_pair_properties', 'line': 30, 'column': 4, 'endLine': 30, 'endColumn': 37, 'path': 'data/generated/docs_python/amicable_pairs/test_gpt_4o_2024_08_06_amicable_pairs.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Anagrams/Deranged anagrams,"Two or more words are said to be anagrams if they have the same characters, but in a different order.

By analogy with derangements we define a deranged anagram as two words with the same characters, but in which the same character does not appear in the same position in both words.

Task[edit]
Use the word list at unixdict to find and display the longest deranged anagram.



Related tasks
 Permutations/Derangements
 Best shuffle
Word plays

Ordered words
Palindrome detection
Semordnilap
Anagrams
Anagrams/Deranged anagrams





Other tasks related to string operations:

Metrics
 Array length
 String length
 Copy a string
 Empty string  (assignment)
Counting
 Word frequency
 Letter frequency
 Jewels and stones
 I before E except after C
 Bioinformatics/base count
 Count occurrences of a substring
 Count how many vowels and consonants occur in a string
Remove/replace
 XXXX redacted
 Conjugate a Latin verb
 Remove vowels from a string
 String interpolation (included)
 Strip block comments
 Strip comments from a string
 Strip a set of characters from a string
 Strip whitespace from a string -- top and tail
 Strip control codes and extended characters from a string
Anagrams/Derangements/shuffling
 Word wheel
 ABC problem
 Sattolo cycle
 Knuth shuffle
 Ordered words
 Superpermutation minimisation
 Textonyms (using a phone text pad)
 Anagrams
 Anagrams/Deranged anagrams
 Permutations/Derangements
Find/Search/Determine
 ABC words
 Odd words
 Word ladder
 Semordnilap
 Word search
 Wordiff  (game)
 String matching
 Tea cup rim text
 Alternade words
 Changeable words
 State name puzzle
 String comparison
 Unique characters
 Unique characters in each string
 Extract file extension
 Levenshtein distance
 Palindrome detection
 Common list elements
 Longest common suffix
 Longest common prefix
 Compare a list of strings
 Longest common substring
 Find common directory path
 Words from neighbour ones
 Change e letters to i in words
 Non-continuous subsequences
 Longest common subsequence
 Longest palindromic substrings
 Longest increasing subsequence
 Words containing ""the"" substring
 Sum of the digits of n is substring of n
 Determine if a string is numeric
 Determine if a string is collapsible
 Determine if a string is squeezable
 Determine if a string has all unique characters
 Determine if a string has all the same characters
 Longest substrings without repeating characters
 Find words which contains all the vowels
 Find words which contains most consonants
 Find words which contains more than 3 vowels
 Find words which first and last three letters are equals
 Find words which odd letters are consonants and even letters are vowels or vice_versa
Formatting
 Substring
 Rep-string
 Word wrap
 String case
 Align columns
 Literals/String
 Repeat a string
 Brace expansion
 Brace expansion using ranges
 Reverse a string
 Phrase reversals
 Comma quibbling
 Special characters
 String concatenation
 Substring/Top and tail
 Commatizing numbers
 Reverse words in a string
 Suffixation of decimal numbers
 Long literals, with continuations
 Numerical and alphabetical suffixes
 Abbreviations, easy
 Abbreviations, simple
 Abbreviations, automatic
Song lyrics/poems/Mad Libs/phrases
 Mad Libs
 Magic 8-ball
 99 Bottles of Beer
 The Name Game (a song)
 The Old lady swallowed a fly
 The Twelve Days of Christmas
Tokenize
 Text between
 Tokenize a string
 Word break problem
 Tokenize a string with escaping
 Split a character string based on change of character
Sequences
 Show ASCII table
 De Bruijn sequences
 Self-referential sequences
 Generate lower case ASCII alphabet



",Python,"import urllib.request
from collections import defaultdict
from itertools import combinations
 
def getwords(url='http://www.puzzlers.org/pub/wordlists/unixdict.txt'):
    return list(set(urllib.request.urlopen(url).read().decode().split()))
 
def find_anagrams(words):
    anagram = defaultdict(list) # map sorted chars to anagrams
    for word in words:
        anagram[tuple(sorted(word))].append( word )
    return dict((key, words) for key, words in anagram.items()
                if len(words) > 1)
 
def is_deranged(words):
    'returns pairs of words that have no character in the same position'
    return [ (word1, word2)
             for word1,word2 in combinations(words, 2)
             if all(ch1 != ch2 for ch1, ch2 in zip(word1, word2)) ]
 
def largest_deranged_ana(anagrams):
    ordered_anagrams = sorted(anagrams.items(),
                              key=lambda x:(-len(x[0]), x[0]))
    for _, words in ordered_anagrams:
        deranged_pairs = is_deranged(words)
        if deranged_pairs:
            return deranged_pairs
    return []
 
if __name__ == '__main__':
    words = getwords('http://www.puzzlers.org/pub/wordlists/unixdict.txt')
    print(""Word count:"", len(words))
 
    anagrams = find_anagrams(words)
    print(""Anagram count:"", len(anagrams),""\n"")
 
    print(""Longest anagrams with no characters in the same position:"")
    print('  ' + '\n  '.join(', '.join(pairs)
                             for pairs in largest_deranged_ana(anagrams)))",1481,39,"import unittest
from anagrams_deranged_anagrams import find_anagrams, is_deranged, largest_deranged_ana

class TestAnagramsDerangedAnagrams(unittest.TestCase):

    def test_find_anagrams(self):
        words = ['listen', 'silent', 'enlist', 'google', 'gogole', 'abc', 'cab', 'bac']
        expected_anagrams = {
            ('e', 'i', 'l', 'n', 's', 't'): ['listen', 'silent', 'enlist'],
            ('e', 'g', 'g', 'l', 'o', 'o'): ['google', 'gogole'],
            ('a', 'b', 'c'): ['abc', 'cab', 'bac']
        }
        result = find_anagrams(words)
        self.assertEqual(result, expected_anagrams)

    def test_is_deranged(self):
        words = ['listen', 'silent', 'enlist']
        expected_deranged_pairs = [('listen', 'silent'), ('listen', 'enlist'), ('silent', 'enlist')]
        result = is_deranged(words)
        self.assertEqual(result, expected_deranged_pairs)

        words = ['google', 'gogole']
        expected_deranged_pairs = [('google', 'gogole')]
        result = is_deranged(words)
        self.assertEqual(result, expected_deranged_pairs)

        words = ['abc', 'cab', 'bac']
        expected_deranged_pairs = [('abc', 'cab'), ('abc', 'bac'), ('cab', 'bac')]
        result = is_deranged(words)
        self.assertEqual(result, expected_deranged_pairs)

    def test_largest_deranged_ana(self):
        anagrams = {
            ('e', 'i', 'l', 'n', 's', 't'): ['listen', 'silent', 'enlist'],
            ('e', 'g', 'g', 'l', 'o', 'o'): ['google', 'gogole'],
            ('a', 'b', 'c'): ['abc', 'cab', 'bac']
        }
        expected_largest_deranged = [('listen', 'silent'), ('listen', 'enlist'), ('silent', 'enlist')]
        result = largest_deranged_ana(anagrams)
        self.assertEqual(result, expected_largest_deranged)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/anagrams_deranged_anagrams/test_gpt_4o_2024_08_06_anagrams_deranged_anagrams.py,CompileStatus.OK,0.0,68.52,69.44,0.18,0.42,33.33,0.6707658767700195,6.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_anagrams_deranged_anagrams', 'obj': '', 'line': 38, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/anagrams_deranged_anagrams/test_gpt_4o_2024_08_06_anagrams_deranged_anagrams.py', 'symbol': 'line-too-long', 'message': 'Line too long (102/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_anagrams_deranged_anagrams', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/anagrams_deranged_anagrams/test_gpt_4o_2024_08_06_anagrams_deranged_anagrams.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_anagrams_deranged_anagrams', 'obj': 'TestAnagramsDerangedAnagrams', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 34, 'path': 'data/generated/docs_python/anagrams_deranged_anagrams/test_gpt_4o_2024_08_06_anagrams_deranged_anagrams.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_anagrams_deranged_anagrams', 'obj': 'TestAnagramsDerangedAnagrams.test_find_anagrams', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 26, 'path': 'data/generated/docs_python/anagrams_deranged_anagrams/test_gpt_4o_2024_08_06_anagrams_deranged_anagrams.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_anagrams_deranged_anagrams', 'obj': 'TestAnagramsDerangedAnagrams.test_is_deranged', 'line': 16, 'column': 4, 'endLine': 16, 'endColumn': 24, 'path': 'data/generated/docs_python/anagrams_deranged_anagrams/test_gpt_4o_2024_08_06_anagrams_deranged_anagrams.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_anagrams_deranged_anagrams', 'obj': 'TestAnagramsDerangedAnagrams.test_largest_deranged_ana', 'line': 32, 'column': 4, 'endLine': 32, 'endColumn': 33, 'path': 'data/generated/docs_python/anagrams_deranged_anagrams/test_gpt_4o_2024_08_06_anagrams_deranged_anagrams.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Angle difference between two bearings,"Finding the angle between two bearings is often confusing.[1]



Task

Find the angle which is the result of the subtraction b2 - b1, where b1 and b2 are the bearings.


Input bearings are expressed in the range   -180   to   +180   degrees.

The  result  is also expressed in the range   -180   to   +180   degrees.



Compute the angle for the following pairs:

 20 degrees (b1) and 45 degrees (b2)
 -45 and 45
 -85 and 90
 -95 and 90
 -45 and 125
 -45 and 145
 29.4803 and -88.6381
 -78.3251 and -159.036


Optional extra

Allow the input bearings to be any (finite) value.



Test cases

 -70099.74233810938 and 29840.67437876723
 -165313.6666297357 and 33693.9894517456
 1174.8380510598456 and -154146.66490124757
 60175.77306795546 and 42213.07192354373

",Python,"from __future__ import print_function
 
def getDifference(b1, b2):
	r = (b2 - b1) % 360.0
	# Python modulus has same sign as divisor, which is positive here,
	# so no need to consider negative case
	if r >= 180.0:
		r -= 360.0
	return r
 
if __name__ == ""__main__"":
	print (""Input in -180 to +180 range"")
	print (getDifference(20.0, 45.0))
	print (getDifference(-45.0, 45.0))
	print (getDifference(-85.0, 90.0))
	print (getDifference(-95.0, 90.0))
	print (getDifference(-45.0, 125.0))
	print (getDifference(-45.0, 145.0))
	print (getDifference(-45.0, 125.0))
	print (getDifference(-45.0, 145.0))
	print (getDifference(29.4803, -88.6381))
	print (getDifference(-78.3251, -159.036))
 
	print (""Input in wider range"")
	print (getDifference(-70099.74233810938, 29840.67437876723))
	print (getDifference(-165313.6666297357, 33693.9894517456))
	print (getDifference(1174.8380510598456, -154146.66490124757))
	print (getDifference(60175.77306795546, 42213.07192354373))",962,28,"import unittest
from angle_difference_between_two_bearings import getDifference

class TestAngleDifference(unittest.TestCase):

    def test_standard_range(self):
        # Test cases with input bearings in the range -180 to +180
        self.assertAlmostEqual(getDifference(20.0, 45.0), 25.0)
        self.assertAlmostEqual(getDifference(-45.0, 45.0), 90.0)
        self.assertAlmostEqual(getDifference(-85.0, 90.0), 175.0)
        self.assertAlmostEqual(getDifference(-95.0, 90.0), 185.0 - 360.0)  # -175.0
        self.assertAlmostEqual(getDifference(-45.0, 125.0), 170.0)
        self.assertAlmostEqual(getDifference(-45.0, 145.0), 190.0 - 360.0)  # -170.0
        self.assertAlmostEqual(getDifference(29.4803, -88.6381), -118.1184)
        self.assertAlmostEqual(getDifference(-78.3251, -159.036), -80.7109)

    def test_wider_range(self):
        # Test cases with input bearings outside the range -180 to +180
        self.assertAlmostEqual(getDifference(-70099.74233810938, 29840.67437876723), 179.9327168766108)
        self.assertAlmostEqual(getDifference(-165313.6666297357, 33693.9894517456), 179.6760814813453)
        self.assertAlmostEqual(getDifference(1174.8380510598456, -154146.66490124757), -179.5029523077228)
        self.assertAlmostEqual(getDifference(60175.77306795546, 42213.07192354373), -179.2988555880833)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/angle_difference_between_two_bearings/test_gpt_4o_2024_08_06_angle_difference_between_two_bearings.py,CompileStatus.OK,0.0,52.38,54.17,0.63,6.0,50.0,0.7631790637969971,8.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_angle_difference_between_two_bearings', 'obj': '', 'line': 19, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/angle_difference_between_two_bearings/test_gpt_4o_2024_08_06_angle_difference_between_two_bearings.py', 'symbol': 'line-too-long', 'message': 'Line too long (103/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_angle_difference_between_two_bearings', 'obj': '', 'line': 20, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/angle_difference_between_two_bearings/test_gpt_4o_2024_08_06_angle_difference_between_two_bearings.py', 'symbol': 'line-too-long', 'message': 'Line too long (102/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_angle_difference_between_two_bearings', 'obj': '', 'line': 21, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/angle_difference_between_two_bearings/test_gpt_4o_2024_08_06_angle_difference_between_two_bearings.py', 'symbol': 'line-too-long', 'message': 'Line too long (106/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_angle_difference_between_two_bearings', 'obj': '', 'line': 22, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/angle_difference_between_two_bearings/test_gpt_4o_2024_08_06_angle_difference_between_two_bearings.py', 'symbol': 'line-too-long', 'message': 'Line too long (103/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_angle_difference_between_two_bearings', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/angle_difference_between_two_bearings/test_gpt_4o_2024_08_06_angle_difference_between_two_bearings.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_angle_difference_between_two_bearings', 'obj': 'TestAngleDifference', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 25, 'path': 'data/generated/docs_python/angle_difference_between_two_bearings/test_gpt_4o_2024_08_06_angle_difference_between_two_bearings.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_angle_difference_between_two_bearings', 'obj': 'TestAngleDifference.test_standard_range', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 27, 'path': 'data/generated/docs_python/angle_difference_between_two_bearings/test_gpt_4o_2024_08_06_angle_difference_between_two_bearings.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_angle_difference_between_two_bearings', 'obj': 'TestAngleDifference.test_wider_range', 'line': 17, 'column': 4, 'endLine': 17, 'endColumn': 24, 'path': 'data/generated/docs_python/angle_difference_between_two_bearings/test_gpt_4o_2024_08_06_angle_difference_between_two_bearings.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
"Angles (geometric), normalization and conversion","This task is about the normalization and/or conversion of (geometric) angles using
some common scales.



The angular scales that will be used in this task are:

   degree
   gradian
   mil
   radian


Definitions

The angular scales used or referenced here:

   turn   is a full turn or 360 degrees, also shown as 360º
   degree   is   1/360   of a turn
   gradian   is   1/400   of a turn
   mil   is   1/6400   of a turn
   radian   is   1/2



π


{\displaystyle \pi }

   of a turn   (or   0.5/



π


{\displaystyle \pi }

   of a turn)


Or, to put it another way,   for a full circle:

   there are   360   degrees
   there are   400   gradians
   there are   6,400   mils
   there are   2



π


{\displaystyle \pi }

   radians   (roughly equal to 6.283+)


A   mil   is approximately equal to a   milliradian   (which is   1/1000   of a radian).

There is another definition of a   mil   which
is   1/1000   of a radian   ─── this
definition won't be used in this Rosetta Code task.


Turns   are sometimes known or shown as:

   turn(s)
   360 degrees
   unit circle
   a (full) circle

Degrees   are sometimes known or shown as:

   degree(s)
   deg
   º       (a symbol)
   °       (another symbol)

Gradians   are sometimes known or shown as:

   gradian(s)
   grad(s)
   grade(s)
   gon(s)
   metric degree(s)
   (Note that   centigrade   was used for 1/100th of a grade, see the note below.)

Mils   are sometimes known or shown as:

   mil(s)
   NATO mil(s)

Radians   are sometimes known or shown as:

   radian(s)
   rad(s)


Notes

In continental Europe, the French term   centigrade   was used
for   1/100   of a grad (grade);   this was
one reason for the adoption of the term   Celsius   to
replace   centigrade   as the name of a temperature scale.

Gradians were commonly used in civil engineering.

Mils were normally used for artillery   (elevations of the gun barrel for ranging).



Positive and negative angles

Although the definition of the measurement of an angle doesn't support the
concept of a negative angle,   it's frequently useful to impose a convention that
allows positive and negative angular values to represent orientations and/or rotations
in opposite directions relative to some reference.   It is this reason that
negative angles will keep their sign and not be normalized to positive angles.



Normalization

Normalization   (for this Rosetta Code task)   will keep the same
sign,   but it will reduce the magnitude to less than a full circle;   in
other words, less than 360º.

Normalization   shouldn't   change   -45º   to   315º,

An angle of   0º,   +0º,   0.000000,   or   -0º   should be
shown as   0º.



Task

   write a function (or equivalent) to do the normalization for each scale
 Suggested names:
 d2d,   g2g,   m2m,   and  r2r
   write a function (or equivalent) to convert one scale to another
 Suggested names for comparison of different computer language function names:
 d2g,   d2m,   and   d2r   for degrees
 g2d,   g2m,   and   g2r   for gradians
 m2d,   m2g,   and   m2r   for mils
 r2d,   r2g,   and   r2m   for radians
   normalize all angles used   (except for the ""original"" or ""base"" angle)
   show the angles in every scale and convert them to all other scales
   show all output here on this page


For the (above) conversions,   use these dozen numbers   (in the order shown):

   -2   -1   0   1   2   6.2831853   16   57.2957795   359   399   6399   1000000

",Python,"PI = 3.141592653589793
TWO_PI = 6.283185307179586
 
def normalize2deg(a):
  while a < 0: a += 360
  while a >= 360: a -= 360
  return a
def normalize2grad(a):
  while a < 0: a += 400
  while a >= 400: a -= 400
  return a
def normalize2mil(a):
  while a < 0: a += 6400
  while a >= 6400: a -= 6400
  return a
def normalize2rad(a):
  while a < 0: a += TWO_PI
  while a >= TWO_PI: a -= TWO_PI
  return a
 
def deg2grad(a): return a * 10.0 / 9.0
def deg2mil(a): return a * 160.0 / 9.0
def deg2rad(a): return a * PI / 180.0
 
def grad2deg(a): return a * 9.0 / 10.0
def grad2mil(a): return a * 16.0
def grad2rad(a): return a * PI / 200.0
 
def mil2deg(a): return a * 9.0 / 160.0
def mil2grad(a): return a / 16.0
def mil2rad(a): return a * PI / 3200.0
 
def rad2deg(a): return a * 180.0 / PI
def rad2grad(a): return a * 200.0 / PI
def rad2mil(a): return a * 3200.0 / PI",862,35,"import unittest
import math

class TestAngleConversions(unittest.TestCase):

    def test_normalize2deg(self):
        self.assertEqual(normalize2deg(-2), 358)
        self.assertEqual(normalize2deg(-1), 359)
        self.assertEqual(normalize2deg(0), 0)
        self.assertEqual(normalize2deg(1), 1)
        self.assertEqual(normalize2deg(2), 2)
        self.assertEqual(normalize2deg(6.2831853), 6.2831853)
        self.assertEqual(normalize2deg(16), 16)
        self.assertEqual(normalize2deg(57.2957795), 57.2957795)
        self.assertEqual(normalize2deg(359), 359)
        self.assertEqual(normalize2deg(399), 39)
        self.assertEqual(normalize2deg(6399), 279)
        self.assertEqual(normalize2deg(1000000), 280)

    def test_normalize2grad(self):
        self.assertEqual(normalize2grad(-2), 398)
        self.assertEqual(normalize2grad(-1), 399)
        self.assertEqual(normalize2grad(0), 0)
        self.assertEqual(normalize2grad(1), 1)
        self.assertEqual(normalize2grad(2), 2)
        self.assertEqual(normalize2grad(6.2831853), 6.2831853)
        self.assertEqual(normalize2grad(16), 16)
        self.assertEqual(normalize2grad(57.2957795), 57.2957795)
        self.assertEqual(normalize2grad(359), 359)
        self.assertEqual(normalize2grad(399), 399)
        self.assertEqual(normalize2grad(6399), 399)
        self.assertEqual(normalize2grad(1000000), 0)

    def test_normalize2mil(self):
        self.assertEqual(normalize2mil(-2), 6398)
        self.assertEqual(normalize2mil(-1), 6399)
        self.assertEqual(normalize2mil(0), 0)
        self.assertEqual(normalize2mil(1), 1)
        self.assertEqual(normalize2mil(2), 2)
        self.assertEqual(normalize2mil(6.2831853), 6.2831853)
        self.assertEqual(normalize2mil(16), 16)
        self.assertEqual(normalize2mil(57.2957795), 57.2957795)
        self.assertEqual(normalize2mil(359), 359)
        self.assertEqual(normalize2mil(399), 399)
        self.assertEqual(normalize2mil(6399), 6399)
        self.assertEqual(normalize2mil(1000000), 6400)

    def test_normalize2rad(self):
        self.assertAlmostEqual(normalize2rad(-2), 4.283185307179586, places=7)
        self.assertAlmostEqual(normalize2rad(-1), 5.283185307179586, places=7)
        self.assertEqual(normalize2rad(0), 0)
        self.assertEqual(normalize2rad(1), 1)
        self.assertEqual(normalize2rad(2), 2)
        self.assertEqual(normalize2rad(6.2831853), 6.2831853)
        self.assertEqual(normalize2rad(16), 3.7168146928204138)
        self.assertEqual(normalize2rad(57.2957795), 0.28318530717958623)
        self.assertEqual(normalize2rad(359), 5.26548245743669)
        self.assertEqual(normalize2rad(399), 0.017453292519943295)
        self.assertEqual(normalize2rad(6399), 0.017453292519943295)
        self.assertEqual(normalize2rad(1000000), 5.497787143782138)

    def test_deg2grad(self):
        self.assertEqual(deg2grad(360), 400)
        self.assertEqual(deg2grad(180), 200)
        self.assertEqual(deg2grad(90), 100)

    def test_deg2mil(self):
        self.assertEqual(deg2mil(360), 6400)
        self.assertEqual(deg2mil(180), 3200)
        self.assertEqual(deg2mil(90), 1600)

    def test_deg2rad(self):
        self.assertAlmostEqual(deg2rad(360), TWO_PI, places=7)
        self.assertAlmostEqual(deg2rad(180), math.pi, places=7)
        self.assertAlmostEqual(deg2rad(90), math.pi / 2, places=7)

    def test_grad2deg(self):
        self.assertEqual(grad2deg(400), 360)
        self.assertEqual(grad2deg(200), 180)
        self.assertEqual(grad2deg(100), 90)

    def test_grad2mil(self):
        self.assertEqual(grad2mil(400), 6400)
        self.assertEqual(grad2mil(200), 3200)
        self.assertEqual(grad2mil(100), 1600)

    def test_grad2rad(self):
        self.assertAlmostEqual(grad2rad(400), TWO_PI, places=7)
        self.assertAlmostEqual(grad2rad(200), math.pi, places=7)
        self.assertAlmostEqual(grad2rad(100), math.pi / 2, places=7)

    def test_mil2deg(self):
        self.assertEqual(mil2deg(6400), 360)
        self.assertEqual(mil2deg(3200), 180)
        self.assertEqual(mil2deg(1600), 90)

    def test_mil2grad(self):
        self.assertEqual(mil2grad(6400), 400)
        self.assertEqual(mil2grad(3200), 200)
        self.assertEqual(mil2grad(1600), 100)

    def test_mil2rad(self):
        self.assertAlmostEqual(mil2rad(6400), TWO_PI, places=7)
        self.assertAlmostEqual(mil2rad(3200), math.pi, places=7)
        self.assertAlmostEqual(mil2rad(1600), math.pi / 2, places=7)

    def test_rad2deg(self):
        self.assertAlmostEqual(rad2deg(TWO_PI), 360, places=7)
        self.assertAlmostEqual(rad2deg(math.pi), 180, places=7)
        self.assertAlmostEqual(rad2deg(math.pi / 2), 90, places=7)

    def test_rad2grad(self):
        self.assertAlmostEqual(rad2grad(TWO_PI), 400, places=7)
        self.assertAlmostEqual(rad2grad(math.pi), 200, places=7)
        self.assertAlmostEqual(rad2grad(math.pi / 2), 100, places=7)

    def test_rad2mil(self):
        self.assertAlmostEqual(rad2mil(TWO_PI), 6400, places=7)
        self.assertAlmostEqual(rad2mil(math.pi), 3200, places=7)
        self.assertAlmostEqual(rad2mil(math.pi / 2), 1600, places=7)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py,CompileStatus.OK,0.0,26.67,22.98,0.8,7.0,,0.709604024887085,108.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 26, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_normalize2deg', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 26, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_normalize2deg', 'line': 7, 'column': 25, 'endLine': 7, 'endColumn': 38, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'normalize2deg'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_normalize2deg', 'line': 8, 'column': 25, 'endLine': 8, 'endColumn': 38, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'normalize2deg'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_normalize2deg', 'line': 9, 'column': 25, 'endLine': 9, 'endColumn': 38, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'normalize2deg'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_normalize2deg', 'line': 10, 'column': 25, 'endLine': 10, 'endColumn': 38, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'normalize2deg'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_normalize2deg', 'line': 11, 'column': 25, 'endLine': 11, 'endColumn': 38, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'normalize2deg'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_normalize2deg', 'line': 12, 'column': 25, 'endLine': 12, 'endColumn': 38, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'normalize2deg'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_normalize2deg', 'line': 13, 'column': 25, 'endLine': 13, 'endColumn': 38, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'normalize2deg'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_normalize2deg', 'line': 14, 'column': 25, 'endLine': 14, 'endColumn': 38, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'normalize2deg'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_normalize2deg', 'line': 15, 'column': 25, 'endLine': 15, 'endColumn': 38, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'normalize2deg'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_normalize2deg', 'line': 16, 'column': 25, 'endLine': 16, 'endColumn': 38, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'normalize2deg'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_normalize2deg', 'line': 17, 'column': 25, 'endLine': 17, 'endColumn': 38, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'normalize2deg'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_normalize2deg', 'line': 18, 'column': 25, 'endLine': 18, 'endColumn': 38, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'normalize2deg'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_normalize2grad', 'line': 20, 'column': 4, 'endLine': 20, 'endColumn': 27, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_normalize2grad', 'line': 21, 'column': 25, 'endLine': 21, 'endColumn': 39, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'normalize2grad'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_normalize2grad', 'line': 22, 'column': 25, 'endLine': 22, 'endColumn': 39, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'normalize2grad'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_normalize2grad', 'line': 23, 'column': 25, 'endLine': 23, 'endColumn': 39, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'normalize2grad'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_normalize2grad', 'line': 24, 'column': 25, 'endLine': 24, 'endColumn': 39, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'normalize2grad'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_normalize2grad', 'line': 25, 'column': 25, 'endLine': 25, 'endColumn': 39, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'normalize2grad'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_normalize2grad', 'line': 26, 'column': 25, 'endLine': 26, 'endColumn': 39, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'normalize2grad'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_normalize2grad', 'line': 27, 'column': 25, 'endLine': 27, 'endColumn': 39, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'normalize2grad'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_normalize2grad', 'line': 28, 'column': 25, 'endLine': 28, 'endColumn': 39, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'normalize2grad'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_normalize2grad', 'line': 29, 'column': 25, 'endLine': 29, 'endColumn': 39, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'normalize2grad'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_normalize2grad', 'line': 30, 'column': 25, 'endLine': 30, 'endColumn': 39, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'normalize2grad'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_normalize2grad', 'line': 31, 'column': 25, 'endLine': 31, 'endColumn': 39, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'normalize2grad'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_normalize2grad', 'line': 32, 'column': 25, 'endLine': 32, 'endColumn': 39, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'normalize2grad'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_normalize2mil', 'line': 34, 'column': 4, 'endLine': 34, 'endColumn': 26, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_normalize2mil', 'line': 35, 'column': 25, 'endLine': 35, 'endColumn': 38, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'normalize2mil'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_normalize2mil', 'line': 36, 'column': 25, 'endLine': 36, 'endColumn': 38, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'normalize2mil'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_normalize2mil', 'line': 37, 'column': 25, 'endLine': 37, 'endColumn': 38, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'normalize2mil'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_normalize2mil', 'line': 38, 'column': 25, 'endLine': 38, 'endColumn': 38, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'normalize2mil'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_normalize2mil', 'line': 39, 'column': 25, 'endLine': 39, 'endColumn': 38, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'normalize2mil'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_normalize2mil', 'line': 40, 'column': 25, 'endLine': 40, 'endColumn': 38, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'normalize2mil'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_normalize2mil', 'line': 41, 'column': 25, 'endLine': 41, 'endColumn': 38, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'normalize2mil'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_normalize2mil', 'line': 42, 'column': 25, 'endLine': 42, 'endColumn': 38, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'normalize2mil'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_normalize2mil', 'line': 43, 'column': 25, 'endLine': 43, 'endColumn': 38, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'normalize2mil'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_normalize2mil', 'line': 44, 'column': 25, 'endLine': 44, 'endColumn': 38, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'normalize2mil'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_normalize2mil', 'line': 45, 'column': 25, 'endLine': 45, 'endColumn': 38, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'normalize2mil'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_normalize2mil', 'line': 46, 'column': 25, 'endLine': 46, 'endColumn': 38, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'normalize2mil'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_normalize2rad', 'line': 48, 'column': 4, 'endLine': 48, 'endColumn': 26, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_normalize2rad', 'line': 49, 'column': 31, 'endLine': 49, 'endColumn': 44, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'normalize2rad'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_normalize2rad', 'line': 50, 'column': 31, 'endLine': 50, 'endColumn': 44, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'normalize2rad'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_normalize2rad', 'line': 51, 'column': 25, 'endLine': 51, 'endColumn': 38, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'normalize2rad'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_normalize2rad', 'line': 52, 'column': 25, 'endLine': 52, 'endColumn': 38, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'normalize2rad'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_normalize2rad', 'line': 53, 'column': 25, 'endLine': 53, 'endColumn': 38, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'normalize2rad'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_normalize2rad', 'line': 54, 'column': 25, 'endLine': 54, 'endColumn': 38, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'normalize2rad'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_normalize2rad', 'line': 55, 'column': 25, 'endLine': 55, 'endColumn': 38, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'normalize2rad'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_normalize2rad', 'line': 56, 'column': 25, 'endLine': 56, 'endColumn': 38, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'normalize2rad'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_normalize2rad', 'line': 57, 'column': 25, 'endLine': 57, 'endColumn': 38, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'normalize2rad'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_normalize2rad', 'line': 58, 'column': 25, 'endLine': 58, 'endColumn': 38, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'normalize2rad'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_normalize2rad', 'line': 59, 'column': 25, 'endLine': 59, 'endColumn': 38, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'normalize2rad'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_normalize2rad', 'line': 60, 'column': 25, 'endLine': 60, 'endColumn': 38, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'normalize2rad'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_deg2grad', 'line': 62, 'column': 4, 'endLine': 62, 'endColumn': 21, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_deg2grad', 'line': 63, 'column': 25, 'endLine': 63, 'endColumn': 33, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'deg2grad'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_deg2grad', 'line': 64, 'column': 25, 'endLine': 64, 'endColumn': 33, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'deg2grad'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_deg2grad', 'line': 65, 'column': 25, 'endLine': 65, 'endColumn': 33, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'deg2grad'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_deg2mil', 'line': 67, 'column': 4, 'endLine': 67, 'endColumn': 20, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_deg2mil', 'line': 68, 'column': 25, 'endLine': 68, 'endColumn': 32, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'deg2mil'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_deg2mil', 'line': 69, 'column': 25, 'endLine': 69, 'endColumn': 32, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'deg2mil'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_deg2mil', 'line': 70, 'column': 25, 'endLine': 70, 'endColumn': 32, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'deg2mil'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_deg2rad', 'line': 72, 'column': 4, 'endLine': 72, 'endColumn': 20, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_deg2rad', 'line': 73, 'column': 31, 'endLine': 73, 'endColumn': 38, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'deg2rad'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_deg2rad', 'line': 73, 'column': 45, 'endLine': 73, 'endColumn': 51, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'TWO_PI'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_deg2rad', 'line': 74, 'column': 31, 'endLine': 74, 'endColumn': 38, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'deg2rad'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_deg2rad', 'line': 75, 'column': 31, 'endLine': 75, 'endColumn': 38, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'deg2rad'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_grad2deg', 'line': 77, 'column': 4, 'endLine': 77, 'endColumn': 21, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_grad2deg', 'line': 78, 'column': 25, 'endLine': 78, 'endColumn': 33, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'grad2deg'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_grad2deg', 'line': 79, 'column': 25, 'endLine': 79, 'endColumn': 33, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'grad2deg'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_grad2deg', 'line': 80, 'column': 25, 'endLine': 80, 'endColumn': 33, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'grad2deg'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_grad2mil', 'line': 82, 'column': 4, 'endLine': 82, 'endColumn': 21, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_grad2mil', 'line': 83, 'column': 25, 'endLine': 83, 'endColumn': 33, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'grad2mil'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_grad2mil', 'line': 84, 'column': 25, 'endLine': 84, 'endColumn': 33, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'grad2mil'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_grad2mil', 'line': 85, 'column': 25, 'endLine': 85, 'endColumn': 33, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'grad2mil'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_grad2rad', 'line': 87, 'column': 4, 'endLine': 87, 'endColumn': 21, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_grad2rad', 'line': 88, 'column': 31, 'endLine': 88, 'endColumn': 39, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'grad2rad'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_grad2rad', 'line': 88, 'column': 46, 'endLine': 88, 'endColumn': 52, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'TWO_PI'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_grad2rad', 'line': 89, 'column': 31, 'endLine': 89, 'endColumn': 39, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'grad2rad'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_grad2rad', 'line': 90, 'column': 31, 'endLine': 90, 'endColumn': 39, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'grad2rad'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_mil2deg', 'line': 92, 'column': 4, 'endLine': 92, 'endColumn': 20, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_mil2deg', 'line': 93, 'column': 25, 'endLine': 93, 'endColumn': 32, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'mil2deg'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_mil2deg', 'line': 94, 'column': 25, 'endLine': 94, 'endColumn': 32, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'mil2deg'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_mil2deg', 'line': 95, 'column': 25, 'endLine': 95, 'endColumn': 32, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'mil2deg'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_mil2grad', 'line': 97, 'column': 4, 'endLine': 97, 'endColumn': 21, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_mil2grad', 'line': 98, 'column': 25, 'endLine': 98, 'endColumn': 33, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'mil2grad'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_mil2grad', 'line': 99, 'column': 25, 'endLine': 99, 'endColumn': 33, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'mil2grad'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_mil2grad', 'line': 100, 'column': 25, 'endLine': 100, 'endColumn': 33, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'mil2grad'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_mil2rad', 'line': 102, 'column': 4, 'endLine': 102, 'endColumn': 20, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_mil2rad', 'line': 103, 'column': 31, 'endLine': 103, 'endColumn': 38, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'mil2rad'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_mil2rad', 'line': 103, 'column': 46, 'endLine': 103, 'endColumn': 52, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'TWO_PI'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_mil2rad', 'line': 104, 'column': 31, 'endLine': 104, 'endColumn': 38, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'mil2rad'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_mil2rad', 'line': 105, 'column': 31, 'endLine': 105, 'endColumn': 38, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'mil2rad'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_rad2deg', 'line': 107, 'column': 4, 'endLine': 107, 'endColumn': 20, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_rad2deg', 'line': 108, 'column': 31, 'endLine': 108, 'endColumn': 38, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'rad2deg'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_rad2deg', 'line': 108, 'column': 39, 'endLine': 108, 'endColumn': 45, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'TWO_PI'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_rad2deg', 'line': 109, 'column': 31, 'endLine': 109, 'endColumn': 38, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'rad2deg'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_rad2deg', 'line': 110, 'column': 31, 'endLine': 110, 'endColumn': 38, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'rad2deg'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_rad2grad', 'line': 112, 'column': 4, 'endLine': 112, 'endColumn': 21, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_rad2grad', 'line': 113, 'column': 31, 'endLine': 113, 'endColumn': 39, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'rad2grad'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_rad2grad', 'line': 113, 'column': 40, 'endLine': 113, 'endColumn': 46, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'TWO_PI'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_rad2grad', 'line': 114, 'column': 31, 'endLine': 114, 'endColumn': 39, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'rad2grad'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_rad2grad', 'line': 115, 'column': 31, 'endLine': 115, 'endColumn': 39, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'rad2grad'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_rad2mil', 'line': 117, 'column': 4, 'endLine': 117, 'endColumn': 20, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_rad2mil', 'line': 118, 'column': 31, 'endLine': 118, 'endColumn': 38, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'rad2mil'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_rad2mil', 'line': 118, 'column': 39, 'endLine': 118, 'endColumn': 45, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'TWO_PI'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_rad2mil', 'line': 119, 'column': 31, 'endLine': 119, 'endColumn': 38, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'rad2mil'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion', 'obj': 'TestAngleConversions.test_rad2mil', 'line': 120, 'column': 31, 'endLine': 120, 'endColumn': 38, 'path': 'data/generated/docs_python/angles_geometric_normalization_and_conversion/test_gpt_4o_2024_08_06_angles_geometric_normalization_and_conversion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'rad2mil'"", 'message-id': 'E0602'}]",False
Animation,"
Animation is integral to many parts of GUIs, including both the fancy effects when things change used in window managers, and of course games.   The core of any animation system is a scheme for periodically changing the display while still remaining responsive to the user.   This task demonstrates this.



Task

Create a window containing the string ""Hello World! "" (the trailing space is significant).

Make the text appear to be rotating right by periodically removing one letter from the end of the string and attaching it to the front.

When the user clicks on the (windowed) text, it should reverse its direction.



",Python,"#!/usr/bin/env python3
import sys
 
from PyQt5.QtCore import QBasicTimer, Qt
from PyQt5.QtGui import QFont
from PyQt5.QtWidgets import QApplication, QLabel
 
 
class Marquee(QLabel):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.right_to_left_direction = True
        self.initUI()
        self.timer = QBasicTimer()
        self.timer.start(80, self)
 
    def initUI(self):
        self.setWindowFlags(Qt.FramelessWindowHint)
        self.setAttribute(Qt.WA_TranslucentBackground)
        self.setText(""Hello World! "")
        self.setFont(QFont(None, 50, QFont.Bold))
        # make more irritating for the authenticity with <marquee> element
        self.setStyleSheet(""QLabel {color: cyan; }"")
 
    def timerEvent(self, event):
        i = 1 if self.right_to_left_direction else -1
        self.setText(self.text()[i:] + self.text()[:i])  # rotate
 
    def mouseReleaseEvent(self, event):  # change direction on mouse release
        self.right_to_left_direction = not self.right_to_left_direction
 
    def keyPressEvent(self, event):  # exit on Esc
        if event.key() == Qt.Key_Escape:
            self.close()
 
 
app = QApplication(sys.argv)
w = Marquee()
# center widget on the screen
w.adjustSize()  # update w.rect() now
w.move(QApplication.instance().desktop().screen().rect().center()
       - w.rect().center())
w.show()
sys.exit(app.exec())",1398,44,"import unittest
from PyQt5.QtCore import Qt
from PyQt5.QtTest import QTest
from PyQt5.QtWidgets import QApplication
from animation import Marquee
import sys

class TestMarquee(unittest.TestCase):
    def setUp(self):
        self.app = QApplication(sys.argv)
        self.marquee = Marquee()

    def tearDown(self):
        self.marquee.close()
        self.app.quit()

    def test_initial_text(self):
        self.assertEqual(self.marquee.text(), ""Hello World! "")

    def test_text_rotation_right(self):
        initial_text = self.marquee.text()
        self.marquee.timerEvent(None)  # Simulate timer event
        expected_text = initial_text[1:] + initial_text[0]
        self.assertEqual(self.marquee.text(), expected_text)

    def test_text_rotation_left(self):
        self.marquee.right_to_left_direction = False
        initial_text = self.marquee.text()
        self.marquee.timerEvent(None)  # Simulate timer event
        expected_text = initial_text[-1] + initial_text[:-1]
        self.assertEqual(self.marquee.text(), expected_text)

    def test_direction_change_on_click(self):
        initial_direction = self.marquee.right_to_left_direction
        QTest.mouseClick(self.marquee, Qt.LeftButton)
        self.assertNotEqual(self.marquee.right_to_left_direction, initial_direction)

    def test_exit_on_escape(self):
        self.assertTrue(self.marquee.isVisible())
        QTest.keyPress(self.marquee, Qt.Key_Escape)
        self.assertFalse(self.marquee.isVisible())

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/animation/test_gpt_4o_2024_08_06_animation.py,CompileStatus.OK,0.0,2.99,2.82,0.17,0.86,,1.1260671615600586,11.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_animation', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/animation/test_gpt_4o_2024_08_06_animation.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_animation', 'obj': '', 'line': 2, 'column': 0, 'endLine': 2, 'endColumn': 27, 'path': 'data/generated/docs_python/animation/test_gpt_4o_2024_08_06_animation.py', 'symbol': 'import-error', 'message': ""Unable to import 'PyQt5.QtCore'"", 'message-id': 'E0401'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_animation', 'obj': '', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 30, 'path': 'data/generated/docs_python/animation/test_gpt_4o_2024_08_06_animation.py', 'symbol': 'import-error', 'message': ""Unable to import 'PyQt5.QtTest'"", 'message-id': 'E0401'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_animation', 'obj': '', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 40, 'path': 'data/generated/docs_python/animation/test_gpt_4o_2024_08_06_animation.py', 'symbol': 'import-error', 'message': ""Unable to import 'PyQt5.QtWidgets'"", 'message-id': 'E0401'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_animation', 'obj': 'TestMarquee', 'line': 8, 'column': 0, 'endLine': 8, 'endColumn': 17, 'path': 'data/generated/docs_python/animation/test_gpt_4o_2024_08_06_animation.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_animation', 'obj': 'TestMarquee.test_initial_text', 'line': 17, 'column': 4, 'endLine': 17, 'endColumn': 25, 'path': 'data/generated/docs_python/animation/test_gpt_4o_2024_08_06_animation.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_animation', 'obj': 'TestMarquee.test_text_rotation_right', 'line': 20, 'column': 4, 'endLine': 20, 'endColumn': 32, 'path': 'data/generated/docs_python/animation/test_gpt_4o_2024_08_06_animation.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_animation', 'obj': 'TestMarquee.test_text_rotation_left', 'line': 26, 'column': 4, 'endLine': 26, 'endColumn': 31, 'path': 'data/generated/docs_python/animation/test_gpt_4o_2024_08_06_animation.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_animation', 'obj': 'TestMarquee.test_direction_change_on_click', 'line': 33, 'column': 4, 'endLine': 33, 'endColumn': 38, 'path': 'data/generated/docs_python/animation/test_gpt_4o_2024_08_06_animation.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_animation', 'obj': 'TestMarquee.test_exit_on_escape', 'line': 38, 'column': 4, 'endLine': 38, 'endColumn': 27, 'path': 'data/generated/docs_python/animation/test_gpt_4o_2024_08_06_animation.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_animation', 'obj': '', 'line': 6, 'column': 0, 'endLine': 6, 'endColumn': 10, 'path': 'data/generated/docs_python/animation/test_gpt_4o_2024_08_06_animation.py', 'symbol': 'wrong-import-order', 'message': 'standard import ""sys"" should be placed before third party imports ""PyQt5.QtCore.Qt"", ""PyQt5.QtTest.QTest"", ""PyQt5.QtWidgets.QApplication"", ""animation.Marquee""', 'message-id': 'C0411'}]",False
Apply a callback to an array,"Task

Take a combined set of elements and apply a function to each element.



",Python,"def square(n):
    return n * n
 
numbers = [1, 3, 5, 7]
 
squares1 = [square(n) for n in numbers]     # list comprehension
 
squares2a = map(square, numbers)            # functional form
 
squares2b = map(lambda x: x*x, numbers)     # functional form with `lambda`
 
squares3 = [n * n for n in numbers]         # no need for a function,
                                            # anonymous or otherwise
 
isquares1 = (n * n for n in numbers)        # iterator, lazy
 
import itertools
isquares2 = itertools.imap(square, numbers) # iterator, lazy",549,18,"import unittest
from apply_a_callback_to_an_array import square

class TestApplyCallbackToAnArray(unittest.TestCase):

    def test_square_function(self):
        self.assertEqual(square(0), 0)
        self.assertEqual(square(1), 1)
        self.assertEqual(square(2), 4)
        self.assertEqual(square(-3), 9)
        self.assertEqual(square(10), 100)

    def test_list_comprehension(self):
        numbers = [1, 3, 5, 7]
        expected_squares = [1, 9, 25, 49]
        squares1 = [square(n) for n in numbers]
        self.assertEqual(squares1, expected_squares)

    def test_map_function(self):
        numbers = [1, 3, 5, 7]
        expected_squares = [1, 9, 25, 49]
        squares2a = list(map(square, numbers))
        self.assertEqual(squares2a, expected_squares)

    def test_map_lambda(self):
        numbers = [1, 3, 5, 7]
        expected_squares = [1, 9, 25, 49]
        squares2b = list(map(lambda x: x*x, numbers))
        self.assertEqual(squares2b, expected_squares)

    def test_no_function_list_comprehension(self):
        numbers = [1, 3, 5, 7]
        expected_squares = [1, 9, 25, 49]
        squares3 = [n * n for n in numbers]
        self.assertEqual(squares3, expected_squares)

    def test_iterator_lazy(self):
        numbers = [1, 3, 5, 7]
        expected_squares = [1, 9, 25, 49]
        isquares1 = (n * n for n in numbers)
        self.assertEqual(list(isquares1), expected_squares)

    def test_itertools_imap(self):
        numbers = [1, 3, 5, 7]
        expected_squares = [1, 9, 25, 49]
        # Since itertools.imap is not available in Python 3, using map instead
        isquares2 = map(square, numbers)
        self.assertEqual(list(isquares2), expected_squares)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/apply_a_callback_to_an_array/test_gpt_4o_2024_08_06_apply_a_callback_to_an_array.py,CompileStatus.OK,0.0,23.53,26.09,0.27,11.0,,0.7316768169403076,9.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_apply_a_callback_to_an_array', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/apply_a_callback_to_an_array/test_gpt_4o_2024_08_06_apply_a_callback_to_an_array.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_apply_a_callback_to_an_array', 'obj': 'TestApplyCallbackToAnArray', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 32, 'path': 'data/generated/docs_python/apply_a_callback_to_an_array/test_gpt_4o_2024_08_06_apply_a_callback_to_an_array.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_apply_a_callback_to_an_array', 'obj': 'TestApplyCallbackToAnArray.test_square_function', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 28, 'path': 'data/generated/docs_python/apply_a_callback_to_an_array/test_gpt_4o_2024_08_06_apply_a_callback_to_an_array.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_apply_a_callback_to_an_array', 'obj': 'TestApplyCallbackToAnArray.test_list_comprehension', 'line': 13, 'column': 4, 'endLine': 13, 'endColumn': 31, 'path': 'data/generated/docs_python/apply_a_callback_to_an_array/test_gpt_4o_2024_08_06_apply_a_callback_to_an_array.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_apply_a_callback_to_an_array', 'obj': 'TestApplyCallbackToAnArray.test_map_function', 'line': 19, 'column': 4, 'endLine': 19, 'endColumn': 25, 'path': 'data/generated/docs_python/apply_a_callback_to_an_array/test_gpt_4o_2024_08_06_apply_a_callback_to_an_array.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_apply_a_callback_to_an_array', 'obj': 'TestApplyCallbackToAnArray.test_map_lambda', 'line': 25, 'column': 4, 'endLine': 25, 'endColumn': 23, 'path': 'data/generated/docs_python/apply_a_callback_to_an_array/test_gpt_4o_2024_08_06_apply_a_callback_to_an_array.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_apply_a_callback_to_an_array', 'obj': 'TestApplyCallbackToAnArray.test_no_function_list_comprehension', 'line': 31, 'column': 4, 'endLine': 31, 'endColumn': 43, 'path': 'data/generated/docs_python/apply_a_callback_to_an_array/test_gpt_4o_2024_08_06_apply_a_callback_to_an_array.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_apply_a_callback_to_an_array', 'obj': 'TestApplyCallbackToAnArray.test_iterator_lazy', 'line': 37, 'column': 4, 'endLine': 37, 'endColumn': 26, 'path': 'data/generated/docs_python/apply_a_callback_to_an_array/test_gpt_4o_2024_08_06_apply_a_callback_to_an_array.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_apply_a_callback_to_an_array', 'obj': 'TestApplyCallbackToAnArray.test_itertools_imap', 'line': 43, 'column': 4, 'endLine': 43, 'endColumn': 27, 'path': 'data/generated/docs_python/apply_a_callback_to_an_array/test_gpt_4o_2024_08_06_apply_a_callback_to_an_array.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Apply a digital filter (direct form II transposed),"Digital filters are used to apply a mathematical operation to a sampled signal. One of the common formulations is the ""direct form II transposed"" which can represent both infinite impulse response (IIR) and finite impulse response (FIR) filters, as well as being more numerically stable than other forms. [1]

Task

Filter a signal using an order 3 low-pass Butterworth filter. The coefficients for the filter are a=[1.00000000, -2.77555756e-16, 3.33333333e-01, -1.85037171e-17] and b = [0.16666667, 0.5, 0.5, 0.16666667]

The signal that needs filtering is the following vector: [-0.917843918645, 0.141984778794, 1.20536903482, 0.190286794412, -0.662370894973, -1.00700480494, -0.404707073677 ,0.800482325044, 0.743500089861, 1.01090520172, 0.741527555207, 0.277841675195, 0.400833448236, -0.2085993586, -0.172842103641, -0.134316096293, 0.0259303398477, 0.490105989562, 0.549391221511, 0.9047198589]
",Python,"#!/bin/python
from __future__ import print_function
from scipy import signal
import matplotlib.pyplot as plt
 
if __name__==""__main__"":
	sig = [-0.917843918645,0.141984778794,1.20536903482,0.190286794412,-0.662370894973,-1.00700480494,
		-0.404707073677,0.800482325044,0.743500089861,1.01090520172,0.741527555207,
		0.277841675195,0.400833448236,-0.2085993586,-0.172842103641,-0.134316096293,
		0.0259303398477,0.490105989562,0.549391221511,0.9047198589]
 
	#Create an order 3 lowpass butterworth filter
	#Generated using b, a = signal.butter(3, 0.5)
	a = [1.00000000, -2.77555756e-16, 3.33333333e-01, -1.85037171e-17]
	b = [0.16666667, 0.5, 0.5, 0.16666667]
 
	#Apply the filter to signal
	filt = signal.lfilter(b, a, sig)
	print (filt)
 
	plt.plot(sig, 'b')
	plt.plot(filt, 'r--')
	plt.show()",794,23,"import unittest
import numpy as np
from scipy import signal

class TestDigitalFilter(unittest.TestCase):
    def setUp(self):
        # Original signal
        self.sig = [-0.917843918645, 0.141984778794, 1.20536903482, 0.190286794412, -0.662370894973,
                    -1.00700480494, -0.404707073677, 0.800482325044, 0.743500089861, 1.01090520172,
                    0.741527555207, 0.277841675195, 0.400833448236, -0.2085993586, -0.172842103641,
                    -0.134316096293, 0.0259303398477, 0.490105989562, 0.549391221511, 0.9047198589]

        # Filter coefficients
        self.a = [1.00000000, -2.77555756e-16, 3.33333333e-01, -1.85037171e-17]
        self.b = [0.16666667, 0.5, 0.5, 0.16666667]

    def test_filter_output(self):
        # Expected output calculated using the same filter
        expected_output = signal.lfilter(self.b, self.a, self.sig)

        # Apply the filter
        filt = signal.lfilter(self.b, self.a, self.sig)

        # Assert that the filtered output matches the expected output
        np.testing.assert_array_almost_equal(filt, expected_output, decimal=5)

    def test_filter_stability(self):
        # Check if the filter is stable by ensuring all poles are inside the unit circle
        poles = np.roots(self.a)
        self.assertTrue(np.all(np.abs(poles) < 1), ""Filter is unstable"")

    def test_filter_length(self):
        # Apply the filter
        filt = signal.lfilter(self.b, self.a, self.sig)

        # Check if the length of the filtered signal is the same as the input signal
        self.assertEqual(len(filt), len(self.sig), ""Filtered signal length does not match input signal length"")

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/apply_a_digital_filter_direct_form_ii_transposed/test_gpt_4o_2024_08_06_apply_a_digital_filter_direct_form_ii_transposed.py,CompileStatus.OK,0.0,59.38,55.56,0.13,,,1.5104751586914062,10.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_apply_a_digital_filter_direct_form_ii_transposed', 'obj': '', 'line': 12, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/apply_a_digital_filter_direct_form_ii_transposed/test_gpt_4o_2024_08_06_apply_a_digital_filter_direct_form_ii_transposed.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_apply_a_digital_filter_direct_form_ii_transposed', 'obj': '', 'line': 20, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/apply_a_digital_filter_direct_form_ii_transposed/test_gpt_4o_2024_08_06_apply_a_digital_filter_direct_form_ii_transposed.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_apply_a_digital_filter_direct_form_ii_transposed', 'obj': '', 'line': 23, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/apply_a_digital_filter_direct_form_ii_transposed/test_gpt_4o_2024_08_06_apply_a_digital_filter_direct_form_ii_transposed.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_apply_a_digital_filter_direct_form_ii_transposed', 'obj': '', 'line': 35, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/apply_a_digital_filter_direct_form_ii_transposed/test_gpt_4o_2024_08_06_apply_a_digital_filter_direct_form_ii_transposed.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_apply_a_digital_filter_direct_form_ii_transposed', 'obj': '', 'line': 37, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/apply_a_digital_filter_direct_form_ii_transposed/test_gpt_4o_2024_08_06_apply_a_digital_filter_direct_form_ii_transposed.py', 'symbol': 'line-too-long', 'message': 'Line too long (111/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_apply_a_digital_filter_direct_form_ii_transposed', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/apply_a_digital_filter_direct_form_ii_transposed/test_gpt_4o_2024_08_06_apply_a_digital_filter_direct_form_ii_transposed.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_apply_a_digital_filter_direct_form_ii_transposed', 'obj': 'TestDigitalFilter', 'line': 5, 'column': 0, 'endLine': 5, 'endColumn': 23, 'path': 'data/generated/docs_python/apply_a_digital_filter_direct_form_ii_transposed/test_gpt_4o_2024_08_06_apply_a_digital_filter_direct_form_ii_transposed.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_apply_a_digital_filter_direct_form_ii_transposed', 'obj': 'TestDigitalFilter.test_filter_output', 'line': 17, 'column': 4, 'endLine': 17, 'endColumn': 26, 'path': 'data/generated/docs_python/apply_a_digital_filter_direct_form_ii_transposed/test_gpt_4o_2024_08_06_apply_a_digital_filter_direct_form_ii_transposed.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_apply_a_digital_filter_direct_form_ii_transposed', 'obj': 'TestDigitalFilter.test_filter_stability', 'line': 27, 'column': 4, 'endLine': 27, 'endColumn': 29, 'path': 'data/generated/docs_python/apply_a_digital_filter_direct_form_ii_transposed/test_gpt_4o_2024_08_06_apply_a_digital_filter_direct_form_ii_transposed.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_apply_a_digital_filter_direct_form_ii_transposed', 'obj': 'TestDigitalFilter.test_filter_length', 'line': 32, 'column': 4, 'endLine': 32, 'endColumn': 26, 'path': 'data/generated/docs_python/apply_a_digital_filter_direct_form_ii_transposed/test_gpt_4o_2024_08_06_apply_a_digital_filter_direct_form_ii_transposed.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Archimedean spiral,"
The Archimedean spiral is a spiral named after the Greek mathematician Archimedes.



An Archimedean spiral can be described by the equation:






r
=
a
+
b
θ


{\displaystyle \,r=a+b\theta }


with real numbers a and b.



Task
Draw an Archimedean spiral.



",Python,"from turtle import *
from math import *
color(""blue"")
down()
for i in range(200):
    t = i / 20 * pi
    x = (1 + 5 * t) * cos(t)
    y = (1 + 5 * t) * sin(t)
    goto(x, y)
up()
done()",186,11,"import unittest
from math import pi, cos, sin

def calculate_spiral_point(i, a=1, b=5):
    t = i / 20 * pi
    x = (a + b * t) * cos(t)
    y = (a + b * t) * sin(t)
    return x, y

class TestArchimedeanSpiral(unittest.TestCase):
    def test_spiral_point_calculation(self):
        # Test a few points to ensure the calculations are correct
        points_to_test = [
            (0, (1.0, 0.0)),
            (10, (1.0 + 5 * (10 / 20 * pi) * cos(10 / 20 * pi), (1.0 + 5 * (10 / 20 * pi)) * sin(10 / 20 * pi))),
            (50, (1.0 + 5 * (50 / 20 * pi) * cos(50 / 20 * pi), (1.0 + 5 * (50 / 20 * pi)) * sin(50 / 20 * pi))),
            (100, (1.0 + 5 * (100 / 20 * pi) * cos(100 / 20 * pi), (1.0 + 5 * (100 / 20 * pi)) * sin(100 / 20 * pi))),
            (199, (1.0 + 5 * (199 / 20 * pi) * cos(199 / 20 * pi), (1.0 + 5 * (199 / 20 * pi)) * sin(199 / 20 * pi))),
        ]

        for i, expected in points_to_test:
            with self.subTest(i=i):
                calculated = calculate_spiral_point(i)
                self.assertAlmostEqual(calculated[0], expected[0], places=5)
                self.assertAlmostEqual(calculated[1], expected[1], places=5)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/archimedean_spiral/test_gpt_4o_2024_08_06_archimedean_spiral.py,CompileStatus.OK,0.0,57.14,55.56,0.09,,,1.086712121963501,8.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_archimedean_spiral', 'obj': '', 'line': 15, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/archimedean_spiral/test_gpt_4o_2024_08_06_archimedean_spiral.py', 'symbol': 'line-too-long', 'message': 'Line too long (113/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_archimedean_spiral', 'obj': '', 'line': 16, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/archimedean_spiral/test_gpt_4o_2024_08_06_archimedean_spiral.py', 'symbol': 'line-too-long', 'message': 'Line too long (113/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_archimedean_spiral', 'obj': '', 'line': 17, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/archimedean_spiral/test_gpt_4o_2024_08_06_archimedean_spiral.py', 'symbol': 'line-too-long', 'message': 'Line too long (118/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_archimedean_spiral', 'obj': '', 'line': 18, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/archimedean_spiral/test_gpt_4o_2024_08_06_archimedean_spiral.py', 'symbol': 'line-too-long', 'message': 'Line too long (118/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_archimedean_spiral', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/archimedean_spiral/test_gpt_4o_2024_08_06_archimedean_spiral.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_archimedean_spiral', 'obj': 'calculate_spiral_point', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 26, 'path': 'data/generated/docs_python/archimedean_spiral/test_gpt_4o_2024_08_06_archimedean_spiral.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_archimedean_spiral', 'obj': 'TestArchimedeanSpiral', 'line': 10, 'column': 0, 'endLine': 10, 'endColumn': 27, 'path': 'data/generated/docs_python/archimedean_spiral/test_gpt_4o_2024_08_06_archimedean_spiral.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_archimedean_spiral', 'obj': 'TestArchimedeanSpiral.test_spiral_point_calculation', 'line': 11, 'column': 4, 'endLine': 11, 'endColumn': 37, 'path': 'data/generated/docs_python/archimedean_spiral/test_gpt_4o_2024_08_06_archimedean_spiral.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Arithmetic-geometric mean/Calculate Pi,"Almkvist Berndt 1988 begins with an investigation of why the agm is such an efficient algorithm, and proves that it converges quadratically. This is an efficient method to calculate



π


{\displaystyle \pi }

.

With the same notations used in Arithmetic-geometric mean, we can summarize the paper by writing:





π
=



4


a
g
m

(
1
,
1

/



2



)

2




1
−

∑

n
=
1


∞



2

n
+
1


(

a

n


2


−

g

n


2


)





{\displaystyle \pi ={\frac {4\;\mathrm {agm} (1,1/{\sqrt {2}})^{2}}{1-\sum \limits _{n=1}^{\infty }2^{n+1}(a_{n}^{2}-g_{n}^{2})}}}



This allows you to make the approximation, for any large   N:





π
≈



4


a

N


2




1
−

∑

k
=
1


N



2

k
+
1


(

a

k


2


−

g

k


2


)





{\displaystyle \pi \approx {\frac {4\;a_{N}^{2}}{1-\sum \limits _{k=1}^{N}2^{k+1}(a_{k}^{2}-g_{k}^{2})}}}



The purpose of this task is to demonstrate how to use this approximation in order to compute a large number of decimals of



π


{\displaystyle \pi }

.
",Python,"from decimal import *
 
D = Decimal
getcontext().prec = 100
a = n = D(1)
g, z, half = 1 / D(2).sqrt(), D(0.25), D(0.5)
for i in range(18):
    x = [(a + g) * half, (a * g).sqrt()]
    var = x[0] - a
    z -= var * var * n
    n += n
    a, g = x
print(a * a / z)",266,13,"import unittest
from decimal import Decimal, getcontext
from arithmetic_geometric_mean_calculate_pi import calculate_pi

class TestArithmeticGeometricMeanCalculatePi(unittest.TestCase):

    def setUp(self):
        # Set precision for Decimal calculations
        getcontext().prec = 100

    def test_calculate_pi_precision(self):
        # Test the precision of the calculated value of pi
        calculated_pi = calculate_pi()
        # Known value of pi to 100 decimal places
        known_pi = Decimal('3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679')
        # Allow a small margin of error due to precision limits
        self.assertAlmostEqual(calculated_pi, known_pi, places=98)

    def test_calculate_pi_type(self):
        # Test that the function returns a Decimal
        calculated_pi = calculate_pi()
        self.assertIsInstance(calculated_pi, Decimal)

    def test_calculate_pi_value(self):
        # Test that the calculated value of pi is greater than 3 and less than 4
        calculated_pi = calculate_pi()
        self.assertGreater(calculated_pi, Decimal(3))
        self.assertLess(calculated_pi, Decimal(4))

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/arithmetic_geometric_mean_calculate_pi/test_gpt_4o_2024_08_06_arithmetic_geometric_mean_calculate_pi.py,CompileStatus.OK,0.0,48.39,48.57,0.21,,,2.0433030128479004,8.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_arithmetic_geometric_mean_calculate_pi', 'obj': '', 'line': 6, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/arithmetic_geometric_mean_calculate_pi/test_gpt_4o_2024_08_06_arithmetic_geometric_mean_calculate_pi.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_arithmetic_geometric_mean_calculate_pi', 'obj': '', 'line': 15, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/arithmetic_geometric_mean_calculate_pi/test_gpt_4o_2024_08_06_arithmetic_geometric_mean_calculate_pi.py', 'symbol': 'line-too-long', 'message': 'Line too long (132/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_arithmetic_geometric_mean_calculate_pi', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/arithmetic_geometric_mean_calculate_pi/test_gpt_4o_2024_08_06_arithmetic_geometric_mean_calculate_pi.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_arithmetic_geometric_mean_calculate_pi', 'obj': '', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 63, 'path': 'data/generated/docs_python/arithmetic_geometric_mean_calculate_pi/test_gpt_4o_2024_08_06_arithmetic_geometric_mean_calculate_pi.py', 'symbol': 'no-name-in-module', 'message': ""No name 'calculate_pi' in module 'arithmetic_geometric_mean_calculate_pi'"", 'message-id': 'E0611'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_arithmetic_geometric_mean_calculate_pi', 'obj': 'TestArithmeticGeometricMeanCalculatePi', 'line': 5, 'column': 0, 'endLine': 5, 'endColumn': 44, 'path': 'data/generated/docs_python/arithmetic_geometric_mean_calculate_pi/test_gpt_4o_2024_08_06_arithmetic_geometric_mean_calculate_pi.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_arithmetic_geometric_mean_calculate_pi', 'obj': 'TestArithmeticGeometricMeanCalculatePi.test_calculate_pi_precision', 'line': 11, 'column': 4, 'endLine': 11, 'endColumn': 35, 'path': 'data/generated/docs_python/arithmetic_geometric_mean_calculate_pi/test_gpt_4o_2024_08_06_arithmetic_geometric_mean_calculate_pi.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_arithmetic_geometric_mean_calculate_pi', 'obj': 'TestArithmeticGeometricMeanCalculatePi.test_calculate_pi_type', 'line': 19, 'column': 4, 'endLine': 19, 'endColumn': 30, 'path': 'data/generated/docs_python/arithmetic_geometric_mean_calculate_pi/test_gpt_4o_2024_08_06_arithmetic_geometric_mean_calculate_pi.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_arithmetic_geometric_mean_calculate_pi', 'obj': 'TestArithmeticGeometricMeanCalculatePi.test_calculate_pi_value', 'line': 24, 'column': 4, 'endLine': 24, 'endColumn': 31, 'path': 'data/generated/docs_python/arithmetic_geometric_mean_calculate_pi/test_gpt_4o_2024_08_06_arithmetic_geometric_mean_calculate_pi.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Assertions,"Assertions are a way of breaking out of code when there is an error or an unexpected input.

Some languages throw exceptions and some treat it as a break point.



Task

Show an assertion in your language by asserting that an integer variable is equal to 42.



",Python,"a = 5
#...input or change a here
assert a == 42 # throws an AssertionError when a is not 42
assert a == 42, ""Error message"" # throws an AssertionError
       # when a is not 42 with ""Error message"" for the message
       # the error message can be any expression",262,6,"import unittest

class TestAssertions(unittest.TestCase):

    def test_assert_equal_42(self):
        a = 42
        try:
            assert a == 42
        except AssertionError:
            self.fail(""AssertionError raised unexpectedly!"")

    def test_assert_not_equal_42(self):
        a = 5
        with self.assertRaises(AssertionError):
            assert a == 42

    def test_assert_with_error_message(self):
        a = 5
        with self.assertRaises(AssertionError) as context:
            assert a == 42, ""Error message""
        self.assertEqual(str(context.exception), ""Error message"")

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/assertions/test_gpt_4o_2024_08_06_assertions.py,CompileStatus.OK,0.0,72.73,75.0,0.32,,66.67,0.8337569236755371,6.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_assertions', 'obj': '', 'line': 4, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/assertions/test_gpt_4o_2024_08_06_assertions.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_assertions', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/assertions/test_gpt_4o_2024_08_06_assertions.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_assertions', 'obj': 'TestAssertions', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 20, 'path': 'data/generated/docs_python/assertions/test_gpt_4o_2024_08_06_assertions.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_assertions', 'obj': 'TestAssertions.test_assert_equal_42', 'line': 5, 'column': 4, 'endLine': 5, 'endColumn': 28, 'path': 'data/generated/docs_python/assertions/test_gpt_4o_2024_08_06_assertions.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_assertions', 'obj': 'TestAssertions.test_assert_not_equal_42', 'line': 12, 'column': 4, 'endLine': 12, 'endColumn': 32, 'path': 'data/generated/docs_python/assertions/test_gpt_4o_2024_08_06_assertions.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_assertions', 'obj': 'TestAssertions.test_assert_with_error_message', 'line': 17, 'column': 4, 'endLine': 17, 'endColumn': 38, 'path': 'data/generated/docs_python/assertions/test_gpt_4o_2024_08_06_assertions.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Associative array/Merging,"Task

Define two associative arrays, where one represents the following ""base"" data:





 Key
 Value


 ""name""
 ""Rocket Skates""


 ""price""
 12.75


 ""color""
 ""yellow""

And the other represents ""update"" data:





 Key
 Value


 ""price""
 15.25


 ""color""
 ""red""


 ""year""
 1974

Merge these into a new associative array that contains every key found in either of the source ones. Each key should map to the value in the second (update) table if that exists, or else to the value in the first (base) table. If possible, do this in a way that does not mutate the original two associative arrays. Obviously this should be done in a way that would work for any data, not just the specific data given here, but in this example the result should be:





 Key
 Value


 ""name""
 ""Rocket Skates""


 ""price""
 15.25


 ""color""
 ""red""


 ""year""
 1974


",Python,"base = {""name"":""Rocket Skates"", ""price"":12.75, ""color"":""yellow""}
update = {""price"":15.25, ""color"":""red"", ""year"":1974}
 
result = {**base, **update}
 
print(result)",163,6,"import unittest
from associative_array_merging import base, update, result

class TestAssociativeArrayMerging(unittest.TestCase):

    def test_result_contains_all_keys(self):
        # Check if result contains all keys from both base and update
        expected_keys = set(base.keys()).union(set(update.keys()))
        self.assertEqual(set(result.keys()), expected_keys)

    def test_result_values_from_update(self):
        # Check if result contains values from update where keys overlap
        for key in update:
            self.assertEqual(result[key], update[key])

    def test_result_values_from_base(self):
        # Check if result contains values from base where keys do not overlap
        for key in base:
            if key not in update:
                self.assertEqual(result[key], base[key])

    def test_original_base_not_mutated(self):
        # Ensure the original base dictionary is not mutated
        self.assertEqual(base, {""name"": ""Rocket Skates"", ""price"": 12.75, ""color"": ""yellow""})

    def test_original_update_not_mutated(self):
        # Ensure the original update dictionary is not mutated
        self.assertEqual(update, {""price"": 15.25, ""color"": ""red"", ""year"": 1974})

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/associative_array_merging/test_gpt_4o_2024_08_06_associative_array_merging.py,CompileStatus.OK,0.0,95.65,93.55,0.26,,100.0,0.629317045211792,9.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_associative_array_merging', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/associative_array_merging/test_gpt_4o_2024_08_06_associative_array_merging.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_associative_array_merging', 'obj': 'TestAssociativeArrayMerging', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 33, 'path': 'data/generated/docs_python/associative_array_merging/test_gpt_4o_2024_08_06_associative_array_merging.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_associative_array_merging', 'obj': 'TestAssociativeArrayMerging.test_result_contains_all_keys', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 37, 'path': 'data/generated/docs_python/associative_array_merging/test_gpt_4o_2024_08_06_associative_array_merging.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_associative_array_merging', 'obj': 'TestAssociativeArrayMerging.test_result_values_from_update', 'line': 11, 'column': 4, 'endLine': 11, 'endColumn': 38, 'path': 'data/generated/docs_python/associative_array_merging/test_gpt_4o_2024_08_06_associative_array_merging.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_associative_array_merging', 'obj': 'TestAssociativeArrayMerging.test_result_values_from_update', 'line': 13, 'column': 8, 'endLine': 14, 'endColumn': 54, 'path': 'data/generated/docs_python/associative_array_merging/test_gpt_4o_2024_08_06_associative_array_merging.py', 'symbol': 'consider-using-dict-items', 'message': 'Consider iterating with .items()', 'message-id': 'C0206'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_associative_array_merging', 'obj': 'TestAssociativeArrayMerging.test_result_values_from_base', 'line': 16, 'column': 4, 'endLine': 16, 'endColumn': 36, 'path': 'data/generated/docs_python/associative_array_merging/test_gpt_4o_2024_08_06_associative_array_merging.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_associative_array_merging', 'obj': 'TestAssociativeArrayMerging.test_result_values_from_base', 'line': 18, 'column': 8, 'endLine': 20, 'endColumn': 56, 'path': 'data/generated/docs_python/associative_array_merging/test_gpt_4o_2024_08_06_associative_array_merging.py', 'symbol': 'consider-using-dict-items', 'message': 'Consider iterating with .items()', 'message-id': 'C0206'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_associative_array_merging', 'obj': 'TestAssociativeArrayMerging.test_original_base_not_mutated', 'line': 22, 'column': 4, 'endLine': 22, 'endColumn': 38, 'path': 'data/generated/docs_python/associative_array_merging/test_gpt_4o_2024_08_06_associative_array_merging.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_associative_array_merging', 'obj': 'TestAssociativeArrayMerging.test_original_update_not_mutated', 'line': 26, 'column': 4, 'endLine': 26, 'endColumn': 40, 'path': 'data/generated/docs_python/associative_array_merging/test_gpt_4o_2024_08_06_associative_array_merging.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Average loop length,"Let f be a uniformly-randomly chosen mapping from the numbers 1..N to the numbers 1..N (note: not necessarily a permutation of 1..N; the mapping could produce a number in more than one way or not at all). At some point, the sequence 1, f(1), f(f(1))... will contain a repetition, a number that occurring for the second time in the sequence.



Task

Write a program or a script that estimates, for each N, the average length until the first such repetition.

Also calculate this expected length using an analytical formula, and optionally compare the simulated result with the theoretical one.



This problem comes from the end of Donald Knuth's Christmas tree lecture 2011.

Example of expected output:

 N    average    analytical    (error)
===  =========  ============  =========
  1     1.0000        1.0000  (  0.00%)
  2     1.4992        1.5000  (  0.05%)
  3     1.8784        1.8889  (  0.56%)
  4     2.2316        2.2188  (  0.58%)
  5     2.4982        2.5104  (  0.49%)
  6     2.7897        2.7747  (  0.54%)
  7     3.0153        3.0181  (  0.09%)
  8     3.2429        3.2450  (  0.07%)
  9     3.4536        3.4583  (  0.14%)
 10     3.6649        3.6602  (  0.13%)
 11     3.8091        3.8524  (  1.12%)
 12     3.9986        4.0361  (  0.93%)
 13     4.2074        4.2123  (  0.12%)
 14     4.3711        4.3820  (  0.25%)
 15     4.5275        4.5458  (  0.40%)
 16     4.6755        4.7043  (  0.61%)
 17     4.8877        4.8579  (  0.61%)
 18     4.9951        5.0071  (  0.24%)
 19     5.1312        5.1522  (  0.41%)
 20     5.2699        5.2936  (  0.45%)

",Python,"from __future__ import division # Only necessary for Python 2.X
from math import factorial
from random import randrange
 
MAX_N = 20
TIMES = 1000000
 
def analytical(n):
	return sum(factorial(n) / pow(n, i) / factorial(n -i) for i in range(1, n+1))
 
def test(n, times):
    count = 0
    for i in range(times):
        x, bits = 1, 0
        while not (bits & x):
            count += 1
            bits |= x
            x = 1 << randrange(n)
    return count / times
 
if __name__ == '__main__':
    print("" n\tavg\texp.\tdiff\n-------------------------------"")
    for n in range(1, MAX_N+1):
        avg = test(n, TIMES)
        theory = analytical(n)
        diff = (avg / theory - 1) * 100
        print(""%2d %8.4f %8.4f %6.3f%%"" % (n, avg, theory, diff))",761,27,"import unittest
from average_loop_length import analytical, test

class TestAverageLoopLength(unittest.TestCase):

    def test_analytical(self):
        # Test analytical function with known values
        self.assertAlmostEqual(analytical(1), 1.0, places=4)
        self.assertAlmostEqual(analytical(2), 1.5, places=4)
        self.assertAlmostEqual(analytical(3), 1.8889, places=4)
        self.assertAlmostEqual(analytical(4), 2.2188, places=4)
        self.assertAlmostEqual(analytical(5), 2.5104, places=4)
        self.assertAlmostEqual(analytical(6), 2.7747, places=4)
        self.assertAlmostEqual(analytical(7), 3.0181, places=4)
        self.assertAlmostEqual(analytical(8), 3.2450, places=4)
        self.assertAlmostEqual(analytical(9), 3.4583, places=4)
        self.assertAlmostEqual(analytical(10), 3.6602, places=4)
        self.assertAlmostEqual(analytical(11), 3.8524, places=4)
        self.assertAlmostEqual(analytical(12), 4.0361, places=4)
        self.assertAlmostEqual(analytical(13), 4.2123, places=4)
        self.assertAlmostEqual(analytical(14), 4.3820, places=4)
        self.assertAlmostEqual(analytical(15), 4.5458, places=4)
        self.assertAlmostEqual(analytical(16), 4.7043, places=4)
        self.assertAlmostEqual(analytical(17), 4.8579, places=4)
        self.assertAlmostEqual(analytical(18), 5.0071, places=4)
        self.assertAlmostEqual(analytical(19), 5.1522, places=4)
        self.assertAlmostEqual(analytical(20), 5.2936, places=4)

    def test_simulation(self):
        # Test simulation function with a small number of iterations for quick tests
        # Note: These tests are not deterministic due to randomness, so we use a lower precision
        self.assertAlmostEqual(test(1, 1000), 1.0, delta=0.1)
        self.assertAlmostEqual(test(2, 1000), 1.5, delta=0.2)
        self.assertAlmostEqual(test(3, 1000), 1.8889, delta=0.3)
        self.assertAlmostEqual(test(4, 1000), 2.2188, delta=0.3)
        self.assertAlmostEqual(test(5, 1000), 2.5104, delta=0.4)
        self.assertAlmostEqual(test(6, 1000), 2.7747, delta=0.4)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/average_loop_length/test_gpt_4o_2024_08_06_average_loop_length.py,CompileStatus.OK,0.0,87.5,83.82,0.79,5.2,66.67,0.7089791297912598,4.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_average_loop_length', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/average_loop_length/test_gpt_4o_2024_08_06_average_loop_length.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_average_loop_length', 'obj': 'TestAverageLoopLength', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 27, 'path': 'data/generated/docs_python/average_loop_length/test_gpt_4o_2024_08_06_average_loop_length.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_average_loop_length', 'obj': 'TestAverageLoopLength.test_analytical', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 23, 'path': 'data/generated/docs_python/average_loop_length/test_gpt_4o_2024_08_06_average_loop_length.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_average_loop_length', 'obj': 'TestAverageLoopLength.test_simulation', 'line': 29, 'column': 4, 'endLine': 29, 'endColumn': 23, 'path': 'data/generated/docs_python/average_loop_length/test_gpt_4o_2024_08_06_average_loop_length.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Averages/Mean time of day,"Task[edit]
A particular activity of bats occurs at these times of the day:

23:00:17, 23:40:20, 00:12:45, 00:17:19
Using the idea that there are twenty-four hours in a day,
which is analogous to there being 360 degrees in a circle,
map times of day to and from angles;
and using the ideas of Averages/Mean angle
compute and show the average time of the nocturnal activity
to an accuracy of one second of time.

See also
Tasks for calculating statistical measures



in one go
moving (sliding window)
moving (cumulative)

Mean
Arithmetic

Statistics/Basic
Averages/Arithmetic mean
Averages/Pythagorean means


Averages/Simple moving average




Geometric

Averages/Pythagorean means




Harmonic

Averages/Pythagorean means




Quadratic

Averages/Root mean square




Circular

Averages/Mean angle
Averages/Mean time of day




Median

Averages/Median




Mode

Averages/Mode




Standard deviation

Statistics/Basic



Cumulative standard deviation



",Python,"from cmath import rect, phase
from math import radians, degrees
 
 
def mean_angle(deg):
    return degrees(phase(sum(rect(1, radians(d)) for d in deg)/len(deg)))
 
def mean_time(times):
    t = (time.split(':') for time in times)
    seconds = ((float(s) + int(m) * 60 + int(h) * 3600)
               for h, m, s in t)
    day = 24 * 60 * 60
    to_angles = [s * 360. / day for s in seconds]
    mean_as_angle = mean_angle(to_angles)
    mean_seconds = mean_as_angle * day / 360.
    if mean_seconds < 0:
        mean_seconds += day
    h, m = divmod(mean_seconds, 3600)
    m, s = divmod(m, 60)
    return '%02i:%02i:%02i' % (h, m, s)
 
 
if __name__ == '__main__':
    print( mean_time([""23:00:17"", ""23:40:20"", ""00:12:45"", ""00:17:19""]) )",741,24,"import unittest
from averages_mean_time_of_day import mean_time

class TestMeanTime(unittest.TestCase):

    def test_mean_time_standard_case(self):
        times = [""23:00:17"", ""23:40:20"", ""00:12:45"", ""00:17:19""]
        expected_result = ""23:47:10""
        self.assertEqual(mean_time(times), expected_result)

    def test_mean_time_midnight_crossing(self):
        times = [""23:59:59"", ""00:00:01""]
        expected_result = ""00:00:00""
        self.assertEqual(mean_time(times), expected_result)

    def test_mean_time_single_time(self):
        times = [""12:34:56""]
        expected_result = ""12:34:56""
        self.assertEqual(mean_time(times), expected_result)

    def test_mean_time_no_times(self):
        times = []
        with self.assertRaises(ZeroDivisionError):
            mean_time(times)

    def test_mean_time_all_same_time(self):
        times = [""06:30:00"", ""06:30:00"", ""06:30:00""]
        expected_result = ""06:30:00""
        self.assertEqual(mean_time(times), expected_result)

    def test_mean_time_varied_times(self):
        times = [""01:00:00"", ""13:00:00"", ""23:00:00""]
        expected_result = ""12:59:59""
        self.assertEqual(mean_time(times), expected_result)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/averages_mean_time_of_day/test_gpt_4o_2024_08_06_averages_mean_time_of_day.py,CompileStatus.OK,0.0,95.74,93.65,0.21,0.86,50.0,0.861889123916626,9.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_averages_mean_time_of_day', 'obj': '', 'line': 5, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/averages_mean_time_of_day/test_gpt_4o_2024_08_06_averages_mean_time_of_day.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_averages_mean_time_of_day', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/averages_mean_time_of_day/test_gpt_4o_2024_08_06_averages_mean_time_of_day.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_averages_mean_time_of_day', 'obj': 'TestMeanTime', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 18, 'path': 'data/generated/docs_python/averages_mean_time_of_day/test_gpt_4o_2024_08_06_averages_mean_time_of_day.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_averages_mean_time_of_day', 'obj': 'TestMeanTime.test_mean_time_standard_case', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 36, 'path': 'data/generated/docs_python/averages_mean_time_of_day/test_gpt_4o_2024_08_06_averages_mean_time_of_day.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_averages_mean_time_of_day', 'obj': 'TestMeanTime.test_mean_time_midnight_crossing', 'line': 11, 'column': 4, 'endLine': 11, 'endColumn': 40, 'path': 'data/generated/docs_python/averages_mean_time_of_day/test_gpt_4o_2024_08_06_averages_mean_time_of_day.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_averages_mean_time_of_day', 'obj': 'TestMeanTime.test_mean_time_single_time', 'line': 16, 'column': 4, 'endLine': 16, 'endColumn': 34, 'path': 'data/generated/docs_python/averages_mean_time_of_day/test_gpt_4o_2024_08_06_averages_mean_time_of_day.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_averages_mean_time_of_day', 'obj': 'TestMeanTime.test_mean_time_no_times', 'line': 21, 'column': 4, 'endLine': 21, 'endColumn': 31, 'path': 'data/generated/docs_python/averages_mean_time_of_day/test_gpt_4o_2024_08_06_averages_mean_time_of_day.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_averages_mean_time_of_day', 'obj': 'TestMeanTime.test_mean_time_all_same_time', 'line': 26, 'column': 4, 'endLine': 26, 'endColumn': 36, 'path': 'data/generated/docs_python/averages_mean_time_of_day/test_gpt_4o_2024_08_06_averages_mean_time_of_day.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_averages_mean_time_of_day', 'obj': 'TestMeanTime.test_mean_time_varied_times', 'line': 31, 'column': 4, 'endLine': 31, 'endColumn': 35, 'path': 'data/generated/docs_python/averages_mean_time_of_day/test_gpt_4o_2024_08_06_averages_mean_time_of_day.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Averages/Pythagorean means,"Task[edit]
Compute all three of the Pythagorean means of the set of integers 1 through 10 (inclusive).

Show that



A
(

x

1


,
…
,

x

n


)
≥
G
(

x

1


,
…
,

x

n


)
≥
H
(

x

1


,
…
,

x

n


)


{\displaystyle A(x_{1},\ldots ,x_{n})\geq G(x_{1},\ldots ,x_{n})\geq H(x_{1},\ldots ,x_{n})}

 for this set of positive integers.

 The most common of the three means, the arithmetic mean, is the sum of the list divided by its length:




A
(

x

1


,
…
,

x

n


)
=




x

1


+
⋯
+

x

n



n




{\displaystyle A(x_{1},\ldots ,x_{n})={\frac {x_{1}+\cdots +x_{n}}{n}}}


 The geometric mean is the



n


{\displaystyle n}

th root of the product of the list:




G
(

x

1


,
…
,

x

n


)
=




x

1


⋯

x

n




n





{\displaystyle G(x_{1},\ldots ,x_{n})={\sqrt[{n}]{x_{1}\cdots x_{n}}}}


 The harmonic mean is



n


{\displaystyle n}

 divided by the sum of the reciprocal of each item in the list:




H
(

x

1


,
…
,

x

n


)
=


n



1

x

1




+
⋯
+


1

x

n









{\displaystyle H(x_{1},\ldots ,x_{n})={\frac {n}{{\frac {1}{x_{1}}}+\cdots +{\frac {1}{x_{n}}}}}}




See also
Tasks for calculating statistical measures



in one go
moving (sliding window)
moving (cumulative)

Mean
Arithmetic

Statistics/Basic
Averages/Arithmetic mean
Averages/Pythagorean means


Averages/Simple moving average




Geometric

Averages/Pythagorean means




Harmonic

Averages/Pythagorean means




Quadratic

Averages/Root mean square




Circular

Averages/Mean angle
Averages/Mean time of day




Median

Averages/Median




Mode

Averages/Mode




Standard deviation

Statistics/Basic



Cumulative standard deviation





",Python,"from operator import mul
from functools import reduce
 
 
def amean(num):
    return sum(num) / len(num)
 
 
def gmean(num):
    return reduce(mul, num, 1)**(1 / len(num))
 
 
def hmean(num):
    return len(num) / sum(1 / n for n in num)
 
 
numbers = range(1, 11)  # 1..10
a, g, h = amean(numbers), gmean(numbers), hmean(numbers)
print(a, g, h)
assert a >= g >= h",364,20,"import unittest
from averages_pythagorean_means import amean, gmean, hmean

class TestPythagoreanMeans(unittest.TestCase):

    def setUp(self):
        self.numbers = list(range(1, 11))  # 1 through 10

    def test_amean(self):
        expected_amean = sum(self.numbers) / len(self.numbers)
        self.assertAlmostEqual(amean(self.numbers), expected_amean, places=7)

    def test_gmean(self):
        product = 1
        for num in self.numbers:
            product *= num
        expected_gmean = product**(1 / len(self.numbers))
        self.assertAlmostEqual(gmean(self.numbers), expected_gmean, places=7)

    def test_hmean(self):
        expected_hmean = len(self.numbers) / sum(1 / n for n in self.numbers)
        self.assertAlmostEqual(hmean(self.numbers), expected_hmean, places=7)

    def test_inequality(self):
        a = amean(self.numbers)
        g = gmean(self.numbers)
        h = hmean(self.numbers)
        self.assertTrue(a >= g >= h)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/averages_pythagorean_means/test_gpt_4o_2024_08_06_averages_pythagorean_means.py,CompileStatus.OK,0.0,97.22,95.45,0.17,1.0,100.0,0.7833359241485596,7.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_averages_pythagorean_means', 'obj': '', 'line': 5, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/averages_pythagorean_means/test_gpt_4o_2024_08_06_averages_pythagorean_means.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_averages_pythagorean_means', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/averages_pythagorean_means/test_gpt_4o_2024_08_06_averages_pythagorean_means.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_averages_pythagorean_means', 'obj': 'TestPythagoreanMeans', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 26, 'path': 'data/generated/docs_python/averages_pythagorean_means/test_gpt_4o_2024_08_06_averages_pythagorean_means.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_averages_pythagorean_means', 'obj': 'TestPythagoreanMeans.test_amean', 'line': 9, 'column': 4, 'endLine': 9, 'endColumn': 18, 'path': 'data/generated/docs_python/averages_pythagorean_means/test_gpt_4o_2024_08_06_averages_pythagorean_means.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_averages_pythagorean_means', 'obj': 'TestPythagoreanMeans.test_gmean', 'line': 13, 'column': 4, 'endLine': 13, 'endColumn': 18, 'path': 'data/generated/docs_python/averages_pythagorean_means/test_gpt_4o_2024_08_06_averages_pythagorean_means.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_averages_pythagorean_means', 'obj': 'TestPythagoreanMeans.test_hmean', 'line': 20, 'column': 4, 'endLine': 20, 'endColumn': 18, 'path': 'data/generated/docs_python/averages_pythagorean_means/test_gpt_4o_2024_08_06_averages_pythagorean_means.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_averages_pythagorean_means', 'obj': 'TestPythagoreanMeans.test_inequality', 'line': 24, 'column': 4, 'endLine': 24, 'endColumn': 23, 'path': 'data/generated/docs_python/averages_pythagorean_means/test_gpt_4o_2024_08_06_averages_pythagorean_means.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Averages/Simple moving average,"Computing the simple moving average of a series of numbers.

Task[edit]
Create a stateful function/class/instance that takes a period and returns a routine that takes a number as argument and returns a simple moving average of its arguments so far.

Description
A simple moving average is a method for computing an average of a stream of numbers by only averaging the last   P   numbers from the stream,   where   P   is known as the period.

It can be implemented by calling an initialing routine with   P   as its argument,   I(P),   which should then return a routine that when called with individual, successive members of a stream of numbers, computes the mean of (up to), the last   P   of them, lets call this   SMA().

The word   stateful   in the task description refers to the need for   SMA()   to remember certain information between calls to it:

   The period,   P
   An ordered container of at least the last   P   numbers from each of its individual calls.

Stateful   also means that successive calls to   I(),   the initializer,   should return separate routines that do   not   share saved state so they could be used on two independent streams of data.

Pseudo-code for an implementation of   SMA   is:

function SMA(number: N):
    stateful integer: P
    stateful list:    stream
    number:           average

    stream.append_last(N)
    if stream.length() > P:
        # Only average the last P elements of the stream
        stream.delete_first()
    if stream.length() == 0:
        average = 0
    else:
        average = sum( stream.values() ) / stream.length()
    return average

See also
Tasks for calculating statistical measures



in one go
moving (sliding window)
moving (cumulative)

Mean
Arithmetic

Statistics/Basic
Averages/Arithmetic mean
Averages/Pythagorean means


Averages/Simple moving average




Geometric

Averages/Pythagorean means




Harmonic

Averages/Pythagorean means




Quadratic

Averages/Root mean square




Circular

Averages/Mean angle
Averages/Mean time of day




Median

Averages/Median




Mode

Averages/Mode




Standard deviation

Statistics/Basic



Cumulative standard deviation



",Python,"from collections import deque
 
def simplemovingaverage(period):
    assert period == int(period) and period > 0, ""Period must be an integer >0""
 
    summ = n = 0.0
    values = deque([0.0] * period)     # old value queue
 
    def sma(x):
        nonlocal summ, n
 
        values.append(x)
        summ += x - values.popleft()
        n = min(n+1, period)
        return summ / n
 
    return sma",399,17,"import unittest
from collections import deque
from averages_simple_moving_average import simplemovingaverage

class TestSimpleMovingAverage(unittest.TestCase):

    def test_initialization(self):
        # Test with valid period
        sma = simplemovingaverage(3)
        self.assertIsNotNone(sma)

        # Test with invalid period (zero)
        with self.assertRaises(AssertionError):
            simplemovingaverage(0)

        # Test with invalid period (negative)
        with self.assertRaises(AssertionError):
            simplemovingaverage(-1)

        # Test with invalid period (non-integer)
        with self.assertRaises(AssertionError):
            simplemovingaverage(2.5)

    def test_sma_calculation(self):
        sma = simplemovingaverage(3)

        # Test with fewer numbers than the period
        self.assertAlmostEqual(sma(10), 10.0)
        self.assertAlmostEqual(sma(20), 15.0)

        # Test with numbers equal to the period
        self.assertAlmostEqual(sma(30), 20.0)

        # Test with more numbers than the period
        self.assertAlmostEqual(sma(40), 30.0)
        self.assertAlmostEqual(sma(50), 40.0)

    def test_separate_instances(self):
        sma1 = simplemovingaverage(2)
        sma2 = simplemovingaverage(3)

        # Test sma1
        self.assertAlmostEqual(sma1(10), 10.0)
        self.assertAlmostEqual(sma1(20), 15.0)
        self.assertAlmostEqual(sma1(30), 25.0)

        # Test sma2
        self.assertAlmostEqual(sma2(10), 10.0)
        self.assertAlmostEqual(sma2(20), 15.0)
        self.assertAlmostEqual(sma2(30), 20.0)
        self.assertAlmostEqual(sma2(40), 30.0)

    def test_edge_cases(self):
        sma = simplemovingaverage(1)

        # Test with period of 1 (should always return the last number)
        self.assertAlmostEqual(sma(10), 10.0)
        self.assertAlmostEqual(sma(20), 20.0)
        self.assertAlmostEqual(sma(30), 30.0)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/averages_simple_moving_average/test_gpt_4o_2024_08_06_averages_simple_moving_average.py,CompileStatus.OK,0.0,97.92,96.43,0.51,6.33,100.0,2.5078699588775635,8.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_averages_simple_moving_average', 'obj': '', 'line': 30, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/averages_simple_moving_average/test_gpt_4o_2024_08_06_averages_simple_moving_average.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_averages_simple_moving_average', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/averages_simple_moving_average/test_gpt_4o_2024_08_06_averages_simple_moving_average.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_averages_simple_moving_average', 'obj': 'TestSimpleMovingAverage', 'line': 5, 'column': 0, 'endLine': 5, 'endColumn': 29, 'path': 'data/generated/docs_python/averages_simple_moving_average/test_gpt_4o_2024_08_06_averages_simple_moving_average.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_averages_simple_moving_average', 'obj': 'TestSimpleMovingAverage.test_initialization', 'line': 7, 'column': 4, 'endLine': 7, 'endColumn': 27, 'path': 'data/generated/docs_python/averages_simple_moving_average/test_gpt_4o_2024_08_06_averages_simple_moving_average.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_averages_simple_moving_average', 'obj': 'TestSimpleMovingAverage.test_sma_calculation', 'line': 24, 'column': 4, 'endLine': 24, 'endColumn': 28, 'path': 'data/generated/docs_python/averages_simple_moving_average/test_gpt_4o_2024_08_06_averages_simple_moving_average.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_averages_simple_moving_average', 'obj': 'TestSimpleMovingAverage.test_separate_instances', 'line': 38, 'column': 4, 'endLine': 38, 'endColumn': 31, 'path': 'data/generated/docs_python/averages_simple_moving_average/test_gpt_4o_2024_08_06_averages_simple_moving_average.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_averages_simple_moving_average', 'obj': 'TestSimpleMovingAverage.test_edge_cases', 'line': 53, 'column': 4, 'endLine': 53, 'endColumn': 23, 'path': 'data/generated/docs_python/averages_simple_moving_average/test_gpt_4o_2024_08_06_averages_simple_moving_average.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_averages_simple_moving_average', 'obj': '', 'line': 2, 'column': 0, 'endLine': 2, 'endColumn': 29, 'path': 'data/generated/docs_python/averages_simple_moving_average/test_gpt_4o_2024_08_06_averages_simple_moving_average.py', 'symbol': 'unused-import', 'message': 'Unused deque imported from collections', 'message-id': 'W0611'}]",False
Barnsley fern,"
A Barnsley fern is a fractal named after British mathematician Michael Barnsley and can be created using an iterated function system (IFS).



Task

Create this fractal fern, using the following transformations:

 ƒ1   (chosen 1% of the time)
        xn + 1 = 0
        yn + 1 = 0.16 yn

 ƒ2   (chosen 85% of the time)
        xn + 1 = 0.85 xn + 0.04 yn
        yn + 1 = −0.04 xn + 0.85 yn + 1.6

 ƒ3   (chosen 7% of the time)
        xn + 1 = 0.2 xn − 0.26 yn
        yn + 1 = 0.23 xn + 0.22 yn + 1.6

 ƒ4   (chosen 7% of the time)
        xn + 1 = −0.15 xn + 0.28 yn
        yn + 1 = 0.26 xn + 0.24 yn + 0.44.

Starting position: x = 0, y = 0



",Python," 
 
import random
from PIL import Image
 
 
class BarnsleyFern(object):
    def __init__(self, img_width, img_height, paint_color=(0, 150, 0),
                 bg_color=(255, 255, 255)):
        self.img_width, self.img_height = img_width, img_height
        self.paint_color = paint_color
        self.x, self.y = 0, 0
        self.age = 0
 
        self.fern = Image.new('RGB', (img_width, img_height), bg_color)
        self.pix = self.fern.load()
        self.pix[self.scale(0, 0)] = paint_color
 
    def scale(self, x, y):
        h = (x + 2.182)*(self.img_width - 1)/4.8378
        k = (9.9983 - y)*(self.img_height - 1)/9.9983
        return h, k
 
    def transform(self, x, y):
        rand = random.uniform(0, 100)
        if rand < 1:
            return 0, 0.16*y
        elif 1 <= rand < 86:
            return 0.85*x + 0.04*y, -0.04*x + 0.85*y + 1.6
        elif 86 <= rand < 93:
            return 0.2*x - 0.26*y, 0.23*x + 0.22*y + 1.6
        else:
            return -0.15*x + 0.28*y, 0.26*x + 0.24*y + 0.44
 
    def iterate(self, iterations):
        for _ in range(iterations):
            self.x, self.y = self.transform(self.x, self.y)
            self.pix[self.scale(self.x, self.y)] = self.paint_color
        self.age += iterations
 
fern = BarnsleyFern(500, 500)
fern.iterate(1000000)
fern.fern.show()
 
 ",1331,45,"import unittest
from barnsley_fern import BarnsleyFern

class TestBarnsleyFern(unittest.TestCase):

    def setUp(self):
        self.fern = BarnsleyFern(500, 500)

    def test_initial_position(self):
        # Test initial position of the fern
        self.assertEqual((self.fern.x, self.fern.y), (0, 0))

    def test_scale_function(self):
        # Test the scale function with known values
        h, k = self.fern.scale(0, 0)
        self.assertAlmostEqual(h, 226.182, places=3)
        self.assertAlmostEqual(k, 499.0, places=1)

    def test_transform_function_f1(self):
        # Mock random.uniform to test f1 transformation
        random.uniform = lambda a, b: 0.5
        x, y = self.fern.transform(0, 0)
        self.assertEqual((x, y), (0, 0))

    def test_transform_function_f2(self):
        # Mock random.uniform to test f2 transformation
        random.uniform = lambda a, b: 50
        x, y = self.fern.transform(0, 0)
        self.assertEqual((x, y), (0, 1.6))

    def test_transform_function_f3(self):
        # Mock random.uniform to test f3 transformation
        random.uniform = lambda a, b: 90
        x, y = self.fern.transform(0, 0)
        self.assertEqual((x, y), (0, 1.6))

    def test_transform_function_f4(self):
        # Mock random.uniform to test f4 transformation
        random.uniform = lambda a, b: 95
        x, y = self.fern.transform(0, 0)
        self.assertEqual((x, y), (0, 0.44))

    def test_iterate_function(self):
        # Test iterate function to ensure it updates the age
        initial_age = self.fern.age
        self.fern.iterate(100)
        self.assertEqual(self.fern.age, initial_age + 100)

    def test_image_creation(self):
        # Test if the image is created with the correct dimensions
        self.assertEqual(self.fern.fern.size, (500, 500))

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/barnsley_fern/test_gpt_4o_2024_08_06_barnsley_fern.py,CompileStatus.OK,0.0,85.07,77.65,0.26,1.12,37.5,5.968902826309204,14.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_barnsley_fern', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/barnsley_fern/test_gpt_4o_2024_08_06_barnsley_fern.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_barnsley_fern', 'obj': 'TestBarnsleyFern', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 22, 'path': 'data/generated/docs_python/barnsley_fern/test_gpt_4o_2024_08_06_barnsley_fern.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_barnsley_fern', 'obj': 'TestBarnsleyFern.test_initial_position', 'line': 9, 'column': 4, 'endLine': 9, 'endColumn': 29, 'path': 'data/generated/docs_python/barnsley_fern/test_gpt_4o_2024_08_06_barnsley_fern.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_barnsley_fern', 'obj': 'TestBarnsleyFern.test_scale_function', 'line': 13, 'column': 4, 'endLine': 13, 'endColumn': 27, 'path': 'data/generated/docs_python/barnsley_fern/test_gpt_4o_2024_08_06_barnsley_fern.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_barnsley_fern', 'obj': 'TestBarnsleyFern.test_transform_function_f1', 'line': 19, 'column': 4, 'endLine': 19, 'endColumn': 34, 'path': 'data/generated/docs_python/barnsley_fern/test_gpt_4o_2024_08_06_barnsley_fern.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_barnsley_fern', 'obj': 'TestBarnsleyFern.test_transform_function_f1', 'line': 21, 'column': 8, 'endLine': 21, 'endColumn': 14, 'path': 'data/generated/docs_python/barnsley_fern/test_gpt_4o_2024_08_06_barnsley_fern.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'random'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_barnsley_fern', 'obj': 'TestBarnsleyFern.test_transform_function_f2', 'line': 25, 'column': 4, 'endLine': 25, 'endColumn': 34, 'path': 'data/generated/docs_python/barnsley_fern/test_gpt_4o_2024_08_06_barnsley_fern.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_barnsley_fern', 'obj': 'TestBarnsleyFern.test_transform_function_f2', 'line': 27, 'column': 8, 'endLine': 27, 'endColumn': 14, 'path': 'data/generated/docs_python/barnsley_fern/test_gpt_4o_2024_08_06_barnsley_fern.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'random'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_barnsley_fern', 'obj': 'TestBarnsleyFern.test_transform_function_f3', 'line': 31, 'column': 4, 'endLine': 31, 'endColumn': 34, 'path': 'data/generated/docs_python/barnsley_fern/test_gpt_4o_2024_08_06_barnsley_fern.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_barnsley_fern', 'obj': 'TestBarnsleyFern.test_transform_function_f3', 'line': 33, 'column': 8, 'endLine': 33, 'endColumn': 14, 'path': 'data/generated/docs_python/barnsley_fern/test_gpt_4o_2024_08_06_barnsley_fern.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'random'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_barnsley_fern', 'obj': 'TestBarnsleyFern.test_transform_function_f4', 'line': 37, 'column': 4, 'endLine': 37, 'endColumn': 34, 'path': 'data/generated/docs_python/barnsley_fern/test_gpt_4o_2024_08_06_barnsley_fern.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_barnsley_fern', 'obj': 'TestBarnsleyFern.test_transform_function_f4', 'line': 39, 'column': 8, 'endLine': 39, 'endColumn': 14, 'path': 'data/generated/docs_python/barnsley_fern/test_gpt_4o_2024_08_06_barnsley_fern.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'random'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_barnsley_fern', 'obj': 'TestBarnsleyFern.test_iterate_function', 'line': 43, 'column': 4, 'endLine': 43, 'endColumn': 29, 'path': 'data/generated/docs_python/barnsley_fern/test_gpt_4o_2024_08_06_barnsley_fern.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_barnsley_fern', 'obj': 'TestBarnsleyFern.test_image_creation', 'line': 49, 'column': 4, 'endLine': 49, 'endColumn': 27, 'path': 'data/generated/docs_python/barnsley_fern/test_gpt_4o_2024_08_06_barnsley_fern.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Base64 decode data,"See Base64 encode data.

Now write a program that takes the output of the Base64 encode data task as input and regenerate the original file.

When working on the VBA implementation I found several 'solutions' on the net, including one from the software maker himself, that showed output with incorrect padding. Obviously with incorrect padding in the output you can not decode correctly to the original file again.
",Python," 
import base64
data = 'VG8gZXJyIGlzIGh1bWFuLCBidXQgdG8gcmVhbGx5IGZvdWwgdGhpbmdzIHVwIHlvdSBuZWVkIGEgY29tcHV0ZXIuCiAgICAtLSBQYXVsIFIuIEVocmxpY2g='
print(base64.b64decode(data).decode('utf-8'))
 ",193,5,"import unittest
import base64

class TestBase64Decode(unittest.TestCase):

    def test_decode_valid_base64(self):
        # This is the Base64 encoded string from the script
        encoded_data = 'VG8gZXJyIGlzIGh1bWFuLCBidXQgdG8gcmVhbGx5IGZvdWwgdGhpbmdzIHVwIHlvdSBuZWVkIGEgY29tcHV0ZXIuCiAgICAtLSBQYXVsIFIuIEVocmxpY2g='
        # Expected decoded output
        expected_output = ""To err is human, but to really foul things up you need a computer.\n    -- Paul R. Ehrlich""

        # Decode the Base64 data
        decoded_output = base64.b64decode(encoded_data).decode('utf-8')

        # Assert that the decoded output matches the expected output
        self.assertEqual(decoded_output, expected_output)

    def test_decode_invalid_base64(self):
        # This is an invalid Base64 encoded string
        invalid_encoded_data = 'InvalidBase64=='

        # Attempt to decode the invalid Base64 data should raise an exception
        with self.assertRaises(base64.binascii.Error):
            base64.b64decode(invalid_encoded_data).decode('utf-8')

    def test_decode_empty_string(self):
        # Test decoding an empty string
        empty_encoded_data = ''

        # Decoding an empty string should return an empty string
        decoded_output = base64.b64decode(empty_encoded_data).decode('utf-8')
        self.assertEqual(decoded_output, '')

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/base64_decode_data/test_gpt_4o_2024_08_06_base64_decode_data.py,CompileStatus.OK,0.0,80.95,80.0,0.17,,100.0,1.386396884918213,12.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_base64_decode_data', 'obj': '', 'line': 5, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/base64_decode_data/test_gpt_4o_2024_08_06_base64_decode_data.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_base64_decode_data', 'obj': '', 'line': 8, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/base64_decode_data/test_gpt_4o_2024_08_06_base64_decode_data.py', 'symbol': 'line-too-long', 'message': 'Line too long (145/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_base64_decode_data', 'obj': '', 'line': 10, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/base64_decode_data/test_gpt_4o_2024_08_06_base64_decode_data.py', 'symbol': 'line-too-long', 'message': 'Line too long (118/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_base64_decode_data', 'obj': '', 'line': 11, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/base64_decode_data/test_gpt_4o_2024_08_06_base64_decode_data.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_base64_decode_data', 'obj': '', 'line': 14, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/base64_decode_data/test_gpt_4o_2024_08_06_base64_decode_data.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_base64_decode_data', 'obj': '', 'line': 21, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/base64_decode_data/test_gpt_4o_2024_08_06_base64_decode_data.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_base64_decode_data', 'obj': '', 'line': 29, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/base64_decode_data/test_gpt_4o_2024_08_06_base64_decode_data.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_base64_decode_data', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/base64_decode_data/test_gpt_4o_2024_08_06_base64_decode_data.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_base64_decode_data', 'obj': 'TestBase64Decode', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 22, 'path': 'data/generated/docs_python/base64_decode_data/test_gpt_4o_2024_08_06_base64_decode_data.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_base64_decode_data', 'obj': 'TestBase64Decode.test_decode_valid_base64', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 32, 'path': 'data/generated/docs_python/base64_decode_data/test_gpt_4o_2024_08_06_base64_decode_data.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_base64_decode_data', 'obj': 'TestBase64Decode.test_decode_invalid_base64', 'line': 18, 'column': 4, 'endLine': 18, 'endColumn': 34, 'path': 'data/generated/docs_python/base64_decode_data/test_gpt_4o_2024_08_06_base64_decode_data.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_base64_decode_data', 'obj': 'TestBase64Decode.test_decode_empty_string', 'line': 26, 'column': 4, 'endLine': 26, 'endColumn': 32, 'path': 'data/generated/docs_python/base64_decode_data/test_gpt_4o_2024_08_06_base64_decode_data.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Benford's law,"

 This page uses content from Wikipedia. The original article was at Benford's_law. The list of authors can be seen in the page history. As with Rosetta Code, the text of Wikipedia is available under the GNU FDL. (See links for details on variance)


Benford's law, also called the first-digit law, refers to the frequency distribution of digits in many (but not all) real-life sources of data.

In this distribution, the number 1 occurs as the first digit about 30% of the time, while larger numbers occur in that position less frequently: 9 as the first digit less than 5% of the time. This distribution of first digits is the same as the widths of gridlines on a logarithmic scale.

Benford's law also concerns the expected distribution for digits beyond the first, which approach a uniform distribution.

This result has been found to apply to a wide variety of data sets, including electricity bills, street addresses, stock prices, population numbers, death rates, lengths of rivers, physical and mathematical constants, and processes described by power laws (which are very common in nature). It tends to be most accurate when values are distributed across multiple orders of magnitude.

A set of numbers is said to satisfy Benford's law if the leading digit



d


{\displaystyle d}

  (



d
∈
{
1
,
…
,
9
}


{\displaystyle d\in \{1,\ldots ,9\}}

) occurs with probability





P
(
d
)
=

log

10


⁡
(
d
+
1
)
−

log

10


⁡
(
d
)
=

log

10


⁡

(
1
+


1
d


)



{\displaystyle P(d)=\log _{10}(d+1)-\log _{10}(d)=\log _{10}\left(1+{\frac {1}{d}}\right)}


For this task, write (a) routine(s) to calculate the distribution of first significant (non-zero) digits in a collection of numbers, then display the actual vs. expected distribution in the way most convenient for your language (table / graph / histogram / whatever).

Use the first 1000 numbers from the Fibonacci sequence as your data set. No need to show how the Fibonacci numbers are obtained.

You can generate them or load them from a file; whichever is easiest.

Display your actual vs expected distribution.


For extra credit: Show the distribution for one other set of numbers from a page on Wikipedia. State which Wikipedia page it can be obtained from and what the set enumerates. Again, no need to display the actual list of numbers or the code to load them.



See also:
 numberphile.com.
 A starting page on Wolfram Mathworld is Benfords Law .

",Python,"from __future__ import division
from itertools import islice, count
from collections import Counter
from math import log10
from random import randint
 
expected = [log10(1+1/d) for d in range(1,10)]
 
def fib():
    a,b = 1,1
    while True:
        yield a
        a,b = b,a+b
 
# powers of 3 as a test sequence
def power_of_threes():
    return (3**k for k in count(0))
 
def heads(s):
    for a in s: yield int(str(a)[0])
 
def show_dist(title, s):
    c = Counter(s)
    size = sum(c.values())
    res = [c[d]/size for d in range(1,10)]
 
    print(""\n%s Benfords deviation"" % title)
    for r, e in zip(res, expected):
        print(""%5.1f%% %5.1f%%  %5.1f%%"" % (r*100., e*100., abs(r - e)*100.))
 
def rand1000():
    while True: yield randint(1,9999)
 
if __name__ == '__main__':
    show_dist(""fibbed"", islice(heads(fib()), 1000))
    show_dist(""threes"", islice(heads(power_of_threes()), 1000))
 
    # just to show that not all kind-of-random sets behave like that
    show_dist(""random"", islice(heads(rand1000()), 10000))",1031,39,"import unittest
from collections import Counter
from math import log10
from itertools import islice, count
from random import randint

# Assuming the functions from the provided code are imported here:
# fib, power_of_threes, heads, show_dist, rand1000

class TestBenfordsLaw(unittest.TestCase):

    def setUp(self):
        # Expected distribution according to Benford's Law
        self.expected = [log10(1 + 1/d) for d in range(1, 10)]

    def calculate_distribution(self, sequence, num_samples):
        # Calculate the distribution of first digits in the sequence
        first_digits = list(islice(heads(sequence), num_samples))
        counter = Counter(first_digits)
        total = sum(counter.values())
        distribution = [counter[d] / total for d in range(1, 10)]
        return distribution

    def test_fibonacci_distribution(self):
        # Test the distribution of the first 1000 Fibonacci numbers
        actual_distribution = self.calculate_distribution(fib(), 1000)
        for actual, expected in zip(actual_distribution, self.expected):
            self.assertAlmostEqual(actual, expected, delta=0.05)

    def test_power_of_threes_distribution(self):
        # Test the distribution of the first 1000 powers of three
        actual_distribution = self.calculate_distribution(power_of_threes(), 1000)
        for actual, expected in zip(actual_distribution, self.expected):
            self.assertAlmostEqual(actual, expected, delta=0.05)

    def test_random_distribution(self):
        # Test the distribution of 10000 random numbers
        actual_distribution = self.calculate_distribution(rand1000(), 10000)
        # Random distribution should not follow Benford's Law closely
        # So we expect a larger deviation
        deviations = [abs(actual - expected) for actual, expected in zip(actual_distribution, self.expected)]
        self.assertTrue(any(deviation > 0.1 for deviation in deviations))

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/benford_s_law/test_gpt_4o_2024_08_06_benford_s_law.py,CompileStatus.OK,0.0,28.57,23.75,0.11,0.27,,1.0245118141174316,13.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_benford_s_law', 'obj': '', 'line': 41, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/benford_s_law/test_gpt_4o_2024_08_06_benford_s_law.py', 'symbol': 'line-too-long', 'message': 'Line too long (109/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_benford_s_law', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/benford_s_law/test_gpt_4o_2024_08_06_benford_s_law.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_benford_s_law', 'obj': 'TestBenfordsLaw', 'line': 10, 'column': 0, 'endLine': 10, 'endColumn': 21, 'path': 'data/generated/docs_python/benford_s_law/test_gpt_4o_2024_08_06_benford_s_law.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_benford_s_law', 'obj': 'TestBenfordsLaw.calculate_distribution', 'line': 16, 'column': 4, 'endLine': 16, 'endColumn': 30, 'path': 'data/generated/docs_python/benford_s_law/test_gpt_4o_2024_08_06_benford_s_law.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_benford_s_law', 'obj': 'TestBenfordsLaw.calculate_distribution', 'line': 18, 'column': 35, 'endLine': 18, 'endColumn': 40, 'path': 'data/generated/docs_python/benford_s_law/test_gpt_4o_2024_08_06_benford_s_law.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'heads'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_benford_s_law', 'obj': 'TestBenfordsLaw.test_fibonacci_distribution', 'line': 24, 'column': 4, 'endLine': 24, 'endColumn': 35, 'path': 'data/generated/docs_python/benford_s_law/test_gpt_4o_2024_08_06_benford_s_law.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_benford_s_law', 'obj': 'TestBenfordsLaw.test_fibonacci_distribution', 'line': 26, 'column': 58, 'endLine': 26, 'endColumn': 61, 'path': 'data/generated/docs_python/benford_s_law/test_gpt_4o_2024_08_06_benford_s_law.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'fib'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_benford_s_law', 'obj': 'TestBenfordsLaw.test_power_of_threes_distribution', 'line': 30, 'column': 4, 'endLine': 30, 'endColumn': 41, 'path': 'data/generated/docs_python/benford_s_law/test_gpt_4o_2024_08_06_benford_s_law.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_benford_s_law', 'obj': 'TestBenfordsLaw.test_power_of_threes_distribution', 'line': 32, 'column': 58, 'endLine': 32, 'endColumn': 73, 'path': 'data/generated/docs_python/benford_s_law/test_gpt_4o_2024_08_06_benford_s_law.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'power_of_threes'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_benford_s_law', 'obj': 'TestBenfordsLaw.test_random_distribution', 'line': 36, 'column': 4, 'endLine': 36, 'endColumn': 32, 'path': 'data/generated/docs_python/benford_s_law/test_gpt_4o_2024_08_06_benford_s_law.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_benford_s_law', 'obj': 'TestBenfordsLaw.test_random_distribution', 'line': 38, 'column': 58, 'endLine': 38, 'endColumn': 66, 'path': 'data/generated/docs_python/benford_s_law/test_gpt_4o_2024_08_06_benford_s_law.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'rand1000'"", 'message-id': 'E0602'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_benford_s_law', 'obj': '', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 35, 'path': 'data/generated/docs_python/benford_s_law/test_gpt_4o_2024_08_06_benford_s_law.py', 'symbol': 'unused-import', 'message': 'Unused count imported from itertools', 'message-id': 'W0611'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_benford_s_law', 'obj': '', 'line': 5, 'column': 0, 'endLine': 5, 'endColumn': 26, 'path': 'data/generated/docs_python/benford_s_law/test_gpt_4o_2024_08_06_benford_s_law.py', 'symbol': 'unused-import', 'message': 'Unused randint imported from random', 'message-id': 'W0611'}]",False
Best shuffle,"Task

Shuffle the characters of a string in such a way that as many of the character values are in a different position as possible.

A shuffle that produces a randomized result among the best choices is to be preferred. A deterministic approach that produces the same sequence every time is acceptable as an alternative.

Display the result as follows:

original string, shuffled string, (score)

The score gives the number of positions whose character value did not change.



Example

tree, eetr, (0)



Test cases

abracadabra
seesaw
elk
grrrrrr
up
a



Related tasks
   Anagrams/Deranged anagrams
   Permutations/Derangements



Other tasks related to string operations:

Metrics
 Array length
 String length
 Copy a string
 Empty string  (assignment)
Counting
 Word frequency
 Letter frequency
 Jewels and stones
 I before E except after C
 Bioinformatics/base count
 Count occurrences of a substring
 Count how many vowels and consonants occur in a string
Remove/replace
 XXXX redacted
 Conjugate a Latin verb
 Remove vowels from a string
 String interpolation (included)
 Strip block comments
 Strip comments from a string
 Strip a set of characters from a string
 Strip whitespace from a string -- top and tail
 Strip control codes and extended characters from a string
Anagrams/Derangements/shuffling
 Word wheel
 ABC problem
 Sattolo cycle
 Knuth shuffle
 Ordered words
 Superpermutation minimisation
 Textonyms (using a phone text pad)
 Anagrams
 Anagrams/Deranged anagrams
 Permutations/Derangements
Find/Search/Determine
 ABC words
 Odd words
 Word ladder
 Semordnilap
 Word search
 Wordiff  (game)
 String matching
 Tea cup rim text
 Alternade words
 Changeable words
 State name puzzle
 String comparison
 Unique characters
 Unique characters in each string
 Extract file extension
 Levenshtein distance
 Palindrome detection
 Common list elements
 Longest common suffix
 Longest common prefix
 Compare a list of strings
 Longest common substring
 Find common directory path
 Words from neighbour ones
 Change e letters to i in words
 Non-continuous subsequences
 Longest common subsequence
 Longest palindromic substrings
 Longest increasing subsequence
 Words containing ""the"" substring
 Sum of the digits of n is substring of n
 Determine if a string is numeric
 Determine if a string is collapsible
 Determine if a string is squeezable
 Determine if a string has all unique characters
 Determine if a string has all the same characters
 Longest substrings without repeating characters
 Find words which contains all the vowels
 Find words which contains most consonants
 Find words which contains more than 3 vowels
 Find words which first and last three letters are equals
 Find words which odd letters are consonants and even letters are vowels or vice_versa
Formatting
 Substring
 Rep-string
 Word wrap
 String case
 Align columns
 Literals/String
 Repeat a string
 Brace expansion
 Brace expansion using ranges
 Reverse a string
 Phrase reversals
 Comma quibbling
 Special characters
 String concatenation
 Substring/Top and tail
 Commatizing numbers
 Reverse words in a string
 Suffixation of decimal numbers
 Long literals, with continuations
 Numerical and alphabetical suffixes
 Abbreviations, easy
 Abbreviations, simple
 Abbreviations, automatic
Song lyrics/poems/Mad Libs/phrases
 Mad Libs
 Magic 8-ball
 99 Bottles of Beer
 The Name Game (a song)
 The Old lady swallowed a fly
 The Twelve Days of Christmas
Tokenize
 Text between
 Tokenize a string
 Word break problem
 Tokenize a string with escaping
 Split a character string based on change of character
Sequences
 Show ASCII table
 De Bruijn sequences
 Self-referential sequences
 Generate lower case ASCII alphabet



",Python,"import random
 
def count(w1,wnew):
    return sum(c1==c2 for c1,c2 in zip(w1, wnew))
 
def best_shuffle(w):
    wnew = list(w)
    n = len(w)
    rangelists = (list(range(n)), list(range(n)))
    for r in rangelists:
        random.shuffle(r)
    rangei, rangej = rangelists
    for i in rangei:
        for j in rangej:
            if i != j and wnew[j] != wnew[i] and w[i] != wnew[j] and w[j] != wnew[i]:
                wnew[j], wnew[i] = wnew[i], wnew[j]
                break
    wnew = ''.join(wnew)
    return wnew, count(w, wnew)
 
 
if __name__ == '__main__':
    test_words = ('tree abracadabra seesaw elk grrrrrr up a '
                  + 'antidisestablishmentarianism hounddogs').split()
    test_words += ['aardvarks are ant eaters', 'immediately', 'abba']
    for w in test_words:
        wnew, c = best_shuffle(w)
        print(""%29s, %-29s ,(%i)"" % (w, wnew, c))",881,28,"import unittest
from best_shuffle import best_shuffle

class TestBestShuffle(unittest.TestCase):

    def test_shuffle_abracadabra(self):
        original = ""abracadabra""
        shuffled, score = best_shuffle(original)
        self.assertEqual(len(original), len(shuffled))
        self.assertLessEqual(score, len(original))
        self.assertNotEqual(original, shuffled)

    def test_shuffle_seesaw(self):
        original = ""seesaw""
        shuffled, score = best_shuffle(original)
        self.assertEqual(len(original), len(shuffled))
        self.assertLessEqual(score, len(original))
        self.assertNotEqual(original, shuffled)

    def test_shuffle_elk(self):
        original = ""elk""
        shuffled, score = best_shuffle(original)
        self.assertEqual(len(original), len(shuffled))
        self.assertLessEqual(score, len(original))
        self.assertNotEqual(original, shuffled)

    def test_shuffle_grrrrrr(self):
        original = ""grrrrrr""
        shuffled, score = best_shuffle(original)
        self.assertEqual(len(original), len(shuffled))
        self.assertLessEqual(score, len(original))
        self.assertNotEqual(original, shuffled)

    def test_shuffle_up(self):
        original = ""up""
        shuffled, score = best_shuffle(original)
        self.assertEqual(len(original), len(shuffled))
        self.assertLessEqual(score, len(original))
        self.assertNotEqual(original, shuffled)

    def test_shuffle_a(self):
        original = ""a""
        shuffled, score = best_shuffle(original)
        self.assertEqual(len(original), len(shuffled))
        self.assertEqual(score, 1)  # Single character cannot be shuffled

    def test_shuffle_antidisestablishmentarianism(self):
        original = ""antidisestablishmentarianism""
        shuffled, score = best_shuffle(original)
        self.assertEqual(len(original), len(shuffled))
        self.assertLessEqual(score, len(original))
        self.assertNotEqual(original, shuffled)

    def test_shuffle_hounddogs(self):
        original = ""hounddogs""
        shuffled, score = best_shuffle(original)
        self.assertEqual(len(original), len(shuffled))
        self.assertLessEqual(score, len(original))
        self.assertNotEqual(original, shuffled)

    def test_shuffle_aardvarks_are_ant_eaters(self):
        original = ""aardvarks are ant eaters""
        shuffled, score = best_shuffle(original)
        self.assertEqual(len(original), len(shuffled))
        self.assertLessEqual(score, len(original))
        self.assertNotEqual(original, shuffled)

    def test_shuffle_immediately(self):
        original = ""immediately""
        shuffled, score = best_shuffle(original)
        self.assertEqual(len(original), len(shuffled))
        self.assertLessEqual(score, len(original))
        self.assertNotEqual(original, shuffled)

    def test_shuffle_abba(self):
        original = ""abba""
        shuffled, score = best_shuffle(original)
        self.assertEqual(len(original), len(shuffled))
        self.assertLessEqual(score, len(original))
        self.assertNotEqual(original, shuffled)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/best_shuffle/test_gpt_4o_2024_08_06_best_shuffle.py,CompileStatus.OK,0.0,93.55,90.83,0.46,3.2,100.0,0.70318603515625,13.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_best_shuffle', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/best_shuffle/test_gpt_4o_2024_08_06_best_shuffle.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_best_shuffle', 'obj': 'TestBestShuffle', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 21, 'path': 'data/generated/docs_python/best_shuffle/test_gpt_4o_2024_08_06_best_shuffle.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_best_shuffle', 'obj': 'TestBestShuffle.test_shuffle_abracadabra', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 32, 'path': 'data/generated/docs_python/best_shuffle/test_gpt_4o_2024_08_06_best_shuffle.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_best_shuffle', 'obj': 'TestBestShuffle.test_shuffle_seesaw', 'line': 13, 'column': 4, 'endLine': 13, 'endColumn': 27, 'path': 'data/generated/docs_python/best_shuffle/test_gpt_4o_2024_08_06_best_shuffle.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_best_shuffle', 'obj': 'TestBestShuffle.test_shuffle_elk', 'line': 20, 'column': 4, 'endLine': 20, 'endColumn': 24, 'path': 'data/generated/docs_python/best_shuffle/test_gpt_4o_2024_08_06_best_shuffle.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_best_shuffle', 'obj': 'TestBestShuffle.test_shuffle_grrrrrr', 'line': 27, 'column': 4, 'endLine': 27, 'endColumn': 28, 'path': 'data/generated/docs_python/best_shuffle/test_gpt_4o_2024_08_06_best_shuffle.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_best_shuffle', 'obj': 'TestBestShuffle.test_shuffle_up', 'line': 34, 'column': 4, 'endLine': 34, 'endColumn': 23, 'path': 'data/generated/docs_python/best_shuffle/test_gpt_4o_2024_08_06_best_shuffle.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_best_shuffle', 'obj': 'TestBestShuffle.test_shuffle_a', 'line': 41, 'column': 4, 'endLine': 41, 'endColumn': 22, 'path': 'data/generated/docs_python/best_shuffle/test_gpt_4o_2024_08_06_best_shuffle.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_best_shuffle', 'obj': 'TestBestShuffle.test_shuffle_antidisestablishmentarianism', 'line': 47, 'column': 4, 'endLine': 47, 'endColumn': 49, 'path': 'data/generated/docs_python/best_shuffle/test_gpt_4o_2024_08_06_best_shuffle.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_best_shuffle', 'obj': 'TestBestShuffle.test_shuffle_hounddogs', 'line': 54, 'column': 4, 'endLine': 54, 'endColumn': 30, 'path': 'data/generated/docs_python/best_shuffle/test_gpt_4o_2024_08_06_best_shuffle.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_best_shuffle', 'obj': 'TestBestShuffle.test_shuffle_aardvarks_are_ant_eaters', 'line': 61, 'column': 4, 'endLine': 61, 'endColumn': 45, 'path': 'data/generated/docs_python/best_shuffle/test_gpt_4o_2024_08_06_best_shuffle.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_best_shuffle', 'obj': 'TestBestShuffle.test_shuffle_immediately', 'line': 68, 'column': 4, 'endLine': 68, 'endColumn': 32, 'path': 'data/generated/docs_python/best_shuffle/test_gpt_4o_2024_08_06_best_shuffle.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_best_shuffle', 'obj': 'TestBestShuffle.test_shuffle_abba', 'line': 75, 'column': 4, 'endLine': 75, 'endColumn': 25, 'path': 'data/generated/docs_python/best_shuffle/test_gpt_4o_2024_08_06_best_shuffle.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Binary strings,"Many languages have powerful and useful (binary safe) string manipulation functions, while others don't, making it harder for these languages to accomplish some tasks.

This task is about creating functions to handle binary strings (strings made of arbitrary bytes, i.e. byte strings according to Wikipedia) for those languages that don't have built-in support for them.

If your language of choice does have this built-in support, show a possible alternative implementation for the functions or abilities already provided by the language.

In particular the functions you need to create are:

 String creation and destruction (when needed and if there's no garbage collection or similar mechanism)
 String assignment
 String comparison
 String cloning and copying
 Check if a string is empty
 Append a byte to a string
 Extract a substring from a string
 Replace every occurrence of a byte (or a string) in a string with another string
 Join strings


Possible contexts of use: compression algorithms (like LZW compression), L-systems (manipulation of symbols), many more.



",Python,"s1 = ""A 'string' literal \n""
s2 = 'You may use any of \' or "" as delimiter'
s3 = """"""This text
   goes over several lines
       up to the closing triple quote""""""",162,5,"import unittest
from binary_strings import (
    create_string,
    assign_string,
    compare_strings,
    clone_string,
    is_empty,
    append_byte,
    extract_substring,
    replace_occurrences,
    join_strings
)

class TestBinaryStrings(unittest.TestCase):

    def test_create_string(self):
        s = create_string(b""hello"")
        self.assertEqual(s, b""hello"")

    def test_assign_string(self):
        s = create_string(b""initial"")
        assign_string(s, b""new value"")
        self.assertEqual(s, b""new value"")

    def test_compare_strings(self):
        s1 = create_string(b""test"")
        s2 = create_string(b""test"")
        s3 = create_string(b""other"")
        self.assertTrue(compare_strings(s1, s2))
        self.assertFalse(compare_strings(s1, s3))

    def test_clone_string(self):
        s1 = create_string(b""clone me"")
        s2 = clone_string(s1)
        self.assertEqual(s1, s2)
        self.assertIsNot(s1, s2)  # Ensure they are different objects

    def test_is_empty(self):
        s1 = create_string(b"""")
        s2 = create_string(b""not empty"")
        self.assertTrue(is_empty(s1))
        self.assertFalse(is_empty(s2))

    def test_append_byte(self):
        s = create_string(b""hello"")
        append_byte(s, b""!"")
        self.assertEqual(s, b""hello!"")

    def test_extract_substring(self):
        s = create_string(b""hello world"")
        sub = extract_substring(s, 0, 5)
        self.assertEqual(sub, b""hello"")
        sub = extract_substring(s, 6, 11)
        self.assertEqual(sub, b""world"")

    def test_replace_occurrences(self):
        s = create_string(b""banana"")
        result = replace_occurrences(s, b""na"", b""NA"")
        self.assertEqual(result, b""baNANA"")

    def test_join_strings(self):
        s1 = create_string(b""hello"")
        s2 = create_string(b""world"")
        result = join_strings([s1, s2], b"" "")
        self.assertEqual(result, b""hello world"")

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/binary_strings/test_gpt_4o_2024_08_06_binary_strings.py,CompileStatus.OK,0.0,10.0,9.62,0.23,,,0.7227628231048584,20.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_binary_strings', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/binary_strings/test_gpt_4o_2024_08_06_binary_strings.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_binary_strings', 'obj': '', 'line': 2, 'column': 0, 'endLine': 12, 'endColumn': 1, 'path': 'data/generated/docs_python/binary_strings/test_gpt_4o_2024_08_06_binary_strings.py', 'symbol': 'no-name-in-module', 'message': ""No name 'create_string' in module 'binary_strings'"", 'message-id': 'E0611'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_binary_strings', 'obj': '', 'line': 2, 'column': 0, 'endLine': 12, 'endColumn': 1, 'path': 'data/generated/docs_python/binary_strings/test_gpt_4o_2024_08_06_binary_strings.py', 'symbol': 'no-name-in-module', 'message': ""No name 'assign_string' in module 'binary_strings'"", 'message-id': 'E0611'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_binary_strings', 'obj': '', 'line': 2, 'column': 0, 'endLine': 12, 'endColumn': 1, 'path': 'data/generated/docs_python/binary_strings/test_gpt_4o_2024_08_06_binary_strings.py', 'symbol': 'no-name-in-module', 'message': ""No name 'compare_strings' in module 'binary_strings'"", 'message-id': 'E0611'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_binary_strings', 'obj': '', 'line': 2, 'column': 0, 'endLine': 12, 'endColumn': 1, 'path': 'data/generated/docs_python/binary_strings/test_gpt_4o_2024_08_06_binary_strings.py', 'symbol': 'no-name-in-module', 'message': ""No name 'clone_string' in module 'binary_strings'"", 'message-id': 'E0611'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_binary_strings', 'obj': '', 'line': 2, 'column': 0, 'endLine': 12, 'endColumn': 1, 'path': 'data/generated/docs_python/binary_strings/test_gpt_4o_2024_08_06_binary_strings.py', 'symbol': 'no-name-in-module', 'message': ""No name 'is_empty' in module 'binary_strings'"", 'message-id': 'E0611'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_binary_strings', 'obj': '', 'line': 2, 'column': 0, 'endLine': 12, 'endColumn': 1, 'path': 'data/generated/docs_python/binary_strings/test_gpt_4o_2024_08_06_binary_strings.py', 'symbol': 'no-name-in-module', 'message': ""No name 'append_byte' in module 'binary_strings'"", 'message-id': 'E0611'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_binary_strings', 'obj': '', 'line': 2, 'column': 0, 'endLine': 12, 'endColumn': 1, 'path': 'data/generated/docs_python/binary_strings/test_gpt_4o_2024_08_06_binary_strings.py', 'symbol': 'no-name-in-module', 'message': ""No name 'extract_substring' in module 'binary_strings'"", 'message-id': 'E0611'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_binary_strings', 'obj': '', 'line': 2, 'column': 0, 'endLine': 12, 'endColumn': 1, 'path': 'data/generated/docs_python/binary_strings/test_gpt_4o_2024_08_06_binary_strings.py', 'symbol': 'no-name-in-module', 'message': ""No name 'replace_occurrences' in module 'binary_strings'"", 'message-id': 'E0611'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_binary_strings', 'obj': '', 'line': 2, 'column': 0, 'endLine': 12, 'endColumn': 1, 'path': 'data/generated/docs_python/binary_strings/test_gpt_4o_2024_08_06_binary_strings.py', 'symbol': 'no-name-in-module', 'message': ""No name 'join_strings' in module 'binary_strings'"", 'message-id': 'E0611'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_binary_strings', 'obj': 'TestBinaryStrings', 'line': 14, 'column': 0, 'endLine': 14, 'endColumn': 23, 'path': 'data/generated/docs_python/binary_strings/test_gpt_4o_2024_08_06_binary_strings.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_binary_strings', 'obj': 'TestBinaryStrings.test_create_string', 'line': 16, 'column': 4, 'endLine': 16, 'endColumn': 26, 'path': 'data/generated/docs_python/binary_strings/test_gpt_4o_2024_08_06_binary_strings.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_binary_strings', 'obj': 'TestBinaryStrings.test_assign_string', 'line': 20, 'column': 4, 'endLine': 20, 'endColumn': 26, 'path': 'data/generated/docs_python/binary_strings/test_gpt_4o_2024_08_06_binary_strings.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_binary_strings', 'obj': 'TestBinaryStrings.test_compare_strings', 'line': 25, 'column': 4, 'endLine': 25, 'endColumn': 28, 'path': 'data/generated/docs_python/binary_strings/test_gpt_4o_2024_08_06_binary_strings.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_binary_strings', 'obj': 'TestBinaryStrings.test_clone_string', 'line': 32, 'column': 4, 'endLine': 32, 'endColumn': 25, 'path': 'data/generated/docs_python/binary_strings/test_gpt_4o_2024_08_06_binary_strings.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_binary_strings', 'obj': 'TestBinaryStrings.test_is_empty', 'line': 38, 'column': 4, 'endLine': 38, 'endColumn': 21, 'path': 'data/generated/docs_python/binary_strings/test_gpt_4o_2024_08_06_binary_strings.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_binary_strings', 'obj': 'TestBinaryStrings.test_append_byte', 'line': 44, 'column': 4, 'endLine': 44, 'endColumn': 24, 'path': 'data/generated/docs_python/binary_strings/test_gpt_4o_2024_08_06_binary_strings.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_binary_strings', 'obj': 'TestBinaryStrings.test_extract_substring', 'line': 49, 'column': 4, 'endLine': 49, 'endColumn': 30, 'path': 'data/generated/docs_python/binary_strings/test_gpt_4o_2024_08_06_binary_strings.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_binary_strings', 'obj': 'TestBinaryStrings.test_replace_occurrences', 'line': 56, 'column': 4, 'endLine': 56, 'endColumn': 32, 'path': 'data/generated/docs_python/binary_strings/test_gpt_4o_2024_08_06_binary_strings.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_binary_strings', 'obj': 'TestBinaryStrings.test_join_strings', 'line': 61, 'column': 4, 'endLine': 61, 'endColumn': 25, 'path': 'data/generated/docs_python/binary_strings/test_gpt_4o_2024_08_06_binary_strings.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Bitcoin/address validation,"Bitcoin/address validation

You are encouraged to solve this task according to the task description, using any language you may know.


Task

Write a program that takes a bitcoin address as argument,
and checks whether or not this address is valid.

A bitcoin address uses a base58 encoding, which uses an alphabet of the characters 0 .. 9, A ..Z, a .. z, but without the four characters:

   0   zero
   O   uppercase oh
   I   uppercase eye
   l   lowercase ell


With this encoding, a bitcoin address encodes 25 bytes:

 the first byte is the version number, which will be zero for this task ;
 the next twenty bytes are a RIPEMD-160 digest, but you don't have to know that for this task: you can consider them a pure arbitrary data ;
 the last four bytes are a checksum check. They are the first four bytes of a double SHA-256 digest of the previous 21 bytes.


To check the bitcoin address, you must read the first twenty-one bytes, compute the checksum, and check that it corresponds to the last four bytes.

The program can either return a boolean value or throw an exception when not valid.

You can use a digest library for SHA-256.



Example of a bitcoin address



1AGNa15ZQXAZUgFiqJ2i7Z2DPU2J6hW62i



It doesn't belong to anyone and is part of the test suite of the bitcoin software.

You can change a few characters in this string and check that it'll fail the test.



",Python,"from hashlib import sha256
 
digits58 = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'
 
def decode_base58(bc, length):
    n = 0
    for char in bc:
        n = n * 58 + digits58.index(char)
    return n.to_bytes(length, 'big')
def check_bc(bc):
    try:
        bcbytes = decode_base58(bc, 25)
        return bcbytes[-4:] == sha256(sha256(bcbytes[:-4]).digest()).digest()[:4]
    except Exception:
        return False
 
print(check_bc('1AGNa15ZQXAZUgFiqJ3i7Z2DPU2J6hW62i'))
print(check_bc(""17NdbrSGoUotzeGCcMMCqnFkEvLymoou9j""))",544,18,"import unittest
from bitcoin_address_validation import check_bc

class TestBitcoinAddressValidation(unittest.TestCase):

    def test_valid_address(self):
        # This is a known valid Bitcoin address
        self.assertTrue(check_bc('1AGNa15ZQXAZUgFiqJ2i7Z2DPU2J6hW62i'))

    def test_invalid_address_checksum(self):
        # This address has an invalid checksum
        self.assertFalse(check_bc('1AGNa15ZQXAZUgFiqJ3i7Z2DPU2J6hW62i'))

    def test_invalid_address_characters(self):
        # This address contains invalid characters (0, O, I, l)
        self.assertFalse(check_bc('1AGNa15ZQXAZUgFiqJ2i7Z2DPU2J6hW62O'))

    def test_empty_address(self):
        # An empty address should be invalid
        self.assertFalse(check_bc(''))

    def test_short_address(self):
        # A too short address should be invalid
        self.assertFalse(check_bc('1AGNa15ZQXAZUgFiqJ2i7Z2DPU2J6hW6'))

    def test_long_address(self):
        # A too long address should be invalid
        self.assertFalse(check_bc('1AGNa15ZQXAZUgFiqJ2i7Z2DPU2J6hW62i1'))

    def test_valid_address_with_different_version(self):
        # This is a valid address with a different version byte
        self.assertTrue(check_bc('17NdbrSGoUotzeGCcMMCqnFkEvLymoou9j'))

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/bitcoin_address_validation/test_gpt_4o_2024_08_06_bitcoin_address_validation.py,CompileStatus.OK,0.0,97.06,94.74,0.37,1.75,100.0,0.6366891860961914,9.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_bitcoin_address_validation', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/bitcoin_address_validation/test_gpt_4o_2024_08_06_bitcoin_address_validation.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_bitcoin_address_validation', 'obj': 'TestBitcoinAddressValidation', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 34, 'path': 'data/generated/docs_python/bitcoin_address_validation/test_gpt_4o_2024_08_06_bitcoin_address_validation.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_bitcoin_address_validation', 'obj': 'TestBitcoinAddressValidation.test_valid_address', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 26, 'path': 'data/generated/docs_python/bitcoin_address_validation/test_gpt_4o_2024_08_06_bitcoin_address_validation.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_bitcoin_address_validation', 'obj': 'TestBitcoinAddressValidation.test_invalid_address_checksum', 'line': 10, 'column': 4, 'endLine': 10, 'endColumn': 37, 'path': 'data/generated/docs_python/bitcoin_address_validation/test_gpt_4o_2024_08_06_bitcoin_address_validation.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_bitcoin_address_validation', 'obj': 'TestBitcoinAddressValidation.test_invalid_address_characters', 'line': 14, 'column': 4, 'endLine': 14, 'endColumn': 39, 'path': 'data/generated/docs_python/bitcoin_address_validation/test_gpt_4o_2024_08_06_bitcoin_address_validation.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_bitcoin_address_validation', 'obj': 'TestBitcoinAddressValidation.test_empty_address', 'line': 18, 'column': 4, 'endLine': 18, 'endColumn': 26, 'path': 'data/generated/docs_python/bitcoin_address_validation/test_gpt_4o_2024_08_06_bitcoin_address_validation.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_bitcoin_address_validation', 'obj': 'TestBitcoinAddressValidation.test_short_address', 'line': 22, 'column': 4, 'endLine': 22, 'endColumn': 26, 'path': 'data/generated/docs_python/bitcoin_address_validation/test_gpt_4o_2024_08_06_bitcoin_address_validation.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_bitcoin_address_validation', 'obj': 'TestBitcoinAddressValidation.test_long_address', 'line': 26, 'column': 4, 'endLine': 26, 'endColumn': 25, 'path': 'data/generated/docs_python/bitcoin_address_validation/test_gpt_4o_2024_08_06_bitcoin_address_validation.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_bitcoin_address_validation', 'obj': 'TestBitcoinAddressValidation.test_valid_address_with_different_version', 'line': 30, 'column': 4, 'endLine': 30, 'endColumn': 49, 'path': 'data/generated/docs_python/bitcoin_address_validation/test_gpt_4o_2024_08_06_bitcoin_address_validation.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Box the compass,"There be many a land lubber that knows naught of the pirate ways and gives direction by degree!
They know not how to box the compass!



Task description

 Create a function that takes a heading in degrees and returns the correct 32-point compass heading.
 Use the function to print and display a table of Index, Compass point, and Degree; rather like the corresponding columns from, the first table of the wikipedia article, but use only the following 33 headings as input:
[0.0, 16.87, 16.88, 33.75, 50.62, 50.63, 67.5, 84.37, 84.38, 101.25, 118.12, 118.13, 135.0, 151.87, 151.88, 168.75, 185.62, 185.63, 202.5, 219.37, 219.38, 236.25, 253.12, 253.13, 270.0, 286.87, 286.88, 303.75, 320.62, 320.63, 337.5, 354.37, 354.38]. (They should give the same order of points but are spread throughout the ranges of acceptance).


Notes;
 The headings and indices can be calculated from this pseudocode:
for i in 0..32 inclusive:
    heading = i * 11.25
    case i %3:
      if 1: heading += 5.62; break
      if 2: heading -= 5.62; break
    end
    index = ( i mod 32) + 1
 The column of indices can be thought of as an enumeration of the thirty two cardinal points (see talk page)..

",Python,"majors   = 'north east south west'.split()
majors   *= 2 # no need for modulo later
quarter1 = 'N,N by E,N-NE,NE by N,NE,NE by E,E-NE,E by N'.split(',')
quarter2 = [p.replace('NE','EN') for p in quarter1]
 
def degrees2compasspoint(d):
    d = (d % 360) + 360/64
    majorindex, minor = divmod(d, 90.)
    majorindex = int(majorindex)
    minorindex  = int( (minor*4) // 45 )
    p1, p2 = majors[majorindex: majorindex+2]
    if p1 in {'north', 'south'}:
        q = quarter1
    else:
        q = quarter2
    return q[minorindex].replace('N', p1).replace('E', p2).capitalize()
 
if __name__ == '__main__':
    for i in range(33):
        d = i * 11.25
        m = i % 3
        if   m == 1: d += 5.62
        elif m == 2: d -= 5.62
        n = i % 32 + 1
        print( '%2i %-18s %7.2f°' % (n, degrees2compasspoint(d), d) )",826,25,"import unittest
from box_the_compass import degrees2compasspoint

class TestDegreesToCompassPoint(unittest.TestCase):
    def test_compass_points(self):
        test_cases = [
            (0.0, ""North""),
            (16.87, ""North by east""),
            (16.88, ""North-northeast""),
            (33.75, ""Northeast by north""),
            (50.62, ""Northeast""),
            (50.63, ""Northeast by east""),
            (67.5, ""East-northeast""),
            (84.37, ""East by north""),
            (84.38, ""East""),
            (101.25, ""East by south""),
            (118.12, ""East-southeast""),
            (118.13, ""Southeast by east""),
            (135.0, ""Southeast""),
            (151.87, ""Southeast by south""),
            (151.88, ""South-southeast""),
            (168.75, ""South by east""),
            (185.62, ""South""),
            (185.63, ""South by west""),
            (202.5, ""South-southwest""),
            (219.37, ""Southwest by south""),
            (219.38, ""Southwest""),
            (236.25, ""Southwest by west""),
            (253.12, ""West-southwest""),
            (253.13, ""West by south""),
            (270.0, ""West""),
            (286.87, ""West by north""),
            (286.88, ""West-northwest""),
            (303.75, ""Northwest by west""),
            (320.62, ""Northwest""),
            (320.63, ""Northwest by north""),
            (337.5, ""North-northwest""),
            (354.37, ""North by west""),
            (354.38, ""North""),
        ]

        for degrees, expected in test_cases:
            with self.subTest(degrees=degrees):
                self.assertEqual(degrees2compasspoint(degrees), expected)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/box_the_compass/test_gpt_4o_2024_08_06_box_the_compass.py,CompileStatus.OK,0.0,75.0,70.83,0.02,0.5,100.0,0.6697421073913574,3.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_box_the_compass', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/box_the_compass/test_gpt_4o_2024_08_06_box_the_compass.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_box_the_compass', 'obj': 'TestDegreesToCompassPoint', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 31, 'path': 'data/generated/docs_python/box_the_compass/test_gpt_4o_2024_08_06_box_the_compass.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_box_the_compass', 'obj': 'TestDegreesToCompassPoint.test_compass_points', 'line': 5, 'column': 4, 'endLine': 5, 'endColumn': 27, 'path': 'data/generated/docs_python/box_the_compass/test_gpt_4o_2024_08_06_box_the_compass.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Brownian tree,"Brownian tree

You are encouraged to solve this task according to the task description, using any language you may know.



Task

Generate and draw a   Brownian Tree.



A Brownian Tree is generated as a result of an initial seed, followed by the interaction of two processes.

 The initial ""seed"" is placed somewhere within the field. Where is not particularly important; it could be randomized, or it could be a fixed point.
 Particles are injected into the field, and are individually given a (typically random) motion pattern.
 When a particle collides with the seed or tree, its position is fixed, and it's considered to be part of the tree.

Because of the lax rules governing the random nature of the particle's placement and motion, no two resulting trees are really expected to be the same, or even necessarily have the same general shape.


",Python,"import pygame, sys, os
from pygame.locals import *
from random import randint
pygame.init()
 
MAXSPEED = 15
SIZE = 3
COLOR = (45, 90, 45)
WINDOWSIZE = 400
TIMETICK = 1
MAXPART = 50
 
freeParticles = pygame.sprite.Group()
tree = pygame.sprite.Group()
 
window = pygame.display.set_mode((WINDOWSIZE, WINDOWSIZE))
pygame.display.set_caption(""Brownian Tree"")
 
screen = pygame.display.get_surface()
 
 
class Particle(pygame.sprite.Sprite):
    def __init__(self, vector, location, surface):
        pygame.sprite.Sprite.__init__(self)
        self.vector = vector
        self.surface = surface
        self.accelerate(vector)
        self.add(freeParticles)
        self.rect = pygame.Rect(location[0], location[1], SIZE, SIZE)
        self.surface.fill(COLOR, self.rect)
 
    def onEdge(self):
        if self.rect.left <= 0:
            self.vector = (abs(self.vector[0]), self.vector[1])
        elif self.rect.top <= 0:
            self.vector = (self.vector[0], abs(self.vector[1]))
        elif self.rect.right >= WINDOWSIZE:
            self.vector = (-abs(self.vector[0]), self.vector[1])
        elif self.rect.bottom >= WINDOWSIZE:
            self.vector = (self.vector[0], -abs(self.vector[1]))
 
    def update(self):
        if freeParticles in self.groups():
            self.surface.fill((0,0,0), self.rect)
            self.remove(freeParticles)
            if pygame.sprite.spritecollideany(self, freeParticles):
                self.accelerate((randint(-MAXSPEED, MAXSPEED),
                                 randint(-MAXSPEED, MAXSPEED)))
                self.add(freeParticles)
            elif pygame.sprite.spritecollideany(self, tree):
                self.stop()
            else:
                self.add(freeParticles)
 
            self.onEdge()
 
            if (self.vector == (0,0)) and tree not in self.groups():
                self.accelerate((randint(-MAXSPEED, MAXSPEED),
                                 randint(-MAXSPEED, MAXSPEED)))
            self.rect.move_ip(self.vector[0], self.vector[1])
        self.surface.fill(COLOR, self.rect)
 
    def stop(self):
        self.vector = (0,0)
        self.remove(freeParticles)
        self.add(tree)
 
    def accelerate(self, vector):
        self.vector = vector
 
NEW = USEREVENT + 1
TICK = USEREVENT + 2
 
pygame.time.set_timer(NEW, 50)
pygame.time.set_timer(TICK, TIMETICK)
 
 
def input(events):
    for event in events:
        if event.type == QUIT:
            sys.exit(0)
        elif event.type == NEW and (len(freeParticles) < MAXPART):
            Particle((randint(-MAXSPEED,MAXSPEED),
                      randint(-MAXSPEED,MAXSPEED)),
                     (randint(0, WINDOWSIZE), randint(0, WINDOWSIZE)),
                     screen)
        elif event.type == TICK:
            freeParticles.update()
 
 
half = WINDOWSIZE/2
tenth = WINDOWSIZE/10
 
root = Particle((0,0),
                (randint(half-tenth, half+tenth),
                 randint(half-tenth, half+tenth)), screen)
root.stop()
 
while True:
    input(pygame.event.get())
    pygame.display.flip()",3069,101,"import unittest
from unittest.mock import Mock, patch
import pygame
from brownian_tree import Particle, freeParticles, tree, WINDOWSIZE, SIZE, COLOR

class TestParticle(unittest.TestCase):

    def setUp(self):
        # Initialize Pygame and create a mock surface
        pygame.init()
        self.surface = pygame.Surface((WINDOWSIZE, WINDOWSIZE))
        self.vector = (5, 5)
        self.location = (50, 50)
        self.particle = Particle(self.vector, self.location, self.surface)

    def test_particle_initialization(self):
        self.assertEqual(self.particle.vector, self.vector)
        self.assertEqual(self.particle.rect.topleft, self.location)
        self.assertIn(self.particle, freeParticles)

    def test_particle_on_edge(self):
        # Test when particle hits the left edge
        self.particle.rect.left = 0
        self.particle.onEdge()
        self.assertEqual(self.particle.vector[0], abs(self.vector[0]))

        # Test when particle hits the top edge
        self.particle.rect.top = 0
        self.particle.onEdge()
        self.assertEqual(self.particle.vector[1], abs(self.vector[1]))

        # Test when particle hits the right edge
        self.particle.rect.right = WINDOWSIZE
        self.particle.onEdge()
        self.assertEqual(self.particle.vector[0], -abs(self.vector[0]))

        # Test when particle hits the bottom edge
        self.particle.rect.bottom = WINDOWSIZE
        self.particle.onEdge()
        self.assertEqual(self.particle.vector[1], -abs(self.vector[1]))

    @patch('brownian_tree.pygame.sprite.spritecollideany')
    def test_particle_update_collision_with_tree(self, mock_spritecollideany):
        # Simulate collision with tree
        mock_spritecollideany.side_effect = lambda sprite, group: group == tree
        self.particle.update()
        self.assertEqual(self.particle.vector, (0, 0))
        self.assertIn(self.particle, tree)
        self.assertNotIn(self.particle, freeParticles)

    @patch('brownian_tree.pygame.sprite.spritecollideany')
    def test_particle_update_no_collision(self, mock_spritecollideany):
        # Simulate no collision
        mock_spritecollideany.return_value = None
        self.particle.update()
        self.assertIn(self.particle, freeParticles)

    def test_particle_stop(self):
        self.particle.stop()
        self.assertEqual(self.particle.vector, (0, 0))
        self.assertIn(self.particle, tree)
        self.assertNotIn(self.particle, freeParticles)

    def test_particle_accelerate(self):
        new_vector = (10, -10)
        self.particle.accelerate(new_vector)
        self.assertEqual(self.particle.vector, new_vector)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/brownian_tree/test_gpt_4o_2024_08_06_brownian_tree.py,CompileStatus.OK,0.0,2.42,1.97,0.29,0.75,,0.841583251953125,12.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_brownian_tree', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/brownian_tree/test_gpt_4o_2024_08_06_brownian_tree.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_brownian_tree', 'obj': '', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 13, 'path': 'data/generated/docs_python/brownian_tree/test_gpt_4o_2024_08_06_brownian_tree.py', 'symbol': 'import-error', 'message': ""Unable to import 'pygame'"", 'message-id': 'E0401'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_brownian_tree', 'obj': 'TestParticle', 'line': 6, 'column': 0, 'endLine': 6, 'endColumn': 18, 'path': 'data/generated/docs_python/brownian_tree/test_gpt_4o_2024_08_06_brownian_tree.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_brownian_tree', 'obj': 'TestParticle.test_particle_initialization', 'line': 16, 'column': 4, 'endLine': 16, 'endColumn': 36, 'path': 'data/generated/docs_python/brownian_tree/test_gpt_4o_2024_08_06_brownian_tree.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_brownian_tree', 'obj': 'TestParticle.test_particle_on_edge', 'line': 21, 'column': 4, 'endLine': 21, 'endColumn': 29, 'path': 'data/generated/docs_python/brownian_tree/test_gpt_4o_2024_08_06_brownian_tree.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_brownian_tree', 'obj': 'TestParticle.test_particle_update_collision_with_tree', 'line': 43, 'column': 4, 'endLine': 43, 'endColumn': 48, 'path': 'data/generated/docs_python/brownian_tree/test_gpt_4o_2024_08_06_brownian_tree.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_brownian_tree', 'obj': 'TestParticle.test_particle_update_no_collision', 'line': 52, 'column': 4, 'endLine': 52, 'endColumn': 41, 'path': 'data/generated/docs_python/brownian_tree/test_gpt_4o_2024_08_06_brownian_tree.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_brownian_tree', 'obj': 'TestParticle.test_particle_stop', 'line': 58, 'column': 4, 'endLine': 58, 'endColumn': 26, 'path': 'data/generated/docs_python/brownian_tree/test_gpt_4o_2024_08_06_brownian_tree.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_brownian_tree', 'obj': 'TestParticle.test_particle_accelerate', 'line': 64, 'column': 4, 'endLine': 64, 'endColumn': 32, 'path': 'data/generated/docs_python/brownian_tree/test_gpt_4o_2024_08_06_brownian_tree.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_brownian_tree', 'obj': '', 'line': 2, 'column': 0, 'endLine': 2, 'endColumn': 37, 'path': 'data/generated/docs_python/brownian_tree/test_gpt_4o_2024_08_06_brownian_tree.py', 'symbol': 'unused-import', 'message': 'Unused Mock imported from unittest.mock', 'message-id': 'W0611'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_brownian_tree', 'obj': '', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 80, 'path': 'data/generated/docs_python/brownian_tree/test_gpt_4o_2024_08_06_brownian_tree.py', 'symbol': 'unused-import', 'message': 'Unused SIZE imported from brownian_tree', 'message-id': 'W0611'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_brownian_tree', 'obj': '', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 80, 'path': 'data/generated/docs_python/brownian_tree/test_gpt_4o_2024_08_06_brownian_tree.py', 'symbol': 'unused-import', 'message': 'Unused COLOR imported from brownian_tree', 'message-id': 'W0611'}]",False
CSV data manipulation,"CSV spreadsheet files are suitable for storing tabular data in a relatively portable way.

The CSV format is flexible but somewhat ill-defined.

For present purposes, authors may assume that the data fields contain no commas, backslashes, or quotation marks.



Task

Read a CSV file, change some values and save the changes back to a file.

For this task we will use the following CSV file:

C1,C2,C3,C4,C5
1,5,9,13,17
2,6,10,14,18
3,7,11,15,19
4,8,12,16,20

Suggestions


 Show how to add a column, headed 'SUM', of the sums of the rows.
 If possible, illustrate the use of built-in or standard functions, methods, or libraries, that handle generic CSV files.


",Python,"import fileinput
 
changerow, changecolumn, changevalue = 2, 4, '""Spam""'
 
with fileinput.input('csv_data_manipulation.csv', inplace=True) as f:
    for line in f:
        if fileinput.filelineno() == changerow:
            fields = line.rstrip().split(',')
            fields[changecolumn-1] = changevalue
            line = ','.join(fields) + '\n'
        print(line, end='')",377,11,"import unittest
import csv
import os

class TestCSVDataManipulation(unittest.TestCase):

    def setUp(self):
        # Create a sample CSV file for testing
        self.test_csv_filename = 'test_csv_data_manipulation.csv'
        with open(self.test_csv_filename, 'w', newline='') as csvfile:
            writer = csv.writer(csvfile)
            writer.writerow(['C1', 'C2', 'C3', 'C4', 'C5'])
            writer.writerow([1, 5, 9, 13, 17])
            writer.writerow([2, 6, 10, 14, 18])
            writer.writerow([3, 7, 11, 15, 19])
            writer.writerow([4, 8, 12, 16, 20])

    def tearDown(self):
        # Remove the test CSV file after tests
        try:
            os.remove(self.test_csv_filename)
        except OSError:
            pass

    def test_change_value(self):
        # Change a specific value in the CSV file
        changerow, changecolumn, changevalue = 2, 4, 'Spam'

        with open(self.test_csv_filename, 'r') as f:
            lines = f.readlines()

        with open(self.test_csv_filename, 'w') as f:
            for i, line in enumerate(lines):
                if i == changerow - 1:
                    fields = line.rstrip().split(',')
                    fields[changecolumn - 1] = changevalue
                    line = ','.join(fields) + '\n'
                f.write(line)

        # Verify the change
        with open(self.test_csv_filename, 'r') as f:
            reader = csv.reader(f)
            rows = list(reader)
            self.assertEqual(rows[changerow][changecolumn - 1], changevalue)

    def test_add_sum_column(self):
        # Add a 'SUM' column with the sum of each row
        with open(self.test_csv_filename, 'r') as f:
            reader = csv.reader(f)
            rows = [row for row in reader]

        # Add 'SUM' header
        rows[0].append('SUM')

        # Calculate sum for each row and append
        for row in rows[1:]:
            row_sum = sum(int(value) for value in row)
            row.append(str(row_sum))

        # Write back to CSV
        with open(self.test_csv_filename, 'w', newline='') as f:
            writer = csv.writer(f)
            writer.writerows(rows)

        # Verify the 'SUM' column
        with open(self.test_csv_filename, 'r') as f:
            reader = csv.reader(f)
            rows = list(reader)
            self.assertEqual(rows[0][-1], 'SUM')
            for row in rows[1:]:
                expected_sum = sum(int(value) for value in row[:-1])
                self.assertEqual(int(row[-1]), expected_sum)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/csv_data_manipulation/test_gpt_4o_2024_08_06_csv_data_manipulation.py,CompileStatus.OK,0.0,80.65,80.61,0.06,,50.0,0.7391228675842285,13.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_csv_data_manipulation', 'obj': '', 'line': 28, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/csv_data_manipulation/test_gpt_4o_2024_08_06_csv_data_manipulation.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_csv_data_manipulation', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/csv_data_manipulation/test_gpt_4o_2024_08_06_csv_data_manipulation.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_csv_data_manipulation', 'obj': 'TestCSVDataManipulation', 'line': 5, 'column': 0, 'endLine': 5, 'endColumn': 29, 'path': 'data/generated/docs_python/csv_data_manipulation/test_gpt_4o_2024_08_06_csv_data_manipulation.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_csv_data_manipulation', 'obj': 'TestCSVDataManipulation.setUp', 'line': 10, 'column': 13, 'endLine': 10, 'endColumn': 58, 'path': 'data/generated/docs_python/csv_data_manipulation/test_gpt_4o_2024_08_06_csv_data_manipulation.py', 'symbol': 'unspecified-encoding', 'message': 'Using open without explicitly specifying an encoding', 'message-id': 'W1514'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_csv_data_manipulation', 'obj': 'TestCSVDataManipulation.test_change_value', 'line': 25, 'column': 4, 'endLine': 25, 'endColumn': 25, 'path': 'data/generated/docs_python/csv_data_manipulation/test_gpt_4o_2024_08_06_csv_data_manipulation.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_csv_data_manipulation', 'obj': 'TestCSVDataManipulation.test_change_value', 'line': 29, 'column': 13, 'endLine': 29, 'endColumn': 46, 'path': 'data/generated/docs_python/csv_data_manipulation/test_gpt_4o_2024_08_06_csv_data_manipulation.py', 'symbol': 'unspecified-encoding', 'message': 'Using open without explicitly specifying an encoding', 'message-id': 'W1514'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_csv_data_manipulation', 'obj': 'TestCSVDataManipulation.test_change_value', 'line': 32, 'column': 13, 'endLine': 32, 'endColumn': 46, 'path': 'data/generated/docs_python/csv_data_manipulation/test_gpt_4o_2024_08_06_csv_data_manipulation.py', 'symbol': 'unspecified-encoding', 'message': 'Using open without explicitly specifying an encoding', 'message-id': 'W1514'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_csv_data_manipulation', 'obj': 'TestCSVDataManipulation.test_change_value', 'line': 41, 'column': 13, 'endLine': 41, 'endColumn': 46, 'path': 'data/generated/docs_python/csv_data_manipulation/test_gpt_4o_2024_08_06_csv_data_manipulation.py', 'symbol': 'unspecified-encoding', 'message': 'Using open without explicitly specifying an encoding', 'message-id': 'W1514'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_csv_data_manipulation', 'obj': 'TestCSVDataManipulation.test_add_sum_column', 'line': 46, 'column': 4, 'endLine': 46, 'endColumn': 27, 'path': 'data/generated/docs_python/csv_data_manipulation/test_gpt_4o_2024_08_06_csv_data_manipulation.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_csv_data_manipulation', 'obj': 'TestCSVDataManipulation.test_add_sum_column', 'line': 48, 'column': 13, 'endLine': 48, 'endColumn': 46, 'path': 'data/generated/docs_python/csv_data_manipulation/test_gpt_4o_2024_08_06_csv_data_manipulation.py', 'symbol': 'unspecified-encoding', 'message': 'Using open without explicitly specifying an encoding', 'message-id': 'W1514'}, {'type': 'refactor', 'module': 'test_gpt_4o_2024_08_06_csv_data_manipulation', 'obj': 'TestCSVDataManipulation.test_add_sum_column', 'line': 50, 'column': 19, 'endLine': 50, 'endColumn': 42, 'path': 'data/generated/docs_python/csv_data_manipulation/test_gpt_4o_2024_08_06_csv_data_manipulation.py', 'symbol': 'unnecessary-comprehension', 'message': 'Unnecessary use of a comprehension, use list(reader) instead.', 'message-id': 'R1721'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_csv_data_manipulation', 'obj': 'TestCSVDataManipulation.test_add_sum_column', 'line': 61, 'column': 13, 'endLine': 61, 'endColumn': 58, 'path': 'data/generated/docs_python/csv_data_manipulation/test_gpt_4o_2024_08_06_csv_data_manipulation.py', 'symbol': 'unspecified-encoding', 'message': 'Using open without explicitly specifying an encoding', 'message-id': 'W1514'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_csv_data_manipulation', 'obj': 'TestCSVDataManipulation.test_add_sum_column', 'line': 66, 'column': 13, 'endLine': 66, 'endColumn': 46, 'path': 'data/generated/docs_python/csv_data_manipulation/test_gpt_4o_2024_08_06_csv_data_manipulation.py', 'symbol': 'unspecified-encoding', 'message': 'Using open without explicitly specifying an encoding', 'message-id': 'W1514'}]",False
CUSIP,"

 This page uses content from Wikipedia. The original article was at CUSIP. The list of authors can be seen in the page history. As with Rosetta Code, the text of Wikipedia is available under the GNU FDL. (See links for details on variance)



A   CUSIP   is a nine-character alphanumeric code that identifies a North American financial security for the purposes of facilitating clearing and settlement of trades. The CUSIP was adopted as an American National Standard under Accredited Standards X9.6.



Task

Ensure the last digit   (i.e., the   check digit)   of the CUSIP code (the 1st column) is correct, against the following:

   037833100       Apple Incorporated
   17275R102       Cisco Systems
   38259P508       Google Incorporated
   594918104       Microsoft Corporation
   68389X106       Oracle Corporation   (incorrect)
   68389X105       Oracle Corporation


Example pseudo-code below.
algorithm Cusip-Check-Digit(cusip) is
   Input: an 8-character CUSIP
 
   sum := 0
   for 1 ≤ i ≤ 8 do
      c := the ith character of cusip
      if c is a digit then
         v := numeric value of the digit c
      else if c is a letter then
         p := ordinal position of c in the alphabet (A=1, B=2...)
         v := p + 9
      else if c = ""*"" then
         v := 36
      else if c = ""@"" then
         v := 37
      else if' c = ""#"" then
         v := 38
      end if
      if i is even then
         v := v × 2
      end if
 
      sum := sum + int ( v div 10 ) + v mod 10
   repeat
 
   return (10 - (sum mod 10)) mod 10
end function
See related tasks

 SEDOL
 ISIN

",Python,"#!/usr/bin/env python3
 
import math
 
def cusip_check(cusip):
    if len(cusip) != 9:
        raise ValueError('CUSIP must be 9 characters')
 
    cusip = cusip.upper()
    total = 0
    for i in range(8):
        c = cusip[i]
        if c.isdigit():
            v = int(c)
        elif c.isalpha():
            p = ord(c) - ord('A') + 1
            v = p + 9
        elif c == '*':
            v = 36
        elif c == '@':
            v = 37
        elif c == '#':
            v = 38
 
        if i % 2 != 0:
            v *= 2
 
        total += int(v / 10) + v % 10
    check = (10 - (total % 10)) % 10
    return str(check) == cusip[-1]
 
if __name__ == '__main__':
    codes = [
            '037833100',
            '17275R102',
            '38259P508',
            '594918104',
            '68389X106',
            '68389X105'
            ]
    for code in codes:
        print(f'{code} -> {cusip_check(code)}')
 ",921,43,"import unittest
from cusip import cusip_check

class TestCusipCheck(unittest.TestCase):

    def test_valid_cusips(self):
        # Valid CUSIPs
        self.assertTrue(cusip_check('037833100'))  # Apple Incorporated
        self.assertTrue(cusip_check('17275R102'))  # Cisco Systems
        self.assertTrue(cusip_check('38259P508'))  # Google Incorporated
        self.assertTrue(cusip_check('594918104'))  # Microsoft Corporation
        self.assertTrue(cusip_check('68389X105'))  # Oracle Corporation

    def test_invalid_cusips(self):
        # Invalid CUSIPs
        self.assertFalse(cusip_check('68389X106'))  # Incorrect Oracle Corporation

    def test_invalid_length(self):
        # CUSIP with invalid length
        with self.assertRaises(ValueError):
            cusip_check('12345678')  # 8 characters
        with self.assertRaises(ValueError):
            cusip_check('1234567890')  # 10 characters

    def test_invalid_characters(self):
        # CUSIP with invalid characters
        with self.assertRaises(ValueError):
            cusip_check('12345678!')  # Invalid character '!'
        with self.assertRaises(ValueError):
            cusip_check('12345678$')  # Invalid character '$')

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/cusip/test_gpt_4o_2024_08_06_cusip.py,CompileStatus.OK,0.0,76.47,67.9,0.43,1.11,75.0,0.689720869064331,6.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cusip', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/cusip/test_gpt_4o_2024_08_06_cusip.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cusip', 'obj': 'TestCusipCheck', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 20, 'path': 'data/generated/docs_python/cusip/test_gpt_4o_2024_08_06_cusip.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cusip', 'obj': 'TestCusipCheck.test_valid_cusips', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 25, 'path': 'data/generated/docs_python/cusip/test_gpt_4o_2024_08_06_cusip.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cusip', 'obj': 'TestCusipCheck.test_invalid_cusips', 'line': 14, 'column': 4, 'endLine': 14, 'endColumn': 27, 'path': 'data/generated/docs_python/cusip/test_gpt_4o_2024_08_06_cusip.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cusip', 'obj': 'TestCusipCheck.test_invalid_length', 'line': 18, 'column': 4, 'endLine': 18, 'endColumn': 27, 'path': 'data/generated/docs_python/cusip/test_gpt_4o_2024_08_06_cusip.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cusip', 'obj': 'TestCusipCheck.test_invalid_characters', 'line': 25, 'column': 4, 'endLine': 25, 'endColumn': 31, 'path': 'data/generated/docs_python/cusip/test_gpt_4o_2024_08_06_cusip.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Cartesian product of two or more lists,"Task

Show one or more idiomatic ways of generating the Cartesian product of two arbitrary lists in your language.

Demonstrate that your function/method correctly returns:

{1, 2} × {3, 4} = {(1, 3), (1, 4), (2, 3), (2, 4)}
and, in contrast:

{3, 4} × {1, 2} = {(3, 1), (3, 2), (4, 1), (4, 2)}
Also demonstrate, using your function/method, that the product of an empty list with any other list is empty.

 {1, 2} × {} = {}
 {} × {1, 2} = {}
For extra credit, show or write a function returning the n-ary product of an arbitrary number of lists, each of arbitrary length. Your function might, for example, accept a single argument which is itself a list of lists, and return the n-ary product of those lists.

Use your n-ary Cartesian product function to show the following products:

 {1776, 1789} × {7, 12} × {4, 14, 23} × {0, 1}
 {1, 2, 3} × {30} × {500, 100}
 {1, 2, 3} × {} × {500, 100}

",Python,"import itertools
 
def cp(lsts):
    return list(itertools.product(*lsts))
 
if __name__ == '__main__':
    from pprint import pprint as pp
 
    for lists in [[[1,2],[3,4]], [[3,4],[1,2]], [[], [1, 2]], [[1, 2], []],
                  ((1776, 1789),  (7, 12), (4, 14, 23), (0, 1)),
                  ((1, 2, 3), (30,), (500, 100)),
                  ((1, 2, 3), (), (500, 100))]:
        print(lists, '=>')
        pp(cp(lists), indent=2)
 ",441,15,"import unittest
from cartesian_product_of_two_or_more_lists import cp

class TestCartesianProduct(unittest.TestCase):

    def test_two_lists(self):
        # Test case for {1, 2} × {3, 4}
        result = cp([[1, 2], [3, 4]])
        expected = [(1, 3), (1, 4), (2, 3), (2, 4)]
        self.assertEqual(result, expected)

        # Test case for {3, 4} × {1, 2}
        result = cp([[3, 4], [1, 2]])
        expected = [(3, 1), (3, 2), (4, 1), (4, 2)]
        self.assertEqual(result, expected)

    def test_empty_list(self):
        # Test case for {1, 2} × {}
        result = cp([[1, 2], []])
        expected = []
        self.assertEqual(result, expected)

        # Test case for {} × {1, 2}
        result = cp([[], [1, 2]])
        expected = []
        self.assertEqual(result, expected)

    def test_n_ary_product(self):
        # Test case for {1776, 1789} × {7, 12} × {4, 14, 23} × {0, 1}
        result = cp([[1776, 1789], [7, 12], [4, 14, 23], [0, 1]])
        expected = [
            (1776, 7, 4, 0), (1776, 7, 4, 1), (1776, 7, 14, 0), (1776, 7, 14, 1),
            (1776, 7, 23, 0), (1776, 7, 23, 1), (1776, 12, 4, 0), (1776, 12, 4, 1),
            (1776, 12, 14, 0), (1776, 12, 14, 1), (1776, 12, 23, 0), (1776, 12, 23, 1),
            (1789, 7, 4, 0), (1789, 7, 4, 1), (1789, 7, 14, 0), (1789, 7, 14, 1),
            (1789, 7, 23, 0), (1789, 7, 23, 1), (1789, 12, 4, 0), (1789, 12, 4, 1),
            (1789, 12, 14, 0), (1789, 12, 14, 1), (1789, 12, 23, 0), (1789, 12, 23, 1)
        ]
        self.assertEqual(result, expected)

        # Test case for {1, 2, 3} × {30} × {500, 100}
        result = cp([[1, 2, 3], [30], [500, 100]])
        expected = [
            (1, 30, 500), (1, 30, 100), (2, 30, 500), (2, 30, 100), (3, 30, 500), (3, 30, 100)
        ]
        self.assertEqual(result, expected)

        # Test case for {1, 2, 3} × {} × {500, 100}
        result = cp([[1, 2, 3], [], [500, 100]])
        expected = []
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/cartesian_product_of_two_or_more_lists/test_gpt_4o_2024_08_06_cartesian_product_of_two_or_more_lists.py,CompileStatus.OK,0.0,86.49,79.07,0.19,7.0,100.0,0.6003322601318359,13.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cartesian_product_of_two_or_more_lists', 'obj': '', 'line': 5, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/cartesian_product_of_two_or_more_lists/test_gpt_4o_2024_08_06_cartesian_product_of_two_or_more_lists.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cartesian_product_of_two_or_more_lists', 'obj': '', 'line': 11, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/cartesian_product_of_two_or_more_lists/test_gpt_4o_2024_08_06_cartesian_product_of_two_or_more_lists.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cartesian_product_of_two_or_more_lists', 'obj': '', 'line': 22, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/cartesian_product_of_two_or_more_lists/test_gpt_4o_2024_08_06_cartesian_product_of_two_or_more_lists.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cartesian_product_of_two_or_more_lists', 'obj': '', 'line': 32, 'column': 81, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/cartesian_product_of_two_or_more_lists/test_gpt_4o_2024_08_06_cartesian_product_of_two_or_more_lists.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cartesian_product_of_two_or_more_lists', 'obj': '', 'line': 33, 'column': 83, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/cartesian_product_of_two_or_more_lists/test_gpt_4o_2024_08_06_cartesian_product_of_two_or_more_lists.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cartesian_product_of_two_or_more_lists', 'obj': '', 'line': 34, 'column': 87, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/cartesian_product_of_two_or_more_lists/test_gpt_4o_2024_08_06_cartesian_product_of_two_or_more_lists.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cartesian_product_of_two_or_more_lists', 'obj': '', 'line': 35, 'column': 81, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/cartesian_product_of_two_or_more_lists/test_gpt_4o_2024_08_06_cartesian_product_of_two_or_more_lists.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cartesian_product_of_two_or_more_lists', 'obj': '', 'line': 36, 'column': 83, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/cartesian_product_of_two_or_more_lists/test_gpt_4o_2024_08_06_cartesian_product_of_two_or_more_lists.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cartesian_product_of_two_or_more_lists', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/cartesian_product_of_two_or_more_lists/test_gpt_4o_2024_08_06_cartesian_product_of_two_or_more_lists.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cartesian_product_of_two_or_more_lists', 'obj': 'TestCartesianProduct', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 26, 'path': 'data/generated/docs_python/cartesian_product_of_two_or_more_lists/test_gpt_4o_2024_08_06_cartesian_product_of_two_or_more_lists.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cartesian_product_of_two_or_more_lists', 'obj': 'TestCartesianProduct.test_two_lists', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 22, 'path': 'data/generated/docs_python/cartesian_product_of_two_or_more_lists/test_gpt_4o_2024_08_06_cartesian_product_of_two_or_more_lists.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cartesian_product_of_two_or_more_lists', 'obj': 'TestCartesianProduct.test_empty_list', 'line': 17, 'column': 4, 'endLine': 17, 'endColumn': 23, 'path': 'data/generated/docs_python/cartesian_product_of_two_or_more_lists/test_gpt_4o_2024_08_06_cartesian_product_of_two_or_more_lists.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cartesian_product_of_two_or_more_lists', 'obj': 'TestCartesianProduct.test_n_ary_product', 'line': 28, 'column': 4, 'endLine': 28, 'endColumn': 26, 'path': 'data/generated/docs_python/cartesian_product_of_two_or_more_lists/test_gpt_4o_2024_08_06_cartesian_product_of_two_or_more_lists.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Catalan numbers,"Catalan numbers

You are encouraged to solve this task according to the task description, using any language you may know.


Catalan numbers are a sequence of numbers which can be defined directly:






C

n


=


1

n
+
1






(



2
n

n


)



=



(
2
n
)
!


(
n
+
1
)
!

n
!





 for 

n
≥
0.


{\displaystyle C_{n}={\frac {1}{n+1}}{2n \choose n}={\frac {(2n)!}{(n+1)!\,n!}}\qquad {\mbox{ for }}n\geq 0.}


Or recursively:






C

0


=
1


and



C

n
+
1


=

∑

i
=
0


n



C

i




C

n
−
i




for 

n
≥
0
;


{\displaystyle C_{0}=1\quad {\mbox{and}}\quad C_{n+1}=\sum _{i=0}^{n}C_{i}\,C_{n-i}\quad {\text{for }}n\geq 0;}


Or alternatively (also recursive):






C

0


=
1


and



C

n


=



2
(
2
n
−
1
)


n
+
1




C

n
−
1


,


{\displaystyle C_{0}=1\quad {\mbox{and}}\quad C_{n}={\frac {2(2n-1)}{n+1}}C_{n-1},}




Task

Implement at least one of these algorithms and print out the first 15 Catalan numbers with each.

Memoization   is not required, but may be worth the effort when using the second method above.



Related tasks

Catalan numbers/Pascal's triangle
Evaluate binomial coefficients

",Python,"from math import factorial
import functools
 
 
def memoize(func):
    cache = {}
 
    def memoized(key):
        # Returned, new, memoized version of decorated function
        if key not in cache:
            cache[key] = func(key)
        return cache[key]
    return functools.update_wrapper(memoized, func)
 
 
@memoize
def fact(n):
    return factorial(n)
 
 
def cat_direct(n):
    return fact(2 * n) // fact(n + 1) // fact(n)
 
 
@memoize
def catR1(n):
    return 1 if n == 0 else (
        sum(catR1(i) * catR1(n - 1 - i) for i in range(n))
    )
 
 
@memoize
def catR2(n):
    return 1 if n == 0 else (
        ((4 * n - 2) * catR2(n - 1)) // (n + 1)
    )
 
 
if __name__ == '__main__':
    def pr(results):
        fmt = '%-10s %-10s %-10s'
        print((fmt % tuple(c.__name__ for c in defs)).upper())
        print(fmt % (('=' * 10,) * 3))
        for r in zip(*results):
            print(fmt % r)
 
    defs = (cat_direct, catR1, catR2)
    results = [tuple(c(i) for i in range(15)) for c in defs]
    pr(results)",1031,49,"import unittest
from catalan_numbers import cat_direct, catR1, catR2

class TestCatalanNumbers(unittest.TestCase):

    def setUp(self):
        # Precomputed first 15 Catalan numbers
        self.expected_catalan_numbers = [
            1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862,
            16796, 58786, 208012, 742900, 2674440
        ]

    def test_cat_direct(self):
        for n, expected in enumerate(self.expected_catalan_numbers):
            with self.subTest(n=n):
                self.assertEqual(cat_direct(n), expected)

    def test_catR1(self):
        for n, expected in enumerate(self.expected_catalan_numbers):
            with self.subTest(n=n):
                self.assertEqual(catR1(n), expected)

    def test_catR2(self):
        for n, expected in enumerate(self.expected_catalan_numbers):
            with self.subTest(n=n):
                self.assertEqual(catR2(n), expected)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/catalan_numbers/test_gpt_4o_2024_08_06_catalan_numbers.py,CompileStatus.OK,0.0,79.59,76.0,0.14,0.23,100.0,0.5965561866760254,9.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_catalan_numbers', 'obj': '', 'line': 5, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/catalan_numbers/test_gpt_4o_2024_08_06_catalan_numbers.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_catalan_numbers', 'obj': '', 'line': 9, 'column': 53, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/catalan_numbers/test_gpt_4o_2024_08_06_catalan_numbers.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_catalan_numbers', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/catalan_numbers/test_gpt_4o_2024_08_06_catalan_numbers.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_catalan_numbers', 'obj': 'TestCatalanNumbers', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 24, 'path': 'data/generated/docs_python/catalan_numbers/test_gpt_4o_2024_08_06_catalan_numbers.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_catalan_numbers', 'obj': 'TestCatalanNumbers.test_cat_direct', 'line': 13, 'column': 4, 'endLine': 13, 'endColumn': 23, 'path': 'data/generated/docs_python/catalan_numbers/test_gpt_4o_2024_08_06_catalan_numbers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_catalan_numbers', 'obj': 'TestCatalanNumbers.test_catR1', 'line': 18, 'column': 4, 'endLine': 18, 'endColumn': 18, 'path': 'data/generated/docs_python/catalan_numbers/test_gpt_4o_2024_08_06_catalan_numbers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_catalan_numbers', 'obj': 'TestCatalanNumbers.test_catR1', 'line': 18, 'column': 4, 'endLine': 18, 'endColumn': 18, 'path': 'data/generated/docs_python/catalan_numbers/test_gpt_4o_2024_08_06_catalan_numbers.py', 'symbol': 'invalid-name', 'message': 'Method name ""test_catR1"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_catalan_numbers', 'obj': 'TestCatalanNumbers.test_catR2', 'line': 23, 'column': 4, 'endLine': 23, 'endColumn': 18, 'path': 'data/generated/docs_python/catalan_numbers/test_gpt_4o_2024_08_06_catalan_numbers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_catalan_numbers', 'obj': 'TestCatalanNumbers.test_catR2', 'line': 23, 'column': 4, 'endLine': 23, 'endColumn': 18, 'path': 'data/generated/docs_python/catalan_numbers/test_gpt_4o_2024_08_06_catalan_numbers.py', 'symbol': 'invalid-name', 'message': 'Method name ""test_catR2"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}]",False
Chaos game,"The Chaos Game is a method of generating the attractor of an iterated function system (IFS).

One of the best-known and simplest examples creates a fractal, using a polygon and an initial point selected at random.



Task
Play the Chaos Game using the corners of an equilateral triangle as the reference points.   Add a starting point at random (preferably inside the triangle).   Then add the next point halfway between the starting point and one of the reference points.   This reference point is chosen at random.

After a sufficient number of iterations, the image of a Sierpinski Triangle should emerge.



See also
 The Game of Chaos

",Python," 
import argparse
import random
import shapely.geometry as geometry
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
 
 
def main(args):
    # Styles
    plt.style.use(""ggplot"")
 
    # Creating figure
    fig = plt.figure()
    line, = plt.plot([], [], ""."")
 
    # Limit axes
    plt.xlim(0, 1)
    plt.ylim(0, 1)
 
    # Titles
    title = ""Chaos Game""
    plt.title(title)
    fig.canvas.set_window_title(title)
 
    # Getting data
    data = get_data(args.frames)
 
    # Creating animation
    line_ani = animation.FuncAnimation(
        fig=fig,
        func=update_line,
        frames=args.frames,
        fargs=(data, line),
        interval=args.interval,
        repeat=False
    )
 
    # To save the animation install ffmpeg and uncomment
    # line_ani.save(""chaos_game.gif"")
 
    plt.show()
 
 
def get_data(n):
    """"""
    Get data to plot
    """"""
    leg = 1
    triangle = get_triangle(leg)
    cur_point = gen_point_within_poly(triangle)
    data = []
    for _ in range(n):
        data.append((cur_point.x, cur_point.y))
        cur_point = next_point(triangle, cur_point)
    return data
 
 
def get_triangle(n):
    """"""
    Create right triangle
    """"""
    ax = ay = 0.0
    a = ax, ay
 
    bx = 0.5  *  n
    by = 0.75 * (n ** 2)
    b = bx, by
 
    cx = n
    cy = 0.0
    c = cx, cy
 
    triangle = geometry.Polygon([a, b, c])
    return triangle
 
 
def gen_point_within_poly(poly):
    """"""
    Generate random point inside given polygon
    """"""
    minx, miny, maxx, maxy = poly.bounds
    while True:
        x = random.uniform(minx, maxx)
        y = random.uniform(miny, maxy)
        point = geometry.Point(x, y)
        if point.within(poly):
            return point
 
 
def next_point(poly, point):
    """"""
    Generate next point according to chaos game rules
    """"""
    vertices = poly.boundary.coords[:-1]  # Last point is the same as the first one
    random_vertex = geometry.Point(random.choice(vertices))
    line = geometry.linestring.LineString([point, random_vertex])
    return line.centroid
 
 
def update_line(num, data, line):
    """"""
    Update line with new points
    """"""
    new_data = zip(*data[:num]) or [(), ()]
    line.set_data(new_data)
    return line,
 
 
if __name__ == ""__main__"":
    arg_parser = argparse.ArgumentParser(description=""Chaos Game by Suenweek (c) 2017"")
    arg_parser.add_argument(""-f"", dest=""frames"", type=int, default=1000)
    arg_parser.add_argument(""-i"", dest=""interval"", type=int, default=10)
 
    main(arg_parser.parse_args())
 
 ",2568,118,"import unittest
from unittest.mock import patch
import shapely.geometry as geometry
import chaos_game

class TestChaosGame(unittest.TestCase):

    def test_get_triangle(self):
        # Test if the triangle is created correctly
        triangle = chaos_game.get_triangle(1)
        expected_coords = [(0.0, 0.0), (0.5, 0.75), (1.0, 0.0)]
        self.assertEqual(list(triangle.exterior.coords)[:-1], expected_coords)

    def test_gen_point_within_poly(self):
        # Test if the generated point is within the triangle
        triangle = chaos_game.get_triangle(1)
        point = chaos_game.gen_point_within_poly(triangle)
        self.assertTrue(point.within(triangle))

    @patch('random.choice')
    def test_next_point(self, mock_random_choice):
        # Test if the next point is correctly calculated
        triangle = chaos_game.get_triangle(1)
        start_point = geometry.Point(0.5, 0.5)
        mock_random_choice.return_value = (0.0, 0.0)  # Mocking to always choose the first vertex
        next_pt = chaos_game.next_point(triangle, start_point)
        expected_point = geometry.Point(0.25, 0.25)  # Midpoint between (0.5, 0.5) and (0.0, 0.0)
        self.assertAlmostEqual(next_pt.x, expected_point.x)
        self.assertAlmostEqual(next_pt.y, expected_point.y)

    def test_get_data(self):
        # Test if data is generated correctly
        data = chaos_game.get_data(5)
        self.assertEqual(len(data), 5)
        # Check if all points are within the triangle
        triangle = chaos_game.get_triangle(1)
        for point in data:
            self.assertTrue(geometry.Point(point).within(triangle))

    @patch('chaos_game.get_data')
    def test_update_line(self, mock_get_data):
        # Test if the line is updated correctly
        mock_get_data.return_value = [(0.1, 0.1), (0.2, 0.2), (0.3, 0.3)]
        line = unittest.mock.Mock()
        chaos_game.update_line(2, mock_get_data.return_value, line)
        line.set_data.assert_called_once_with(((0.1, 0.2), (0.1, 0.2)))

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/chaos_game/test_gpt_4o_2024_08_06_chaos_game.py,CompileStatus.OK,0.0,83.33,83.02,0.19,0.7,80.0,1.1932258605957031,8.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_chaos_game', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/chaos_game/test_gpt_4o_2024_08_06_chaos_game.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'refactor', 'module': 'test_gpt_4o_2024_08_06_chaos_game', 'obj': '', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 35, 'path': 'data/generated/docs_python/chaos_game/test_gpt_4o_2024_08_06_chaos_game.py', 'symbol': 'consider-using-from-import', 'message': ""Use 'from shapely import geometry' instead"", 'message-id': 'R0402'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_chaos_game', 'obj': 'TestChaosGame', 'line': 6, 'column': 0, 'endLine': 6, 'endColumn': 19, 'path': 'data/generated/docs_python/chaos_game/test_gpt_4o_2024_08_06_chaos_game.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_chaos_game', 'obj': 'TestChaosGame.test_get_triangle', 'line': 8, 'column': 4, 'endLine': 8, 'endColumn': 25, 'path': 'data/generated/docs_python/chaos_game/test_gpt_4o_2024_08_06_chaos_game.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_chaos_game', 'obj': 'TestChaosGame.test_gen_point_within_poly', 'line': 14, 'column': 4, 'endLine': 14, 'endColumn': 34, 'path': 'data/generated/docs_python/chaos_game/test_gpt_4o_2024_08_06_chaos_game.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_chaos_game', 'obj': 'TestChaosGame.test_next_point', 'line': 21, 'column': 4, 'endLine': 21, 'endColumn': 23, 'path': 'data/generated/docs_python/chaos_game/test_gpt_4o_2024_08_06_chaos_game.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_chaos_game', 'obj': 'TestChaosGame.test_get_data', 'line': 31, 'column': 4, 'endLine': 31, 'endColumn': 21, 'path': 'data/generated/docs_python/chaos_game/test_gpt_4o_2024_08_06_chaos_game.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_chaos_game', 'obj': 'TestChaosGame.test_update_line', 'line': 41, 'column': 4, 'endLine': 41, 'endColumn': 24, 'path': 'data/generated/docs_python/chaos_game/test_gpt_4o_2024_08_06_chaos_game.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Check Machin-like formulas,"Machin-like formulas   are useful for efficiently computing numerical approximations for



π


{\displaystyle \pi }





Task

Verify the following Machin-like formulas are correct by calculating the value of tan   (right hand side) for each equation using exact arithmetic and showing they equal 1:







π
4


=
arctan
⁡


1
2


+
arctan
⁡


1
3




{\displaystyle {\pi \over 4}=\arctan {1 \over 2}+\arctan {1 \over 3}}








π
4


=
2
arctan
⁡


1
3


+
arctan
⁡


1
7




{\displaystyle {\pi \over 4}=2\arctan {1 \over 3}+\arctan {1 \over 7}}








π
4


=
4
arctan
⁡


1
5


−
arctan
⁡


1
239




{\displaystyle {\pi \over 4}=4\arctan {1 \over 5}-\arctan {1 \over 239}}








π
4


=
5
arctan
⁡


1
7


+
2
arctan
⁡


3
79




{\displaystyle {\pi \over 4}=5\arctan {1 \over 7}+2\arctan {3 \over 79}}








π
4


=
5
arctan
⁡


29
278


+
7
arctan
⁡


3
79




{\displaystyle {\pi \over 4}=5\arctan {29 \over 278}+7\arctan {3 \over 79}}








π
4


=
arctan
⁡


1
2


+
arctan
⁡


1
5


+
arctan
⁡


1
8




{\displaystyle {\pi \over 4}=\arctan {1 \over 2}+\arctan {1 \over 5}+\arctan {1 \over 8}}








π
4


=
4
arctan
⁡


1
5


−
arctan
⁡


1
70


+
arctan
⁡


1
99




{\displaystyle {\pi \over 4}=4\arctan {1 \over 5}-\arctan {1 \over 70}+\arctan {1 \over 99}}








π
4


=
5
arctan
⁡


1
7


+
4
arctan
⁡


1
53


+
2
arctan
⁡


1
4443




{\displaystyle {\pi \over 4}=5\arctan {1 \over 7}+4\arctan {1 \over 53}+2\arctan {1 \over 4443}}








π
4


=
6
arctan
⁡


1
8


+
2
arctan
⁡


1
57


+
arctan
⁡


1
239




{\displaystyle {\pi \over 4}=6\arctan {1 \over 8}+2\arctan {1 \over 57}+\arctan {1 \over 239}}








π
4


=
8
arctan
⁡


1
10


−
arctan
⁡


1
239


−
4
arctan
⁡


1
515




{\displaystyle {\pi \over 4}=8\arctan {1 \over 10}-\arctan {1 \over 239}-4\arctan {1 \over 515}}








π
4


=
12
arctan
⁡


1
18


+
8
arctan
⁡


1
57


−
5
arctan
⁡


1
239




{\displaystyle {\pi \over 4}=12\arctan {1 \over 18}+8\arctan {1 \over 57}-5\arctan {1 \over 239}}








π
4


=
16
arctan
⁡


1
21


+
3
arctan
⁡


1
239


+
4
arctan
⁡


3
1042




{\displaystyle {\pi \over 4}=16\arctan {1 \over 21}+3\arctan {1 \over 239}+4\arctan {3 \over 1042}}








π
4


=
22
arctan
⁡


1
28


+
2
arctan
⁡


1
443


−
5
arctan
⁡


1
1393


−
10
arctan
⁡


1
11018




{\displaystyle {\pi \over 4}=22\arctan {1 \over 28}+2\arctan {1 \over 443}-5\arctan {1 \over 1393}-10\arctan {1 \over 11018}}








π
4


=
22
arctan
⁡


1
38


+
17
arctan
⁡


7
601


+
10
arctan
⁡


7
8149




{\displaystyle {\pi \over 4}=22\arctan {1 \over 38}+17\arctan {7 \over 601}+10\arctan {7 \over 8149}}








π
4


=
44
arctan
⁡


1
57


+
7
arctan
⁡


1
239


−
12
arctan
⁡


1
682


+
24
arctan
⁡


1
12943




{\displaystyle {\pi \over 4}=44\arctan {1 \over 57}+7\arctan {1 \over 239}-12\arctan {1 \over 682}+24\arctan {1 \over 12943}}








π
4


=
88
arctan
⁡


1
172


+
51
arctan
⁡


1
239


+
32
arctan
⁡


1
682


+
44
arctan
⁡


1
5357


+
68
arctan
⁡


1
12943




{\displaystyle {\pi \over 4}=88\arctan {1 \over 172}+51\arctan {1 \over 239}+32\arctan {1 \over 682}+44\arctan {1 \over 5357}+68\arctan {1 \over 12943}}


and confirm that the following formula is incorrect by showing   tan   (right hand side)   is not   1:







π
4


=
88
arctan
⁡


1
172


+
51
arctan
⁡


1
239


+
32
arctan
⁡


1
682


+
44
arctan
⁡


1
5357


+
68
arctan
⁡


1
12944




{\displaystyle {\pi \over 4}=88\arctan {1 \over 172}+51\arctan {1 \over 239}+32\arctan {1 \over 682}+44\arctan {1 \over 5357}+68\arctan {1 \over 12944}}


These identities are useful in calculating the values:





tan
⁡
(
a
+
b
)
=



tan
⁡
(
a
)
+
tan
⁡
(
b
)


1
−
tan
⁡
(
a
)
tan
⁡
(
b
)





{\displaystyle \tan(a+b)={\tan(a)+\tan(b) \over 1-\tan(a)\tan(b)}}






tan
⁡

(
arctan
⁡


a
b


)

=


a
b




{\displaystyle \tan \left(\arctan {a \over b}\right)={a \over b}}






tan
⁡
(
−
a
)
=
−
tan
⁡
(
a
)


{\displaystyle \tan(-a)=-\tan(a)}




You can store the equations in any convenient data structure, but for extra credit parse them from human-readable text input.

Note: to formally prove the formula correct, it would have to be shown that






−
3
p
i

4




{\displaystyle {-3pi \over 4}}

 < right hand side <






5
p
i

4




{\displaystyle {5pi \over 4}}

 due to



tan
⁡
(
)


{\displaystyle \tan()}

 periodicity.


",Python,"import re
from fractions import Fraction
from pprint import pprint as pp
 
 
equationtext = '''\
  pi/4 = arctan(1/2) + arctan(1/3)
  pi/4 = 2*arctan(1/3) + arctan(1/7)
  pi/4 = 4*arctan(1/5) - arctan(1/239)
  pi/4 = 5*arctan(1/7) + 2*arctan(3/79)
  pi/4 = 5*arctan(29/278) + 7*arctan(3/79)
  pi/4 = arctan(1/2) + arctan(1/5) + arctan(1/8)
  pi/4 = 4*arctan(1/5) - arctan(1/70) + arctan(1/99)
  pi/4 = 5*arctan(1/7) + 4*arctan(1/53) + 2*arctan(1/4443)
  pi/4 = 6*arctan(1/8) + 2*arctan(1/57) + arctan(1/239)
  pi/4 = 8*arctan(1/10) - arctan(1/239) - 4*arctan(1/515)
  pi/4 = 12*arctan(1/18) + 8*arctan(1/57) - 5*arctan(1/239)
  pi/4 = 16*arctan(1/21) + 3*arctan(1/239) + 4*arctan(3/1042)
  pi/4 = 22*arctan(1/28) + 2*arctan(1/443) - 5*arctan(1/1393) - 10*arctan(1/11018)
  pi/4 = 22*arctan(1/38) + 17*arctan(7/601) + 10*arctan(7/8149)
  pi/4 = 44*arctan(1/57) + 7*arctan(1/239) - 12*arctan(1/682) + 24*arctan(1/12943)
  pi/4 = 88*arctan(1/172) + 51*arctan(1/239) + 32*arctan(1/682) + 44*arctan(1/5357) + 68*arctan(1/12943)
  pi/4 = 88*arctan(1/172) + 51*arctan(1/239) + 32*arctan(1/682) + 44*arctan(1/5357) + 68*arctan(1/12944)
'''
 
def parse_eqn(equationtext=equationtext):
    eqn_re = re.compile(r""""""(?mx)
    (?P<lhs> ^ \s* pi/4 \s* = \s*)?             # LHS of equation
    (?:                                         # RHS
        \s* (?P<sign> [+-])? \s*
        (?: (?P<mult> \d+) \s* \*)?
        \s* arctan\( (?P<numer> \d+) / (?P<denom> \d+)
    )"""""")
 
    found = eqn_re.findall(equationtext)
    machins, part = [], []
    for lhs, sign, mult, numer, denom in eqn_re.findall(equationtext):
        if lhs and part:
            machins.append(part)
            part = []
        part.append( ( (-1 if sign == '-' else 1) * ( int(mult) if mult else 1),
                       Fraction(int(numer), (int(denom) if denom else 1)) ) )
    machins.append(part)
    return machins
 
 
def tans(xs):
    xslen = len(xs)
    if xslen == 1:
        return tanEval(*xs[0])
    aa, bb = xs[:xslen//2], xs[xslen//2:]
    a, b = tans(aa), tans(bb)
    return (a + b) / (1 - a * b)
 
def tanEval(coef, f):
    if coef == 1:
        return f
    if coef < 0:
        return -tanEval(-coef, f)
    ca = coef // 2
    cb = coef - ca
    a, b = tanEval(ca, f), tanEval(cb, f)
    return (a + b) / (1 - a * b)
 
 
if __name__ == '__main__':
    machins = parse_eqn()
    #pp(machins, width=160)
    for machin, eqn in zip(machins, equationtext.split('\n')):
        ans = tans(machin)
        print('%5s: %s' % ( ('OK' if ans == 1 else 'ERROR'), eqn))",2550,71,"import unittest
from fractions import Fraction
from check_machin_like_formulas import parse_eqn, tans

class TestMachinLikeFormulas(unittest.TestCase):

    def setUp(self):
        self.machins = parse_eqn()

    def test_machin_formulas(self):
        # Test each parsed equation
        for i, machin in enumerate(self.machins[:-1]):  # Exclude the last incorrect formula
            with self.subTest(i=i):
                result = tans(machin)
                self.assertEqual(result, 1, f""Formula {i+1} failed: {machin}"")

    def test_incorrect_formula(self):
        # Test the last incorrect formula
        incorrect_machin = self.machins[-1]
        result = tans(incorrect_machin)
        self.assertNotEqual(result, 1, ""The incorrect formula should not equal 1"")

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/check_machin_like_formulas/test_gpt_4o_2024_08_06_check_machin_like_formulas.py,CompileStatus.OK,0.0,90.57,87.67,0.12,0.17,100.0,0.7837929725646973,5.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_check_machin_like_formulas', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/check_machin_like_formulas/test_gpt_4o_2024_08_06_check_machin_like_formulas.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_check_machin_like_formulas', 'obj': 'TestMachinLikeFormulas', 'line': 5, 'column': 0, 'endLine': 5, 'endColumn': 28, 'path': 'data/generated/docs_python/check_machin_like_formulas/test_gpt_4o_2024_08_06_check_machin_like_formulas.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_check_machin_like_formulas', 'obj': 'TestMachinLikeFormulas.test_machin_formulas', 'line': 10, 'column': 4, 'endLine': 10, 'endColumn': 28, 'path': 'data/generated/docs_python/check_machin_like_formulas/test_gpt_4o_2024_08_06_check_machin_like_formulas.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_check_machin_like_formulas', 'obj': 'TestMachinLikeFormulas.test_incorrect_formula', 'line': 17, 'column': 4, 'endLine': 17, 'endColumn': 30, 'path': 'data/generated/docs_python/check_machin_like_formulas/test_gpt_4o_2024_08_06_check_machin_like_formulas.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_check_machin_like_formulas', 'obj': '', 'line': 2, 'column': 0, 'endLine': 2, 'endColumn': 30, 'path': 'data/generated/docs_python/check_machin_like_formulas/test_gpt_4o_2024_08_06_check_machin_like_formulas.py', 'symbol': 'unused-import', 'message': 'Unused Fraction imported from fractions', 'message-id': 'W0611'}]",False
Check that file exists,"Task

Verify that a file called     input.txt     and   a directory called     docs     exist.



This should be done twice:  

   once for the current working directory,   and
   once for a file and a directory in the filesystem root.


Optional criteria (May 2015):   verify it works with:

   zero-length files
   an unusual filename:     `Abdu'l-Bahá.txt

",Python,"import os
 
os.path.isfile(""input.txt"")
os.path.isfile(""/input.txt"")
os.path.isdir(""docs"")
os.path.isdir(""/docs"")",113,6,"import os
import unittest

class TestFileAndDirectoryExistence(unittest.TestCase):

    def test_file_exists_in_current_directory(self):
        self.assertTrue(os.path.isfile(""input.txt""), ""input.txt should exist in the current directory"")

    def test_directory_exists_in_current_directory(self):
        self.assertTrue(os.path.isdir(""docs""), ""docs directory should exist in the current directory"")

    def test_file_exists_in_root_directory(self):
        self.assertTrue(os.path.isfile(""/input.txt""), ""/input.txt should exist in the root directory"")

    def test_directory_exists_in_root_directory(self):
        self.assertTrue(os.path.isdir(""/docs""), ""/docs directory should exist in the root directory"")

    def test_zero_length_file_exists(self):
        # Create a zero-length file for testing
        open(""zero_length.txt"", 'a').close()
        self.assertTrue(os.path.isfile(""zero_length.txt""), ""zero_length.txt should exist in the current directory"")
        self.assertEqual(os.path.getsize(""zero_length.txt""), 0, ""zero_length.txt should be zero-length"")
        os.remove(""zero_length.txt"")  # Clean up after test

    def test_unusual_filename_exists(self):
        # Create a file with an unusual name for testing
        unusual_filename = ""Abdu'l-Bahá.txt""
        open(unusual_filename, 'a').close()
        self.assertTrue(os.path.isfile(unusual_filename), f""{unusual_filename} should exist in the current directory"")
        os.remove(unusual_filename)  # Clean up after test

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/check_that_file_exists/test_gpt_4o_2024_08_06_check_that_file_exists.py,CompileStatus.OK,0.0,78.57,76.67,0.3,,33.33,0.941948175430298,25.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_check_that_file_exists', 'obj': '', 'line': 5, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/check_that_file_exists/test_gpt_4o_2024_08_06_check_that_file_exists.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_check_that_file_exists', 'obj': '', 'line': 7, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/check_that_file_exists/test_gpt_4o_2024_08_06_check_that_file_exists.py', 'symbol': 'line-too-long', 'message': 'Line too long (103/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_check_that_file_exists', 'obj': '', 'line': 8, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/check_that_file_exists/test_gpt_4o_2024_08_06_check_that_file_exists.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_check_that_file_exists', 'obj': '', 'line': 10, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/check_that_file_exists/test_gpt_4o_2024_08_06_check_that_file_exists.py', 'symbol': 'line-too-long', 'message': 'Line too long (102/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_check_that_file_exists', 'obj': '', 'line': 11, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/check_that_file_exists/test_gpt_4o_2024_08_06_check_that_file_exists.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_check_that_file_exists', 'obj': '', 'line': 13, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/check_that_file_exists/test_gpt_4o_2024_08_06_check_that_file_exists.py', 'symbol': 'line-too-long', 'message': 'Line too long (102/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_check_that_file_exists', 'obj': '', 'line': 14, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/check_that_file_exists/test_gpt_4o_2024_08_06_check_that_file_exists.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_check_that_file_exists', 'obj': '', 'line': 16, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/check_that_file_exists/test_gpt_4o_2024_08_06_check_that_file_exists.py', 'symbol': 'line-too-long', 'message': 'Line too long (101/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_check_that_file_exists', 'obj': '', 'line': 17, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/check_that_file_exists/test_gpt_4o_2024_08_06_check_that_file_exists.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_check_that_file_exists', 'obj': '', 'line': 21, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/check_that_file_exists/test_gpt_4o_2024_08_06_check_that_file_exists.py', 'symbol': 'line-too-long', 'message': 'Line too long (115/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_check_that_file_exists', 'obj': '', 'line': 22, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/check_that_file_exists/test_gpt_4o_2024_08_06_check_that_file_exists.py', 'symbol': 'line-too-long', 'message': 'Line too long (104/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_check_that_file_exists', 'obj': '', 'line': 24, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/check_that_file_exists/test_gpt_4o_2024_08_06_check_that_file_exists.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_check_that_file_exists', 'obj': '', 'line': 29, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/check_that_file_exists/test_gpt_4o_2024_08_06_check_that_file_exists.py', 'symbol': 'line-too-long', 'message': 'Line too long (118/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_check_that_file_exists', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/check_that_file_exists/test_gpt_4o_2024_08_06_check_that_file_exists.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_check_that_file_exists', 'obj': 'TestFileAndDirectoryExistence', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 35, 'path': 'data/generated/docs_python/check_that_file_exists/test_gpt_4o_2024_08_06_check_that_file_exists.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_check_that_file_exists', 'obj': 'TestFileAndDirectoryExistence.test_file_exists_in_current_directory', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 45, 'path': 'data/generated/docs_python/check_that_file_exists/test_gpt_4o_2024_08_06_check_that_file_exists.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_check_that_file_exists', 'obj': 'TestFileAndDirectoryExistence.test_directory_exists_in_current_directory', 'line': 9, 'column': 4, 'endLine': 9, 'endColumn': 50, 'path': 'data/generated/docs_python/check_that_file_exists/test_gpt_4o_2024_08_06_check_that_file_exists.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_check_that_file_exists', 'obj': 'TestFileAndDirectoryExistence.test_file_exists_in_root_directory', 'line': 12, 'column': 4, 'endLine': 12, 'endColumn': 42, 'path': 'data/generated/docs_python/check_that_file_exists/test_gpt_4o_2024_08_06_check_that_file_exists.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_check_that_file_exists', 'obj': 'TestFileAndDirectoryExistence.test_directory_exists_in_root_directory', 'line': 15, 'column': 4, 'endLine': 15, 'endColumn': 47, 'path': 'data/generated/docs_python/check_that_file_exists/test_gpt_4o_2024_08_06_check_that_file_exists.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_check_that_file_exists', 'obj': 'TestFileAndDirectoryExistence.test_zero_length_file_exists', 'line': 18, 'column': 4, 'endLine': 18, 'endColumn': 36, 'path': 'data/generated/docs_python/check_that_file_exists/test_gpt_4o_2024_08_06_check_that_file_exists.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'refactor', 'module': 'test_gpt_4o_2024_08_06_check_that_file_exists', 'obj': 'TestFileAndDirectoryExistence.test_zero_length_file_exists', 'line': 20, 'column': 8, 'endLine': 20, 'endColumn': 36, 'path': 'data/generated/docs_python/check_that_file_exists/test_gpt_4o_2024_08_06_check_that_file_exists.py', 'symbol': 'consider-using-with', 'message': ""Consider using 'with' for resource-allocating operations"", 'message-id': 'R1732'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_check_that_file_exists', 'obj': 'TestFileAndDirectoryExistence.test_zero_length_file_exists', 'line': 20, 'column': 8, 'endLine': 20, 'endColumn': 36, 'path': 'data/generated/docs_python/check_that_file_exists/test_gpt_4o_2024_08_06_check_that_file_exists.py', 'symbol': 'unspecified-encoding', 'message': 'Using open without explicitly specifying an encoding', 'message-id': 'W1514'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_check_that_file_exists', 'obj': 'TestFileAndDirectoryExistence.test_unusual_filename_exists', 'line': 25, 'column': 4, 'endLine': 25, 'endColumn': 36, 'path': 'data/generated/docs_python/check_that_file_exists/test_gpt_4o_2024_08_06_check_that_file_exists.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'refactor', 'module': 'test_gpt_4o_2024_08_06_check_that_file_exists', 'obj': 'TestFileAndDirectoryExistence.test_unusual_filename_exists', 'line': 28, 'column': 8, 'endLine': 28, 'endColumn': 35, 'path': 'data/generated/docs_python/check_that_file_exists/test_gpt_4o_2024_08_06_check_that_file_exists.py', 'symbol': 'consider-using-with', 'message': ""Consider using 'with' for resource-allocating operations"", 'message-id': 'R1732'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_check_that_file_exists', 'obj': 'TestFileAndDirectoryExistence.test_unusual_filename_exists', 'line': 28, 'column': 8, 'endLine': 28, 'endColumn': 35, 'path': 'data/generated/docs_python/check_that_file_exists/test_gpt_4o_2024_08_06_check_that_file_exists.py', 'symbol': 'unspecified-encoding', 'message': 'Using open without explicitly specifying an encoding', 'message-id': 'W1514'}]",False
Checkpoint synchronization,"The checkpoint synchronization is a problem of synchronizing multiple tasks. Consider a workshop where several workers (tasks) assembly details of some mechanism. When each of them completes his work they put the details together. There is no store, so a worker who finished its part first must wait for others before starting another one. Putting details together is the checkpoint at which tasks synchronize themselves before going their paths apart.

The task

Implement checkpoint synchronization in your language.

Make sure that the solution is race condition-free. Note that a straightforward solution based on events is exposed to race condition. Let two tasks A and B need to be synchronized at a checkpoint. Each signals its event (EA and EB correspondingly), then waits for the AND-combination of the events (EA&EB) and resets its event. Consider the following scenario: A signals EA first and gets blocked waiting for EA&EB. Then B signals EB and loses the processor. Then A is released (both events are signaled) and resets EA. Now if B returns and enters waiting for EA&EB, it gets lost.

When a worker is ready it shall not continue before others finish. A typical implementation bug is when a worker is counted twice within one working cycle causing its premature completion. This happens when the quickest worker serves its cycle two times while the laziest one is lagging behind.

If you can, implement workers joining and leaving.
",Python," 
""""""
 
Based on https://pymotw.com/3/threading/
 
""""""
 
import threading
import time
import random
 
 
def worker(workernum, barrier):
    # task 1
    sleeptime = random.random()
    print('Starting worker '+str(workernum)+"" task 1, sleeptime=""+str(sleeptime))
    time.sleep(sleeptime)
    print('Exiting worker'+str(workernum))
    barrier.wait()
    # task 2
    sleeptime = random.random()
    print('Starting worker '+str(workernum)+"" task 2, sleeptime=""+str(sleeptime))
    time.sleep(sleeptime)
    print('Exiting worker'+str(workernum))
 
barrier = threading.Barrier(3)
 
w1 = threading.Thread(target=worker, args=((1,barrier)))
w2 = threading.Thread(target=worker, args=((2,barrier)))
w3 = threading.Thread(target=worker, args=((3,barrier)))
 
w1.start()
w2.start()
w3.start()
 ",789,35,"import unittest
import threading
from checkpoint_synchronization import worker

class TestCheckpointSynchronization(unittest.TestCase):

    def setUp(self):
        # Initialize the barrier for 3 workers
        self.barrier = threading.Barrier(3)

    def test_all_workers_synchronize(self):
        # Create worker threads
        w1 = threading.Thread(target=worker, args=(1, self.barrier))
        w2 = threading.Thread(target=worker, args=(2, self.barrier))
        w3 = threading.Thread(target=worker, args=(3, self.barrier))

        # Start worker threads
        w1.start()
        w2.start()
        w3.start()

        # Wait for all threads to complete
        w1.join()
        w2.join()
        w3.join()

        # If all threads complete without deadlock, the test passes
        self.assertTrue(True)

    def test_worker_join_and_leave(self):
        # Create a barrier for 2 workers
        barrier = threading.Barrier(2)

        # Create worker threads
        w1 = threading.Thread(target=worker, args=(1, barrier))
        w2 = threading.Thread(target=worker, args=(2, barrier))

        # Start worker threads
        w1.start()
        w2.start()

        # Wait for all threads to complete
        w1.join()
        w2.join()

        # If all threads complete without deadlock, the test passes
        self.assertTrue(True)

    def test_worker_premature_completion(self):
        # Create a barrier for 3 workers
        barrier = threading.Barrier(3)

        # Create worker threads
        w1 = threading.Thread(target=worker, args=(1, barrier))
        w2 = threading.Thread(target=worker, args=(2, barrier))
        w3 = threading.Thread(target=worker, args=(3, barrier))

        # Start worker threads
        w1.start()
        w2.start()
        w3.start()

        # Wait for all threads to complete
        w1.join()
        w2.join()
        w3.join()

        # If all threads complete without premature completion, the test passes
        self.assertTrue(True)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/checkpoint_synchronization/test_gpt_4o_2024_08_06_checkpoint_synchronization.py,CompileStatus.OK,0.0,98.33,96.77,0.07,3.0,100.0,5.268343925476074,8.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_checkpoint_synchronization', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/checkpoint_synchronization/test_gpt_4o_2024_08_06_checkpoint_synchronization.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_checkpoint_synchronization', 'obj': 'TestCheckpointSynchronization', 'line': 5, 'column': 0, 'endLine': 5, 'endColumn': 35, 'path': 'data/generated/docs_python/checkpoint_synchronization/test_gpt_4o_2024_08_06_checkpoint_synchronization.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_checkpoint_synchronization', 'obj': 'TestCheckpointSynchronization.test_all_workers_synchronize', 'line': 11, 'column': 4, 'endLine': 11, 'endColumn': 36, 'path': 'data/generated/docs_python/checkpoint_synchronization/test_gpt_4o_2024_08_06_checkpoint_synchronization.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_checkpoint_synchronization', 'obj': 'TestCheckpointSynchronization.test_all_workers_synchronize', 'line': 28, 'column': 8, 'endLine': 28, 'endColumn': 29, 'path': 'data/generated/docs_python/checkpoint_synchronization/test_gpt_4o_2024_08_06_checkpoint_synchronization.py', 'symbol': 'redundant-unittest-assert', 'message': 'Redundant use of assertTrue with constant value True', 'message-id': 'W1503'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_checkpoint_synchronization', 'obj': 'TestCheckpointSynchronization.test_worker_join_and_leave', 'line': 30, 'column': 4, 'endLine': 30, 'endColumn': 34, 'path': 'data/generated/docs_python/checkpoint_synchronization/test_gpt_4o_2024_08_06_checkpoint_synchronization.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_checkpoint_synchronization', 'obj': 'TestCheckpointSynchronization.test_worker_join_and_leave', 'line': 47, 'column': 8, 'endLine': 47, 'endColumn': 29, 'path': 'data/generated/docs_python/checkpoint_synchronization/test_gpt_4o_2024_08_06_checkpoint_synchronization.py', 'symbol': 'redundant-unittest-assert', 'message': 'Redundant use of assertTrue with constant value True', 'message-id': 'W1503'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_checkpoint_synchronization', 'obj': 'TestCheckpointSynchronization.test_worker_premature_completion', 'line': 49, 'column': 4, 'endLine': 49, 'endColumn': 40, 'path': 'data/generated/docs_python/checkpoint_synchronization/test_gpt_4o_2024_08_06_checkpoint_synchronization.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_checkpoint_synchronization', 'obj': 'TestCheckpointSynchronization.test_worker_premature_completion', 'line': 69, 'column': 8, 'endLine': 69, 'endColumn': 29, 'path': 'data/generated/docs_python/checkpoint_synchronization/test_gpt_4o_2024_08_06_checkpoint_synchronization.py', 'symbol': 'redundant-unittest-assert', 'message': 'Redundant use of assertTrue with constant value True', 'message-id': 'W1503'}]",False
Cheryl's birthday,"Albert and Bernard just became friends with Cheryl, and they want to know when her birthday is.

Cheryl gave them a list of ten possible dates:

     May 15,     May 16,     May 19
     June 17,    June 18
     July 14,    July 16
     August 14,  August 15,  August 17

Cheryl then tells Albert the   month   of birth,   and Bernard the   day   (of the month)   of birth.

 1)  Albert:   I don't know when Cheryl's birthday is, but I know that Bernard does not know too.
 2)  Bernard:  At first I don't know when Cheryl's birthday is, but I know now.
 3)  Albert:   Then I also know when Cheryl's birthday is.



Task
Write a computer program to deduce, by successive elimination, Cheryl's birthday.



Related task

 Sum and Product Puzzle


References
 Wikipedia article of the same name.
 Tuple Relational Calculus

",Python,"'''Cheryl's Birthday'''
 
from itertools import groupby
from re import split
 
 
# main :: IO ()
def main():
    '''Derivation of the date.'''
 
    month, day = 0, 1
    print(
        # (3 :: A ""Then I also know"")
        # (A's month contains only one remaining day)
        uniquePairing(month)(
            # (2 :: B ""I know now"")
            # (B's day is paired with only one remaining month)
            uniquePairing(day)(
                # (1 :: A ""I know that Bernard does not know"")
                # (A's month is not among those with unique days)
                monthsWithUniqueDays(False)([
                    # 0 :: Cheryl's list:
                    tuple(x.split()) for x in
                    split(
                        ', ',
                        'May 15, May 16, May 19, ' +
                        'June 17, June 18, ' +
                        'July 14, July 16, ' +
                        'Aug 14, Aug 15, Aug 17'
                    )
                ])
            )
        )
    )
 
 
# ------------------- QUERY FUNCTIONS --------------------
 
# monthsWithUniqueDays :: Bool -> [(Month, Day)] -> [(Month, Day)]
def monthsWithUniqueDays(blnInclude):
    '''The subset of months with (or without) unique days.
    '''
    def go(xs):
        month, day = 0, 1
        months = [fst(x) for x in uniquePairing(day)(xs)]
        return [
            md for md in xs
            if blnInclude or not (md[month] in months)
        ]
    return go
 
 
# uniquePairing :: DatePart -> [(Month, Day)] -> [(Month, Day)]
def uniquePairing(i):
    '''Subset of months (or days) with a unique intersection.
    '''
    def go(xs):
        def inner(md):
            dct = md[i]
            uniques = [
                k for k in dct.keys()
                if 1 == len(dct[k])
            ]
            return [tpl for tpl in xs if tpl[i] in uniques]
        return inner
    return ap(bindPairs)(go)
 
 
# bindPairs :: [(Month, Day)] ->
# ((Dict String [String], Dict String [String])
# -> [(Month, Day)]) -> [(Month, Day)]
def bindPairs(xs):
    '''List monad injection operator for lists
       of (Month, Day) pairs.
    '''
    return lambda f: f(
        (
            dictFromPairs(xs),
            dictFromPairs(
                [(b, a) for (a, b) in xs]
            )
        )
    )
 
 
# dictFromPairs :: [(Month, Day)] -> Dict Text [Text]
def dictFromPairs(xs):
    '''A dictionary derived from a list of
       month day pairs.
    '''
    return {
        k: [snd(x) for x in m] for k, m in groupby(
            sorted(xs, key=fst), key=fst
        )
    }
 
 
# ----------------------- GENERIC ------------------------
 
# ap :: (a -> b -> c) -> (a -> b) -> a -> c
def ap(f):
    '''Applicative instance for functions.
    '''
    def go(g):
        def fxgx(x):
            return f(x)(
                g(x)
            )
        return fxgx
    return go
 
 
# fst :: (a, b) -> a
def fst(tpl):
    '''First component of a pair.
    '''
    return tpl[0]
 
 
# snd :: (a, b) -> b
def snd(tpl):
    '''Second component of a pair.
    '''
    return tpl[1]
 
 
if __name__ == '__main__':
    main()",3136,128,"import unittest
from cheryl_s_birthday import main, monthsWithUniqueDays, uniquePairing, bindPairs, dictFromPairs

class TestCherylsBirthday(unittest.TestCase):

    def test_months_with_unique_days_exclude(self):
        dates = [
            ('May', '15'), ('May', '16'), ('May', '19'),
            ('June', '17'), ('June', '18'),
            ('July', '14'), ('July', '16'),
            ('August', '14'), ('August', '15'), ('August', '17')
        ]
        result = monthsWithUniqueDays(False)(dates)
        expected = [
            ('June', '17'), ('June', '18'),
            ('July', '14'), ('July', '16'),
            ('August', '14'), ('August', '15'), ('August', '17')
        ]
        self.assertEqual(result, expected)

    def test_months_with_unique_days_include(self):
        dates = [
            ('May', '15'), ('May', '16'), ('May', '19'),
            ('June', '17'), ('June', '18'),
            ('July', '14'), ('July', '16'),
            ('August', '14'), ('August', '15'), ('August', '17')
        ]
        result = monthsWithUniqueDays(True)(dates)
        expected = [
            ('May', '15'), ('May', '16'), ('May', '19')
        ]
        self.assertEqual(result, expected)

    def test_unique_pairing_day(self):
        dates = [
            ('June', '17'), ('June', '18'),
            ('July', '14'), ('July', '16'),
            ('August', '14'), ('August', '15'), ('August', '17')
        ]
        result = uniquePairing(1)(dates)
        expected = [
            ('July', '16'), ('August', '15'), ('August', '17')
        ]
        self.assertEqual(result, expected)

    def test_unique_pairing_month(self):
        dates = [
            ('July', '16'), ('August', '15'), ('August', '17')
        ]
        result = uniquePairing(0)(dates)
        expected = [
            ('July', '16')
        ]
        self.assertEqual(result, expected)

    def test_bind_pairs(self):
        dates = [
            ('May', '15'), ('May', '16'), ('May', '19'),
            ('June', '17'), ('June', '18'),
            ('July', '14'), ('July', '16'),
            ('August', '14'), ('August', '15'), ('August', '17')
        ]
        result = bindPairs(dates)(lambda x: x)
        expected = (
            {
                'May': ['15', '16', '19'],
                'June': ['17', '18'],
                'July': ['14', '16'],
                'August': ['14', '15', '17']
            },
            {
                '15': ['May', 'August'],
                '16': ['May', 'July'],
                '19': ['May'],
                '17': ['June', 'August'],
                '18': ['June'],
                '14': ['July', 'August']
            }
        )
        self.assertEqual(result, expected)

    def test_dict_from_pairs(self):
        dates = [
            ('May', '15'), ('May', '16'), ('May', '19'),
            ('June', '17'), ('June', '18'),
            ('July', '14'), ('July', '16'),
            ('August', '14'), ('August', '15'), ('August', '17')
        ]
        result = dictFromPairs(dates)
        expected = {
            'May': ['15', '16', '19'],
            'June': ['17', '18'],
            'July': ['14', '16'],
            'August': ['14', '15', '17']
        }
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/cheryl_s_birthday/test_gpt_4o_2024_08_06_cheryl_s_birthday.py,CompileStatus.OK,0.0,94.29,91.11,0.17,0.24,50.0,0.6077351570129395,9.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cheryl_s_birthday', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/cheryl_s_birthday/test_gpt_4o_2024_08_06_cheryl_s_birthday.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cheryl_s_birthday', 'obj': 'TestCherylsBirthday', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 25, 'path': 'data/generated/docs_python/cheryl_s_birthday/test_gpt_4o_2024_08_06_cheryl_s_birthday.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cheryl_s_birthday', 'obj': 'TestCherylsBirthday.test_months_with_unique_days_exclude', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 44, 'path': 'data/generated/docs_python/cheryl_s_birthday/test_gpt_4o_2024_08_06_cheryl_s_birthday.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cheryl_s_birthday', 'obj': 'TestCherylsBirthday.test_months_with_unique_days_include', 'line': 21, 'column': 4, 'endLine': 21, 'endColumn': 44, 'path': 'data/generated/docs_python/cheryl_s_birthday/test_gpt_4o_2024_08_06_cheryl_s_birthday.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cheryl_s_birthday', 'obj': 'TestCherylsBirthday.test_unique_pairing_day', 'line': 34, 'column': 4, 'endLine': 34, 'endColumn': 31, 'path': 'data/generated/docs_python/cheryl_s_birthday/test_gpt_4o_2024_08_06_cheryl_s_birthday.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cheryl_s_birthday', 'obj': 'TestCherylsBirthday.test_unique_pairing_month', 'line': 46, 'column': 4, 'endLine': 46, 'endColumn': 33, 'path': 'data/generated/docs_python/cheryl_s_birthday/test_gpt_4o_2024_08_06_cheryl_s_birthday.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cheryl_s_birthday', 'obj': 'TestCherylsBirthday.test_bind_pairs', 'line': 56, 'column': 4, 'endLine': 56, 'endColumn': 23, 'path': 'data/generated/docs_python/cheryl_s_birthday/test_gpt_4o_2024_08_06_cheryl_s_birthday.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cheryl_s_birthday', 'obj': 'TestCherylsBirthday.test_dict_from_pairs', 'line': 82, 'column': 4, 'endLine': 82, 'endColumn': 28, 'path': 'data/generated/docs_python/cheryl_s_birthday/test_gpt_4o_2024_08_06_cheryl_s_birthday.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_cheryl_s_birthday', 'obj': '', 'line': 2, 'column': 0, 'endLine': 2, 'endColumn': 97, 'path': 'data/generated/docs_python/cheryl_s_birthday/test_gpt_4o_2024_08_06_cheryl_s_birthday.py', 'symbol': 'unused-import', 'message': 'Unused main imported from cheryl_s_birthday', 'message-id': 'W0611'}]",False
Chinese zodiac,"Traditionally, the Chinese have counted years using two simultaneous cycles, one of length 10 (the ""celestial stems"") and one of length 12 (the ""terrestrial branches""); the combination results in a repeating 60-year pattern. Mapping the branches to twelve traditional animal deities results in the well-known ""Chinese zodiac"", assigning each year to a given animal. For example, Tuesday, February 1, 2022 CE (in the common Gregorian calendar) will begin the lunisolar Year of the Tiger.

The celestial stems have no one-to-one mapping like that of the branches to animals; however, the five pairs of consecutive stems each belong to one of the five traditional Chinese elements (Wood, Fire, Earth, Metal, and Water). Further, one of the two years within each element's governance is associated with yin, the other with yang.

Thus, 2022 is also the yang year of Water. Note that since 12 is an even number, the association between animals and yin/yang doesn't change. Consecutive Years of the Rooster will cycle through the five elements, but will always be yin, despite the apparent conceptual mismatch between the specifically-male English animal name and the female aspect denoted by yin.

Task
 Create a subroutine or program that will return or output the animal, yin/yang association, and element for the lunisolar year that begins in a given CE year.
You may optionally provide more information in the form of the year's numerical position within the 60-year cycle and/or its actual Chinese stem-branch name (in Han characters or Pinyin transliteration).

Requisite information

 The animal cycle runs in this order: Rat, Ox, Tiger, Rabbit, Dragon, Snake, Horse, Goat, Monkey, Rooster, Dog, Pig.
 The element cycle runs in this order: Wood, Fire, Earth, Metal, Water.
 The yang year precedes the yin year within each element.
 The current 60-year cycle began in 1984 CE; the first cycle of the Common Era began in 4 CE.
Thus, 1984 was the year of the Wood Rat (yang), 1985 was the year of the Wood Ox (yin), and 1986 the year of the Fire Tiger (yang); 2022 - which, as already noted, is the year of the Water Tiger (yang) - is the 39th year of the current cycle.

Information for optional task

 The ten celestial stems are 甲 jiă, 乙 yĭ, 丙 bĭng, 丁 dīng, 戊 wù, 己 jĭ, 庚 gēng, 辛 xīn, 壬 rén, and 癸 gŭi. With the ASCII version of Pinyin tones, the names are written ""jia3"", ""yi3"", ""bing3"", ""ding1"", ""wu4"", ""ji3"", ""geng1"", ""xin1"", ""ren2"", and ""gui3"".
 The twelve terrestrial branches are 子 zĭ, 丑 chŏu, 寅 yín, 卯 măo, 辰 chén, 巳 sì, 午 wŭ, 未 wèi, 申 shēn, 酉 yŏu, 戌 xū, 亥 hài. In ASCII Pinyin, those are ""zi3"", ""chou3"", ""yin2"", ""mao3"", ""chen2"", ""si4"", ""wu3"", ""wei4"", ""shen1"", ""you3"", ""xu1"", and ""hai4"".
Therefore 1984 was 甲子 (jiă-zĭ, or jia3-zi3). 2022 is 壬寅 (rén-yín or ren2-yin2).
",Python," 
# coding: utf-8
 
from __future__ import print_function
from datetime import datetime
 
pinyin = {
  '甲': 'jiă',
  '乙': 'yĭ',
  '丙': 'bĭng',
  '丁': 'dīng',
  '戊': 'wù',
  '己': 'jĭ',
  '庚': 'gēng',
  '辛': 'xīn',
  '壬': 'rén',
  '癸': 'gŭi',
 
  '子': 'zĭ',
  '丑': 'chŏu',
  '寅': 'yín',
  '卯': 'măo',
  '辰': 'chén',
  '巳': 'sì',
  '午': 'wŭ',
  '未': 'wèi',
  '申': 'shēn',
  '酉': 'yŏu',
  '戌': 'xū',
  '亥': 'hài'
}
 
animals = ['Rat', 'Ox', 'Tiger', 'Rabbit', 'Dragon', 'Snake',
           'Horse', 'Goat', 'Monkey', 'Rooster', 'Dog', 'Pig']
elements = ['Wood', 'Fire', 'Earth', 'Metal', 'Water']
 
celestial = ['甲', '乙', '丙', '丁', '戊', '己', '庚', '辛', '壬', '癸']
terrestrial = ['子', '丑', '寅', '卯', '辰', '巳', '午', '未', '申', '酉', '戌', '亥']
aspects = ['yang', 'yin']
 
 
def calculate(year):
    BASE = 4
    year = int(year)
    cycle_year = year - BASE
    stem_number = cycle_year % 10
    stem_han = celestial[stem_number]
    stem_pinyin = pinyin[stem_han]
    element_number = stem_number // 2
    element = elements[element_number]
    branch_number = cycle_year % 12
    branch_han = terrestrial[branch_number]
    branch_pinyin = pinyin[branch_han]
    animal = animals[branch_number]
    aspect_number = cycle_year % 2
    aspect = aspects[aspect_number]
    index = cycle_year % 60 + 1
    print(""{}: {}{} ({}-{}, {} {}; {} - year {} of the cycle)""
          .format(year, stem_han, branch_han,
                  stem_pinyin, branch_pinyin, element, animal, aspect, index))
 
 
current_year = datetime.now().year
years = [1935, 1938, 1968, 1972, 1976, current_year]
for year in years:
    calculate(year)",1607,66,"import unittest
from io import StringIO
import sys
from chinese_zodiac import calculate

class TestChineseZodiac(unittest.TestCase):

    def setUp(self):
        # Redirect stdout to capture print statements
        self.held, sys.stdout = sys.stdout, StringIO()

    def tearDown(self):
        # Restore stdout
        sys.stdout = self.held

    def test_year_2022(self):
        calculate(2022)
        output = sys.stdout.getvalue().strip()
        expected_output = ""2022: 壬寅 (rén-yín, Water Tiger; yang - year 39 of the cycle)""
        self.assertEqual(output, expected_output)

    def test_year_1984(self):
        calculate(1984)
        output = sys.stdout.getvalue().strip()
        expected_output = ""1984: 甲子 (jiă-zĭ, Wood Rat; yang - year 1 of the cycle)""
        self.assertEqual(output, expected_output)

    def test_year_1935(self):
        calculate(1935)
        output = sys.stdout.getvalue().strip()
        expected_output = ""1935: 乙亥 (yĭ-hài, Wood Pig; yin - year 32 of the cycle)""
        self.assertEqual(output, expected_output)

    def test_year_1968(self):
        calculate(1968)
        output = sys.stdout.getvalue().strip()
        expected_output = ""1968: 戊申 (wù-shēn, Earth Monkey; yang - year 25 of the cycle)""
        self.assertEqual(output, expected_output)

    def test_year_1972(self):
        calculate(1972)
        output = sys.stdout.getvalue().strip()
        expected_output = ""1972: 壬子 (rén-zĭ, Water Rat; yang - year 29 of the cycle)""
        self.assertEqual(output, expected_output)

    def test_year_1976(self):
        calculate(1976)
        output = sys.stdout.getvalue().strip()
        expected_output = ""1976: 丙辰 (bĭng-chén, Fire Dragon; yang - year 33 of the cycle)""
        self.assertEqual(output, expected_output)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/chinese_zodiac/test_gpt_4o_2024_08_06_chinese_zodiac.py,CompileStatus.OK,0.0,98.57,97.3,0.15,6.0,,0.667766809463501,9.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_chinese_zodiac', 'obj': '', 'line': 7, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/chinese_zodiac/test_gpt_4o_2024_08_06_chinese_zodiac.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_chinese_zodiac', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/chinese_zodiac/test_gpt_4o_2024_08_06_chinese_zodiac.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_chinese_zodiac', 'obj': 'TestChineseZodiac', 'line': 6, 'column': 0, 'endLine': 6, 'endColumn': 23, 'path': 'data/generated/docs_python/chinese_zodiac/test_gpt_4o_2024_08_06_chinese_zodiac.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_chinese_zodiac', 'obj': 'TestChineseZodiac.test_year_2022', 'line': 16, 'column': 4, 'endLine': 16, 'endColumn': 22, 'path': 'data/generated/docs_python/chinese_zodiac/test_gpt_4o_2024_08_06_chinese_zodiac.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_chinese_zodiac', 'obj': 'TestChineseZodiac.test_year_1984', 'line': 22, 'column': 4, 'endLine': 22, 'endColumn': 22, 'path': 'data/generated/docs_python/chinese_zodiac/test_gpt_4o_2024_08_06_chinese_zodiac.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_chinese_zodiac', 'obj': 'TestChineseZodiac.test_year_1935', 'line': 28, 'column': 4, 'endLine': 28, 'endColumn': 22, 'path': 'data/generated/docs_python/chinese_zodiac/test_gpt_4o_2024_08_06_chinese_zodiac.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_chinese_zodiac', 'obj': 'TestChineseZodiac.test_year_1968', 'line': 34, 'column': 4, 'endLine': 34, 'endColumn': 22, 'path': 'data/generated/docs_python/chinese_zodiac/test_gpt_4o_2024_08_06_chinese_zodiac.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_chinese_zodiac', 'obj': 'TestChineseZodiac.test_year_1972', 'line': 40, 'column': 4, 'endLine': 40, 'endColumn': 22, 'path': 'data/generated/docs_python/chinese_zodiac/test_gpt_4o_2024_08_06_chinese_zodiac.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_chinese_zodiac', 'obj': 'TestChineseZodiac.test_year_1976', 'line': 46, 'column': 4, 'endLine': 46, 'endColumn': 22, 'path': 'data/generated/docs_python/chinese_zodiac/test_gpt_4o_2024_08_06_chinese_zodiac.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Cholesky decomposition,"Every symmetric, positive definite matrix A can be decomposed into a product of a unique lower triangular matrix L and its transpose:





A
=
L

L

T




{\displaystyle A=LL^{T}}






L


{\displaystyle L}

 is called the Cholesky factor of



A


{\displaystyle A}

, and can be interpreted as a generalized square root of



A


{\displaystyle A}

, as described in Cholesky decomposition.

In a 3x3 example, we have to solve the following system of equations:









A



=


(




a

11





a

21





a

31







a

21





a

22





a

32







a

31





a

32





a

33





)








=


(




l

11




0


0





l

21





l

22




0





l

31





l

32





l

33





)




(




l

11





l

21





l

31






0



l

22





l

32






0


0



l

33





)


≡
L

L

T








=


(




l

11


2





l

21



l

11





l

31



l

11







l

21



l

11





l

21


2


+

l

22


2





l

31



l

21


+

l

32



l

22







l

31



l

11





l

31



l

21


+

l

32



l

22





l

31


2


+

l

32


2


+

l

33


2





)








{\displaystyle {\begin{aligned}A&={\begin{pmatrix}a_{11}&a_{21}&a_{31}\\a_{21}&a_{22}&a_{32}\\a_{31}&a_{32}&a_{33}\\\end{pmatrix}}\\&={\begin{pmatrix}l_{11}&0&0\\l_{21}&l_{22}&0\\l_{31}&l_{32}&l_{33}\\\end{pmatrix}}{\begin{pmatrix}l_{11}&l_{21}&l_{31}\\0&l_{22}&l_{32}\\0&0&l_{33}\end{pmatrix}}\equiv LL^{T}\\&={\begin{pmatrix}l_{11}^{2}&l_{21}l_{11}&l_{31}l_{11}\\l_{21}l_{11}&l_{21}^{2}+l_{22}^{2}&l_{31}l_{21}+l_{32}l_{22}\\l_{31}l_{11}&l_{31}l_{21}+l_{32}l_{22}&l_{31}^{2}+l_{32}^{2}+l_{33}^{2}\end{pmatrix}}\end{aligned}}}


We can see that for the diagonal elements (




l

k
k




{\displaystyle l_{kk}}

) of



L


{\displaystyle L}

 there is a calculation pattern:






l

11


=



a

11






{\displaystyle l_{11}={\sqrt {a_{11}}}}







l

22


=



a

22


−

l

21


2






{\displaystyle l_{22}={\sqrt {a_{22}-l_{21}^{2}}}}







l

33


=



a

33


−
(

l

31


2


+

l

32


2


)




{\displaystyle l_{33}={\sqrt {a_{33}-(l_{31}^{2}+l_{32}^{2})}}}


or in general:






l

k
k


=



a

k
k


−

∑

j
=
1


k
−
1



l

k
j


2






{\displaystyle l_{kk}={\sqrt {a_{kk}-\sum _{j=1}^{k-1}l_{kj}^{2}}}}


For the elements below the diagonal (




l

i
k




{\displaystyle l_{ik}}

, where



i
>
k


{\displaystyle i>k}

) there is also a calculation pattern:






l

21


=


1

l

11





a

21




{\displaystyle l_{21}={\frac {1}{l_{11}}}a_{21}}







l

31


=


1

l

11





a

31




{\displaystyle l_{31}={\frac {1}{l_{11}}}a_{31}}







l

32


=


1

l

22




(

a

32


−

l

31



l

21


)


{\displaystyle l_{32}={\frac {1}{l_{22}}}(a_{32}-l_{31}l_{21})}


which can also be expressed in a general formula:






l

i
k


=


1

l

k
k





(

a

i
k


−

∑

j
=
1


k
−
1



l

i
j



l

k
j


)



{\displaystyle l_{ik}={\frac {1}{l_{kk}}}\left(a_{ik}-\sum _{j=1}^{k-1}l_{ij}l_{kj}\right)}


Task description

The task is to implement a routine which will return a lower Cholesky factor



L


{\displaystyle L}

 for every given symmetric, positive definite nxn matrix



A


{\displaystyle A}

. You should then test it on the following two examples and include your output.

Example 1:

25  15  -5                 5   0   0
15  18   0         -->     3   3   0
-5   0  11                -1   1   3

Example 2:

18  22   54   42           4.24264    0.00000    0.00000    0.00000
22  70   86   62   -->     5.18545    6.56591    0.00000    0.00000
54  86  174  134          12.72792    3.04604    1.64974    0.00000
42  62  134  106           9.89949    1.62455    1.84971    1.39262



Note

 The Cholesky decomposition of a Pascal upper-triangle matrix is the Identity matrix of the same size.
 The Cholesky decomposition of a Pascal symmetric matrix is the Pascal lower-triangle matrix of the same size.",Python,"from __future__ import print_function
 
from pprint import pprint
from math import sqrt
 
 
def cholesky(A):
    L = [[0.0] * len(A) for _ in xrange(len(A))]
    for i in xrange(len(A)):
        for j in xrange(i+1):
            s = sum(L[i][k] * L[j][k] for k in xrange(j))
            L[i][j] = sqrt(A[i][i] - s) if (i == j) else \
                      (1.0 / L[j][j] * (A[i][j] - s))
    return L
 
if __name__ == ""__main__"":
    m1 = [[25, 15, -5],
          [15, 18,  0],
          [-5,  0, 11]]
    pprint(cholesky(m1))
    print()
 
    m2 = [[18, 22,  54,  42],
          [22, 70,  86,  62],
          [54, 86, 174, 134],
          [42, 62, 134, 106]]
    pprint(cholesky(m2), width=120)",696,27,"import unittest
from cholesky_decomposition import cholesky

class TestCholeskyDecomposition(unittest.TestCase):

    def test_example_1(self):
        A = [
            [25, 15, -5],
            [15, 18, 0],
            [-5, 0, 11]
        ]
        expected_L = [
            [5, 0, 0],
            [3, 3, 0],
            [-1, 1, 3]
        ]
        result_L = cholesky(A)
        for i in range(len(expected_L)):
            for j in range(len(expected_L[i])):
                self.assertAlmostEqual(result_L[i][j], expected_L[i][j], places=5)

    def test_example_2(self):
        A = [
            [18, 22, 54, 42],
            [22, 70, 86, 62],
            [54, 86, 174, 134],
            [42, 62, 134, 106]
        ]
        expected_L = [
            [4.24264, 0.00000, 0.00000, 0.00000],
            [5.18545, 6.56591, 0.00000, 0.00000],
            [12.72792, 3.04604, 1.64974, 0.00000],
            [9.89949, 1.62455, 1.84971, 1.39262]
        ]
        result_L = cholesky(A)
        for i in range(len(expected_L)):
            for j in range(len(expected_L[i])):
                self.assertAlmostEqual(result_L[i][j], expected_L[i][j], places=5)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/cholesky_decomposition/test_gpt_4o_2024_08_06_cholesky_decomposition.py,CompileStatus.OK,0.0,51.43,36.36,0.06,0.33,,0.6986880302429199,13.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cholesky_decomposition', 'obj': '', 'line': 5, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/cholesky_decomposition/test_gpt_4o_2024_08_06_cholesky_decomposition.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cholesky_decomposition', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/cholesky_decomposition/test_gpt_4o_2024_08_06_cholesky_decomposition.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cholesky_decomposition', 'obj': 'TestCholeskyDecomposition', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 31, 'path': 'data/generated/docs_python/cholesky_decomposition/test_gpt_4o_2024_08_06_cholesky_decomposition.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cholesky_decomposition', 'obj': 'TestCholeskyDecomposition.test_example_1', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 22, 'path': 'data/generated/docs_python/cholesky_decomposition/test_gpt_4o_2024_08_06_cholesky_decomposition.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cholesky_decomposition', 'obj': 'TestCholeskyDecomposition.test_example_1', 'line': 7, 'column': 8, 'endLine': 7, 'endColumn': 9, 'path': 'data/generated/docs_python/cholesky_decomposition/test_gpt_4o_2024_08_06_cholesky_decomposition.py', 'symbol': 'invalid-name', 'message': 'Variable name ""A"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cholesky_decomposition', 'obj': 'TestCholeskyDecomposition.test_example_1', 'line': 12, 'column': 8, 'endLine': 12, 'endColumn': 18, 'path': 'data/generated/docs_python/cholesky_decomposition/test_gpt_4o_2024_08_06_cholesky_decomposition.py', 'symbol': 'invalid-name', 'message': 'Variable name ""expected_L"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cholesky_decomposition', 'obj': 'TestCholeskyDecomposition.test_example_1', 'line': 17, 'column': 8, 'endLine': 17, 'endColumn': 16, 'path': 'data/generated/docs_python/cholesky_decomposition/test_gpt_4o_2024_08_06_cholesky_decomposition.py', 'symbol': 'invalid-name', 'message': 'Variable name ""result_L"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cholesky_decomposition', 'obj': 'TestCholeskyDecomposition.test_example_1', 'line': 18, 'column': 8, 'endLine': 20, 'endColumn': 82, 'path': 'data/generated/docs_python/cholesky_decomposition/test_gpt_4o_2024_08_06_cholesky_decomposition.py', 'symbol': 'consider-using-enumerate', 'message': 'Consider using enumerate instead of iterating with range and len', 'message-id': 'C0200'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cholesky_decomposition', 'obj': 'TestCholeskyDecomposition.test_example_2', 'line': 22, 'column': 4, 'endLine': 22, 'endColumn': 22, 'path': 'data/generated/docs_python/cholesky_decomposition/test_gpt_4o_2024_08_06_cholesky_decomposition.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cholesky_decomposition', 'obj': 'TestCholeskyDecomposition.test_example_2', 'line': 23, 'column': 8, 'endLine': 23, 'endColumn': 9, 'path': 'data/generated/docs_python/cholesky_decomposition/test_gpt_4o_2024_08_06_cholesky_decomposition.py', 'symbol': 'invalid-name', 'message': 'Variable name ""A"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cholesky_decomposition', 'obj': 'TestCholeskyDecomposition.test_example_2', 'line': 29, 'column': 8, 'endLine': 29, 'endColumn': 18, 'path': 'data/generated/docs_python/cholesky_decomposition/test_gpt_4o_2024_08_06_cholesky_decomposition.py', 'symbol': 'invalid-name', 'message': 'Variable name ""expected_L"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cholesky_decomposition', 'obj': 'TestCholeskyDecomposition.test_example_2', 'line': 35, 'column': 8, 'endLine': 35, 'endColumn': 16, 'path': 'data/generated/docs_python/cholesky_decomposition/test_gpt_4o_2024_08_06_cholesky_decomposition.py', 'symbol': 'invalid-name', 'message': 'Variable name ""result_L"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cholesky_decomposition', 'obj': 'TestCholeskyDecomposition.test_example_2', 'line': 36, 'column': 8, 'endLine': 38, 'endColumn': 82, 'path': 'data/generated/docs_python/cholesky_decomposition/test_gpt_4o_2024_08_06_cholesky_decomposition.py', 'symbol': 'consider-using-enumerate', 'message': 'Consider using enumerate instead of iterating with range and len', 'message-id': 'C0200'}]",False
Circles of given radius through two points,"
Given two points on a plane and a radius, usually two circles of given radius can be drawn through the points.

Exceptions

 r==0.0 should be treated as never describing circles (except in the case where the points are coincident).
 If the points are coincident then an infinite number of circles with the point on their circumference can be drawn, unless r==0.0 as well which then collapses the circles to a point.
 If the points form a diameter then return two identical circles or return a single circle, according to which is the most natural mechanism for the implementation language.
 If the points are too far apart then no circles can be drawn.


Task detail

 Write a function/subroutine/method/... that takes two points and a radius and returns the two circles through those points, or some indication of special cases where two, possibly equal, circles cannot be returned.
 Show here the output for the following inputs:
      p1                p2           r
0.1234, 0.9876    0.8765, 0.2345    2.0
0.0000, 2.0000    0.0000, 0.0000    1.0
0.1234, 0.9876    0.1234, 0.9876    2.0
0.1234, 0.9876    0.8765, 0.2345    0.5
0.1234, 0.9876    0.1234, 0.9876    0.0



Related task

   Total circles area.


See also

   Finding the Center of a Circle from 2 Points and Radius from Math forum @ Drexel

",Python,"from collections import namedtuple
from math import sqrt
 
Pt = namedtuple('Pt', 'x, y')
Circle = Cir = namedtuple('Circle', 'x, y, r')
 
def circles_from_p1p2r(p1, p2, r):
    'Following explanation at http://mathforum.org/library/drmath/view/53027.html'
    if r == 0.0:
        raise ValueError('radius of zero')
    (x1, y1), (x2, y2) = p1, p2
    if p1 == p2:
        raise ValueError('coincident points gives infinite number of Circles')
    # delta x, delta y between points
    dx, dy = x2 - x1, y2 - y1
    # dist between points
    q = sqrt(dx**2 + dy**2)
    if q > 2.0*r:
        raise ValueError('separation of points > diameter')
    # halfway point
    x3, y3 = (x1+x2)/2, (y1+y2)/2
    # distance along the mirror line
    d = sqrt(r**2-(q/2)**2)
    # One answer
    c1 = Cir(x = x3 - d*dy/q,
             y = y3 + d*dx/q,
             r = abs(r))
    # The other answer
    c2 = Cir(x = x3 + d*dy/q,
             y = y3 - d*dx/q,
             r = abs(r))
    return c1, c2
 
if __name__ == '__main__':
    for p1, p2, r in [(Pt(0.1234, 0.9876), Pt(0.8765, 0.2345), 2.0),
                      (Pt(0.0000, 2.0000), Pt(0.0000, 0.0000), 1.0),
                      (Pt(0.1234, 0.9876), Pt(0.1234, 0.9876), 2.0),
                      (Pt(0.1234, 0.9876), Pt(0.8765, 0.2345), 0.5),
                      (Pt(0.1234, 0.9876), Pt(0.1234, 0.9876), 0.0)]:
        print('Through points:\n  %r,\n  %r\n  and radius %f\nYou can construct the following circles:'
              % (p1, p2, r))
        try:
            print('  %r\n  %r\n' % circles_from_p1p2r(p1, p2, r))
        except ValueError as v:
            print('  ERROR: %s\n' % (v.args[0],))",1659,45,"import unittest
from collections import namedtuple
from math import isclose

Pt = namedtuple('Pt', 'x, y')
Circle = namedtuple('Circle', 'x, y, r')

def circles_from_p1p2r(p1, p2, r):
    if r == 0.0:
        raise ValueError('radius of zero')
    (x1, y1), (x2, y2) = p1, p2
    if p1 == p2:
        raise ValueError('coincident points gives infinite number of Circles')
    dx, dy = x2 - x1, y2 - y1
    q = sqrt(dx**2 + dy**2)
    if q > 2.0*r:
        raise ValueError('separation of points > diameter')
    x3, y3 = (x1+x2)/2, (y1+y2)/2
    d = sqrt(r**2-(q/2)**2)
    c1 = Circle(x = x3 - d*dy/q, y = y3 + d*dx/q, r = abs(r))
    c2 = Circle(x = x3 + d*dy/q, y = y3 - d*dx/q, r = abs(r))
    return c1, c2

class TestCirclesFromP1P2R(unittest.TestCase):

    def test_valid_circles(self):
        p1 = Pt(0.1234, 0.9876)
        p2 = Pt(0.8765, 0.2345)
        r = 2.0
        c1, c2 = circles_from_p1p2r(p1, p2, r)
        self.assertTrue(isclose(c1.r, r) and isclose(c2.r, r))

    def test_points_form_diameter(self):
        p1 = Pt(0.0000, 2.0000)
        p2 = Pt(0.0000, 0.0000)
        r = 1.0
        c1, c2 = circles_from_p1p2r(p1, p2, r)
        self.assertTrue(c1 == c2)

    def test_coincident_points_non_zero_radius(self):
        p1 = Pt(0.1234, 0.9876)
        p2 = Pt(0.1234, 0.9876)
        r = 2.0
        with self.assertRaises(ValueError) as context:
            circles_from_p1p2r(p1, p2, r)
        self.assertEqual(str(context.exception), 'coincident points gives infinite number of Circles')

    def test_points_too_far_apart(self):
        p1 = Pt(0.1234, 0.9876)
        p2 = Pt(0.8765, 0.2345)
        r = 0.5
        with self.assertRaises(ValueError) as context:
            circles_from_p1p2r(p1, p2, r)
        self.assertEqual(str(context.exception), 'separation of points > diameter')

    def test_coincident_points_zero_radius(self):
        p1 = Pt(0.1234, 0.9876)
        p2 = Pt(0.1234, 0.9876)
        r = 0.0
        with self.assertRaises(ValueError) as context:
            circles_from_p1p2r(p1, p2, r)
        self.assertEqual(str(context.exception), 'radius of zero')

    def test_zero_radius(self):
        p1 = Pt(0.1234, 0.9876)
        p2 = Pt(0.8765, 0.2345)
        r = 0.0
        with self.assertRaises(ValueError) as context:
            circles_from_p1p2r(p1, p2, r)
        self.assertEqual(str(context.exception), 'radius of zero')

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/circles_of_given_radius_through_two_points/test_gpt_4o_2024_08_06_circles_of_given_radius_through_two_points.py,CompileStatus.OK,0.0,58.43,55.65,0.16,2.5,50.0,0.7103476524353027,12.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_circles_of_given_radius_through_two_points', 'obj': '', 'line': 46, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/circles_of_given_radius_through_two_points/test_gpt_4o_2024_08_06_circles_of_given_radius_through_two_points.py', 'symbol': 'line-too-long', 'message': 'Line too long (102/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_circles_of_given_radius_through_two_points', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/circles_of_given_radius_through_two_points/test_gpt_4o_2024_08_06_circles_of_given_radius_through_two_points.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_circles_of_given_radius_through_two_points', 'obj': 'circles_from_p1p2r', 'line': 8, 'column': 0, 'endLine': 8, 'endColumn': 22, 'path': 'data/generated/docs_python/circles_of_given_radius_through_two_points/test_gpt_4o_2024_08_06_circles_of_given_radius_through_two_points.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_circles_of_given_radius_through_two_points', 'obj': 'circles_from_p1p2r', 'line': 15, 'column': 8, 'endLine': 15, 'endColumn': 12, 'path': 'data/generated/docs_python/circles_of_given_radius_through_two_points/test_gpt_4o_2024_08_06_circles_of_given_radius_through_two_points.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'sqrt'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_circles_of_given_radius_through_two_points', 'obj': 'circles_from_p1p2r', 'line': 19, 'column': 8, 'endLine': 19, 'endColumn': 12, 'path': 'data/generated/docs_python/circles_of_given_radius_through_two_points/test_gpt_4o_2024_08_06_circles_of_given_radius_through_two_points.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'sqrt'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_circles_of_given_radius_through_two_points', 'obj': 'TestCirclesFromP1P2R', 'line': 24, 'column': 0, 'endLine': 24, 'endColumn': 26, 'path': 'data/generated/docs_python/circles_of_given_radius_through_two_points/test_gpt_4o_2024_08_06_circles_of_given_radius_through_two_points.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_circles_of_given_radius_through_two_points', 'obj': 'TestCirclesFromP1P2R.test_valid_circles', 'line': 26, 'column': 4, 'endLine': 26, 'endColumn': 26, 'path': 'data/generated/docs_python/circles_of_given_radius_through_two_points/test_gpt_4o_2024_08_06_circles_of_given_radius_through_two_points.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_circles_of_given_radius_through_two_points', 'obj': 'TestCirclesFromP1P2R.test_points_form_diameter', 'line': 33, 'column': 4, 'endLine': 33, 'endColumn': 33, 'path': 'data/generated/docs_python/circles_of_given_radius_through_two_points/test_gpt_4o_2024_08_06_circles_of_given_radius_through_two_points.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_circles_of_given_radius_through_two_points', 'obj': 'TestCirclesFromP1P2R.test_coincident_points_non_zero_radius', 'line': 40, 'column': 4, 'endLine': 40, 'endColumn': 46, 'path': 'data/generated/docs_python/circles_of_given_radius_through_two_points/test_gpt_4o_2024_08_06_circles_of_given_radius_through_two_points.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_circles_of_given_radius_through_two_points', 'obj': 'TestCirclesFromP1P2R.test_points_too_far_apart', 'line': 48, 'column': 4, 'endLine': 48, 'endColumn': 33, 'path': 'data/generated/docs_python/circles_of_given_radius_through_two_points/test_gpt_4o_2024_08_06_circles_of_given_radius_through_two_points.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_circles_of_given_radius_through_two_points', 'obj': 'TestCirclesFromP1P2R.test_coincident_points_zero_radius', 'line': 56, 'column': 4, 'endLine': 56, 'endColumn': 42, 'path': 'data/generated/docs_python/circles_of_given_radius_through_two_points/test_gpt_4o_2024_08_06_circles_of_given_radius_through_two_points.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_circles_of_given_radius_through_two_points', 'obj': 'TestCirclesFromP1P2R.test_zero_radius', 'line': 64, 'column': 4, 'endLine': 64, 'endColumn': 24, 'path': 'data/generated/docs_python/circles_of_given_radius_through_two_points/test_gpt_4o_2024_08_06_circles_of_given_radius_through_two_points.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Cistercian numerals,"Cistercian numerals were used across Europe by Cistercian monks during the Late Medieval Period as an alternative to Roman numerals. They were used to represent base 10 integers from 0 to 9999.

How they work
All Cistercian numerals begin with a vertical line segment, which by itself represents the number 0. Then, glyphs representing the digits 1 through 9 are optionally added to the four quadrants surrounding the vertical line segment. These glyphs are drawn with vertical and horizontal symmetry about the initial line segment. Each quadrant corresponds to a digit place in the number:

 The upper-right quadrant represents the ones place.
 The upper-left quadrant represents the tens place.
 The lower-right quadrant represents the hundreds place.
 The lower-left quadrant represents the thousands place.
Please consult the following image for examples of Cistercian numerals showing each glyph: [1]

Task
 Write a function/procedure/routine to display any given Cistercian numeral. This could be done by drawing to the display, creating an image, or even as text (as long as it is a reasonable facsimile).
 Use the routine to show the following Cistercian numerals:
 0
 1
 20
 300
 4000
 5555
 6789
 And a number of your choice!
Notes
Due to the inability to upload images to Rosetta Code as of this task's creation, showing output here on this page is not required. However, it is welcomed — especially for text output.

See also
 Numberphile - The Forgotten Number System
 dcode.fr - Online Cistercian numeral converter

",Python,"# -*- coding: utf-8 -*-
""""""
Some UTF-8 chars used:
 
‾	8254	203E	&oline;	OVERLINE
┃	9475	2503	 	BOX DRAWINGS HEAVY VERTICAL
╱	9585	2571	 	BOX DRAWINGS LIGHT DIAGONAL UPPER RIGHT TO LOWER LEFT
╲	9586	2572	 	BOX DRAWINGS LIGHT DIAGONAL UPPER LEFT TO LOWER RIGHT
◸	9720	25F8	 	UPPER LEFT TRIANGLE
◹	9721	25F9	 	UPPER RIGHT TRIANGLE
◺	9722	25FA	 	LOWER LEFT TRIANGLE
◻	9723	25FB	 	WHITE MEDIUM SQUARE
◿	9727	25FF	 	LOWER RIGHT TRIANGLE
 
""""""
 
#%% digit sections
 
def _init():
    ""digit sections for forming numbers""
    digi_bits = """"""
#0  1   2  3  4  5  6   7   8   9
#
 .  ‾   _  ╲  ╱  ◸  .|  ‾|  _|  ◻
#
 .  ‾   _  ╱  ╲  ◹  |.  |‾  |_  ◻
#
 .  _  ‾   ╱  ╲  ◺  .|  _|  ‾|  ◻
#
 .  _  ‾   ╲  ╱  ◿  |.  |_  |‾  ◻
 
"""""".strip()
 
    lines = [[d.replace('.', ' ') for d in ln.strip().split()]
             for ln in digi_bits.strip().split('\n')
             if '#' not in ln]
    formats = '<2 >2 <2 >2'.split()
    digits = [[f""{dig:{f}}"" for dig in line]
              for f, line in zip(formats, lines)]
 
    return digits
 
_digits = _init()
 
 
#%% int to 3-line strings
def _to_digits(n):
    assert 0 <= n < 10_000 and int(n) == n
 
    return [int(digit) for digit in f""{int(n):04}""][::-1]
 
def num_to_lines(n):
    global _digits
    d = _to_digits(n)
    lines = [
        ''.join((_digits[1][d[1]], '┃',  _digits[0][d[0]])),
        ''.join((_digits[0][   0], '┃',  _digits[0][   0])),
        ''.join((_digits[3][d[3]], '┃',  _digits[2][d[2]])),
        ]
 
    return lines
 
def cjoin(c1, c2, spaces='   '):
    return [spaces.join(by_row) for by_row in zip(c1, c2)]
 
#%% main
if __name__ == '__main__':
    #n = 6666
    #print(f""Arabic {n} to Cistercian:\n"")
    #print('\n'.join(num_to_lines(n)))
 
    for pow10 in range(4):
        step = 10 ** pow10
        print(f'\nArabic {step}-to-{9*step} by {step} in Cistercian:\n')
        lines = num_to_lines(step)
        for n in range(step*2, step*10, step):
            lines = cjoin(lines, num_to_lines(n))
        print('\n'.join(lines))
 
 
    numbers = [0, 5555, 6789, 6666]
    print(f'\nArabic {str(numbers)[1:-1]} in Cistercian:\n')
    lines = num_to_lines(numbers[0])
    for n in numbers[1:]:
        lines = cjoin(lines, num_to_lines(n))
    print('\n'.join(lines))",2251,86,"import unittest

class TestCistercianNumerals(unittest.TestCase):

    def setUp(self):
        # Initialize the digits once for all tests
        self.digits = _init()

    def test_to_digits(self):
        # Test conversion of numbers to digit arrays
        self.assertEqual(_to_digits(0), [0, 0, 0, 0])
        self.assertEqual(_to_digits(1), [1, 0, 0, 0])
        self.assertEqual(_to_digits(20), [0, 2, 0, 0])
        self.assertEqual(_to_digits(300), [0, 0, 3, 0])
        self.assertEqual(_to_digits(4000), [0, 0, 0, 4])
        self.assertEqual(_to_digits(5555), [5, 5, 5, 5])
        self.assertEqual(_to_digits(6789), [9, 8, 7, 6])

    def test_num_to_lines(self):
        # Test conversion of numbers to Cistercian numeral lines
        self.assertEqual(num_to_lines(0), ['   ┃  ', '   ┃  ', '   ┃  '])
        self.assertEqual(num_to_lines(1), ['   ┃ ‾', '   ┃  ', '   ┃  '])
        self.assertEqual(num_to_lines(20), [' ‾ ┃  ', '   ┃  ', '   ┃  '])
        self.assertEqual(num_to_lines(300), ['   ┃  ', '   ┃  ', ' _ ┃  '])
        self.assertEqual(num_to_lines(4000), ['   ┃  ', '   ┃  ', '   ┃ _'])
        self.assertEqual(num_to_lines(5555), [' ◸ ┃ ◸', '   ┃  ', ' ◺ ┃ ◺'])
        self.assertEqual(num_to_lines(6789), [' _| ┃ ◻', '   ┃  ', ' |‾ ┃ ◻'])

    def test_cjoin(self):
        # Test joining of Cistercian numeral lines
        c1 = num_to_lines(1)
        c2 = num_to_lines(20)
        expected = [
            '   ┃ ‾   ‾ ┃  ',
            '   ┃      ┃  ',
            '   ┃     ┃  '
        ]
        self.assertEqual(cjoin(c1, c2), expected)

    def test_invalid_input(self):
        # Test invalid inputs
        with self.assertRaises(AssertionError):
            _to_digits(-1)
        with self.assertRaises(AssertionError):
            _to_digits(10000)
        with self.assertRaises(AssertionError):
            _to_digits(10.5)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/cistercian_numerals/test_gpt_4o_2024_08_06_cistercian_numerals.py,CompileStatus.OK,0.0,14.06,11.36,0.53,1.5,,0.60764479637146,28.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cistercian_numerals', 'obj': '', 'line': 4, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/cistercian_numerals/test_gpt_4o_2024_08_06_cistercian_numerals.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cistercian_numerals', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/cistercian_numerals/test_gpt_4o_2024_08_06_cistercian_numerals.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cistercian_numerals', 'obj': 'TestCistercianNumerals', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 28, 'path': 'data/generated/docs_python/cistercian_numerals/test_gpt_4o_2024_08_06_cistercian_numerals.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_cistercian_numerals', 'obj': 'TestCistercianNumerals.setUp', 'line': 7, 'column': 22, 'endLine': 7, 'endColumn': 27, 'path': 'data/generated/docs_python/cistercian_numerals/test_gpt_4o_2024_08_06_cistercian_numerals.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable '_init'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cistercian_numerals', 'obj': 'TestCistercianNumerals.test_to_digits', 'line': 9, 'column': 4, 'endLine': 9, 'endColumn': 22, 'path': 'data/generated/docs_python/cistercian_numerals/test_gpt_4o_2024_08_06_cistercian_numerals.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_cistercian_numerals', 'obj': 'TestCistercianNumerals.test_to_digits', 'line': 11, 'column': 25, 'endLine': 11, 'endColumn': 35, 'path': 'data/generated/docs_python/cistercian_numerals/test_gpt_4o_2024_08_06_cistercian_numerals.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable '_to_digits'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_cistercian_numerals', 'obj': 'TestCistercianNumerals.test_to_digits', 'line': 12, 'column': 25, 'endLine': 12, 'endColumn': 35, 'path': 'data/generated/docs_python/cistercian_numerals/test_gpt_4o_2024_08_06_cistercian_numerals.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable '_to_digits'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_cistercian_numerals', 'obj': 'TestCistercianNumerals.test_to_digits', 'line': 13, 'column': 25, 'endLine': 13, 'endColumn': 35, 'path': 'data/generated/docs_python/cistercian_numerals/test_gpt_4o_2024_08_06_cistercian_numerals.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable '_to_digits'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_cistercian_numerals', 'obj': 'TestCistercianNumerals.test_to_digits', 'line': 14, 'column': 25, 'endLine': 14, 'endColumn': 35, 'path': 'data/generated/docs_python/cistercian_numerals/test_gpt_4o_2024_08_06_cistercian_numerals.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable '_to_digits'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_cistercian_numerals', 'obj': 'TestCistercianNumerals.test_to_digits', 'line': 15, 'column': 25, 'endLine': 15, 'endColumn': 35, 'path': 'data/generated/docs_python/cistercian_numerals/test_gpt_4o_2024_08_06_cistercian_numerals.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable '_to_digits'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_cistercian_numerals', 'obj': 'TestCistercianNumerals.test_to_digits', 'line': 16, 'column': 25, 'endLine': 16, 'endColumn': 35, 'path': 'data/generated/docs_python/cistercian_numerals/test_gpt_4o_2024_08_06_cistercian_numerals.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable '_to_digits'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_cistercian_numerals', 'obj': 'TestCistercianNumerals.test_to_digits', 'line': 17, 'column': 25, 'endLine': 17, 'endColumn': 35, 'path': 'data/generated/docs_python/cistercian_numerals/test_gpt_4o_2024_08_06_cistercian_numerals.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable '_to_digits'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cistercian_numerals', 'obj': 'TestCistercianNumerals.test_num_to_lines', 'line': 19, 'column': 4, 'endLine': 19, 'endColumn': 25, 'path': 'data/generated/docs_python/cistercian_numerals/test_gpt_4o_2024_08_06_cistercian_numerals.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_cistercian_numerals', 'obj': 'TestCistercianNumerals.test_num_to_lines', 'line': 21, 'column': 25, 'endLine': 21, 'endColumn': 37, 'path': 'data/generated/docs_python/cistercian_numerals/test_gpt_4o_2024_08_06_cistercian_numerals.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'num_to_lines'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_cistercian_numerals', 'obj': 'TestCistercianNumerals.test_num_to_lines', 'line': 22, 'column': 25, 'endLine': 22, 'endColumn': 37, 'path': 'data/generated/docs_python/cistercian_numerals/test_gpt_4o_2024_08_06_cistercian_numerals.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'num_to_lines'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_cistercian_numerals', 'obj': 'TestCistercianNumerals.test_num_to_lines', 'line': 23, 'column': 25, 'endLine': 23, 'endColumn': 37, 'path': 'data/generated/docs_python/cistercian_numerals/test_gpt_4o_2024_08_06_cistercian_numerals.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'num_to_lines'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_cistercian_numerals', 'obj': 'TestCistercianNumerals.test_num_to_lines', 'line': 24, 'column': 25, 'endLine': 24, 'endColumn': 37, 'path': 'data/generated/docs_python/cistercian_numerals/test_gpt_4o_2024_08_06_cistercian_numerals.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'num_to_lines'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_cistercian_numerals', 'obj': 'TestCistercianNumerals.test_num_to_lines', 'line': 25, 'column': 25, 'endLine': 25, 'endColumn': 37, 'path': 'data/generated/docs_python/cistercian_numerals/test_gpt_4o_2024_08_06_cistercian_numerals.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'num_to_lines'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_cistercian_numerals', 'obj': 'TestCistercianNumerals.test_num_to_lines', 'line': 26, 'column': 25, 'endLine': 26, 'endColumn': 37, 'path': 'data/generated/docs_python/cistercian_numerals/test_gpt_4o_2024_08_06_cistercian_numerals.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'num_to_lines'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_cistercian_numerals', 'obj': 'TestCistercianNumerals.test_num_to_lines', 'line': 27, 'column': 25, 'endLine': 27, 'endColumn': 37, 'path': 'data/generated/docs_python/cistercian_numerals/test_gpt_4o_2024_08_06_cistercian_numerals.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'num_to_lines'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cistercian_numerals', 'obj': 'TestCistercianNumerals.test_cjoin', 'line': 29, 'column': 4, 'endLine': 29, 'endColumn': 18, 'path': 'data/generated/docs_python/cistercian_numerals/test_gpt_4o_2024_08_06_cistercian_numerals.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_cistercian_numerals', 'obj': 'TestCistercianNumerals.test_cjoin', 'line': 31, 'column': 13, 'endLine': 31, 'endColumn': 25, 'path': 'data/generated/docs_python/cistercian_numerals/test_gpt_4o_2024_08_06_cistercian_numerals.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'num_to_lines'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_cistercian_numerals', 'obj': 'TestCistercianNumerals.test_cjoin', 'line': 32, 'column': 13, 'endLine': 32, 'endColumn': 25, 'path': 'data/generated/docs_python/cistercian_numerals/test_gpt_4o_2024_08_06_cistercian_numerals.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'num_to_lines'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_cistercian_numerals', 'obj': 'TestCistercianNumerals.test_cjoin', 'line': 38, 'column': 25, 'endLine': 38, 'endColumn': 30, 'path': 'data/generated/docs_python/cistercian_numerals/test_gpt_4o_2024_08_06_cistercian_numerals.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'cjoin'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cistercian_numerals', 'obj': 'TestCistercianNumerals.test_invalid_input', 'line': 40, 'column': 4, 'endLine': 40, 'endColumn': 26, 'path': 'data/generated/docs_python/cistercian_numerals/test_gpt_4o_2024_08_06_cistercian_numerals.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_cistercian_numerals', 'obj': 'TestCistercianNumerals.test_invalid_input', 'line': 43, 'column': 12, 'endLine': 43, 'endColumn': 22, 'path': 'data/generated/docs_python/cistercian_numerals/test_gpt_4o_2024_08_06_cistercian_numerals.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable '_to_digits'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_cistercian_numerals', 'obj': 'TestCistercianNumerals.test_invalid_input', 'line': 45, 'column': 12, 'endLine': 45, 'endColumn': 22, 'path': 'data/generated/docs_python/cistercian_numerals/test_gpt_4o_2024_08_06_cistercian_numerals.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable '_to_digits'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_cistercian_numerals', 'obj': 'TestCistercianNumerals.test_invalid_input', 'line': 47, 'column': 12, 'endLine': 47, 'endColumn': 22, 'path': 'data/generated/docs_python/cistercian_numerals/test_gpt_4o_2024_08_06_cistercian_numerals.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable '_to_digits'"", 'message-id': 'E0602'}]",False
Color wheel,"Task

Write a function to draw a HSV color wheel completely with code.

This is strictly for learning purposes only. It's highly recommended that you use an image in an actual application to actually draw the color wheel   (as procedurally drawing is super slow). This does help you understand how color wheels work and this can easily be used to determine a color value based on a position within a circle.


",Python,"from PIL import Image
import colorsys
import math
 
if __name__ == ""__main__"":
 
    im = Image.new(""RGB"", (300,300))
    radius = min(im.size)/2.0
    cx, cy = im.size[0]/2, im.size[1]/2
    pix = im.load()
 
    for x in range(im.width):
        for y in range(im.height):
            rx = x - cx
            ry = y - cy
            s = (rx ** 2.0 + ry ** 2.0) ** 0.5 / radius
            if s <= 1.0:
                h = ((math.atan2(ry, rx) / math.pi) + 1.0) / 2.0
                rgb = colorsys.hsv_to_rgb(h, s, 1.0)
                pix[x,y] = tuple([int(round(c*255.0)) for c in rgb])
 
    im.show()",606,22,"import unittest
from PIL import Image
import colorsys
import math

class TestColorWheel(unittest.TestCase):

    def test_image_size(self):
        im = Image.new(""RGB"", (300, 300))
        self.assertEqual(im.size, (300, 300), ""Image size should be 300x300"")

    def test_center_coordinates(self):
        im = Image.new(""RGB"", (300, 300))
        cx, cy = im.size[0] / 2, im.size[1] / 2
        self.assertEqual((cx, cy), (150, 150), ""Center coordinates should be (150, 150)"")

    def test_radius_calculation(self):
        im = Image.new(""RGB"", (300, 300))
        radius = min(im.size) / 2.0
        self.assertEqual(radius, 150.0, ""Radius should be 150.0"")

    def test_pixel_color_within_wheel(self):
        im = Image.new(""RGB"", (300, 300))
        radius = min(im.size) / 2.0
        cx, cy = im.size[0] / 2, im.size[1] / 2
        pix = im.load()

        for x in range(im.width):
            for y in range(im.height):
                rx = x - cx
                ry = y - cy
                s = (rx ** 2.0 + ry ** 2.0) ** 0.5 / radius
                if s <= 1.0:
                    h = ((math.atan2(ry, rx) / math.pi) + 1.0) / 2.0
                    rgb = colorsys.hsv_to_rgb(h, s, 1.0)
                    expected_color = tuple([int(round(c * 255.0)) for c in rgb])
                    pix[x, y] = expected_color
                    self.assertEqual(pix[x, y], expected_color, f""Pixel color at ({x}, {y}) should be {expected_color}"")

    def test_pixel_color_outside_wheel(self):
        im = Image.new(""RGB"", (300, 300))
        radius = min(im.size) / 2.0
        cx, cy = im.size[0] / 2, im.size[1] / 2
        pix = im.load()

        for x in range(im.width):
            for y in range(im.height):
                rx = x - cx
                ry = y - cy
                s = (rx ** 2.0 + ry ** 2.0) ** 0.5 / radius
                if s > 1.0:
                    self.assertEqual(pix[x, y], (0, 0, 0), f""Pixel color at ({x}, {y}) should be black (0, 0, 0)"")

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/color_wheel/test_gpt_4o_2024_08_06_color_wheel.py,CompileStatus.OK,0.0,70.31,66.67,0.11,,100.0,0.8654658794403076,12.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_color_wheel', 'obj': '', 'line': 38, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/color_wheel/test_gpt_4o_2024_08_06_color_wheel.py', 'symbol': 'line-too-long', 'message': 'Line too long (120/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_color_wheel', 'obj': '', 'line': 52, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/color_wheel/test_gpt_4o_2024_08_06_color_wheel.py', 'symbol': 'line-too-long', 'message': 'Line too long (114/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_color_wheel', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/color_wheel/test_gpt_4o_2024_08_06_color_wheel.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_color_wheel', 'obj': 'TestColorWheel', 'line': 6, 'column': 0, 'endLine': 6, 'endColumn': 20, 'path': 'data/generated/docs_python/color_wheel/test_gpt_4o_2024_08_06_color_wheel.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_color_wheel', 'obj': 'TestColorWheel.test_image_size', 'line': 8, 'column': 4, 'endLine': 8, 'endColumn': 23, 'path': 'data/generated/docs_python/color_wheel/test_gpt_4o_2024_08_06_color_wheel.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_color_wheel', 'obj': 'TestColorWheel.test_center_coordinates', 'line': 12, 'column': 4, 'endLine': 12, 'endColumn': 31, 'path': 'data/generated/docs_python/color_wheel/test_gpt_4o_2024_08_06_color_wheel.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_color_wheel', 'obj': 'TestColorWheel.test_radius_calculation', 'line': 17, 'column': 4, 'endLine': 17, 'endColumn': 31, 'path': 'data/generated/docs_python/color_wheel/test_gpt_4o_2024_08_06_color_wheel.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_color_wheel', 'obj': 'TestColorWheel.test_pixel_color_within_wheel', 'line': 22, 'column': 4, 'endLine': 22, 'endColumn': 37, 'path': 'data/generated/docs_python/color_wheel/test_gpt_4o_2024_08_06_color_wheel.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'refactor', 'module': 'test_gpt_4o_2024_08_06_color_wheel', 'obj': 'TestColorWheel.test_pixel_color_within_wheel', 'line': 36, 'column': 37, 'endLine': 36, 'endColumn': 80, 'path': 'data/generated/docs_python/color_wheel/test_gpt_4o_2024_08_06_color_wheel.py', 'symbol': 'consider-using-generator', 'message': ""Consider using a generator instead 'tuple(int(round(c * 255.0)) for c in rgb)'"", 'message-id': 'R1728'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_color_wheel', 'obj': 'TestColorWheel.test_pixel_color_outside_wheel', 'line': 40, 'column': 4, 'endLine': 40, 'endColumn': 38, 'path': 'data/generated/docs_python/color_wheel/test_gpt_4o_2024_08_06_color_wheel.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_color_wheel', 'obj': '', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 15, 'path': 'data/generated/docs_python/color_wheel/test_gpt_4o_2024_08_06_color_wheel.py', 'symbol': 'wrong-import-order', 'message': 'standard import ""colorsys"" should be placed before third party import ""PIL.Image""', 'message-id': 'C0411'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_color_wheel', 'obj': '', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 11, 'path': 'data/generated/docs_python/color_wheel/test_gpt_4o_2024_08_06_color_wheel.py', 'symbol': 'wrong-import-order', 'message': 'standard import ""math"" should be placed before third party import ""PIL.Image""', 'message-id': 'C0411'}]",False
Colour pinstripe/Display,"The task is to create 1 pixel wide coloured vertical pinstripes with a sufficient number of pinstripes to span the entire width of the graphics display.



The pinstripes should either follow the system palette sequence,   or a sequence that includes:

black,   red,   green,   blue,   magenta,   cyan,   yellow,   and   white:

   after filling the top quarter, switch to a wider 2 pixel wide vertical pinstripe pattern,
   halfway down the display, switch to 3 pixel wide vertical pinstripe,
   finally to a 4 pixels wide vertical pinstripe for the last quarter of the display.


See also

   display black and white
   print colour

",Python," 
from turtle import *
 
colors = [""black"", ""red"", ""green"", ""blue"", ""magenta"", ""cyan"", ""yellow"", ""white""]
 
# Middle of screen is 0,0
 
screen = getscreen()
 
left_edge = -screen.window_width()//2
 
right_edge = screen.window_width()//2
 
quarter_height = screen.window_height()//4
 
half_height = quarter_height * 2
 
speed(""fastest"")
 
for quarter in range(4):
    pensize(quarter+1)
    colornum = 0
 
    min_y = half_height - ((quarter + 1) * quarter_height)
    max_y = half_height - ((quarter) * quarter_height)
 
    for x in range(left_edge,right_edge,quarter+1):
        penup()
        pencolor(colors[colornum])
        colornum = (colornum + 1) % len(colors)
        setposition(x,min_y)
        pendown()
        setposition(x,max_y)
 
notused = input(""Hit enter to continue: "")
 ",794,36,"import unittest
from unittest.mock import patch
from turtle import Screen, Turtle

class TestColorPinstripeDisplay(unittest.TestCase):

    @patch('turtle.getscreen')
    @patch('turtle.setposition')
    @patch('turtle.pencolor')
    @patch('turtle.pensize')
    @patch('turtle.penup')
    @patch('turtle.pendown')
    def test_pinstripe_display(self, mock_pendown, mock_penup, mock_pensize, mock_pencolor, mock_setposition, mock_getscreen):
        # Mock screen dimensions
        mock_screen = Screen()
        mock_screen.window_width = lambda: 800
        mock_screen.window_height = lambda: 600
        mock_getscreen.return_value = mock_screen

        # Expected calls
        expected_colors = [""black"", ""red"", ""green"", ""blue"", ""magenta"", ""cyan"", ""yellow"", ""white""]
        expected_pensizes = [1, 2, 3, 4]
        expected_positions = []

        left_edge = -mock_screen.window_width() // 2
        right_edge = mock_screen.window_width() // 2
        quarter_height = mock_screen.window_height() // 4
        half_height = quarter_height * 2

        for quarter in range(4):
            pensize = quarter + 1
            min_y = half_height - ((quarter + 1) * quarter_height)
            max_y = half_height - (quarter * quarter_height)

            for x in range(left_edge, right_edge, pensize):
                expected_positions.append((x, min_y))
                expected_positions.append((x, max_y))

        # Run the code
        import color_pinstripe_display

        # Check pensize calls
        pensize_calls = [call[0][0] for call in mock_pensize.call_args_list]
        self.assertEqual(pensize_calls, expected_pensizes * (right_edge - left_edge) // sum(expected_pensizes))

        # Check pencolor calls
        pencolor_calls = [call[0][0] for call in mock_pencolor.call_args_list]
        self.assertEqual(pencolor_calls, expected_colors * ((right_edge - left_edge) // len(expected_colors)))

        # Check setposition calls
        setposition_calls = [call[0] for call in mock_setposition.call_args_list]
        self.assertEqual(setposition_calls, expected_positions)

        # Check penup and pendown calls
        self.assertEqual(mock_penup.call_count, len(expected_positions) // 2)
        self.assertEqual(mock_pendown.call_count, len(expected_positions) // 2)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/colour_pinstripe_display/test_gpt_4o_2024_08_06_colour_pinstripe_display.py,CompileStatus.OK,0.0,50.82,49.38,0.12,,,1.285703182220459,12.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_colour_pinstripe_display', 'obj': '', 'line': 13, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/colour_pinstripe_display/test_gpt_4o_2024_08_06_colour_pinstripe_display.py', 'symbol': 'line-too-long', 'message': 'Line too long (126/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_colour_pinstripe_display', 'obj': '', 'line': 44, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/colour_pinstripe_display/test_gpt_4o_2024_08_06_colour_pinstripe_display.py', 'symbol': 'line-too-long', 'message': 'Line too long (111/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_colour_pinstripe_display', 'obj': '', 'line': 48, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/colour_pinstripe_display/test_gpt_4o_2024_08_06_colour_pinstripe_display.py', 'symbol': 'line-too-long', 'message': 'Line too long (110/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_colour_pinstripe_display', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/colour_pinstripe_display/test_gpt_4o_2024_08_06_colour_pinstripe_display.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_colour_pinstripe_display', 'obj': 'TestColorPinstripeDisplay', 'line': 5, 'column': 0, 'endLine': 5, 'endColumn': 31, 'path': 'data/generated/docs_python/colour_pinstripe_display/test_gpt_4o_2024_08_06_colour_pinstripe_display.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_colour_pinstripe_display', 'obj': 'TestColorPinstripeDisplay.test_pinstripe_display', 'line': 13, 'column': 4, 'endLine': 13, 'endColumn': 30, 'path': 'data/generated/docs_python/colour_pinstripe_display/test_gpt_4o_2024_08_06_colour_pinstripe_display.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'refactor', 'module': 'test_gpt_4o_2024_08_06_colour_pinstripe_display', 'obj': 'TestColorPinstripeDisplay.test_pinstripe_display', 'line': 13, 'column': 4, 'endLine': 13, 'endColumn': 30, 'path': 'data/generated/docs_python/colour_pinstripe_display/test_gpt_4o_2024_08_06_colour_pinstripe_display.py', 'symbol': 'too-many-arguments', 'message': 'Too many arguments (7/5)', 'message-id': 'R0913'}, {'type': 'refactor', 'module': 'test_gpt_4o_2024_08_06_colour_pinstripe_display', 'obj': 'TestColorPinstripeDisplay.test_pinstripe_display', 'line': 13, 'column': 4, 'endLine': 13, 'endColumn': 30, 'path': 'data/generated/docs_python/colour_pinstripe_display/test_gpt_4o_2024_08_06_colour_pinstripe_display.py', 'symbol': 'too-many-locals', 'message': 'Too many local variables (24/15)', 'message-id': 'R0914'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_colour_pinstripe_display', 'obj': 'TestColorPinstripeDisplay.test_pinstripe_display', 'line': 40, 'column': 8, 'endLine': 40, 'endColumn': 38, 'path': 'data/generated/docs_python/colour_pinstripe_display/test_gpt_4o_2024_08_06_colour_pinstripe_display.py', 'symbol': 'import-outside-toplevel', 'message': 'Import outside toplevel (color_pinstripe_display)', 'message-id': 'C0415'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_colour_pinstripe_display', 'obj': 'TestColorPinstripeDisplay.test_pinstripe_display', 'line': 40, 'column': 8, 'endLine': 40, 'endColumn': 38, 'path': 'data/generated/docs_python/colour_pinstripe_display/test_gpt_4o_2024_08_06_colour_pinstripe_display.py', 'symbol': 'import-error', 'message': ""Unable to import 'color_pinstripe_display'"", 'message-id': 'E0401'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_colour_pinstripe_display', 'obj': 'TestColorPinstripeDisplay.test_pinstripe_display', 'line': 40, 'column': 8, 'endLine': 40, 'endColumn': 38, 'path': 'data/generated/docs_python/colour_pinstripe_display/test_gpt_4o_2024_08_06_colour_pinstripe_display.py', 'symbol': 'unused-import', 'message': 'Unused import color_pinstripe_display', 'message-id': 'W0611'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_colour_pinstripe_display', 'obj': '', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 33, 'path': 'data/generated/docs_python/colour_pinstripe_display/test_gpt_4o_2024_08_06_colour_pinstripe_display.py', 'symbol': 'unused-import', 'message': 'Unused Turtle imported from turtle', 'message-id': 'W0611'}]",False
Combinations and permutations,"

 This page uses content from Wikipedia. The original article was at Combination. The list of authors can be seen in the page history. As with Rosetta Code, the text of Wikipedia is available under the GNU FDL. (See links for details on variance)



 This page uses content from Wikipedia. The original article was at Permutation. The list of authors can be seen in the page history. As with Rosetta Code, the text of Wikipedia is available under the GNU FDL. (See links for details on variance)

Task

Implement the combination    (nCk)    and permutation    (nPk)    operators in the target language:








n



C

k


=



(


n
k


)



=



n
(
n
−
1
)
…
(
n
−
k
+
1
)


k
(
k
−
1
)
…
1





{\displaystyle ^{n}\operatorname {C} _{k}={\binom {n}{k}}={\frac {n(n-1)\ldots (n-k+1)}{k(k-1)\dots 1}}}









n



P

k


=
n
⋅
(
n
−
1
)
⋅
(
n
−
2
)
⋯
(
n
−
k
+
1
)


{\displaystyle ^{n}\operatorname {P} _{k}=n\cdot (n-1)\cdot (n-2)\cdots (n-k+1)}




See the Wikipedia articles for a more detailed description.

To test, generate and print examples of:

   A sample of permutations from 1 to 12 and Combinations from 10 to 60 using exact Integer arithmetic.
   A sample of permutations from 5 to 15000 and Combinations from 100 to 1000 using approximate Floating point arithmetic.
 This 'floating point' code could be implemented using an approximation, e.g., by calling the Gamma function.


Related task

   Evaluate binomial coefficients



 The number of samples of size k from n objects.


With   combinations and permutations   generation tasks.






 Order Unimportant

 Order Important


 Without replacement








(


n
k


)




=

n



C

k


=



n
(
n
−
1
)
…
(
n
−
k
+
1
)


k
(
k
−
1
)
…
1





{\displaystyle {\binom {n}{k}}=^{n}\operatorname {C} _{k}={\frac {n(n-1)\ldots (n-k+1)}{k(k-1)\dots 1}}}










n



P

k


=
n
⋅
(
n
−
1
)
⋅
(
n
−
2
)
⋯
(
n
−
k
+
1
)


{\displaystyle ^{n}\operatorname {P} _{k}=n\cdot (n-1)\cdot (n-2)\cdots (n-k+1)}




Task: Combinations

Task: Permutations


 With replacement








(



n
+
k
−
1

k


)




=

n
+
k
−
1



C

k


=



(
n
+
k
−
1
)
!


(
n
−
1
)
!
k
!





{\displaystyle {\binom {n+k-1}{k}}=^{n+k-1}\operatorname {C} _{k}={(n+k-1)! \over (n-1)!k!}}








n

k




{\displaystyle n^{k}}




Task: Combinations with repetitions

Task: Permutations with repetitions


",Python,"from __future__ import print_function
 
from scipy.misc import factorial as fact
from scipy.misc import comb
 
def perm(N, k, exact=0):
    return comb(N, k, exact) * fact(k, exact)
 
exact=True
print('Sample Perms 1..12')
for N in range(1, 13):
    k = max(N-2, 1)
    print('%iP%i =' % (N, k), perm(N, k, exact), end=', ' if N % 5 else '\n')
 
print('\n\nSample Combs 10..60')
for N in range(10, 61, 10):
    k = N-2
    print('%iC%i =' % (N, k), comb(N, k, exact), end=', ' if N % 50 else '\n')
 
exact=False
print('\n\nSample Perms 5..1500 Using FP approximations')
for N in [5, 15, 150, 1500, 15000]:
    k = N-2
    print('%iP%i =' % (N, k), perm(N, k, exact))
 
print('\nSample Combs 100..1000 Using FP approximations')
for N in range(100, 1001, 100):
    k = N-2
    print('%iC%i =' % (N, k), comb(N, k, exact))
 ",821,30,"import unittest
from scipy.special import comb, perm

class TestCombinationsAndPermutations(unittest.TestCase):

    def test_exact_permutations(self):
        # Test exact permutations from 1 to 12
        expected_results = [
            (1, 1), (2, 1), (3, 2), (4, 6), (5, 24),
            (6, 120), (7, 720), (8, 5040), (9, 40320),
            (10, 362880), (11, 3628800), (12, 39916800)
        ]
        for N, expected in expected_results:
            k = max(N-2, 1)
            result = perm(N, k, exact=True)
            self.assertEqual(result, expected, f""Failed for {N}P{k}"")

    def test_exact_combinations(self):
        # Test exact combinations from 10 to 60
        expected_results = [
            (10, 36), (20, 171), (30, 406), (40, 703),
            (50, 1225), (60, 1770)
        ]
        for N, expected in expected_results:
            k = N-2
            result = comb(N, k, exact=True)
            self.assertEqual(result, expected, f""Failed for {N}C{k}"")

    def test_approximate_permutations(self):
        # Test approximate permutations from 5 to 15000
        test_cases = [5, 15, 150, 1500, 15000]
        for N in test_cases:
            k = N-2
            result = perm(N, k, exact=False)
            self.assertIsInstance(result, float, f""Result is not float for {N}P{k}"")

    def test_approximate_combinations(self):
        # Test approximate combinations from 100 to 1000
        test_cases = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]
        for N in test_cases:
            k = N-2
            result = comb(N, k, exact=False)
            self.assertIsInstance(result, float, f""Result is not float for {N}C{k}"")

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/combinations_and_permutations/test_gpt_4o_2024_08_06_combinations_and_permutations.py,CompileStatus.OK,0.0,53.85,50.0,0.12,4.0,,0.8100419044494629,10.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_combinations_and_permutations', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/combinations_and_permutations/test_gpt_4o_2024_08_06_combinations_and_permutations.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_combinations_and_permutations', 'obj': 'TestCombinationsAndPermutations', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 37, 'path': 'data/generated/docs_python/combinations_and_permutations/test_gpt_4o_2024_08_06_combinations_and_permutations.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_combinations_and_permutations', 'obj': 'TestCombinationsAndPermutations.test_exact_permutations', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 31, 'path': 'data/generated/docs_python/combinations_and_permutations/test_gpt_4o_2024_08_06_combinations_and_permutations.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_combinations_and_permutations', 'obj': 'TestCombinationsAndPermutations.test_exact_permutations', 'line': 13, 'column': 12, 'endLine': 13, 'endColumn': 13, 'path': 'data/generated/docs_python/combinations_and_permutations/test_gpt_4o_2024_08_06_combinations_and_permutations.py', 'symbol': 'invalid-name', 'message': 'Variable name ""N"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_combinations_and_permutations', 'obj': 'TestCombinationsAndPermutations.test_exact_combinations', 'line': 18, 'column': 4, 'endLine': 18, 'endColumn': 31, 'path': 'data/generated/docs_python/combinations_and_permutations/test_gpt_4o_2024_08_06_combinations_and_permutations.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_combinations_and_permutations', 'obj': 'TestCombinationsAndPermutations.test_exact_combinations', 'line': 24, 'column': 12, 'endLine': 24, 'endColumn': 13, 'path': 'data/generated/docs_python/combinations_and_permutations/test_gpt_4o_2024_08_06_combinations_and_permutations.py', 'symbol': 'invalid-name', 'message': 'Variable name ""N"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_combinations_and_permutations', 'obj': 'TestCombinationsAndPermutations.test_approximate_permutations', 'line': 29, 'column': 4, 'endLine': 29, 'endColumn': 37, 'path': 'data/generated/docs_python/combinations_and_permutations/test_gpt_4o_2024_08_06_combinations_and_permutations.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_combinations_and_permutations', 'obj': 'TestCombinationsAndPermutations.test_approximate_permutations', 'line': 32, 'column': 12, 'endLine': 32, 'endColumn': 13, 'path': 'data/generated/docs_python/combinations_and_permutations/test_gpt_4o_2024_08_06_combinations_and_permutations.py', 'symbol': 'invalid-name', 'message': 'Variable name ""N"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_combinations_and_permutations', 'obj': 'TestCombinationsAndPermutations.test_approximate_combinations', 'line': 37, 'column': 4, 'endLine': 37, 'endColumn': 37, 'path': 'data/generated/docs_python/combinations_and_permutations/test_gpt_4o_2024_08_06_combinations_and_permutations.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_combinations_and_permutations', 'obj': 'TestCombinationsAndPermutations.test_approximate_combinations', 'line': 40, 'column': 12, 'endLine': 40, 'endColumn': 13, 'path': 'data/generated/docs_python/combinations_and_permutations/test_gpt_4o_2024_08_06_combinations_and_permutations.py', 'symbol': 'invalid-name', 'message': 'Variable name ""N"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}]",False
Command-line arguments,"Command-line arguments is part of Short Circuit's Console Program Basics selection.
Scripted main
See also Program name.

For parsing command line arguments intelligently, see Parsing command-line arguments.

Example command line:

myprogram -c ""alpha beta"" -h ""gamma""
",Python,"import sys
program_name = sys.argv[0]
arguments = sys.argv[1:]
count = len(arguments)",85,4,"import unittest
import subprocess
import sys

class TestCommandLineArguments(unittest.TestCase):

    def run_script(self, *args):
        """"""Helper method to run the script with given arguments.""""""
        result = subprocess.run(
            [sys.executable, 'command_line_arguments.py'] + list(args),
            capture_output=True,
            text=True
        )
        return result

    def test_no_arguments(self):
        """"""Test the script with no command-line arguments.""""""
        result = self.run_script()
        self.assertEqual(result.returncode, 0)
        self.assertIn('arguments: []', result.stdout)
        self.assertIn('count: 0', result.stdout)

    def test_single_argument(self):
        """"""Test the script with a single command-line argument.""""""
        result = self.run_script('-c')
        self.assertEqual(result.returncode, 0)
        self.assertIn(""arguments: ['-c']"", result.stdout)
        self.assertIn('count: 1', result.stdout)

    def test_multiple_arguments(self):
        """"""Test the script with multiple command-line arguments.""""""
        result = self.run_script('-c', 'alpha beta', '-h', 'gamma')
        self.assertEqual(result.returncode, 0)
        self.assertIn(""arguments: ['-c', 'alpha beta', '-h', 'gamma']"", result.stdout)
        self.assertIn('count: 4', result.stdout)

    def test_program_name(self):
        """"""Test that the program name is correctly identified.""""""
        result = self.run_script()
        self.assertEqual(result.returncode, 0)
        self.assertIn('program_name: command_line_arguments.py', result.stdout)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/command_line_arguments/test_gpt_4o_2024_08_06_command_line_arguments.py,CompileStatus.OK,0.0,87.5,85.29,0.35,,,1.7991740703582764,3.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_command_line_arguments', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/command_line_arguments/test_gpt_4o_2024_08_06_command_line_arguments.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_command_line_arguments', 'obj': 'TestCommandLineArguments', 'line': 5, 'column': 0, 'endLine': 5, 'endColumn': 30, 'path': 'data/generated/docs_python/command_line_arguments/test_gpt_4o_2024_08_06_command_line_arguments.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_command_line_arguments', 'obj': 'TestCommandLineArguments.run_script', 'line': 9, 'column': 17, 'endLine': 13, 'endColumn': 9, 'path': 'data/generated/docs_python/command_line_arguments/test_gpt_4o_2024_08_06_command_line_arguments.py', 'symbol': 'subprocess-run-check', 'message': ""'subprocess.run' used without explicitly defining the value for 'check'."", 'message-id': 'W1510'}]",False
Commatizing numbers,"Commatizing   numbers (as used here, is a handy expedient made-up word) is the act of adding commas to a number (or string), or to the numeric part of a larger string.



Task

Write a function that takes a string as an argument with optional arguments or parameters (the format of parameters/options is left to the programmer) that in general, adds commas (or some
other characters, including blanks or tabs) to the first numeric part of a string (if it's suitable for commatizing as per the rules below), and returns that newly commatized string.

Some of the commatizing rules (specified below) are arbitrary, but they'll be a part of this task requirements, if only to make the results consistent amongst national preferences and other disciplines.

The number may be part of a larger (non-numeric) string such as:

   «US$1744 millions»       ──or──
   ±25000 motes.


The string may possibly not have a number suitable for commatizing, so it should be untouched and no error generated.

If any argument (option) is invalid, nothing is changed and no error need be generated (quiet execution, no fail execution).   Error message generation is optional.

The exponent part of a number is never commatized.   The following string isn't suitable for commatizing:   9.7e+12000

Leading zeroes are never commatized.   The string   0000000005714.882   after commatization is:   0000000005,714.882

Any   period   (.)   in a number is assumed to be a   decimal point.

The original string is never changed   except   by the addition of commas   [or whatever character(s) is/are used for insertion], if at all.

To wit, the following should be preserved:

   leading signs (+, -)       ── even superfluous signs
   leading/trailing/embedded blanks, tabs, and other whitespace
   the case (upper/lower) of the exponent indicator, e.g.:   4.8903d-002


Any exponent character(s) should be supported:

   1247e12
   57256.1D-4
   4444^60
   7500∙10**35
   8500x10**35
   9500↑35
   +55000↑3
   1000**100
   2048²
   409632
   10000pow(pi)

Numbers may be terminated with any non-digit character, including subscripts and/or superscript:   41421356243   or   7320509076(base 24).

The character(s) to be used for the comma can be specified, and may contain blanks, tabs, and other whitespace characters, as well as multiple characters.   The default is the comma (,) character.

The   period length   can be specified   (sometimes referred to as ""thousands"" or ""thousands separators"").   The   period length   can be defined as the length (or number) of the decimal digits between commas.   The default period length is   3.

 E.G.:   in this example, the   period length   is five:   56789,12340,14148
The location of where to start the scanning for the target field (the numeric part) should be able to be specified.   The default is   1.

The character strings below may be placed in a file (and read) or stored as simple strings within the program.



Strings to be used as a minimum

The value of   pi   (expressed in base 10)   should be separated with blanks every   5   places past the decimal point,

the Zimbabwe dollar amount should use a decimal point for the ""comma"" separator:

   pi=3.14159265358979323846264338327950288419716939937510582097494459231
   The author has two Z$100000000000000 Zimbabwe notes (100 trillion).
   ""-in Aus$+1411.8millions""
   ===US$0017440 millions=== (in 2000 dollars)
   123.e8000 is pretty big.
   The land area of the earth is 57268900(29% of the surface) square miles.
   Ain't no numbers in this here words, nohow, no way, Jose.
   James was never known as 0000000007
   Arthur Eddington wrote: I believe there are 15747724136275002577605653961181555468044717914527116709366231425076185631031296 protons in the universe.
   ␢␢␢$-140000±100 millions.
   6/9/1946 was a good year for some.

where the penultimate string has three leading blanks   (real blanks are to be used).



Also see

 The Wiki entry:   (sir) Arthur Eddington's number of protons in the universe.

",Python," 
import re as RegEx
 
 
def Commatize( _string, _startPos=0, _periodLen=3, _separator="","" ):
	outString = """"
	strPos = 0
	matches = RegEx.findall( ""[0-9]*"", _string )
 
	for match in matches[:-1]:
		if not match:
			outString += _string[ strPos ]
			strPos += 1
		else:
			if len(match) > _periodLen:
				leadIn = match[:_startPos]
				periods =  [ match [ i:i + _periodLen ] for i in range ( _startPos, len ( match ), _periodLen ) ]
				outString += leadIn + _separator.join( periods )
			else:
				outString += match
 
			strPos += len( match )
 
	return outString
 
 
 
print ( Commatize( ""pi=3.14159265358979323846264338327950288419716939937510582097494459231"", 0, 5, "" "" ) )
print ( Commatize( ""The author has two Z$100000000000000 Zimbabwe notes (100 trillion)."", 0, 3, ""."" ))
print ( Commatize( ""\""-in Aus$+1411.8millions\"""" ))
print ( Commatize( ""===US$0017440 millions=== (in 2000 dollars)"" ))
print ( Commatize( ""123.e8000 is pretty big."" ))
print ( Commatize( ""The land area of the earth is 57268900(29% of the surface) square miles."" ))
print ( Commatize( ""Ain't no numbers in this here words, nohow, no way, Jose."" ))
print ( Commatize( ""James was never known as 0000000007"" ))
print ( Commatize( ""Arthur Eddington wrote: I believe there are 15747724136275002577605653961181555468044717914527116709366231425076185631031296 protons in the universe."" ))
print ( Commatize( ""␢␢␢$-140000±100 millions."" ))
print ( Commatize( ""6/9/1946 was a good year for some."" ))
 ",1476,39,"import unittest

class TestCommatize(unittest.TestCase):

    def test_pi_with_spaces(self):
        result = Commatize(""pi=3.14159265358979323846264338327950288419716939937510582097494459231"", 0, 5, "" "")
        self.assertEqual(result, ""pi=3.14159 26535 89793 23846 26433 83279 50288 41971 69399 37510 58209 74944 59231"")

    def test_zimbabwe_dollars_with_period(self):
        result = Commatize(""The author has two Z$100000000000000 Zimbabwe notes (100 trillion)."", 0, 3, ""."")
        self.assertEqual(result, ""The author has two Z$100.000.000.000.000 Zimbabwe notes (100 trillion)."")

    def test_aus_dollars_default(self):
        result = Commatize(""\""-in Aus$+1411.8millions\"""")
        self.assertEqual(result, ""\""-in Aus$+1,411.8millions\"""")

    def test_us_dollars_with_leading_zeros(self):
        result = Commatize(""===US$0017440 millions=== (in 2000 dollars)"")
        self.assertEqual(result, ""===US$0017,440 millions=== (in 2000 dollars)"")

    def test_exponent_not_commatized(self):
        result = Commatize(""123.e8000 is pretty big."")
        self.assertEqual(result, ""123.e8000 is pretty big."")

    def test_land_area_of_earth(self):
        result = Commatize(""The land area of the earth is 57268900(29% of the surface) square miles."")
        self.assertEqual(result, ""The land area of the earth is 57,268,900(29% of the surface) square miles."")

    def test_no_numbers(self):
        result = Commatize(""Ain't no numbers in this here words, nohow, no way, Jose."")
        self.assertEqual(result, ""Ain't no numbers in this here words, nohow, no way, Jose."")

    def test_leading_zeros_not_commatized(self):
        result = Commatize(""James was never known as 0000000007"")
        self.assertEqual(result, ""James was never known as 0000000007"")

    def test_eddington_number(self):
        result = Commatize(""Arthur Eddington wrote: I believe there are 15747724136275002577605653961181555468044717914527116709366231425076185631031296 protons in the universe."")
        self.assertEqual(result, ""Arthur Eddington wrote: I believe there are 15,747,724,136,275,002,577,605,653,961,181,555,468,044,717,914,527,116,709,366,231,425,076,185,631,031,296 protons in the universe."")

    def test_leading_blanks(self):
        result = Commatize(""   $-140000±100 millions."")
        self.assertEqual(result, ""   $-140,000±100 millions."")

    def test_date_format(self):
        result = Commatize(""6/9/1946 was a good year for some."")
        self.assertEqual(result, ""6/9/1946 was a good year for some."")

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/commatizing_numbers/test_gpt_4o_2024_08_06_commatizing_numbers.py,CompileStatus.OK,0.0,39.06,35.14,0.3,2.2,,0.5772609710693359,33.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_commatizing_numbers', 'obj': '', 'line': 4, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/commatizing_numbers/test_gpt_4o_2024_08_06_commatizing_numbers.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_commatizing_numbers', 'obj': '', 'line': 6, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/commatizing_numbers/test_gpt_4o_2024_08_06_commatizing_numbers.py', 'symbol': 'line-too-long', 'message': 'Line too long (111/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_commatizing_numbers', 'obj': '', 'line': 7, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/commatizing_numbers/test_gpt_4o_2024_08_06_commatizing_numbers.py', 'symbol': 'line-too-long', 'message': 'Line too long (118/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_commatizing_numbers', 'obj': '', 'line': 10, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/commatizing_numbers/test_gpt_4o_2024_08_06_commatizing_numbers.py', 'symbol': 'line-too-long', 'message': 'Line too long (108/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_commatizing_numbers', 'obj': '', 'line': 11, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/commatizing_numbers/test_gpt_4o_2024_08_06_commatizing_numbers.py', 'symbol': 'line-too-long', 'message': 'Line too long (107/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_commatizing_numbers', 'obj': '', 'line': 26, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/commatizing_numbers/test_gpt_4o_2024_08_06_commatizing_numbers.py', 'symbol': 'line-too-long', 'message': 'Line too long (102/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_commatizing_numbers', 'obj': '', 'line': 27, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/commatizing_numbers/test_gpt_4o_2024_08_06_commatizing_numbers.py', 'symbol': 'line-too-long', 'message': 'Line too long (110/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_commatizing_numbers', 'obj': '', 'line': 38, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/commatizing_numbers/test_gpt_4o_2024_08_06_commatizing_numbers.py', 'symbol': 'line-too-long', 'message': 'Line too long (179/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_commatizing_numbers', 'obj': '', 'line': 39, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/commatizing_numbers/test_gpt_4o_2024_08_06_commatizing_numbers.py', 'symbol': 'line-too-long', 'message': 'Line too long (211/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_commatizing_numbers', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/commatizing_numbers/test_gpt_4o_2024_08_06_commatizing_numbers.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_commatizing_numbers', 'obj': 'TestCommatize', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 19, 'path': 'data/generated/docs_python/commatizing_numbers/test_gpt_4o_2024_08_06_commatizing_numbers.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_commatizing_numbers', 'obj': 'TestCommatize.test_pi_with_spaces', 'line': 5, 'column': 4, 'endLine': 5, 'endColumn': 27, 'path': 'data/generated/docs_python/commatizing_numbers/test_gpt_4o_2024_08_06_commatizing_numbers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_commatizing_numbers', 'obj': 'TestCommatize.test_pi_with_spaces', 'line': 6, 'column': 17, 'endLine': 6, 'endColumn': 26, 'path': 'data/generated/docs_python/commatizing_numbers/test_gpt_4o_2024_08_06_commatizing_numbers.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'Commatize'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_commatizing_numbers', 'obj': 'TestCommatize.test_zimbabwe_dollars_with_period', 'line': 9, 'column': 4, 'endLine': 9, 'endColumn': 41, 'path': 'data/generated/docs_python/commatizing_numbers/test_gpt_4o_2024_08_06_commatizing_numbers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_commatizing_numbers', 'obj': 'TestCommatize.test_zimbabwe_dollars_with_period', 'line': 10, 'column': 17, 'endLine': 10, 'endColumn': 26, 'path': 'data/generated/docs_python/commatizing_numbers/test_gpt_4o_2024_08_06_commatizing_numbers.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'Commatize'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_commatizing_numbers', 'obj': 'TestCommatize.test_aus_dollars_default', 'line': 13, 'column': 4, 'endLine': 13, 'endColumn': 32, 'path': 'data/generated/docs_python/commatizing_numbers/test_gpt_4o_2024_08_06_commatizing_numbers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_commatizing_numbers', 'obj': 'TestCommatize.test_aus_dollars_default', 'line': 14, 'column': 17, 'endLine': 14, 'endColumn': 26, 'path': 'data/generated/docs_python/commatizing_numbers/test_gpt_4o_2024_08_06_commatizing_numbers.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'Commatize'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_commatizing_numbers', 'obj': 'TestCommatize.test_us_dollars_with_leading_zeros', 'line': 17, 'column': 4, 'endLine': 17, 'endColumn': 42, 'path': 'data/generated/docs_python/commatizing_numbers/test_gpt_4o_2024_08_06_commatizing_numbers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_commatizing_numbers', 'obj': 'TestCommatize.test_us_dollars_with_leading_zeros', 'line': 18, 'column': 17, 'endLine': 18, 'endColumn': 26, 'path': 'data/generated/docs_python/commatizing_numbers/test_gpt_4o_2024_08_06_commatizing_numbers.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'Commatize'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_commatizing_numbers', 'obj': 'TestCommatize.test_exponent_not_commatized', 'line': 21, 'column': 4, 'endLine': 21, 'endColumn': 36, 'path': 'data/generated/docs_python/commatizing_numbers/test_gpt_4o_2024_08_06_commatizing_numbers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_commatizing_numbers', 'obj': 'TestCommatize.test_exponent_not_commatized', 'line': 22, 'column': 17, 'endLine': 22, 'endColumn': 26, 'path': 'data/generated/docs_python/commatizing_numbers/test_gpt_4o_2024_08_06_commatizing_numbers.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'Commatize'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_commatizing_numbers', 'obj': 'TestCommatize.test_land_area_of_earth', 'line': 25, 'column': 4, 'endLine': 25, 'endColumn': 31, 'path': 'data/generated/docs_python/commatizing_numbers/test_gpt_4o_2024_08_06_commatizing_numbers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_commatizing_numbers', 'obj': 'TestCommatize.test_land_area_of_earth', 'line': 26, 'column': 17, 'endLine': 26, 'endColumn': 26, 'path': 'data/generated/docs_python/commatizing_numbers/test_gpt_4o_2024_08_06_commatizing_numbers.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'Commatize'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_commatizing_numbers', 'obj': 'TestCommatize.test_no_numbers', 'line': 29, 'column': 4, 'endLine': 29, 'endColumn': 23, 'path': 'data/generated/docs_python/commatizing_numbers/test_gpt_4o_2024_08_06_commatizing_numbers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_commatizing_numbers', 'obj': 'TestCommatize.test_no_numbers', 'line': 30, 'column': 17, 'endLine': 30, 'endColumn': 26, 'path': 'data/generated/docs_python/commatizing_numbers/test_gpt_4o_2024_08_06_commatizing_numbers.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'Commatize'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_commatizing_numbers', 'obj': 'TestCommatize.test_leading_zeros_not_commatized', 'line': 33, 'column': 4, 'endLine': 33, 'endColumn': 41, 'path': 'data/generated/docs_python/commatizing_numbers/test_gpt_4o_2024_08_06_commatizing_numbers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_commatizing_numbers', 'obj': 'TestCommatize.test_leading_zeros_not_commatized', 'line': 34, 'column': 17, 'endLine': 34, 'endColumn': 26, 'path': 'data/generated/docs_python/commatizing_numbers/test_gpt_4o_2024_08_06_commatizing_numbers.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'Commatize'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_commatizing_numbers', 'obj': 'TestCommatize.test_eddington_number', 'line': 37, 'column': 4, 'endLine': 37, 'endColumn': 29, 'path': 'data/generated/docs_python/commatizing_numbers/test_gpt_4o_2024_08_06_commatizing_numbers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_commatizing_numbers', 'obj': 'TestCommatize.test_eddington_number', 'line': 38, 'column': 17, 'endLine': 38, 'endColumn': 26, 'path': 'data/generated/docs_python/commatizing_numbers/test_gpt_4o_2024_08_06_commatizing_numbers.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'Commatize'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_commatizing_numbers', 'obj': 'TestCommatize.test_leading_blanks', 'line': 41, 'column': 4, 'endLine': 41, 'endColumn': 27, 'path': 'data/generated/docs_python/commatizing_numbers/test_gpt_4o_2024_08_06_commatizing_numbers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_commatizing_numbers', 'obj': 'TestCommatize.test_leading_blanks', 'line': 42, 'column': 17, 'endLine': 42, 'endColumn': 26, 'path': 'data/generated/docs_python/commatizing_numbers/test_gpt_4o_2024_08_06_commatizing_numbers.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'Commatize'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_commatizing_numbers', 'obj': 'TestCommatize.test_date_format', 'line': 45, 'column': 4, 'endLine': 45, 'endColumn': 24, 'path': 'data/generated/docs_python/commatizing_numbers/test_gpt_4o_2024_08_06_commatizing_numbers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_commatizing_numbers', 'obj': 'TestCommatize.test_date_format', 'line': 46, 'column': 17, 'endLine': 46, 'endColumn': 26, 'path': 'data/generated/docs_python/commatizing_numbers/test_gpt_4o_2024_08_06_commatizing_numbers.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'Commatize'"", 'message-id': 'E0602'}]",False
Concurrent computing,"Task

Using either native language concurrency syntax or freely available libraries, write a program to display the strings ""Enjoy"" ""Rosetta"" ""Code"", one string per line, in random order.

Concurrency syntax must use threads, tasks, co-routines, or whatever concurrency is called in your language.



",Python,"import asyncio
 
 
async def print_(string: str) -> None:
    print(string)
 
 
async def main():
    strings = ['Enjoy', 'Rosetta', 'Code']
    coroutines = map(print_, strings)
    await asyncio.gather(*coroutines)
 
 
if __name__ == '__main__':
    asyncio.run(main())",271,15,"import asyncio
import unittest
from unittest.mock import patch
from io import StringIO
from concurrent_computing import main

class TestConcurrentComputing(unittest.TestCase):

    @patch('sys.stdout', new_callable=StringIO)
    def test_output(self, mock_stdout):
        # Run the main coroutine
        asyncio.run(main())

        # Capture the output and split by lines
        output = mock_stdout.getvalue().strip().split('\n')

        # Expected strings
        expected_strings = {'Enjoy', 'Rosetta', 'Code'}

        # Check if the output contains exactly the expected strings
        self.assertEqual(set(output), expected_strings)

        # Check if the output has exactly three lines
        self.assertEqual(len(output), 3)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/concurrent_computing/test_gpt_4o_2024_08_06_concurrent_computing.py,CompileStatus.OK,0.0,91.67,85.71,0.13,1.0,100.0,0.5452980995178223,3.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_concurrent_computing', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/concurrent_computing/test_gpt_4o_2024_08_06_concurrent_computing.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_concurrent_computing', 'obj': 'TestConcurrentComputing', 'line': 7, 'column': 0, 'endLine': 7, 'endColumn': 29, 'path': 'data/generated/docs_python/concurrent_computing/test_gpt_4o_2024_08_06_concurrent_computing.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_concurrent_computing', 'obj': 'TestConcurrentComputing.test_output', 'line': 10, 'column': 4, 'endLine': 10, 'endColumn': 19, 'path': 'data/generated/docs_python/concurrent_computing/test_gpt_4o_2024_08_06_concurrent_computing.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Continued fraction,"continued fraction
Mathworld





a

0


+









b

1












a

1


+









b

2












a

2


+









b

3












a

3


+
⋱

















{\displaystyle a_{0}+{\cfrac {b_{1}}{a_{1}+{\cfrac {b_{2}}{a_{2}+{\cfrac {b_{3}}{a_{3}+\ddots }}}}}}}


The task is to write a program which generates such a number and prints a real representation of it. The code should be tested by calculating and printing the square root of 2, Napier's Constant, and Pi, using the following coefficients:

For the square root of 2, use




a

0


=
1


{\displaystyle a_{0}=1}

 then




a

N


=
2


{\displaystyle a_{N}=2}

.




b

N




{\displaystyle b_{N}}

 is always



1


{\displaystyle 1}

.







2


=
1
+








1









2
+








1









2
+








1









2
+
⋱

















{\displaystyle {\sqrt {2}}=1+{\cfrac {1}{2+{\cfrac {1}{2+{\cfrac {1}{2+\ddots }}}}}}}


For Napier's Constant, use




a

0


=
2


{\displaystyle a_{0}=2}

, then




a

N


=
N


{\displaystyle a_{N}=N}

.




b

1


=
1


{\displaystyle b_{1}=1}

 then




b

N


=
N
−
1


{\displaystyle b_{N}=N-1}

.





e
=
2
+








1









1
+








1









2
+








2









3
+








3









4
+
⋱






















{\displaystyle e=2+{\cfrac {1}{1+{\cfrac {1}{2+{\cfrac {2}{3+{\cfrac {3}{4+\ddots }}}}}}}}}


For Pi, use




a

0


=
3


{\displaystyle a_{0}=3}

 then




a

N


=
6


{\displaystyle a_{N}=6}

.




b

N


=
(
2
N
−
1

)

2




{\displaystyle b_{N}=(2N-1)^{2}}

.





π
=
3
+








1









6
+








9









6
+








25









6
+
⋱

















{\displaystyle \pi =3+{\cfrac {1}{6+{\cfrac {9}{6+{\cfrac {25}{6+\ddots }}}}}}}




See also

   Continued fraction/Arithmetic for tasks that do arithmetic over continued fractions.

",Python,"from fractions import Fraction
import itertools
try: zip = itertools.izip
except: pass
 
# The Continued Fraction
def CF(a, b, t):
  terms = list(itertools.islice(zip(a, b), t))
  z = Fraction(1,1)
  for a, b in reversed(terms):
    z = a + b / z
  return z
 
# Approximates a fraction to a string
def pRes(x, d):
  q, x = divmod(x, 1)
  res = str(q)
  res += "".""
  for i in range(d):
    x *= 10
    q, x = divmod(x, 1)
    res += str(q)
  return res
 
# Test the Continued Fraction for sqrt2
def sqrt2_a():
  yield 1
  for x in itertools.repeat(2):
    yield x
 
def sqrt2_b():
  for x in itertools.repeat(1):
    yield x
 
cf = CF(sqrt2_a(), sqrt2_b(), 950)
print(pRes(cf, 200))
#1.41421356237309504880168872420969807856967187537694807317667973799073247846210703885038753432764157273501384623091229702492483605585073721264412149709993583141322266592750559275579995050115278206057147
 
 
# Test the Continued Fraction for Napier's Constant
def Napier_a():
  yield 2
  for x in itertools.count(1):
    yield x
 
def Napier_b():
  yield 1
  for x in itertools.count(1):
    yield x
 
cf = CF(Napier_a(), Napier_b(), 950)
print(pRes(cf, 200))
#2.71828182845904523536028747135266249775724709369995957496696762772407663035354759457138217852516642742746639193200305992181741359662904357290033429526059563073813232862794349076323382988075319525101901
 
# Test the Continued Fraction for Pi
def Pi_a():
  yield 3
  for x in itertools.repeat(6):
    yield x
 
def Pi_b():
  for x in itertools.count(1,2):
    yield x*x
 
cf = CF(Pi_a(), Pi_b(), 950)
print(pRes(cf, 10))
#3.1415926532",1576,67,"import unittest
from fractions import Fraction
import itertools

# Assuming the functions CF, pRes, sqrt2_a, sqrt2_b, Napier_a, Napier_b, Pi_a, and Pi_b are defined in continued_fraction.py

class TestContinuedFraction(unittest.TestCase):

    def test_sqrt2(self):
        # Test the Continued Fraction for sqrt2
        cf = CF(sqrt2_a(), sqrt2_b(), 950)
        result = pRes(cf, 200)
        expected = ""1.41421356237309504880168872420969807856967187537694807317667973799073247846210703885038753432764157273501384623091229702492483605585073721264412149709993583141322266592750559275579995050115278206057147""
        self.assertEqual(result, expected)

    def test_napier(self):
        # Test the Continued Fraction for Napier's Constant
        cf = CF(Napier_a(), Napier_b(), 950)
        result = pRes(cf, 200)
        expected = ""2.71828182845904523536028747135266249775724709369995957496696762772407663035354759457138217852516642742746639193200305992181741359662904357290033429526059563073813232862794349076323382988075319525101901""
        self.assertEqual(result, expected)

    def test_pi(self):
        # Test the Continued Fraction for Pi
        cf = CF(Pi_a(), Pi_b(), 950)
        result = pRes(cf, 10)
        expected = ""3.1415926532""
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/continued_fraction/test_gpt_4o_2024_08_06_continued_fraction.py,CompileStatus.OK,0.0,16.18,13.95,0.14,0.19,,0.5786588191986084,22.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_continued_fraction', 'obj': '', 'line': 5, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/continued_fraction/test_gpt_4o_2024_08_06_continued_fraction.py', 'symbol': 'line-too-long', 'message': 'Line too long (124/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_continued_fraction', 'obj': '', 'line': 13, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/continued_fraction/test_gpt_4o_2024_08_06_continued_fraction.py', 'symbol': 'line-too-long', 'message': 'Line too long (223/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_continued_fraction', 'obj': '', 'line': 20, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/continued_fraction/test_gpt_4o_2024_08_06_continued_fraction.py', 'symbol': 'line-too-long', 'message': 'Line too long (223/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_continued_fraction', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/continued_fraction/test_gpt_4o_2024_08_06_continued_fraction.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_continued_fraction', 'obj': 'TestContinuedFraction', 'line': 7, 'column': 0, 'endLine': 7, 'endColumn': 27, 'path': 'data/generated/docs_python/continued_fraction/test_gpt_4o_2024_08_06_continued_fraction.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_continued_fraction', 'obj': 'TestContinuedFraction.test_sqrt2', 'line': 9, 'column': 4, 'endLine': 9, 'endColumn': 18, 'path': 'data/generated/docs_python/continued_fraction/test_gpt_4o_2024_08_06_continued_fraction.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_continued_fraction', 'obj': 'TestContinuedFraction.test_sqrt2', 'line': 11, 'column': 13, 'endLine': 11, 'endColumn': 15, 'path': 'data/generated/docs_python/continued_fraction/test_gpt_4o_2024_08_06_continued_fraction.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'CF'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_continued_fraction', 'obj': 'TestContinuedFraction.test_sqrt2', 'line': 11, 'column': 16, 'endLine': 11, 'endColumn': 23, 'path': 'data/generated/docs_python/continued_fraction/test_gpt_4o_2024_08_06_continued_fraction.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'sqrt2_a'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_continued_fraction', 'obj': 'TestContinuedFraction.test_sqrt2', 'line': 11, 'column': 27, 'endLine': 11, 'endColumn': 34, 'path': 'data/generated/docs_python/continued_fraction/test_gpt_4o_2024_08_06_continued_fraction.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'sqrt2_b'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_continued_fraction', 'obj': 'TestContinuedFraction.test_sqrt2', 'line': 12, 'column': 17, 'endLine': 12, 'endColumn': 21, 'path': 'data/generated/docs_python/continued_fraction/test_gpt_4o_2024_08_06_continued_fraction.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'pRes'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_continued_fraction', 'obj': 'TestContinuedFraction.test_napier', 'line': 16, 'column': 4, 'endLine': 16, 'endColumn': 19, 'path': 'data/generated/docs_python/continued_fraction/test_gpt_4o_2024_08_06_continued_fraction.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_continued_fraction', 'obj': 'TestContinuedFraction.test_napier', 'line': 18, 'column': 13, 'endLine': 18, 'endColumn': 15, 'path': 'data/generated/docs_python/continued_fraction/test_gpt_4o_2024_08_06_continued_fraction.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'CF'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_continued_fraction', 'obj': 'TestContinuedFraction.test_napier', 'line': 18, 'column': 16, 'endLine': 18, 'endColumn': 24, 'path': 'data/generated/docs_python/continued_fraction/test_gpt_4o_2024_08_06_continued_fraction.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'Napier_a'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_continued_fraction', 'obj': 'TestContinuedFraction.test_napier', 'line': 18, 'column': 28, 'endLine': 18, 'endColumn': 36, 'path': 'data/generated/docs_python/continued_fraction/test_gpt_4o_2024_08_06_continued_fraction.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'Napier_b'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_continued_fraction', 'obj': 'TestContinuedFraction.test_napier', 'line': 19, 'column': 17, 'endLine': 19, 'endColumn': 21, 'path': 'data/generated/docs_python/continued_fraction/test_gpt_4o_2024_08_06_continued_fraction.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'pRes'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_continued_fraction', 'obj': 'TestContinuedFraction.test_pi', 'line': 23, 'column': 4, 'endLine': 23, 'endColumn': 15, 'path': 'data/generated/docs_python/continued_fraction/test_gpt_4o_2024_08_06_continued_fraction.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_continued_fraction', 'obj': 'TestContinuedFraction.test_pi', 'line': 25, 'column': 13, 'endLine': 25, 'endColumn': 15, 'path': 'data/generated/docs_python/continued_fraction/test_gpt_4o_2024_08_06_continued_fraction.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'CF'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_continued_fraction', 'obj': 'TestContinuedFraction.test_pi', 'line': 25, 'column': 16, 'endLine': 25, 'endColumn': 20, 'path': 'data/generated/docs_python/continued_fraction/test_gpt_4o_2024_08_06_continued_fraction.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'Pi_a'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_continued_fraction', 'obj': 'TestContinuedFraction.test_pi', 'line': 25, 'column': 24, 'endLine': 25, 'endColumn': 28, 'path': 'data/generated/docs_python/continued_fraction/test_gpt_4o_2024_08_06_continued_fraction.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'Pi_b'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_continued_fraction', 'obj': 'TestContinuedFraction.test_pi', 'line': 26, 'column': 17, 'endLine': 26, 'endColumn': 21, 'path': 'data/generated/docs_python/continued_fraction/test_gpt_4o_2024_08_06_continued_fraction.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'pRes'"", 'message-id': 'E0602'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_continued_fraction', 'obj': '', 'line': 2, 'column': 0, 'endLine': 2, 'endColumn': 30, 'path': 'data/generated/docs_python/continued_fraction/test_gpt_4o_2024_08_06_continued_fraction.py', 'symbol': 'unused-import', 'message': 'Unused Fraction imported from fractions', 'message-id': 'W0611'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_continued_fraction', 'obj': '', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 16, 'path': 'data/generated/docs_python/continued_fraction/test_gpt_4o_2024_08_06_continued_fraction.py', 'symbol': 'unused-import', 'message': 'Unused import itertools', 'message-id': 'W0611'}]",False
Convex hull,"Find the points which form a convex hull from a set of arbitrary two dimensional points.

For example, given the points (16,3), (12,17), (0,6), (-4,-6), (16,6), (16,-7), (16,-3), (17,-4), (5,19), (19,-8), (3,16), (12,13), (3,-4), (17,5), (-3,15), (-3,-9), (0,11), (-9,-3), (-4,-2) and (12,10) the convex hull would be (-9,-3), (-3,-9), (19,-8), (17,5), (12,17), (5,19) and (-3,15).




See also
 Convex Hull (youtube)
 http://www.geeksforgeeks.org/convex-hull-set-2-graham-scan/

",Python,"from __future__ import print_function
from shapely.geometry import MultiPoint
 
if __name__==""__main__"":
	pts = MultiPoint([(16,3), (12,17), (0,6), (-4,-6), (16,6), (16,-7), (16,-3), (17,-4), (5,19), (19,-8), (3,16), (12,13), (3,-4), (17,5), (-3,15), (-3,-9), (0,11), (-9,-3), (-4,-2), (12,10)])
	print (pts.convex_hull)",320,6,"import unittest
from shapely.geometry import MultiPoint, Polygon

class TestConvexHull(unittest.TestCase):

    def test_convex_hull(self):
        # Define the points
        points = [(16,3), (12,17), (0,6), (-4,-6), (16,6), (16,-7), (16,-3),
                  (17,-4), (5,19), (19,-8), (3,16), (12,13), (3,-4), (17,5),
                  (-3,15), (-3,-9), (0,11), (-9,-3), (-4,-2), (12,10)]

        # Expected convex hull points
        expected_hull_points = [(-9,-3), (-3,-9), (19,-8), (17,5), (12,17), (5,19), (-3,15)]

        # Create a MultiPoint object
        pts = MultiPoint(points)

        # Get the convex hull
        hull = pts.convex_hull

        # Check if the convex hull is a Polygon
        self.assertIsInstance(hull, Polygon)

        # Get the coordinates of the convex hull
        hull_points = list(hull.exterior.coords)[:-1]  # Exclude the repeated last point

        # Check if the convex hull points match the expected points
        self.assertCountEqual(hull_points, expected_hull_points)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/convex_hull/test_gpt_4o_2024_08_06_convex_hull.py,CompileStatus.OK,0.0,66.67,59.09,0.13,,100.0,0.5324909687042236,12.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_convex_hull', 'obj': '', 'line': 5, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/convex_hull/test_gpt_4o_2024_08_06_convex_hull.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_convex_hull', 'obj': '', 'line': 8, 'column': 76, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/convex_hull/test_gpt_4o_2024_08_06_convex_hull.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_convex_hull', 'obj': '', 'line': 9, 'column': 76, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/convex_hull/test_gpt_4o_2024_08_06_convex_hull.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_convex_hull', 'obj': '', 'line': 11, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/convex_hull/test_gpt_4o_2024_08_06_convex_hull.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_convex_hull', 'obj': '', 'line': 14, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/convex_hull/test_gpt_4o_2024_08_06_convex_hull.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_convex_hull', 'obj': '', 'line': 17, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/convex_hull/test_gpt_4o_2024_08_06_convex_hull.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_convex_hull', 'obj': '', 'line': 20, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/convex_hull/test_gpt_4o_2024_08_06_convex_hull.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_convex_hull', 'obj': '', 'line': 23, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/convex_hull/test_gpt_4o_2024_08_06_convex_hull.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_convex_hull', 'obj': '', 'line': 26, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/convex_hull/test_gpt_4o_2024_08_06_convex_hull.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_convex_hull', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/convex_hull/test_gpt_4o_2024_08_06_convex_hull.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_convex_hull', 'obj': 'TestConvexHull', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 20, 'path': 'data/generated/docs_python/convex_hull/test_gpt_4o_2024_08_06_convex_hull.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_convex_hull', 'obj': 'TestConvexHull.test_convex_hull', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 24, 'path': 'data/generated/docs_python/convex_hull/test_gpt_4o_2024_08_06_convex_hull.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Conway's Game of Life,"The Game of Life is a   cellular automaton   devised by the British mathematician   John Horton Conway   in 1970.   It is the best-known example of a cellular automaton.

Conway's game of life is described   here:

A cell   C   is represented by a   1   when alive,   or   0   when dead,   in an   m-by-m   (or m×m)   square array of cells.

We calculate   N   - the sum of live cells in C's   eight-location neighbourhood,   then cell   C   is alive or dead in the next generation based on the following table:

   C   N                 new C
   1   0,1             ->  0  # Lonely
   1   4,5,6,7,8       ->  0  # Overcrowded
   1   2,3             ->  1  # Lives
   0   3               ->  1  # It takes three to give birth!
   0   0,1,2,4,5,6,7,8 ->  0  # Barren

Assume cells beyond the boundary are always dead.

The ""game"" is actually a zero-player game, meaning that its evolution is determined by its initial state, needing no input from human players.   One interacts with the Game of Life by creating an initial configuration and observing how it evolves.



Task

Although you should test your implementation on more complex examples such as the   glider   in a larger universe,   show the action of the blinker   (three adjoining cells in a row all alive),   over three generations, in a 3 by 3 grid.



References

   Its creator John Conway, explains   the game of life.   Video from numberphile on youtube.
   John Conway   Inventing Game of Life   - Numberphile video.


Related task

   Langton's ant   - another well known cellular automaton.

",Python,"import random
from collections import defaultdict
 
printdead, printlive = '-#'
maxgenerations = 3
cellcount = 3,3
celltable = defaultdict(int, {
 (1, 2): 1,
 (1, 3): 1,
 (0, 3): 1,
 } ) # Only need to populate with the keys leading to life
 
##
## Start States
##
# blinker
u = universe = defaultdict(int)
u[(1,0)], u[(1,1)], u[(1,2)] = 1,1,1
 
## toad
#u = universe = defaultdict(int)
#u[(5,5)], u[(5,6)], u[(5,7)] = 1,1,1
#u[(6,6)], u[(6,7)], u[(6,8)] = 1,1,1
 
## glider
#u = universe = defaultdict(int)
#maxgenerations = 16
#u[(5,5)], u[(5,6)], u[(5,7)] = 1,1,1
#u[(6,5)] = 1
#u[(7,6)] = 1
 
## random start
#universe = defaultdict(int,
#                       # array of random start values
#                       ( ((row, col), random.choice((0,1)))
#                         for col in range(cellcount[0])
#                         for row in range(cellcount[1])
#                       ) )  # returns 0 for out of bounds
 
for i in range(maxgenerations):
    print(""\nGeneration %3i:"" % ( i, ))
    for row in range(cellcount[1]):
        print(""  "", ''.join(str(universe[(row,col)])
                            for col in range(cellcount[0])).replace(
                                '0', printdead).replace('1', printlive))
    nextgeneration = defaultdict(int)
    for row in range(cellcount[1]):
        for col in range(cellcount[0]):
            nextgeneration[(row,col)] = celltable[
                ( universe[(row,col)],
                  -universe[(row,col)] + sum(universe[(r,c)]
                                             for r in range(row-1,row+2)
                                             for c in range(col-1, col+2) )
                ) ]
    universe = nextgeneration",1700,55,"import unittest
from collections import defaultdict

class TestConwaysGameOfLife(unittest.TestCase):
    def setUp(self):
        self.printdead, self.printlive = '-#'
        self.maxgenerations = 3
        self.cellcount = 3, 3
        self.celltable = defaultdict(int, {
            (1, 2): 1,
            (1, 3): 1,
            (0, 3): 1,
        })

    def test_blinker(self):
        # Initial blinker state
        universe = defaultdict(int)
        universe[(1, 0)], universe[(1, 1)], universe[(1, 2)] = 1, 1, 1

        expected_generations = [
            [
                [0, 0, 0],
                [1, 1, 1],
                [0, 0, 0]
            ],
            [
                [0, 1, 0],
                [0, 1, 0],
                [0, 1, 0]
            ],
            [
                [0, 0, 0],
                [1, 1, 1],
                [0, 0, 0]
            ]
        ]

        for i in range(self.maxgenerations):
            current_state = [[universe[(row, col)] for col in range(self.cellcount[0])] for row in range(self.cellcount[1])]
            self.assertEqual(current_state, expected_generations[i], f""Generation {i} failed"")

            nextgeneration = defaultdict(int)
            for row in range(self.cellcount[1]):
                for col in range(self.cellcount[0]):
                    nextgeneration[(row, col)] = self.celltable[
                        (universe[(row, col)],
                         -universe[(row, col)] + sum(universe[(r, c)]
                                                     for r in range(row - 1, row + 2)
                                                     for c in range(col - 1, col + 2)))
                    ]
            universe = nextgeneration

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/conway_s_game_of_life/test_gpt_4o_2024_08_06_conway_s_game_of_life.py,CompileStatus.OK,0.0,53.85,50.79,0.03,,100.0,0.5115470886230469,4.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_conway_s_game_of_life', 'obj': '', 'line': 39, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/conway_s_game_of_life/test_gpt_4o_2024_08_06_conway_s_game_of_life.py', 'symbol': 'line-too-long', 'message': 'Line too long (124/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_conway_s_game_of_life', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/conway_s_game_of_life/test_gpt_4o_2024_08_06_conway_s_game_of_life.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_conway_s_game_of_life', 'obj': 'TestConwaysGameOfLife', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 27, 'path': 'data/generated/docs_python/conway_s_game_of_life/test_gpt_4o_2024_08_06_conway_s_game_of_life.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_conway_s_game_of_life', 'obj': 'TestConwaysGameOfLife.test_blinker', 'line': 15, 'column': 4, 'endLine': 15, 'endColumn': 20, 'path': 'data/generated/docs_python/conway_s_game_of_life/test_gpt_4o_2024_08_06_conway_s_game_of_life.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Count in factors,"Task

Write a program which counts up from   1,   displaying each number as the multiplication of its prime factors.

For the purpose of this task,   1   (unity)   may be shown as itself.



Example

      2   is prime,   so it would be shown as itself.

      6   is not prime;   it would be shown as  



2
×
3


{\displaystyle 2\times 3}

.
2144   is not prime;   it would be shown as  



2
×
2
×
2
×
2
×
2
×
67


{\displaystyle 2\times 2\times 2\times 2\times 2\times 67}

.



Related tasks

   prime decomposition
   factors of an integer
   Sieve of Eratosthenes
   primality by trial division
   factors of a Mersenne number
   trial factoring of a Mersenne number
   partition an integer X into N primes

",Python,"from functools import lru_cache
 
primes = [2, 3, 5, 7, 11, 13, 17]    # Will be extended
 
@lru_cache(maxsize=2000)
def pfactor(n):
    if n == 1:
        return [1]
    n2 = n // 2 + 1
    for p in primes:
        if p <= n2:
            d, m = divmod(n, p)
            if m == 0:
                if d > 1:
                    return [p] + pfactor(d)
                else:
                    return [p]
        else:
            if n > primes[-1]:
                primes.append(n)
            return [n]
 
if __name__ == '__main__':
    mx = 5000
    for n in range(1, mx + 1):
        factors = pfactor(n)
        if n <= 10 or n >= mx - 20:
            print( '%4i %5s %s' % (n,
                                   '' if factors != [n] or n == 1 else 'prime',
                                   'x'.join(str(i) for i in factors)) )
        if n == 11:
            print('...')
 
    print('\nNumber of primes gathered up to', n, 'is', len(primes))
    print(pfactor.cache_info())",983,35,"import unittest
from count_in_factors import pfactor

class TestPrimeFactorization(unittest.TestCase):

    def test_unity(self):
        self.assertEqual(pfactor(1), [1], ""Unity should be represented as itself."")

    def test_prime_numbers(self):
        self.assertEqual(pfactor(2), [2], ""2 is prime and should be represented as itself."")
        self.assertEqual(pfactor(3), [3], ""3 is prime and should be represented as itself."")
        self.assertEqual(pfactor(5), [5], ""5 is prime and should be represented as itself."")
        self.assertEqual(pfactor(7), [7], ""7 is prime and should be represented as itself."")
        self.assertEqual(pfactor(11), [11], ""11 is prime and should be represented as itself."")

    def test_non_prime_numbers(self):
        self.assertEqual(pfactor(4), [2, 2], ""4 should be represented as 2x2."")
        self.assertEqual(pfactor(6), [2, 3], ""6 should be represented as 2x3."")
        self.assertEqual(pfactor(8), [2, 2, 2], ""8 should be represented as 2x2x2."")
        self.assertEqual(pfactor(9), [3, 3], ""9 should be represented as 3x3."")
        self.assertEqual(pfactor(10), [2, 5], ""10 should be represented as 2x5."")
        self.assertEqual(pfactor(12), [2, 2, 3], ""12 should be represented as 2x2x3."")
        self.assertEqual(pfactor(2144), [2, 2, 2, 2, 2, 67], ""2144 should be represented as 2x2x2x2x2x67."")

    def test_large_number(self):
        self.assertEqual(pfactor(5000), [2, 2, 2, 5, 5, 5, 5], ""5000 should be represented as 2x2x2x5x5x5x5."")

    def test_cache_info(self):
        # This test checks if the cache is being used correctly
        pfactor(10)
        pfactor(20)
        cache_info = pfactor.cache_info()
        self.assertGreater(cache_info.hits, 0, ""Cache should have hits after repeated calls."")
        self.assertGreater(cache_info.misses, 0, ""Cache should have misses for new calculations."")
        self.assertLessEqual(cache_info.currsize, cache_info.maxsize, ""Cache size should not exceed maxsize."")

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/count_in_factors/test_gpt_4o_2024_08_06_count_in_factors.py,CompileStatus.OK,0.0,80.7,72.84,0.57,2.43,80.0,0.5549271106719971,10.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_count_in_factors', 'obj': '', 'line': 23, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/count_in_factors/test_gpt_4o_2024_08_06_count_in_factors.py', 'symbol': 'line-too-long', 'message': 'Line too long (107/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_count_in_factors', 'obj': '', 'line': 26, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/count_in_factors/test_gpt_4o_2024_08_06_count_in_factors.py', 'symbol': 'line-too-long', 'message': 'Line too long (110/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_count_in_factors', 'obj': '', 'line': 35, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/count_in_factors/test_gpt_4o_2024_08_06_count_in_factors.py', 'symbol': 'line-too-long', 'message': 'Line too long (110/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_count_in_factors', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/count_in_factors/test_gpt_4o_2024_08_06_count_in_factors.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_count_in_factors', 'obj': 'TestPrimeFactorization', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 28, 'path': 'data/generated/docs_python/count_in_factors/test_gpt_4o_2024_08_06_count_in_factors.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_count_in_factors', 'obj': 'TestPrimeFactorization.test_unity', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 18, 'path': 'data/generated/docs_python/count_in_factors/test_gpt_4o_2024_08_06_count_in_factors.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_count_in_factors', 'obj': 'TestPrimeFactorization.test_prime_numbers', 'line': 9, 'column': 4, 'endLine': 9, 'endColumn': 26, 'path': 'data/generated/docs_python/count_in_factors/test_gpt_4o_2024_08_06_count_in_factors.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_count_in_factors', 'obj': 'TestPrimeFactorization.test_non_prime_numbers', 'line': 16, 'column': 4, 'endLine': 16, 'endColumn': 30, 'path': 'data/generated/docs_python/count_in_factors/test_gpt_4o_2024_08_06_count_in_factors.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_count_in_factors', 'obj': 'TestPrimeFactorization.test_large_number', 'line': 25, 'column': 4, 'endLine': 25, 'endColumn': 25, 'path': 'data/generated/docs_python/count_in_factors/test_gpt_4o_2024_08_06_count_in_factors.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_count_in_factors', 'obj': 'TestPrimeFactorization.test_cache_info', 'line': 28, 'column': 4, 'endLine': 28, 'endColumn': 23, 'path': 'data/generated/docs_python/count_in_factors/test_gpt_4o_2024_08_06_count_in_factors.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Cramer's rule,"linear algebra
Cramer's rule
system of linear equations


Given







{





a

1


x
+

b

1


y
+

c

1


z


=



d

1









a

2


x
+

b

2


y
+

c

2


z


=



d

2









a

3


x
+

b

3


y
+

c

3


z


=



d

3












{\displaystyle \left\{{\begin{matrix}a_{1}x+b_{1}y+c_{1}z&={\color {red}d_{1}}\\a_{2}x+b_{2}y+c_{2}z&={\color {red}d_{2}}\\a_{3}x+b_{3}y+c_{3}z&={\color {red}d_{3}}\end{matrix}}\right.}




which in matrix format is









[




a

1





b

1





c

1







a

2





b

2





c

2







a

3





b

3





c

3





]




[



x




y




z



]


=


[






d

1











d

2











d

3







]


.


{\displaystyle {\begin{bmatrix}a_{1}&b_{1}&c_{1}\\a_{2}&b_{2}&c_{2}\\a_{3}&b_{3}&c_{3}\end{bmatrix}}{\begin{bmatrix}x\\y\\z\end{bmatrix}}={\begin{bmatrix}{\color {red}d_{1}}\\{\color {red}d_{2}}\\{\color {red}d_{3}}\end{bmatrix}}.}




Then the values of



x
,
y


{\displaystyle x,y}

 and



z


{\displaystyle z}

 can be found as follows:







x
=



|






d

1







b

1





c

1









d

2







b

2





c

2









d

3







b

3





c

3





|


|




a

1





b

1





c

1







a

2





b

2





c

2







a

3





b

3





c

3





|



,

y
=



|




a

1







d

1







c

1







a

2







d

2







c

2







a

3







d

3







c

3





|


|




a

1





b

1





c

1







a

2





b

2





c

2







a

3





b

3





c

3





|



,

 and 

z
=



|




a

1





b

1







d

1









a

2





b

2







d

2









a

3





b

3







d

3







|


|




a

1





b

1





c

1







a

2





b

2





c

2







a

3





b

3





c

3





|



.


{\displaystyle x={\frac {\begin{vmatrix}{\color {red}d_{1}}&b_{1}&c_{1}\\{\color {red}d_{2}}&b_{2}&c_{2}\\{\color {red}d_{3}}&b_{3}&c_{3}\end{vmatrix}}{\begin{vmatrix}a_{1}&b_{1}&c_{1}\\a_{2}&b_{2}&c_{2}\\a_{3}&b_{3}&c_{3}\end{vmatrix}}},\quad y={\frac {\begin{vmatrix}a_{1}&{\color {red}d_{1}}&c_{1}\\a_{2}&{\color {red}d_{2}}&c_{2}\\a_{3}&{\color {red}d_{3}}&c_{3}\end{vmatrix}}{\begin{vmatrix}a_{1}&b_{1}&c_{1}\\a_{2}&b_{2}&c_{2}\\a_{3}&b_{3}&c_{3}\end{vmatrix}}},{\text{ and }}z={\frac {\begin{vmatrix}a_{1}&b_{1}&{\color {red}d_{1}}\\a_{2}&b_{2}&{\color {red}d_{2}}\\a_{3}&b_{3}&{\color {red}d_{3}}\end{vmatrix}}{\begin{vmatrix}a_{1}&b_{1}&c_{1}\\a_{2}&b_{2}&c_{2}\\a_{3}&b_{3}&c_{3}\end{vmatrix}}}.}






Task
Given the following system of equations:









{



2
w
−
x
+
5
y
+
z
=
−
3




3
w
+
2
x
+
2
y
−
6
z
=
−
32




w
+
3
x
+
3
y
−
z
=
−
47




5
w
−
2
x
−
3
y
+
3
z
=
49








{\displaystyle {\begin{cases}2w-x+5y+z=-3\\3w+2x+2y-6z=-32\\w+3x+3y-z=-47\\5w-2x-3y+3z=49\\\end{cases}}}




solve for



w


{\displaystyle w}

,



x


{\displaystyle x}

,



y


{\displaystyle y}

 and



z


{\displaystyle z}

, using Cramer's rule.



",Python," 
def det(m,n):
 if n==1: return m[0][0]
 z=0
 for r in range(n):
  k=m[:]
  del k[r]
  z+=m[r][0]*(-1)**r*det([p[1:]for p in k],n-1)
 return z
w=len(t)
d=det(h,w)
if d==0:r=[]
else:r=[det([r[0:i]+[s]+r[i+1:]for r,s in zip(h,t)],w)/d for i in range(w)]
print(r)
 ",263,15,"import unittest
from cramer_s_rule import det

class TestCramersRule(unittest.TestCase):

    def test_determinant_2x2(self):
        matrix = [
            [4, 3],
            [3, 2]
        ]
        self.assertEqual(det(matrix, 2), -1)

    def test_determinant_3x3(self):
        matrix = [
            [1, 2, 3],
            [0, 1, 4],
            [5, 6, 0]
        ]
        self.assertEqual(det(matrix, 3), 1)

    def test_determinant_4x4(self):
        matrix = [
            [2, -1, 5, 1],
            [3, 2, 2, -6],
            [1, 3, 3, -1],
            [5, -2, -3, 3]
        ]
        self.assertEqual(det(matrix, 4), -418)

    def test_solve_system(self):
        h = [
            [2, -1, 5, 1],
            [3, 2, 2, -6],
            [1, 3, 3, -1],
            [5, -2, -3, 3]
        ]
        t = [-3, -32, -47, 49]
        w = len(t)
        d = det(h, w)
        if d == 0:
            result = []
        else:
            result = [det([r[0:i] + [s] + r[i+1:] for r, s in zip(h, t)], w) / d for i in range(w)]

        expected_result = [1, -2, -3, 4]  # Replace with the correct expected result
        self.assertEqual(result, expected_result)

    def test_singular_matrix(self):
        matrix = [
            [1, 2, 3],
            [2, 4, 6],
            [3, 6, 9]
        ]
        self.assertEqual(det(matrix, 3), 0)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/cramer_s_rule/test_gpt_4o_2024_08_06_cramer_s_rule.py,CompileStatus.OK,0.0,10.0,7.14,0.11,1.25,,0.641700267791748,8.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cramer_s_rule', 'obj': '', 'line': 44, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/cramer_s_rule/test_gpt_4o_2024_08_06_cramer_s_rule.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cramer_s_rule', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/cramer_s_rule/test_gpt_4o_2024_08_06_cramer_s_rule.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cramer_s_rule', 'obj': 'TestCramersRule', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 21, 'path': 'data/generated/docs_python/cramer_s_rule/test_gpt_4o_2024_08_06_cramer_s_rule.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cramer_s_rule', 'obj': 'TestCramersRule.test_determinant_2x2', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 28, 'path': 'data/generated/docs_python/cramer_s_rule/test_gpt_4o_2024_08_06_cramer_s_rule.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cramer_s_rule', 'obj': 'TestCramersRule.test_determinant_3x3', 'line': 13, 'column': 4, 'endLine': 13, 'endColumn': 28, 'path': 'data/generated/docs_python/cramer_s_rule/test_gpt_4o_2024_08_06_cramer_s_rule.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cramer_s_rule', 'obj': 'TestCramersRule.test_determinant_4x4', 'line': 21, 'column': 4, 'endLine': 21, 'endColumn': 28, 'path': 'data/generated/docs_python/cramer_s_rule/test_gpt_4o_2024_08_06_cramer_s_rule.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cramer_s_rule', 'obj': 'TestCramersRule.test_solve_system', 'line': 30, 'column': 4, 'endLine': 30, 'endColumn': 25, 'path': 'data/generated/docs_python/cramer_s_rule/test_gpt_4o_2024_08_06_cramer_s_rule.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cramer_s_rule', 'obj': 'TestCramersRule.test_singular_matrix', 'line': 48, 'column': 4, 'endLine': 48, 'endColumn': 28, 'path': 'data/generated/docs_python/cramer_s_rule/test_gpt_4o_2024_08_06_cramer_s_rule.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Create a file,"In this task, the job is to create a new empty file called ""output.txt"" of size 0 bytes
and an empty directory called ""docs"". This should be done twice: once ""here"", i.e. in the current working directory and once in the filesystem root.
",Python,"import os
for directory in ['/', './']:
  open(directory + 'output.txt', 'w').close()  # create /output.txt, then ./output.txt
  os.mkdir(directory + 'docs')                 # create directory /docs, then ./docs",211,4,"import os
import unittest

class TestCreateFileAndDirectory(unittest.TestCase):

    def setUp(self):
        # Ensure the test environment is clean
        self.files_and_dirs = ['output.txt', 'docs']
        for directory in ['/', './']:
            for item in self.files_and_dirs:
                path = os.path.join(directory, item)
                if os.path.isfile(path):
                    os.remove(path)
                elif os.path.isdir(path):
                    os.rmdir(path)

    def test_files_and_directories_created(self):
        # Run the code to create files and directories
        import create_a_file

        # Check if files and directories are created in the current directory
        for item in self.files_and_dirs:
            self.assertTrue(os.path.exists('./' + item), f""{item} should exist in the current directory"")

        # Check if files and directories are created in the root directory
        for item in self.files_and_dirs:
            self.assertTrue(os.path.exists('/' + item), f""{item} should exist in the root directory"")

    def tearDown(self):
        # Clean up after tests
        for directory in ['/', './']:
            for item in self.files_and_dirs:
                path = os.path.join(directory, item)
                if os.path.isfile(path):
                    os.remove(path)
                elif os.path.isdir(path):
                    os.rmdir(path)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/create_a_file/test_gpt_4o_2024_08_06_create_a_file.py,CompileStatus.OK,0.0,68.75,64.29,0.07,,,0.5979669094085693,7.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_create_a_file', 'obj': '', 'line': 23, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/create_a_file/test_gpt_4o_2024_08_06_create_a_file.py', 'symbol': 'line-too-long', 'message': 'Line too long (105/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_create_a_file', 'obj': '', 'line': 27, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/create_a_file/test_gpt_4o_2024_08_06_create_a_file.py', 'symbol': 'line-too-long', 'message': 'Line too long (101/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_create_a_file', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/create_a_file/test_gpt_4o_2024_08_06_create_a_file.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_create_a_file', 'obj': 'TestCreateFileAndDirectory', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 32, 'path': 'data/generated/docs_python/create_a_file/test_gpt_4o_2024_08_06_create_a_file.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_create_a_file', 'obj': 'TestCreateFileAndDirectory.test_files_and_directories_created', 'line': 17, 'column': 4, 'endLine': 17, 'endColumn': 42, 'path': 'data/generated/docs_python/create_a_file/test_gpt_4o_2024_08_06_create_a_file.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_create_a_file', 'obj': 'TestCreateFileAndDirectory.test_files_and_directories_created', 'line': 19, 'column': 8, 'endLine': 19, 'endColumn': 28, 'path': 'data/generated/docs_python/create_a_file/test_gpt_4o_2024_08_06_create_a_file.py', 'symbol': 'import-outside-toplevel', 'message': 'Import outside toplevel (create_a_file)', 'message-id': 'C0415'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_create_a_file', 'obj': 'TestCreateFileAndDirectory.test_files_and_directories_created', 'line': 19, 'column': 8, 'endLine': 19, 'endColumn': 28, 'path': 'data/generated/docs_python/create_a_file/test_gpt_4o_2024_08_06_create_a_file.py', 'symbol': 'unused-import', 'message': 'Unused import create_a_file', 'message-id': 'W0611'}]",False
Create a two-dimensional array at runtime,"
Data Structure

This illustrates a data structure, a means of storing data within a program.

You may see other such structures in the Data Structures category.
Get two integers from the user, then create a two-dimensional array where the two dimensions have the sizes given by those numbers, and which can be accessed in the most natural way possible. Write some element of that array, and then output that element. Finally destroy the array if not done by the language itself.
",Python,"width = int(raw_input(""Width of myarray: ""))
height = int(raw_input(""Height of Array: ""))
myarray = [[0] * width for i in range(height)]
myarray[0][0] = 3.5
print (myarray[0][0])",178,5,"import unittest
from unittest.mock import patch
import builtins

class TestCreateTwoDimensionalArray(unittest.TestCase):

    @patch('builtins.input', side_effect=['3', '2'])
    def test_array_creation_and_access(self, mock_input):
        # Redirect the input function to simulate user input
        width = int(input(""Width of myarray: ""))
        height = int(input(""Height of Array: ""))

        # Create the array
        myarray = [[0] * width for _ in range(height)]

        # Write to the array
        myarray[0][0] = 3.5

        # Check if the element is correctly written
        self.assertEqual(myarray[0][0], 3.5)

        # Check the dimensions of the array
        self.assertEqual(len(myarray), height)
        self.assertEqual(len(myarray[0]), width)

    @patch('builtins.input', side_effect=['0', '0'])
    def test_zero_dimensions(self, mock_input):
        # Redirect the input function to simulate user input
        width = int(input(""Width of myarray: ""))
        height = int(input(""Height of Array: ""))

        # Create the array
        myarray = [[0] * width for _ in range(height)]

        # Check if the array is empty
        self.assertEqual(len(myarray), 0)

    @patch('builtins.input', side_effect=['5', '0'])
    def test_zero_height(self, mock_input):
        # Redirect the input function to simulate user input
        width = int(input(""Width of myarray: ""))
        height = int(input(""Height of Array: ""))

        # Create the array
        myarray = [[0] * width for _ in range(height)]

        # Check if the array is empty
        self.assertEqual(len(myarray), 0)

    @patch('builtins.input', side_effect=['0', '5'])
    def test_zero_width(self, mock_input):
        # Redirect the input function to simulate user input
        width = int(input(""Width of myarray: ""))
        height = int(input(""Height of Array: ""))

        # Create the array
        myarray = [[0] * width for _ in range(height)]

        # Check if the array has correct height and zero width
        self.assertEqual(len(myarray), height)
        self.assertTrue(all(len(row) == 0 for row in myarray))

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/create_a_two_dimensional_array_at_runtime/test_gpt_4o_2024_08_06_create_a_two_dimensional_array_at_runtime.py,CompileStatus.OK,0.0,84.62,83.02,0.21,,100.0,0.6031019687652588,21.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_create_a_two_dimensional_array_at_runtime', 'obj': '', 'line': 12, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/create_a_two_dimensional_array_at_runtime/test_gpt_4o_2024_08_06_create_a_two_dimensional_array_at_runtime.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_create_a_two_dimensional_array_at_runtime', 'obj': '', 'line': 15, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/create_a_two_dimensional_array_at_runtime/test_gpt_4o_2024_08_06_create_a_two_dimensional_array_at_runtime.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_create_a_two_dimensional_array_at_runtime', 'obj': '', 'line': 18, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/create_a_two_dimensional_array_at_runtime/test_gpt_4o_2024_08_06_create_a_two_dimensional_array_at_runtime.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_create_a_two_dimensional_array_at_runtime', 'obj': '', 'line': 21, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/create_a_two_dimensional_array_at_runtime/test_gpt_4o_2024_08_06_create_a_two_dimensional_array_at_runtime.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_create_a_two_dimensional_array_at_runtime', 'obj': '', 'line': 31, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/create_a_two_dimensional_array_at_runtime/test_gpt_4o_2024_08_06_create_a_two_dimensional_array_at_runtime.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_create_a_two_dimensional_array_at_runtime', 'obj': '', 'line': 34, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/create_a_two_dimensional_array_at_runtime/test_gpt_4o_2024_08_06_create_a_two_dimensional_array_at_runtime.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_create_a_two_dimensional_array_at_runtime', 'obj': '', 'line': 43, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/create_a_two_dimensional_array_at_runtime/test_gpt_4o_2024_08_06_create_a_two_dimensional_array_at_runtime.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_create_a_two_dimensional_array_at_runtime', 'obj': '', 'line': 46, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/create_a_two_dimensional_array_at_runtime/test_gpt_4o_2024_08_06_create_a_two_dimensional_array_at_runtime.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_create_a_two_dimensional_array_at_runtime', 'obj': '', 'line': 55, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/create_a_two_dimensional_array_at_runtime/test_gpt_4o_2024_08_06_create_a_two_dimensional_array_at_runtime.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_create_a_two_dimensional_array_at_runtime', 'obj': '', 'line': 58, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/create_a_two_dimensional_array_at_runtime/test_gpt_4o_2024_08_06_create_a_two_dimensional_array_at_runtime.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_create_a_two_dimensional_array_at_runtime', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/create_a_two_dimensional_array_at_runtime/test_gpt_4o_2024_08_06_create_a_two_dimensional_array_at_runtime.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_create_a_two_dimensional_array_at_runtime', 'obj': 'TestCreateTwoDimensionalArray', 'line': 5, 'column': 0, 'endLine': 5, 'endColumn': 35, 'path': 'data/generated/docs_python/create_a_two_dimensional_array_at_runtime/test_gpt_4o_2024_08_06_create_a_two_dimensional_array_at_runtime.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_create_a_two_dimensional_array_at_runtime', 'obj': 'TestCreateTwoDimensionalArray.test_array_creation_and_access', 'line': 8, 'column': 4, 'endLine': 8, 'endColumn': 38, 'path': 'data/generated/docs_python/create_a_two_dimensional_array_at_runtime/test_gpt_4o_2024_08_06_create_a_two_dimensional_array_at_runtime.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_create_a_two_dimensional_array_at_runtime', 'obj': 'TestCreateTwoDimensionalArray.test_array_creation_and_access', 'line': 8, 'column': 45, 'endLine': 8, 'endColumn': 55, 'path': 'data/generated/docs_python/create_a_two_dimensional_array_at_runtime/test_gpt_4o_2024_08_06_create_a_two_dimensional_array_at_runtime.py', 'symbol': 'unused-argument', 'message': ""Unused argument 'mock_input'"", 'message-id': 'W0613'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_create_a_two_dimensional_array_at_runtime', 'obj': 'TestCreateTwoDimensionalArray.test_zero_dimensions', 'line': 27, 'column': 4, 'endLine': 27, 'endColumn': 28, 'path': 'data/generated/docs_python/create_a_two_dimensional_array_at_runtime/test_gpt_4o_2024_08_06_create_a_two_dimensional_array_at_runtime.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_create_a_two_dimensional_array_at_runtime', 'obj': 'TestCreateTwoDimensionalArray.test_zero_dimensions', 'line': 27, 'column': 35, 'endLine': 27, 'endColumn': 45, 'path': 'data/generated/docs_python/create_a_two_dimensional_array_at_runtime/test_gpt_4o_2024_08_06_create_a_two_dimensional_array_at_runtime.py', 'symbol': 'unused-argument', 'message': ""Unused argument 'mock_input'"", 'message-id': 'W0613'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_create_a_two_dimensional_array_at_runtime', 'obj': 'TestCreateTwoDimensionalArray.test_zero_height', 'line': 39, 'column': 4, 'endLine': 39, 'endColumn': 24, 'path': 'data/generated/docs_python/create_a_two_dimensional_array_at_runtime/test_gpt_4o_2024_08_06_create_a_two_dimensional_array_at_runtime.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_create_a_two_dimensional_array_at_runtime', 'obj': 'TestCreateTwoDimensionalArray.test_zero_height', 'line': 39, 'column': 31, 'endLine': 39, 'endColumn': 41, 'path': 'data/generated/docs_python/create_a_two_dimensional_array_at_runtime/test_gpt_4o_2024_08_06_create_a_two_dimensional_array_at_runtime.py', 'symbol': 'unused-argument', 'message': ""Unused argument 'mock_input'"", 'message-id': 'W0613'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_create_a_two_dimensional_array_at_runtime', 'obj': 'TestCreateTwoDimensionalArray.test_zero_width', 'line': 51, 'column': 4, 'endLine': 51, 'endColumn': 23, 'path': 'data/generated/docs_python/create_a_two_dimensional_array_at_runtime/test_gpt_4o_2024_08_06_create_a_two_dimensional_array_at_runtime.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_create_a_two_dimensional_array_at_runtime', 'obj': 'TestCreateTwoDimensionalArray.test_zero_width', 'line': 51, 'column': 30, 'endLine': 51, 'endColumn': 40, 'path': 'data/generated/docs_python/create_a_two_dimensional_array_at_runtime/test_gpt_4o_2024_08_06_create_a_two_dimensional_array_at_runtime.py', 'symbol': 'unused-argument', 'message': ""Unused argument 'mock_input'"", 'message-id': 'W0613'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_create_a_two_dimensional_array_at_runtime', 'obj': '', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 15, 'path': 'data/generated/docs_python/create_a_two_dimensional_array_at_runtime/test_gpt_4o_2024_08_06_create_a_two_dimensional_array_at_runtime.py', 'symbol': 'unused-import', 'message': 'Unused import builtins', 'message-id': 'W0611'}]",False
Create an HTML table,"Create an HTML table.

 The table body should have at least three rows of three columns.
 Each of these three columns should be labelled ""X"", ""Y"", and ""Z"".
 An extra column should be added at either the extreme left or the extreme right of the table that has no heading, but is filled with sequential row numbers.
 The rows of the ""X"", ""Y"", and ""Z"" columns should be filled with random or sequential integers having 4 digits or less.
 The numbers should be aligned in the same fashion for all columns.

",Python," 
import random
 
def rand9999():
    return random.randint(1000, 9999)
 
def tag(attr='', **kwargs):
    for tag, txt in kwargs.items():
        return '<{tag}{attr}>{txt}</{tag}>'.format(**locals())
 
if __name__ == '__main__':
    header = tag(tr=''.join(tag(th=txt) for txt in ',X,Y,Z'.split(','))) + '\n'
    rows = '\n'.join(tag(tr=tag(' style=""font-weight: bold;""', td=i)
                                    + ''.join(tag(td=rand9999())
                                              for j in range(3)))
                     for i in range(1, 6))
    table = tag(table='\n' + header + rows + '\n')
    print(table)",620,18,"import unittest
from create_an_html_table import rand9999, tag

class TestCreateAnHtmlTable(unittest.TestCase):

    def test_rand9999(self):
        # Test that rand9999 returns a number between 1000 and 9999
        for _ in range(100):
            result = rand9999()
            self.assertGreaterEqual(result, 1000)
            self.assertLessEqual(result, 9999)

    def test_tag_single(self):
        # Test the tag function with a single tag and no attributes
        result = tag(td='1234')
        self.assertEqual(result, '<td>1234</td>')

    def test_tag_with_attributes(self):
        # Test the tag function with a single tag and attributes
        result = tag(' style=""font-weight: bold;""', td='1234')
        self.assertEqual(result, '<td style=""font-weight: bold;"">1234</td>')

    def test_tag_multiple(self):
        # Test the tag function with multiple tags
        result = tag(tr=tag(td='1234') + tag(td='5678'))
        self.assertEqual(result, '<tr><td>1234</td><td>5678</td></tr>')

    def test_table_structure(self):
        # Test the overall structure of the generated table
        header = tag(tr=''.join(tag(th=txt) for txt in ',X,Y,Z'.split(','))) + '\n'
        rows = '\n'.join(tag(tr=tag(' style=""font-weight: bold;""', td=i)
                                        + ''.join(tag(td=rand9999())
                                                  for j in range(3)))
                         for i in range(1, 6))
        table = tag(table='\n' + header + rows + '\n')

        # Check if the table starts and ends with the correct tags
        self.assertTrue(table.startswith('<table>'))
        self.assertTrue(table.endswith('</table>'))

        # Check if the header is correctly formatted
        self.assertIn('<tr><th></th><th>X</th><th>Y</th><th>Z</th></tr>', table)

        # Check if there are 5 rows (excluding the header)
        self.assertEqual(table.count('<tr><td style=""font-weight: bold;"">'), 5)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/create_an_html_table/test_gpt_4o_2024_08_06_create_an_html_table.py,CompileStatus.OK,0.0,86.84,77.78,0.3,3.0,100.0,0.5222659111022949,8.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_create_an_html_table', 'obj': '', 'line': 36, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/create_an_html_table/test_gpt_4o_2024_08_06_create_an_html_table.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_create_an_html_table', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/create_an_html_table/test_gpt_4o_2024_08_06_create_an_html_table.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_create_an_html_table', 'obj': 'TestCreateAnHtmlTable', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 27, 'path': 'data/generated/docs_python/create_an_html_table/test_gpt_4o_2024_08_06_create_an_html_table.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_create_an_html_table', 'obj': 'TestCreateAnHtmlTable.test_rand9999', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 21, 'path': 'data/generated/docs_python/create_an_html_table/test_gpt_4o_2024_08_06_create_an_html_table.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_create_an_html_table', 'obj': 'TestCreateAnHtmlTable.test_tag_single', 'line': 13, 'column': 4, 'endLine': 13, 'endColumn': 23, 'path': 'data/generated/docs_python/create_an_html_table/test_gpt_4o_2024_08_06_create_an_html_table.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_create_an_html_table', 'obj': 'TestCreateAnHtmlTable.test_tag_with_attributes', 'line': 18, 'column': 4, 'endLine': 18, 'endColumn': 32, 'path': 'data/generated/docs_python/create_an_html_table/test_gpt_4o_2024_08_06_create_an_html_table.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_create_an_html_table', 'obj': 'TestCreateAnHtmlTable.test_tag_multiple', 'line': 23, 'column': 4, 'endLine': 23, 'endColumn': 25, 'path': 'data/generated/docs_python/create_an_html_table/test_gpt_4o_2024_08_06_create_an_html_table.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_create_an_html_table', 'obj': 'TestCreateAnHtmlTable.test_table_structure', 'line': 28, 'column': 4, 'endLine': 28, 'endColumn': 28, 'path': 'data/generated/docs_python/create_an_html_table/test_gpt_4o_2024_08_06_create_an_html_table.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Cuban primes,"The name   cuban   has nothing to do with   Cuba  (the country),   but has to do with the
fact that cubes   (3rd powers)   play a role in its definition.



Some definitions of cuban primes

   primes which are the difference of two consecutive cubes.
   primes of the form:   (n+1)3 - n3.
   primes of the form:   n3 - (n-1)3.
   primes   p   such that   n2(p+n)   is a cube for some   n>0.
   primes   p   such that   4p = 1 + 3n2.


Cuban primes were named in 1923 by Allan Joseph Champneys Cunningham.



Task requirements

   show the first   200   cuban primes   (in a multi─line horizontal format).
   show the   100,000th   cuban prime.
   show all cuban primes with commas   (if appropriate).
   show all output here.


Note that   cuban prime   isn't capitalized   (as it doesn't refer to the nation of Cuba).



Also see

   Wikipedia entry:     cuban prime.
   MathWorld entry:   cuban prime.
   The OEIS entry:     A002407.     The   100,000th   cuban prime can be verified in the   2nd   example   on this OEIS web page.

",Python," 
import datetime
import math
 
primes = [ 3, 5 ]
 
cutOff = 200
 
bigUn =  100_000
chunks = 50
little = bigUn / chunks
 
tn = "" cuban prime""
print (""The first {:,}{}s:"".format(cutOff, tn))
 
c = 0
showEach = True
u = 0
v = 1
st = datetime.datetime.now()
 
for i in range(1, int(math.pow(2,20))):
	found = False
	u += 6
	v += u
	mx = int(math.sqrt(v))
 
	for item in primes:
		if (item > mx):
			break
		if (v % item == 0):
			found = True
			break
 
	if (found == 0):
		c += 1
		if (showEach):
			z = primes[-1]
			while (z <= v - 2):
				z += 2
 
				fnd = False
				for item in primes:
					if (item > mx):
						break
					if (z % item == 0):
						fnd = True
						break
 
				if (not fnd):
					primes.append(z)
 
			primes.append(v)
			print(""{:>11,}"".format(v), end='')
 
			if (c % 10 == 0):
				print("""");
			if (c == cutOff):
				showEach = False
				print (""Progress to the {:,}th {}:"".format(bigUn, tn), end='')
		if (c % little == 0):
			print('.', end='')
		if (c == bigUn):
			break
 
print("""");
print (""The {:,}th{} is {:,}"".format(c, tn, v))
print(""Computation time was {} seconds"".format((datetime.datetime.now() - st).seconds))
 ",1149,69,error,,,,,,,,,,,,
Currency,"Task

Show how to represent currency in a simple example, using a data type that represent exact values of dollars and cents.



Note

The IEEE 754 binary floating point representations of numbers like   2.86   and   .0765   are not exact.

For this example, data will be two items with prices in dollars and cents, a quantity for each, and a tax rate.

Use the values:

 4000000000000000 hamburgers at $5.50 each       (four quadrillion burgers)
 2 milkshakes at $2.86 each, and
 a tax rate of 7.65%.


(That number of hamburgers is a 4 with 15 zeros after it.   The number is contrived to exclude naïve task solutions using 64 bit floating point types.)

Compute and output (show results on this page):

 the total price before tax
 the tax
 the total with tax


The tax value must be computed by rounding to the nearest whole cent and this exact value must be added to the total price before tax.

The output must show dollars and cents with a decimal point.

The three results displayed should be:

 22000000000000005.72
 1683000000000000.44
 23683000000000006.16


Dollar signs and thousands separators are optional.



",Python,"from decimal import Decimal as D
from collections import namedtuple
 
Item = namedtuple('Item', 'price, quant')
 
items = dict( hamburger=Item(D('5.50'), D('4000000000000000')),
              milkshake=Item(D('2.86'), D('2')) )
tax_rate = D('0.0765')
 
fmt = ""%-10s %8s %18s %22s""
print(fmt % tuple('Item Price Quantity Extension'.upper().split()))
 
total_before_tax = 0
for item, (price, quant) in sorted(items.items()):
    ext = price * quant
    print(fmt % (item, price, quant, ext))
    total_before_tax += ext
print(fmt % ('', '', '', '--------------------'))
print(fmt % ('', '', 'subtotal', total_before_tax))
 
tax = (tax_rate * total_before_tax).quantize(D('0.00'))
print(fmt % ('', '', 'Tax', tax))
 
total = total_before_tax + tax
print(fmt % ('', '', '', '--------------------'))
print(fmt % ('', '', 'Total', total))",832,26,"import unittest
from decimal import Decimal as D
from collections import namedtuple

# Assuming the code from currency.py is imported here
# from currency import Item, items, tax_rate, calculate_totals

class TestCurrencyCalculations(unittest.TestCase):
    def setUp(self):
        self.items = dict(
            hamburger=Item(D('5.50'), D('4000000000000000')),
            milkshake=Item(D('2.86'), D('2'))
        )
        self.tax_rate = D('0.0765')

    def test_total_before_tax(self):
        total_before_tax = sum(price * quant for price, quant in self.items.values())
        expected_total_before_tax = D('22000000000000005.72')
        self.assertEqual(total_before_tax, expected_total_before_tax)

    def test_tax_calculation(self):
        total_before_tax = sum(price * quant for price, quant in self.items.values())
        tax = (self.tax_rate * total_before_tax).quantize(D('0.00'))
        expected_tax = D('1683000000000000.44')
        self.assertEqual(tax, expected_tax)

    def test_total_with_tax(self):
        total_before_tax = sum(price * quant for price, quant in self.items.values())
        tax = (self.tax_rate * total_before_tax).quantize(D('0.00'))
        total = total_before_tax + tax
        expected_total = D('23683000000000006.16')
        self.assertEqual(total, expected_total)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/currency/test_gpt_4o_2024_08_06_currency.py,CompileStatus.OK,0.0,23.26,20.75,0.12,,,0.5615630149841309,9.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_currency', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/currency/test_gpt_4o_2024_08_06_currency.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_currency', 'obj': 'TestCurrencyCalculations', 'line': 8, 'column': 0, 'endLine': 8, 'endColumn': 30, 'path': 'data/generated/docs_python/currency/test_gpt_4o_2024_08_06_currency.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'refactor', 'module': 'test_gpt_4o_2024_08_06_currency', 'obj': 'TestCurrencyCalculations.setUp', 'line': 10, 'column': 21, 'endLine': 13, 'endColumn': 9, 'path': 'data/generated/docs_python/currency/test_gpt_4o_2024_08_06_currency.py', 'symbol': 'use-dict-literal', 'message': 'Consider using \'{""hamburger"": Item(D(\'5.50\'), D(\'4000000000000000\')), ""milkshake"": Item(D(\'2.86\'), D(\'2\')), ... }\' instead of a call to \'dict\'.', 'message-id': 'R1735'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_currency', 'obj': 'TestCurrencyCalculations.setUp', 'line': 11, 'column': 22, 'endLine': 11, 'endColumn': 26, 'path': 'data/generated/docs_python/currency/test_gpt_4o_2024_08_06_currency.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'Item'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_currency', 'obj': 'TestCurrencyCalculations.setUp', 'line': 12, 'column': 22, 'endLine': 12, 'endColumn': 26, 'path': 'data/generated/docs_python/currency/test_gpt_4o_2024_08_06_currency.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'Item'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_currency', 'obj': 'TestCurrencyCalculations.test_total_before_tax', 'line': 16, 'column': 4, 'endLine': 16, 'endColumn': 29, 'path': 'data/generated/docs_python/currency/test_gpt_4o_2024_08_06_currency.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_currency', 'obj': 'TestCurrencyCalculations.test_tax_calculation', 'line': 21, 'column': 4, 'endLine': 21, 'endColumn': 28, 'path': 'data/generated/docs_python/currency/test_gpt_4o_2024_08_06_currency.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_currency', 'obj': 'TestCurrencyCalculations.test_total_with_tax', 'line': 27, 'column': 4, 'endLine': 27, 'endColumn': 27, 'path': 'data/generated/docs_python/currency/test_gpt_4o_2024_08_06_currency.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_currency', 'obj': '', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 34, 'path': 'data/generated/docs_python/currency/test_gpt_4o_2024_08_06_currency.py', 'symbol': 'unused-import', 'message': 'Unused namedtuple imported from collections', 'message-id': 'W0611'}]",False
Cyclotomic polynomial,"The nth Cyclotomic polynomial, for any positive integer n, is the unique irreducible polynomial of largest degree with integer coefficients that is a divisor of x^n − 1, and is not a divisor of x^k − 1 for any k < n.



Task

 Find and print the first 30 cyclotomic polynomials.
 Find and print the order of the first 10 cyclotomic polynomials that have n or -n as a coefficient.


See also
 Wikipedia article, Cyclotomic polynomial, showing ways to calculate them.
 The sequence A013594 with the smallest order of cyclotomic polynomial containing n or -n as a coefficient.",Python,"from itertools import count, chain
from collections import deque
 
def primes(_cache=[2, 3]):
    yield from _cache
    for n in count(_cache[-1]+2, 2):
        if isprime(n):
            _cache.append(n)
            yield n
 
def isprime(n):
    for p in primes():
        if n%p == 0:
            return False
        if p*p > n:
            return True
 
def factors(n):
    for p in primes():
    # prime factoring is such a non-issue for small numbers that, for
    # this example, we might even just say
    # for p in count(2):
        if p*p > n:
            if n > 1:
                yield(n, 1, 1)
            break
 
        if n%p == 0:
            cnt = 0
            while True:
                n, cnt = n//p, cnt+1
                if n%p != 0: break
            yield p, cnt, n
# ^^ not the most sophisticated prime number routines, because no need
 
# Returns (list1, list2) representing the division between
# two polinomials. A list p of integers means the product
#   (x^p[0] - 1) * (x^p[1] - 1) * ...
def cyclotomic(n):
    def poly_div(num, den):
        return (num[0] + den[1], num[1] + den[0])
 
    def elevate(poly, n): # replace poly p(x) with p(x**n)
        powerup = lambda p, n: [a*n for a in p]
        return poly if n == 1 else (powerup(poly[0], n), powerup(poly[1], n))
 
 
    if n == 0:
        return ([], [])
    if n == 1:
        return ([1], [])
 
    p, m, r = next(factors(n))
    poly = cyclotomic(r)
    return elevate(poly_div(elevate(poly, p), poly), p**(m-1))
 
def to_text(poly):
    def getx(c, e):
        if e == 0:
            return '1'
        elif e == 1:
            return 'x'
        return 'x' + (''.join('⁰¹²³⁴⁵⁶⁷⁸⁹'[i] for i in map(int, str(e))))
 
    parts = []
    for (c,e) in (poly):
        if c < 0:
            coef = ' - ' if c == -1 else f' - {-c} '
        else:
            coef = (parts and ' + ' or '') if c == 1 else f' + {c}'
        parts.append(coef + getx(c,e))
    return ''.join(parts)
 
def terms(poly):
    # convert above representation of division to (coef, power) pairs
 
    def merge(a, b):
        # a, b should be deques. They may change during the course.
        while a or b:
            l = a[0] if a else (0, -1) # sentinel value
            r = b[0] if b else (0, -1)
            if l[1] > r[1]:
                a.popleft()
            elif l[1] < r[1]:
                b.popleft()
                l = r
            else:
                a.popleft()
                b.popleft()
                l = (l[0] + r[0], l[1])
            yield l
 
    def mul(poly, p): # p means polynomial x^p - 1
        poly = list(poly)
        return merge(deque((c, e+p) for c,e in poly),
                     deque((-c, e) for c,e in poly))
 
    def div(poly, p): # p means polynomial x^p - 1
        q = deque()
        for c,e in merge(deque(poly), q):
            if c:
                q.append((c, e - p))
                yield (c, e - p)
            if e == p: break
 
    p = [(1, 0)]  # 1*x^0, i.e. 1
 
    for x in poly[0]: # numerator
        p = mul(p, x)
    for x in sorted(poly[1], reverse=True): # denominator
        p = div(p, x)
    return p
 
for n in chain(range(11), [2]):
    print(f'{n}: {to_text(terms(cyclotomic(n)))}')
 
want = 1
for n in count():
    c = [c for c,_ in terms(cyclotomic(n))]
    while want in c or -want in c:
        print(f'C[{want}]: {n}')
        want += 1",3385,122,"import unittest
from cyclotomic_polynomial import cyclotomic, terms, to_text

class TestCyclotomicPolynomial(unittest.TestCase):

    def test_first_30_cyclotomic_polynomials(self):
        expected_polynomials = [
            ""1"", ""x - 1"", ""x + 1"", ""x² + x + 1"", ""x² + 1"", ""x⁴ + x³ + x² + x + 1"",
            ""x² - x + 1"", ""x⁴ + 1"", ""x⁶ + x³ + 1"", ""x⁴ - x² + 1"", ""x¹⁰ + x⁹ + x⁸ + x⁷ + x⁶ + x⁵ + x⁴ + x³ + x² + x + 1"",
            ""x² - x + 1"", ""x¹² + x¹¹ + x¹⁰ + x⁹ + x⁸ + x⁷ + x⁶ + x⁵ + x⁴ + x³ + x² + x + 1"", ""x⁶ - x³ + 1"",
            ""x⁸ + x⁷ + x⁶ + x⁵ + x⁴ + x³ + x² + x + 1"", ""x⁸ - x⁴ + 1"", ""x¹⁶ + x¹⁵ + x¹⁴ + x¹³ + x¹² + x¹¹ + x¹⁰ + x⁹ + x⁸ + x⁷ + x⁶ + x⁵ + x⁴ + x³ + x² + x + 1"",
            ""x⁶ - x³ + 1"", ""x¹⁸ + x¹⁷ + x¹⁶ + x¹⁵ + x¹⁴ + x¹³ + x¹² + x¹¹ + x¹⁰ + x⁹ + x⁸ + x⁷ + x⁶ + x⁵ + x⁴ + x³ + x² + x + 1"", ""x⁸ - x⁴ + 1"",
            ""x¹² - x⁶ + 1"", ""x²² + x²¹ + x²⁰ + x¹⁹ + x¹⁸ + x¹⁷ + x¹⁶ + x¹⁵ + x¹⁴ + x¹³ + x¹² + x¹¹ + x¹⁰ + x⁹ + x⁸ + x⁷ + x⁶ + x⁵ + x⁴ + x³ + x² + x + 1"",
            ""x¹⁰ - x⁵ + 1"", ""x²⁴ + x²³ + x²² + x²¹ + x²⁰ + x¹⁹ + x¹⁸ + x¹⁷ + x¹⁶ + x¹⁵ + x¹⁴ + x¹³ + x¹² + x¹¹ + x¹⁰ + x⁹ + x⁸ + x⁷ + x⁶ + x⁵ + x⁴ + x³ + x² + x + 1"",
            ""x¹² - x⁶ + 1"", ""x²⁶ + x²⁵ + x²⁴ + x²³ + x²² + x²¹ + x²⁰ + x¹⁹ + x¹⁸ + x¹⁷ + x¹⁶ + x¹⁵ + x¹⁴ + x¹³ + x¹² + x¹¹ + x¹⁰ + x⁹ + x⁸ + x⁷ + x⁶ + x⁵ + x⁴ + x³ + x² + x + 1"",
            ""x¹⁴ - x⁷ + 1"", ""x²⁸ + x²⁷ + x²⁶ + x²⁵ + x²⁴ + x²³ + x²² + x²¹ + x²⁰ + x¹⁹ + x¹⁸ + x¹⁷ + x¹⁶ + x¹⁵ + x¹⁴ + x¹³ + x¹² + x¹¹ + x¹⁰ + x⁹ + x⁸ + x⁷ + x⁶ + x⁵ + x⁴ + x³ + x² + x + 1"",
            ""x¹⁶ - x⁸ + 1"", ""x³⁰ + x²⁹ + x²⁸ + x²⁷ + x²⁶ + x²⁵ + x²⁴ + x²³ + x²² + x²¹ + x²⁰ + x¹⁹ + x¹⁸ + x¹⁷ + x¹⁶ + x¹⁵ + x¹⁴ + x¹³ + x¹² + x¹¹ + x¹⁰ + x⁹ + x⁸ + x⁷ + x⁶ + x⁵ + x⁴ + x³ + x² + x + 1""
        ]
        for n in range(31):
            poly = to_text(terms(cyclotomic(n)))
            self.assertEqual(poly, expected_polynomials[n])

    def test_order_of_first_10_cyclotomic_with_n_or_minus_n(self):
        expected_orders = [3, 4, 7, 9, 11, 13, 15, 17, 19, 21]
        found_orders = []
        want = 1
        for n in range(100):  # Arbitrary limit to find the first 10
            c = [c for c, _ in terms(cyclotomic(n))]
            if want in c or -want in c:
                found_orders.append(n)
                want += 1
            if len(found_orders) == 10:
                break
        self.assertEqual(found_orders, expected_orders)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/cyclotomic_polynomial/test_gpt_4o_2024_08_06_cyclotomic_polynomial.py,CompileStatus.OK,0.0,60.18,55.08,0.09,0.04,,0.6628777980804443,13.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cyclotomic_polynomial', 'obj': '', 'line': 9, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/cyclotomic_polynomial/test_gpt_4o_2024_08_06_cyclotomic_polynomial.py', 'symbol': 'line-too-long', 'message': 'Line too long (120/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cyclotomic_polynomial', 'obj': '', 'line': 10, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/cyclotomic_polynomial/test_gpt_4o_2024_08_06_cyclotomic_polynomial.py', 'symbol': 'line-too-long', 'message': 'Line too long (107/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cyclotomic_polynomial', 'obj': '', 'line': 11, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/cyclotomic_polynomial/test_gpt_4o_2024_08_06_cyclotomic_polynomial.py', 'symbol': 'line-too-long', 'message': 'Line too long (161/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cyclotomic_polynomial', 'obj': '', 'line': 12, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/cyclotomic_polynomial/test_gpt_4o_2024_08_06_cyclotomic_polynomial.py', 'symbol': 'line-too-long', 'message': 'Line too long (144/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cyclotomic_polynomial', 'obj': '', 'line': 13, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/cyclotomic_polynomial/test_gpt_4o_2024_08_06_cyclotomic_polynomial.py', 'symbol': 'line-too-long', 'message': 'Line too long (154/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cyclotomic_polynomial', 'obj': '', 'line': 14, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/cyclotomic_polynomial/test_gpt_4o_2024_08_06_cyclotomic_polynomial.py', 'symbol': 'line-too-long', 'message': 'Line too long (166/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cyclotomic_polynomial', 'obj': '', 'line': 15, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/cyclotomic_polynomial/test_gpt_4o_2024_08_06_cyclotomic_polynomial.py', 'symbol': 'line-too-long', 'message': 'Line too long (178/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cyclotomic_polynomial', 'obj': '', 'line': 16, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/cyclotomic_polynomial/test_gpt_4o_2024_08_06_cyclotomic_polynomial.py', 'symbol': 'line-too-long', 'message': 'Line too long (190/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cyclotomic_polynomial', 'obj': '', 'line': 17, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/cyclotomic_polynomial/test_gpt_4o_2024_08_06_cyclotomic_polynomial.py', 'symbol': 'line-too-long', 'message': 'Line too long (201/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cyclotomic_polynomial', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/cyclotomic_polynomial/test_gpt_4o_2024_08_06_cyclotomic_polynomial.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cyclotomic_polynomial', 'obj': 'TestCyclotomicPolynomial', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 30, 'path': 'data/generated/docs_python/cyclotomic_polynomial/test_gpt_4o_2024_08_06_cyclotomic_polynomial.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cyclotomic_polynomial', 'obj': 'TestCyclotomicPolynomial.test_first_30_cyclotomic_polynomials', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 44, 'path': 'data/generated/docs_python/cyclotomic_polynomial/test_gpt_4o_2024_08_06_cyclotomic_polynomial.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_cyclotomic_polynomial', 'obj': 'TestCyclotomicPolynomial.test_order_of_first_10_cyclotomic_with_n_or_minus_n', 'line': 23, 'column': 4, 'endLine': 23, 'endColumn': 59, 'path': 'data/generated/docs_python/cyclotomic_polynomial/test_gpt_4o_2024_08_06_cyclotomic_polynomial.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Damm algorithm,"The Damm algorithm is a checksum algorithm which detects all single digit errors and adjacent transposition errors.



The algorithm is named after H. Michael Damm.



Task

Verify the checksum, stored as last digit of an input.


",Python,"def damm(num: int) -> bool:
    row = 0
    for digit in str(num):
        row = _matrix[row][int(digit)]
    return row == 0
 
_matrix = (
    (0, 3, 1, 7, 5, 9, 8, 6, 4, 2),
    (7, 0, 9, 2, 1, 5, 4, 8, 6, 3),
    (4, 2, 0, 6, 8, 7, 1, 3, 5, 9),
    (1, 7, 5, 0, 9, 8, 3, 4, 2, 6),
    (6, 1, 2, 3, 0, 4, 5, 9, 7, 8),
    (3, 6, 7, 4, 2, 0, 9, 5, 8, 1),
    (5, 8, 6, 9, 7, 2, 0, 1, 3, 4),
    (8, 9, 4, 5, 3, 6, 2, 0, 1, 7),
    (9, 4, 3, 8, 6, 1, 7, 2, 0, 5),
    (2, 5, 8, 1, 4, 3, 6, 7, 9, 0)
)
 
if __name__ == '__main__':
    for test in [5724, 5727, 112946]:
        print(f'{test}\t Validates as: {damm(test)}')",622,22,"import unittest
from damm_algorithm import damm

class TestDammAlgorithm(unittest.TestCase):

    def test_valid_checksum(self):
        # Test cases with valid checksums
        self.assertTrue(damm(5724))  # Valid checksum
        self.assertTrue(damm(112946))  # Valid checksum

    def test_invalid_checksum(self):
        # Test cases with invalid checksums
        self.assertFalse(damm(5727))  # Invalid checksum
        self.assertFalse(damm(112947))  # Invalid checksum

    def test_single_digit(self):
        # Test cases with single digit numbers
        self.assertTrue(damm(0))  # Single digit, valid checksum
        self.assertFalse(damm(1))  # Single digit, invalid checksum

    def test_empty_input(self):
        # Test case with empty input
        with self.assertRaises(ValueError):
            damm('')  # Empty input should raise an error

    def test_non_integer_input(self):
        # Test case with non-integer input
        with self.assertRaises(ValueError):
            damm('abc')  # Non-integer input should raise an error

    def test_large_number(self):
        # Test case with a large number
        self.assertTrue(damm(12345678901234567890))  # Valid checksum for a large number

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/damm_algorithm/test_gpt_4o_2024_08_06_damm_algorithm.py,CompileStatus.OK,0.0,90.32,83.72,0.41,4.5,66.67,0.5506298542022705,9.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_damm_algorithm', 'obj': '', 'line': 5, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/damm_algorithm/test_gpt_4o_2024_08_06_damm_algorithm.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_damm_algorithm', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/damm_algorithm/test_gpt_4o_2024_08_06_damm_algorithm.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_damm_algorithm', 'obj': 'TestDammAlgorithm', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 23, 'path': 'data/generated/docs_python/damm_algorithm/test_gpt_4o_2024_08_06_damm_algorithm.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_damm_algorithm', 'obj': 'TestDammAlgorithm.test_valid_checksum', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 27, 'path': 'data/generated/docs_python/damm_algorithm/test_gpt_4o_2024_08_06_damm_algorithm.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_damm_algorithm', 'obj': 'TestDammAlgorithm.test_invalid_checksum', 'line': 11, 'column': 4, 'endLine': 11, 'endColumn': 29, 'path': 'data/generated/docs_python/damm_algorithm/test_gpt_4o_2024_08_06_damm_algorithm.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_damm_algorithm', 'obj': 'TestDammAlgorithm.test_single_digit', 'line': 16, 'column': 4, 'endLine': 16, 'endColumn': 25, 'path': 'data/generated/docs_python/damm_algorithm/test_gpt_4o_2024_08_06_damm_algorithm.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_damm_algorithm', 'obj': 'TestDammAlgorithm.test_empty_input', 'line': 21, 'column': 4, 'endLine': 21, 'endColumn': 24, 'path': 'data/generated/docs_python/damm_algorithm/test_gpt_4o_2024_08_06_damm_algorithm.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_damm_algorithm', 'obj': 'TestDammAlgorithm.test_non_integer_input', 'line': 26, 'column': 4, 'endLine': 26, 'endColumn': 30, 'path': 'data/generated/docs_python/damm_algorithm/test_gpt_4o_2024_08_06_damm_algorithm.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_damm_algorithm', 'obj': 'TestDammAlgorithm.test_large_number', 'line': 31, 'column': 4, 'endLine': 31, 'endColumn': 25, 'path': 'data/generated/docs_python/damm_algorithm/test_gpt_4o_2024_08_06_damm_algorithm.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Date format,"This task has been clarified. Its programming examples are in need of review to ensure that they still fit the requirements of the task.


Task

Display the   current date   in the formats of:

   2007-11-23     and
   Friday, November 23, 2007

",Python,"import datetime
today = datetime.date.today()
# The first requested format is a method of datetime objects:
today.isoformat()
# For full flexibility, use the strftime formatting codes from the link above:
today.strftime(""%A, %B %d, %Y"")
# This mechanism is integrated into the general string formatting system.
# You can do this with positional arguments referenced by number
""The date is {0:%A, %B %d, %Y}"".format(d)
# Or keyword arguments referenced by name
""The date is {date:%A, %B %d, %Y}"".format(date=d)
# Since Python 3.6, f-strings allow the value to be inserted inline
f""The date is {d:%A, %B %d, %Y}""
 ",612,14,"import unittest
from datetime import date
from date_format import today

class TestDateFormat(unittest.TestCase):

    def test_iso_format(self):
        expected_format = today.isoformat()
        self.assertEqual(expected_format, date.today().isoformat())

    def test_strftime_format(self):
        expected_format = today.strftime(""%A, %B %d, %Y"")
        self.assertEqual(expected_format, date.today().strftime(""%A, %B %d, %Y""))

    def test_positional_format(self):
        expected_format = ""The date is {0:%A, %B %d, %Y}"".format(today)
        self.assertEqual(expected_format, ""The date is {0:%A, %B %d, %Y}"".format(date.today()))

    def test_keyword_format(self):
        expected_format = ""The date is {date:%A, %B %d, %Y}"".format(date=today)
        self.assertEqual(expected_format, ""The date is {date:%A, %B %d, %Y}"".format(date=date.today()))

    def test_f_string_format(self):
        expected_format = f""The date is {today:%A, %B %d, %Y}""
        self.assertEqual(expected_format, f""The date is {date.today():%A, %B %d, %Y}"")

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/date_format/test_gpt_4o_2024_08_06_date_format.py,CompileStatus.OK,0.0,28.57,26.67,0.24,,,0.6554009914398193,12.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_date_format', 'obj': '', 'line': 21, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/date_format/test_gpt_4o_2024_08_06_date_format.py', 'symbol': 'line-too-long', 'message': 'Line too long (103/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_date_format', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/date_format/test_gpt_4o_2024_08_06_date_format.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_date_format', 'obj': 'TestDateFormat', 'line': 5, 'column': 0, 'endLine': 5, 'endColumn': 20, 'path': 'data/generated/docs_python/date_format/test_gpt_4o_2024_08_06_date_format.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_date_format', 'obj': 'TestDateFormat.test_iso_format', 'line': 7, 'column': 4, 'endLine': 7, 'endColumn': 23, 'path': 'data/generated/docs_python/date_format/test_gpt_4o_2024_08_06_date_format.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_date_format', 'obj': 'TestDateFormat.test_strftime_format', 'line': 11, 'column': 4, 'endLine': 11, 'endColumn': 28, 'path': 'data/generated/docs_python/date_format/test_gpt_4o_2024_08_06_date_format.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_date_format', 'obj': 'TestDateFormat.test_positional_format', 'line': 15, 'column': 4, 'endLine': 15, 'endColumn': 30, 'path': 'data/generated/docs_python/date_format/test_gpt_4o_2024_08_06_date_format.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_date_format', 'obj': 'TestDateFormat.test_positional_format', 'line': 16, 'column': 26, 'endLine': 16, 'endColumn': 57, 'path': 'data/generated/docs_python/date_format/test_gpt_4o_2024_08_06_date_format.py', 'symbol': 'consider-using-f-string', 'message': 'Formatting a regular string which could be an f-string', 'message-id': 'C0209'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_date_format', 'obj': 'TestDateFormat.test_positional_format', 'line': 17, 'column': 42, 'endLine': 17, 'endColumn': 73, 'path': 'data/generated/docs_python/date_format/test_gpt_4o_2024_08_06_date_format.py', 'symbol': 'consider-using-f-string', 'message': 'Formatting a regular string which could be an f-string', 'message-id': 'C0209'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_date_format', 'obj': 'TestDateFormat.test_keyword_format', 'line': 19, 'column': 4, 'endLine': 19, 'endColumn': 27, 'path': 'data/generated/docs_python/date_format/test_gpt_4o_2024_08_06_date_format.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_date_format', 'obj': 'TestDateFormat.test_keyword_format', 'line': 20, 'column': 26, 'endLine': 20, 'endColumn': 60, 'path': 'data/generated/docs_python/date_format/test_gpt_4o_2024_08_06_date_format.py', 'symbol': 'consider-using-f-string', 'message': 'Formatting a regular string which could be an f-string', 'message-id': 'C0209'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_date_format', 'obj': 'TestDateFormat.test_keyword_format', 'line': 21, 'column': 42, 'endLine': 21, 'endColumn': 76, 'path': 'data/generated/docs_python/date_format/test_gpt_4o_2024_08_06_date_format.py', 'symbol': 'consider-using-f-string', 'message': 'Formatting a regular string which could be an f-string', 'message-id': 'C0209'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_date_format', 'obj': 'TestDateFormat.test_f_string_format', 'line': 23, 'column': 4, 'endLine': 23, 'endColumn': 28, 'path': 'data/generated/docs_python/date_format/test_gpt_4o_2024_08_06_date_format.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Day of the week,"A company decides that whenever Xmas falls on a Sunday they will give their workers all extra paid holidays so that, together with any public holidays, workers will not have to work the following week (between the 25th of December and the first of January).



Task

In what years between 2008 and 2121 will the 25th of December be a Sunday?

Using any standard date handling libraries of your programming language;
compare the dates calculated with the output of other languages to discover any anomalies in the handling of dates which may be due to, for example, overflow in types used to represent dates/times similar to   y2k   type problems.



",Python,"from calendar import weekday, SUNDAY
 
[year for year in range(2008, 2122) if weekday(year, 12, 25) == SUNDAY]",110,3,"import unittest
from calendar import weekday, SUNDAY

def get_sundays_on_dec_25(start_year, end_year):
    return [year for year in range(start_year, end_year + 1) if weekday(year, 12, 25) == SUNDAY]

class TestXmasSunday(unittest.TestCase):

    def test_xmas_sundays(self):
        expected_years = [
            2011, 2016, 2022, 2033, 2039, 2044, 2050, 2061, 2067, 2072,
            2078, 2089, 2095, 2100, 2106, 2117
        ]
        result = get_sundays_on_dec_25(2008, 2121)
        self.assertEqual(result, expected_years)

    def test_no_sundays_in_short_range(self):
        result = get_sundays_on_dec_25(2008, 2010)
        self.assertEqual(result, [])

    def test_single_year_sunday(self):
        result = get_sundays_on_dec_25(2016, 2016)
        self.assertEqual(result, [2016])

    def test_single_year_not_sunday(self):
        result = get_sundays_on_dec_25(2015, 2015)
        self.assertEqual(result, [])

    def test_edge_case_start_year(self):
        result = get_sundays_on_dec_25(2011, 2011)
        self.assertEqual(result, [2011])

    def test_edge_case_end_year(self):
        result = get_sundays_on_dec_25(2117, 2117)
        self.assertEqual(result, [2117])

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/day_of_the_week/test_gpt_4o_2024_08_06_day_of_the_week.py,CompileStatus.OK,0.0,89.29,82.35,0.21,,66.67,0.580359935760498,11.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_day_of_the_week', 'obj': '', 'line': 8, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/day_of_the_week/test_gpt_4o_2024_08_06_day_of_the_week.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_day_of_the_week', 'obj': '', 'line': 11, 'column': 71, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/day_of_the_week/test_gpt_4o_2024_08_06_day_of_the_week.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_day_of_the_week', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/day_of_the_week/test_gpt_4o_2024_08_06_day_of_the_week.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_day_of_the_week', 'obj': 'get_sundays_on_dec_25', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 25, 'path': 'data/generated/docs_python/day_of_the_week/test_gpt_4o_2024_08_06_day_of_the_week.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_day_of_the_week', 'obj': 'TestXmasSunday', 'line': 7, 'column': 0, 'endLine': 7, 'endColumn': 20, 'path': 'data/generated/docs_python/day_of_the_week/test_gpt_4o_2024_08_06_day_of_the_week.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_day_of_the_week', 'obj': 'TestXmasSunday.test_xmas_sundays', 'line': 9, 'column': 4, 'endLine': 9, 'endColumn': 25, 'path': 'data/generated/docs_python/day_of_the_week/test_gpt_4o_2024_08_06_day_of_the_week.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_day_of_the_week', 'obj': 'TestXmasSunday.test_no_sundays_in_short_range', 'line': 17, 'column': 4, 'endLine': 17, 'endColumn': 38, 'path': 'data/generated/docs_python/day_of_the_week/test_gpt_4o_2024_08_06_day_of_the_week.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_day_of_the_week', 'obj': 'TestXmasSunday.test_single_year_sunday', 'line': 21, 'column': 4, 'endLine': 21, 'endColumn': 31, 'path': 'data/generated/docs_python/day_of_the_week/test_gpt_4o_2024_08_06_day_of_the_week.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_day_of_the_week', 'obj': 'TestXmasSunday.test_single_year_not_sunday', 'line': 25, 'column': 4, 'endLine': 25, 'endColumn': 35, 'path': 'data/generated/docs_python/day_of_the_week/test_gpt_4o_2024_08_06_day_of_the_week.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_day_of_the_week', 'obj': 'TestXmasSunday.test_edge_case_start_year', 'line': 29, 'column': 4, 'endLine': 29, 'endColumn': 33, 'path': 'data/generated/docs_python/day_of_the_week/test_gpt_4o_2024_08_06_day_of_the_week.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_day_of_the_week', 'obj': 'TestXmasSunday.test_edge_case_end_year', 'line': 33, 'column': 4, 'endLine': 33, 'endColumn': 31, 'path': 'data/generated/docs_python/day_of_the_week/test_gpt_4o_2024_08_06_day_of_the_week.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Deal cards for FreeCell,"Free Cell is the solitaire card game that Paul Alfille introduced to the PLATO system in 1978. Jim Horne, at Microsoft, changed the name to FreeCell and reimplemented the game for DOS, then Windows.

This version introduced 32000 numbered deals. (The FreeCell FAQ tells this history.)

As the game became popular, Jim Horne disclosed the algorithm, and other implementations of FreeCell began to reproduce the Microsoft deals.

These deals are numbered from 1 to 32000.
Newer versions from Microsoft have 1 million deals, numbered from 1 to 1000000; some implementations allow numbers outside that range.

The algorithm uses this linear congruential generator from Microsoft C:





s
t
a
t

e

n
+
1


≡
214013
×
s
t
a
t

e

n


+
2531011


(
mod


2

31


)



{\displaystyle state_{n+1}\equiv 214013\times state_{n}+2531011{\pmod {2^{31}}}}






r
a
n

d

n


=
s
t
a
t

e

n


÷

2

16




{\displaystyle rand_{n}=state_{n}\div 2^{16}}






r
a
n

d

n




{\displaystyle rand_{n}}

 is in range 0 to 32767.
 Rosetta Code has another task, linear congruential generator, with code for this RNG in several languages.


The algorithm follows:

 Seed the RNG with the number of the deal.
 Create an array of 52 cards: Ace of Clubs, Ace of Diamonds, Ace of Hearts, Ace of Spades, 2 of Clubs, 2 of Diamonds, and so on through the ranks: Ace, 2, 3, 4, 5, 6, 7, 8, 9, 10, Jack, Queen, King. The array indexes are 0 to 51, with Ace of Clubs at 0, and King of Spades at 51.
 Until the array is empty:
 Choose a random card at index ≡ next random number (mod array length).
 Swap this random card with the last card of the array.
 Remove this random card from the array. (Array length goes down by 1.)
 Deal this random card.
 Deal all 52 cards, face up, across 8 columns. The first 8 cards go in 8 columns, the next 8 cards go on the first 8 cards, and so on.


 Order to deal cards

 Game #1

 Game #617


  1  2  3  4  5  6  7  8
 9 10 11 12 13 14 15 16
17 18 19 20 21 22 23 24
25 26 27 28 29 30 31 32
33 34 35 36 37 38 39 40
41 42 43 44 45 46 47 48
49 50 51 52

 JD 2D 9H JC 5D 7H 7C 5H
KD KC 9S 5S AD QC KH 3H
2S KS 9D QD JS AS AH 3C
4C 5C TS QH 4H AC 4D 7S
3S TD 4S TH 8H 2C JH 7D
6D 8S 8D QS 6C 3D 8C TC
6S 9C 2H 6H

 7D AD 5C 3S 5S 8C 2D AH
TD 7S QD AC 6D 8H AS KH
TH QC 3H 9D 6S 8D 3D TC
KD 5H 9S 3C 8S 7H 4D JS
4C QS 9C 9H 7C 6H 2C 2S
4S TS 2H 5D JC 6C JH QH
JD KS KC 4H

Deals can also be checked against FreeCell solutions to 1000000 games.
(Summon a video solution, and it displays the initial deal.)

Write a program to take a deal number and deal cards in the same order as this algorithm.
The program may display the cards with ASCII, with Unicode, by drawing graphics, or any other way.

Related tasks:

 Playing cards
 Card shuffles
 War Card_Game
 Poker hand_analyser
 Go Fish

",Python," 
 
def randomGenerator(seed=1):
    max_int32 = (1 << 31) - 1
    seed = seed & max_int32
 
    while True:
        seed = (seed * 214013 + 2531011) & max_int32
        yield seed >> 16
 
def deal(seed):
    nc = 52
    cards = list(range(nc - 1, -1, -1))
    rnd = randomGenerator(seed)
    for i, r in zip(range(nc), rnd):
        j = (nc - 1) - r % (nc - i)
        cards[i], cards[j] = cards[j], cards[i]
    return cards
 
def show(cards):
    l = [""A23456789TJQK""[int(c/4)] + ""CDHS""[c%4] for c in cards]
    for i in range(0, len(cards), 8):
        print("" "".join(l[i : i+8]))
 
if __name__ == '__main__':
    from sys import argv
    seed = int(argv[1]) if len(argv) == 2 else 11982
    print(""Hand {}"".format(seed))
    deck = deal(seed)
    show(deck)",762,30,"import unittest

class TestFreeCellDeal(unittest.TestCase):

    def test_random_generator(self):
        # Test the random number generator with a known seed
        rng = randomGenerator(1)
        first_value = next(rng)
        second_value = next(rng)

        # These values are expected based on the LCG algorithm
        self.assertEqual(first_value, 34603)
        self.assertEqual(second_value, 31886)

    def test_deal(self):
        # Test the deal function with a known seed
        expected_deal_1 = [
            36, 1, 34, 37, 17, 27, 26, 16, 51, 50, 35, 18, 0, 47, 49, 10,
            46, 48, 33, 19, 31, 3, 2, 11, 4, 30, 45, 5, 44, 9, 8, 25,
            43, 7, 6, 24, 23, 22, 21, 20, 32, 15, 14, 13, 12, 29, 28, 42,
            41, 40, 39, 38
        ]
        self.assertEqual(deal(1), expected_deal_1)

        # Test another known deal
        expected_deal_617 = [
            45, 0, 17, 42, 18, 31, 1, 48, 8, 44, 34, 3, 50, 19, 4, 2,
            51, 9, 49, 35, 36, 5, 33, 47, 32, 46, 6, 7, 10, 11, 12, 13,
            14, 15, 16, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 39, 38,
            37, 43, 41, 40
        ]
        self.assertEqual(deal(617), expected_deal_617)

    def test_show(self):
        # Test the show function with a known deck
        deck = [
            36, 1, 34, 37, 17, 27, 26, 16, 51, 50, 35, 18, 0, 47, 49, 10,
            46, 48, 33, 19, 31, 3, 2, 11, 4, 30, 45, 5, 44, 9, 8, 25,
            43, 7, 6, 24, 23, 22, 21, 20, 32, 15, 14, 13, 12, 29, 28, 42,
            41, 40, 39, 38
        ]
        expected_output = (
            ""JD 2D 9H JC 5D 7H 7C 5H\n""
            ""KD KC 9S 5S AD QC KH 3H\n""
            ""2S KS 9D QD JS AS AH 3C\n""
            ""4C 5C TS QH 4H AC 4D 7S\n""
            ""3S TD 4S TH 8H 2C JH 7D\n""
            ""6D 8S 8D QS 6C 3D 8C TC\n""
            ""6S 9C 2H 6H\n""
        )
        with unittest.mock.patch('sys.stdout', new_callable=io.StringIO) as mock_stdout:
            show(deck)
            self.assertEqual(mock_stdout.getvalue(), expected_output)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/deal_cards_for_freecell/test_gpt_4o_2024_08_06_deal_cards_for_freecell.py,CompileStatus.OK,0.0,26.67,24.56,0.15,0.71,,0.6001937389373779,12.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_deal_cards_for_freecell', 'obj': '', 'line': 4, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/deal_cards_for_freecell/test_gpt_4o_2024_08_06_deal_cards_for_freecell.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_deal_cards_for_freecell', 'obj': '', 'line': 10, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/deal_cards_for_freecell/test_gpt_4o_2024_08_06_deal_cards_for_freecell.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_deal_cards_for_freecell', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/deal_cards_for_freecell/test_gpt_4o_2024_08_06_deal_cards_for_freecell.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_deal_cards_for_freecell', 'obj': 'TestFreeCellDeal', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 22, 'path': 'data/generated/docs_python/deal_cards_for_freecell/test_gpt_4o_2024_08_06_deal_cards_for_freecell.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_deal_cards_for_freecell', 'obj': 'TestFreeCellDeal.test_random_generator', 'line': 5, 'column': 4, 'endLine': 5, 'endColumn': 29, 'path': 'data/generated/docs_python/deal_cards_for_freecell/test_gpt_4o_2024_08_06_deal_cards_for_freecell.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_deal_cards_for_freecell', 'obj': 'TestFreeCellDeal.test_random_generator', 'line': 7, 'column': 14, 'endLine': 7, 'endColumn': 29, 'path': 'data/generated/docs_python/deal_cards_for_freecell/test_gpt_4o_2024_08_06_deal_cards_for_freecell.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'randomGenerator'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_deal_cards_for_freecell', 'obj': 'TestFreeCellDeal.test_deal', 'line': 15, 'column': 4, 'endLine': 15, 'endColumn': 17, 'path': 'data/generated/docs_python/deal_cards_for_freecell/test_gpt_4o_2024_08_06_deal_cards_for_freecell.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_deal_cards_for_freecell', 'obj': 'TestFreeCellDeal.test_deal', 'line': 23, 'column': 25, 'endLine': 23, 'endColumn': 29, 'path': 'data/generated/docs_python/deal_cards_for_freecell/test_gpt_4o_2024_08_06_deal_cards_for_freecell.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'deal'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_deal_cards_for_freecell', 'obj': 'TestFreeCellDeal.test_deal', 'line': 32, 'column': 25, 'endLine': 32, 'endColumn': 29, 'path': 'data/generated/docs_python/deal_cards_for_freecell/test_gpt_4o_2024_08_06_deal_cards_for_freecell.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'deal'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_deal_cards_for_freecell', 'obj': 'TestFreeCellDeal.test_show', 'line': 34, 'column': 4, 'endLine': 34, 'endColumn': 17, 'path': 'data/generated/docs_python/deal_cards_for_freecell/test_gpt_4o_2024_08_06_deal_cards_for_freecell.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_deal_cards_for_freecell', 'obj': 'TestFreeCellDeal.test_show', 'line': 51, 'column': 60, 'endLine': 51, 'endColumn': 62, 'path': 'data/generated/docs_python/deal_cards_for_freecell/test_gpt_4o_2024_08_06_deal_cards_for_freecell.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'io'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_deal_cards_for_freecell', 'obj': 'TestFreeCellDeal.test_show', 'line': 52, 'column': 12, 'endLine': 52, 'endColumn': 16, 'path': 'data/generated/docs_python/deal_cards_for_freecell/test_gpt_4o_2024_08_06_deal_cards_for_freecell.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'show'"", 'message-id': 'E0602'}]",False
Deconvolution/1D,"The convolution of two functions





F




{\displaystyle {\mathit {F}}}

 and





H




{\displaystyle {\mathit {H}}}

 of
an integer variable is defined as the function





G




{\displaystyle {\mathit {G}}}


satisfying





G
(
n
)
=

∑

m
=
−
∞


∞


F
(
m
)
H
(
n
−
m
)


{\displaystyle G(n)=\sum _{m=-\infty }^{\infty }F(m)H(n-m)}


for all integers





n




{\displaystyle {\mathit {n}}}

. Assume



F
(
n
)


{\displaystyle F(n)}

 can be non-zero only for



0


{\displaystyle 0}

 ≤





n




{\displaystyle {\mathit {n}}}

 ≤




|



F



|



{\displaystyle |{\mathit {F}}|}

, where




|



F



|



{\displaystyle |{\mathit {F}}|}

 is the ""length"" of





F




{\displaystyle {\mathit {F}}}

, and similarly for





G




{\displaystyle {\mathit {G}}}

 and





H




{\displaystyle {\mathit {H}}}

, so that the functions can be modeled as finite sequences by identifying




f

0


,

f

1


,

f

2


,
…


{\displaystyle f_{0},f_{1},f_{2},\dots }

 with



F
(
0
)
,
F
(
1
)
,
F
(
2
)
,
…


{\displaystyle F(0),F(1),F(2),\dots }

, etc.
Then for example, values of




|



F



|

=
6


{\displaystyle |{\mathit {F}}|=6}

 and




|



H



|

=
5


{\displaystyle |{\mathit {H}}|=5}

 would determine the following value of





g




{\displaystyle {\mathit {g}}}

 by definition.










g

0




=



f

0



h

0







g

1




=



f

1



h

0




+



f

0



h

1







g

2




=



f

2



h

0




+



f

1



h

1




+



f

0



h

2







g

3




=



f

3



h

0




+



f

2



h

1




+



f

1



h

2




+



f

0



h

3







g

4




=



f

4



h

0




+



f

3



h

1




+



f

2



h

2




+



f

1



h

3




+



f

0



h

4







g

5




=



f

5



h

0




+



f

4



h

1




+



f

3



h

2




+



f

2



h

3




+



f

1



h

4







g

6




=





f

5



h

1




+



f

4



h

2




+



f

3



h

3




+



f

2



h

4







g

7




=







f

5



h

2




+



f

4



h

3




+



f

3



h

4







g

8




=









f

5



h

3




+



f

4



h

4







g

9




=











f

5



h

4








{\displaystyle {\begin{array}{lllllllllll}g_{0}&=&f_{0}h_{0}\\g_{1}&=&f_{1}h_{0}&+&f_{0}h_{1}\\g_{2}&=&f_{2}h_{0}&+&f_{1}h_{1}&+&f_{0}h_{2}\\g_{3}&=&f_{3}h_{0}&+&f_{2}h_{1}&+&f_{1}h_{2}&+&f_{0}h_{3}\\g_{4}&=&f_{4}h_{0}&+&f_{3}h_{1}&+&f_{2}h_{2}&+&f_{1}h_{3}&+&f_{0}h_{4}\\g_{5}&=&f_{5}h_{0}&+&f_{4}h_{1}&+&f_{3}h_{2}&+&f_{2}h_{3}&+&f_{1}h_{4}\\g_{6}&=&&&f_{5}h_{1}&+&f_{4}h_{2}&+&f_{3}h_{3}&+&f_{2}h_{4}\\g_{7}&=&&&&&f_{5}h_{2}&+&f_{4}h_{3}&+&f_{3}h_{4}\\g_{8}&=&&&&&&&f_{5}h_{3}&+&f_{4}h_{4}\\g_{9}&=&&&&&&&&&f_{5}h_{4}\end{array}}}


We can write this in matrix form as:






(





g

0







g

1







g

2







g

3







g

4







g

5







g

6







g

7







g

8







g

9






)

=

(





f

0







f

1





f

0







f

2





f

1





f

0







f

3





f

2





f

1





f

0







f

4





f

3





f

2





f

1





f

0







f

5





f

4





f

3





f

2





f

1








f

5





f

4





f

3





f

2









f

5





f

4





f

3










f

5





f

4











f

5






)



(





h

0







h

1







h

2







h

3







h

4






)



{\displaystyle \left({\begin{array}{l}g_{0}\\g_{1}\\g_{2}\\g_{3}\\g_{4}\\g_{5}\\g_{6}\\g_{7}\\g_{8}\\g_{9}\\\end{array}}\right)=\left({\begin{array}{lllll}f_{0}\\f_{1}&f_{0}\\f_{2}&f_{1}&f_{0}\\f_{3}&f_{2}&f_{1}&f_{0}\\f_{4}&f_{3}&f_{2}&f_{1}&f_{0}\\f_{5}&f_{4}&f_{3}&f_{2}&f_{1}\\&f_{5}&f_{4}&f_{3}&f_{2}\\&&f_{5}&f_{4}&f_{3}\\&&&f_{5}&f_{4}\\&&&&f_{5}\end{array}}\right)\;\left({\begin{array}{l}h_{0}\\h_{1}\\h_{2}\\h_{3}\\h_{4}\\\end{array}}\right)}


or





g
=
A

h


{\displaystyle g=A\;h}


For this task, implement a function (or method, procedure, subroutine, etc.) deconv to perform deconvolution (i.e., the inverse of convolution) by constructing and solving such a system of equations represented by the above matrix



A


{\displaystyle A}

 for





h




{\displaystyle {\mathit {h}}}

 given





f




{\displaystyle {\mathit {f}}}

 and





g




{\displaystyle {\mathit {g}}}

.

 The function should work for





G




{\displaystyle {\mathit {G}}}

 of arbitrary length (i.e., not hard coded or constant) and





F




{\displaystyle {\mathit {F}}}

 of any length up to that of





G




{\displaystyle {\mathit {G}}}

. Note that




|



H



|



{\displaystyle |{\mathit {H}}|}

 will be given by




|



G



|

−

|



F



|

+
1


{\displaystyle |{\mathit {G}}|-|{\mathit {F}}|+1}

.
 There may be more equations than unknowns. If convenient, use a function from a library that finds the best fitting solution to an overdetermined system of linear equations (as in the Multiple regression task). Otherwise, prune the set of equations as needed and solve as in the Reduced row echelon form task.
 Test your solution on the following data. Be sure to verify both that deconv



(
g
,
f
)
=
h


{\displaystyle (g,f)=h}

 and deconv



(
g
,
h
)
=
f


{\displaystyle (g,h)=f}

 and display the results in a human readable form.

h = [-8,-9,-3,-1,-6,7]

f = [-3,-6,-1,8,-6,3,-1,-9,-9,3,-2,5,2,-2,-7,-1]

g = [24,75,71,-34,3,22,-45,23,245,25,52,25,-67,-96,96,31,55,36,29,-43,-7]

",Python,"def ToReducedRowEchelonForm( M ):
    if not M: return
    lead = 0
    rowCount = len(M)
    columnCount = len(M[0])
    for r in range(rowCount):
        if lead >= columnCount:
            return
        i = r
        while M[i][lead] == 0:
            i += 1
            if i == rowCount:
                i = r
                lead += 1
                if columnCount == lead:
                    return
        M[i],M[r] = M[r],M[i]
        lv = M[r][lead]
        M[r] = [ mrx / lv for mrx in M[r]]
        for i in range(rowCount):
            if i != r:
                lv = M[i][lead]
                M[i] = [ iv - lv*rv for rv,iv in zip(M[r],M[i])]
        lead += 1
    return M
 
def pmtx(mtx):
    print ('\n'.join(''.join(' %4s' % col for col in row) for row in mtx))
 
def convolve(f, h):
    g = [0] * (len(f) + len(h) - 1)
    for hindex, hval in enumerate(h):
        for findex, fval in enumerate(f):
            g[hindex + findex] += fval * hval
    return g
 
def deconvolve(g, f):
    lenh = len(g) - len(f) + 1
    mtx = [[0 for x in range(lenh+1)] for y in g]
    for hindex in range(lenh):
        for findex, fval in enumerate(f):
            gindex = hindex + findex
            mtx[gindex][hindex] = fval
    for gindex, gval in enumerate(g):
        mtx[gindex][lenh] = gval
    ToReducedRowEchelonForm( mtx )
    return [mtx[i][lenh] for i in range(lenh)]  # h
 
if __name__ == '__main__':
    h = [-8,-9,-3,-1,-6,7]
    f = [-3,-6,-1,8,-6,3,-1,-9,-9,3,-2,5,2,-2,-7,-1]
    g = [24,75,71,-34,3,22,-45,23,245,25,52,25,-67,-96,96,31,55,36,29,-43,-7]
    assert convolve(f,h) == g
    assert deconvolve(g, f) == h",1648,54,"import unittest

class TestDeconvolution(unittest.TestCase):

    def setUp(self):
        self.h = [-8, -9, -3, -1, -6, 7]
        self.f = [-3, -6, -1, 8, -6, 3, -1, -9, -9, 3, -2, 5, 2, -2, -7, -1]
        self.g = [24, 75, 71, -34, 3, 22, -45, 23, 245, 25, 52, 25, -67, -96, 96, 31, 55, 36, 29, -43, -7]

    def test_convolve(self):
        expected_g = self.g
        result_g = convolve(self.f, self.h)
        self.assertEqual(result_g, expected_g, ""Convolution result does not match expected output."")

    def test_deconvolve_f(self):
        expected_f = self.f
        result_f = deconvolve(self.g, self.h)
        self.assertEqual(result_f, expected_f, ""Deconvolution result for f does not match expected output."")

    def test_deconvolve_h(self):
        expected_h = self.h
        result_h = deconvolve(self.g, self.f)
        self.assertEqual(result_h, expected_h, ""Deconvolution result for h does not match expected output."")

    def test_convolve_deconvolve(self):
        # Test that convolving and then deconvolving returns the original sequence
        convolved_g = convolve(self.f, self.h)
        deconvolved_h = deconvolve(convolved_g, self.f)
        self.assertEqual(deconvolved_h, self.h, ""Deconvolution after convolution does not return the original h."")

        deconvolved_f = deconvolve(convolved_g, self.h)
        self.assertEqual(deconvolved_f, self.f, ""Deconvolution after convolution does not return the original f."")

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/deconvolution_1d/test_gpt_4o_2024_08_06_deconvolution_1d.py,CompileStatus.OK,0.0,23.68,16.38,0.19,0.21,,0.5881381034851074,17.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_deconvolution_1d', 'obj': '', 'line': 8, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/deconvolution_1d/test_gpt_4o_2024_08_06_deconvolution_1d.py', 'symbol': 'line-too-long', 'message': 'Line too long (106/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_deconvolution_1d', 'obj': '', 'line': 18, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/deconvolution_1d/test_gpt_4o_2024_08_06_deconvolution_1d.py', 'symbol': 'line-too-long', 'message': 'Line too long (108/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_deconvolution_1d', 'obj': '', 'line': 23, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/deconvolution_1d/test_gpt_4o_2024_08_06_deconvolution_1d.py', 'symbol': 'line-too-long', 'message': 'Line too long (108/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_deconvolution_1d', 'obj': '', 'line': 29, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/deconvolution_1d/test_gpt_4o_2024_08_06_deconvolution_1d.py', 'symbol': 'line-too-long', 'message': 'Line too long (114/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_deconvolution_1d', 'obj': '', 'line': 32, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/deconvolution_1d/test_gpt_4o_2024_08_06_deconvolution_1d.py', 'symbol': 'line-too-long', 'message': 'Line too long (114/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_deconvolution_1d', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/deconvolution_1d/test_gpt_4o_2024_08_06_deconvolution_1d.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_deconvolution_1d', 'obj': 'TestDeconvolution', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 23, 'path': 'data/generated/docs_python/deconvolution_1d/test_gpt_4o_2024_08_06_deconvolution_1d.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_deconvolution_1d', 'obj': 'TestDeconvolution.test_convolve', 'line': 10, 'column': 4, 'endLine': 10, 'endColumn': 21, 'path': 'data/generated/docs_python/deconvolution_1d/test_gpt_4o_2024_08_06_deconvolution_1d.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_deconvolution_1d', 'obj': 'TestDeconvolution.test_convolve', 'line': 12, 'column': 19, 'endLine': 12, 'endColumn': 27, 'path': 'data/generated/docs_python/deconvolution_1d/test_gpt_4o_2024_08_06_deconvolution_1d.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'convolve'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_deconvolution_1d', 'obj': 'TestDeconvolution.test_deconvolve_f', 'line': 15, 'column': 4, 'endLine': 15, 'endColumn': 25, 'path': 'data/generated/docs_python/deconvolution_1d/test_gpt_4o_2024_08_06_deconvolution_1d.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_deconvolution_1d', 'obj': 'TestDeconvolution.test_deconvolve_f', 'line': 17, 'column': 19, 'endLine': 17, 'endColumn': 29, 'path': 'data/generated/docs_python/deconvolution_1d/test_gpt_4o_2024_08_06_deconvolution_1d.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'deconvolve'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_deconvolution_1d', 'obj': 'TestDeconvolution.test_deconvolve_h', 'line': 20, 'column': 4, 'endLine': 20, 'endColumn': 25, 'path': 'data/generated/docs_python/deconvolution_1d/test_gpt_4o_2024_08_06_deconvolution_1d.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_deconvolution_1d', 'obj': 'TestDeconvolution.test_deconvolve_h', 'line': 22, 'column': 19, 'endLine': 22, 'endColumn': 29, 'path': 'data/generated/docs_python/deconvolution_1d/test_gpt_4o_2024_08_06_deconvolution_1d.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'deconvolve'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_deconvolution_1d', 'obj': 'TestDeconvolution.test_convolve_deconvolve', 'line': 25, 'column': 4, 'endLine': 25, 'endColumn': 32, 'path': 'data/generated/docs_python/deconvolution_1d/test_gpt_4o_2024_08_06_deconvolution_1d.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_deconvolution_1d', 'obj': 'TestDeconvolution.test_convolve_deconvolve', 'line': 27, 'column': 22, 'endLine': 27, 'endColumn': 30, 'path': 'data/generated/docs_python/deconvolution_1d/test_gpt_4o_2024_08_06_deconvolution_1d.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'convolve'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_deconvolution_1d', 'obj': 'TestDeconvolution.test_convolve_deconvolve', 'line': 28, 'column': 24, 'endLine': 28, 'endColumn': 34, 'path': 'data/generated/docs_python/deconvolution_1d/test_gpt_4o_2024_08_06_deconvolution_1d.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'deconvolve'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_deconvolution_1d', 'obj': 'TestDeconvolution.test_convolve_deconvolve', 'line': 31, 'column': 24, 'endLine': 31, 'endColumn': 34, 'path': 'data/generated/docs_python/deconvolution_1d/test_gpt_4o_2024_08_06_deconvolution_1d.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'deconvolve'"", 'message-id': 'E0602'}]",False
Deepcopy,"Task

Demonstrate how to copy data structures containing complex heterogeneous and cyclic semantics.

This is often referred to as deep copying, and is normally required where structures are mutable and to ensure that independent copies can be manipulated without side-effects.

If this facility is not built into the language, it is permissible to use functions from a common library, or a coded procedure.



The task should show:

 Relevant semantics of structures, such as their homogeneous or heterogeneous properties, or containment of (self- or mutual-reference) cycles.
 Any limitations of the method.
 That the structure and its copy are different.
 Suitable links to external documentation for common libraries.

",Python,"import copy
deepcopy_of_obj = copy.deepcopy(obj)",48,2,"import unittest
import copy

class TestDeepCopy(unittest.TestCase):

    def test_deepcopy_primitive(self):
        # Test deep copy of a primitive data type
        original = 42
        copied = copy.deepcopy(original)
        self.assertEqual(original, copied)
        self.assertIsNot(original, copied)

    def test_deepcopy_list(self):
        # Test deep copy of a list
        original = [1, 2, [3, 4]]
        copied = copy.deepcopy(original)
        self.assertEqual(original, copied)
        self.assertIsNot(original, copied)
        self.assertIsNot(original[2], copied[2])

    def test_deepcopy_dict(self):
        # Test deep copy of a dictionary
        original = {'a': 1, 'b': {'c': 2}}
        copied = copy.deepcopy(original)
        self.assertEqual(original, copied)
        self.assertIsNot(original, copied)
        self.assertIsNot(original['b'], copied['b'])

    def test_deepcopy_set(self):
        # Test deep copy of a set
        original = {1, 2, 3}
        copied = copy.deepcopy(original)
        self.assertEqual(original, copied)
        self.assertIsNot(original, copied)

    def test_deepcopy_tuple(self):
        # Test deep copy of a tuple
        original = (1, 2, [3, 4])
        copied = copy.deepcopy(original)
        self.assertEqual(original, copied)
        self.assertIsNot(original, copied)
        self.assertIsNot(original[2], copied[2])

    def test_deepcopy_cyclic(self):
        # Test deep copy of a cyclic structure
        original = []
        original.append(original)
        copied = copy.deepcopy(original)
        self.assertEqual(len(copied), 1)
        self.assertIsNot(original, copied)
        self.assertIs(copied[0], copied)

    def test_deepcopy_custom_object(self):
        # Test deep copy of a custom object
        class CustomObject:
            def __init__(self, value):
                self.value = value

        original = CustomObject(10)
        copied = copy.deepcopy(original)
        self.assertEqual(original.value, copied.value)
        self.assertIsNot(original, copied)

    def test_deepcopy_mutual_reference(self):
        # Test deep copy of mutually referencing objects
        class Node:
            def __init__(self, value):
                self.value = value
                self.next = None

        node1 = Node(1)
        node2 = Node(2)
        node1.next = node2
        node2.next = node1

        copied_node1 = copy.deepcopy(node1)
        copied_node2 = copied_node1.next

        self.assertEqual(copied_node1.value, node1.value)
        self.assertEqual(copied_node2.value, node2.value)
        self.assertIsNot(copied_node1, node1)
        self.assertIsNot(copied_node2, node2)
        self.assertIs(copied_node1.next, copied_node2)
        self.assertIs(copied_node2.next, copied_node1)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/deepcopy/test_gpt_4o_2024_08_06_deepcopy.py,CompileStatus.OK,0.0,95.52,94.2,0.37,,87.5,0.5590620040893555,14.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_deepcopy', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/deepcopy/test_gpt_4o_2024_08_06_deepcopy.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_deepcopy', 'obj': 'TestDeepCopy', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 18, 'path': 'data/generated/docs_python/deepcopy/test_gpt_4o_2024_08_06_deepcopy.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_deepcopy', 'obj': 'TestDeepCopy.test_deepcopy_primitive', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 31, 'path': 'data/generated/docs_python/deepcopy/test_gpt_4o_2024_08_06_deepcopy.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_deepcopy', 'obj': 'TestDeepCopy.test_deepcopy_list', 'line': 13, 'column': 4, 'endLine': 13, 'endColumn': 26, 'path': 'data/generated/docs_python/deepcopy/test_gpt_4o_2024_08_06_deepcopy.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_deepcopy', 'obj': 'TestDeepCopy.test_deepcopy_dict', 'line': 21, 'column': 4, 'endLine': 21, 'endColumn': 26, 'path': 'data/generated/docs_python/deepcopy/test_gpt_4o_2024_08_06_deepcopy.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_deepcopy', 'obj': 'TestDeepCopy.test_deepcopy_set', 'line': 29, 'column': 4, 'endLine': 29, 'endColumn': 25, 'path': 'data/generated/docs_python/deepcopy/test_gpt_4o_2024_08_06_deepcopy.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_deepcopy', 'obj': 'TestDeepCopy.test_deepcopy_tuple', 'line': 36, 'column': 4, 'endLine': 36, 'endColumn': 27, 'path': 'data/generated/docs_python/deepcopy/test_gpt_4o_2024_08_06_deepcopy.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_deepcopy', 'obj': 'TestDeepCopy.test_deepcopy_cyclic', 'line': 44, 'column': 4, 'endLine': 44, 'endColumn': 28, 'path': 'data/generated/docs_python/deepcopy/test_gpt_4o_2024_08_06_deepcopy.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_deepcopy', 'obj': 'TestDeepCopy.test_deepcopy_custom_object', 'line': 53, 'column': 4, 'endLine': 53, 'endColumn': 35, 'path': 'data/generated/docs_python/deepcopy/test_gpt_4o_2024_08_06_deepcopy.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_deepcopy', 'obj': 'TestDeepCopy.test_deepcopy_custom_object.CustomObject', 'line': 55, 'column': 8, 'endLine': 55, 'endColumn': 26, 'path': 'data/generated/docs_python/deepcopy/test_gpt_4o_2024_08_06_deepcopy.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'refactor', 'module': 'test_gpt_4o_2024_08_06_deepcopy', 'obj': 'TestDeepCopy.test_deepcopy_custom_object.CustomObject', 'line': 55, 'column': 8, 'endLine': 55, 'endColumn': 26, 'path': 'data/generated/docs_python/deepcopy/test_gpt_4o_2024_08_06_deepcopy.py', 'symbol': 'too-few-public-methods', 'message': 'Too few public methods (0/2)', 'message-id': 'R0903'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_deepcopy', 'obj': 'TestDeepCopy.test_deepcopy_mutual_reference', 'line': 64, 'column': 4, 'endLine': 64, 'endColumn': 38, 'path': 'data/generated/docs_python/deepcopy/test_gpt_4o_2024_08_06_deepcopy.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_deepcopy', 'obj': 'TestDeepCopy.test_deepcopy_mutual_reference.Node', 'line': 66, 'column': 8, 'endLine': 66, 'endColumn': 18, 'path': 'data/generated/docs_python/deepcopy/test_gpt_4o_2024_08_06_deepcopy.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'refactor', 'module': 'test_gpt_4o_2024_08_06_deepcopy', 'obj': 'TestDeepCopy.test_deepcopy_mutual_reference.Node', 'line': 66, 'column': 8, 'endLine': 66, 'endColumn': 18, 'path': 'data/generated/docs_python/deepcopy/test_gpt_4o_2024_08_06_deepcopy.py', 'symbol': 'too-few-public-methods', 'message': 'Too few public methods (0/2)', 'message-id': 'R0903'}]",False
Delegates,"A delegate is a helper object used by another object. The delegator may send the delegate certain messages, and provide a default implementation when there is no delegate or the delegate does not respond to a message. This pattern is heavily used in Cocoa framework on Mac OS X. See also wp:Delegation pattern.

Objects responsibilities:

Delegator:

 Keep an optional delegate instance.
 Implement ""operation"" method, returning the delegate ""thing"" if the delegate respond to ""thing"", or the string ""default implementation"".
Delegate:

 Implement ""thing"" and return the string ""delegate implementation""
Show how objects are created and used. First, without a delegate, then with a delegate that does not implement ""thing"", and last with a delegate that implements ""thing"".
",Python,"class Delegator:
   def __init__(self):
      self.delegate = None
   def operation(self):
       if hasattr(self.delegate, 'thing') and callable(self.delegate.thing):
          return self.delegate.thing()
       return 'default implementation'
 
class Delegate:
   def thing(self):
      return 'delegate implementation'
 
if __name__ == '__main__':
 
   # No delegate
   a = Delegator()
   assert a.operation() == 'default implementation'
 
   # With a delegate that does not implement ""thing""
   a.delegate = 'A delegate may be any object'
   assert a.operation() == 'default implementation'
 
   # With delegate that implements ""thing""
   a.delegate = Delegate()
   assert a.operation() == 'delegate implementation'",720,25,"import unittest

class Delegator:
    def __init__(self):
        self.delegate = None

    def operation(self):
        if hasattr(self.delegate, 'thing') and callable(self.delegate.thing):
            return self.delegate.thing()
        return 'default implementation'

class Delegate:
    def thing(self):
        return 'delegate implementation'

class TestDelegationPattern(unittest.TestCase):

    def test_no_delegate(self):
        # Test case where no delegate is set
        delegator = Delegator()
        self.assertEqual(delegator.operation(), 'default implementation')

    def test_delegate_without_thing(self):
        # Test case where delegate does not implement 'thing'
        delegator = Delegator()
        delegator.delegate = 'A delegate may be any object'
        self.assertEqual(delegator.operation(), 'default implementation')

    def test_delegate_with_thing(self):
        # Test case where delegate implements 'thing'
        delegator = Delegator()
        delegator.delegate = Delegate()
        self.assertEqual(delegator.operation(), 'delegate implementation')

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/delegates/test_gpt_4o_2024_08_06_delegates.py,CompileStatus.OK,0.0,57.14,54.0,0.12,0.6,100.0,0.5305941104888916,11.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_delegates', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/delegates/test_gpt_4o_2024_08_06_delegates.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_delegates', 'obj': 'Delegator', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 15, 'path': 'data/generated/docs_python/delegates/test_gpt_4o_2024_08_06_delegates.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_delegates', 'obj': 'Delegator.operation', 'line': 7, 'column': 4, 'endLine': 7, 'endColumn': 17, 'path': 'data/generated/docs_python/delegates/test_gpt_4o_2024_08_06_delegates.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'refactor', 'module': 'test_gpt_4o_2024_08_06_delegates', 'obj': 'Delegator', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 15, 'path': 'data/generated/docs_python/delegates/test_gpt_4o_2024_08_06_delegates.py', 'symbol': 'too-few-public-methods', 'message': 'Too few public methods (1/2)', 'message-id': 'R0903'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_delegates', 'obj': 'Delegate', 'line': 12, 'column': 0, 'endLine': 12, 'endColumn': 14, 'path': 'data/generated/docs_python/delegates/test_gpt_4o_2024_08_06_delegates.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_delegates', 'obj': 'Delegate.thing', 'line': 13, 'column': 4, 'endLine': 13, 'endColumn': 13, 'path': 'data/generated/docs_python/delegates/test_gpt_4o_2024_08_06_delegates.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'refactor', 'module': 'test_gpt_4o_2024_08_06_delegates', 'obj': 'Delegate', 'line': 12, 'column': 0, 'endLine': 12, 'endColumn': 14, 'path': 'data/generated/docs_python/delegates/test_gpt_4o_2024_08_06_delegates.py', 'symbol': 'too-few-public-methods', 'message': 'Too few public methods (1/2)', 'message-id': 'R0903'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_delegates', 'obj': 'TestDelegationPattern', 'line': 16, 'column': 0, 'endLine': 16, 'endColumn': 27, 'path': 'data/generated/docs_python/delegates/test_gpt_4o_2024_08_06_delegates.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_delegates', 'obj': 'TestDelegationPattern.test_no_delegate', 'line': 18, 'column': 4, 'endLine': 18, 'endColumn': 24, 'path': 'data/generated/docs_python/delegates/test_gpt_4o_2024_08_06_delegates.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_delegates', 'obj': 'TestDelegationPattern.test_delegate_without_thing', 'line': 23, 'column': 4, 'endLine': 23, 'endColumn': 35, 'path': 'data/generated/docs_python/delegates/test_gpt_4o_2024_08_06_delegates.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_delegates', 'obj': 'TestDelegationPattern.test_delegate_with_thing', 'line': 29, 'column': 4, 'endLine': 29, 'endColumn': 32, 'path': 'data/generated/docs_python/delegates/test_gpt_4o_2024_08_06_delegates.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Department numbers,"There is a highly organized city that has decided to assign a number to each of their departments:

   police department
   sanitation department
   fire department


Each department can have a number between   1   and   7   (inclusive).

The three department numbers are to be unique (different from each other) and must add up to   12.

The Chief of the Police doesn't like odd numbers and wants to have an even number for his department.



Task

Write a computer program which outputs all valid combinations.



Possible output   (for the 1st and 14th solutions):

 --police--  --sanitation--  --fire--
     2             3            7
     6             5            1


",Python,"from itertools import permutations
 
def solve():
    c, p, f, s = ""\\,Police,Fire,Sanitation"".split(',')
    print(f""{c:>3}  {p:^6} {f:^4} {s:^10}"")
    c = 1
    for p, f, s in permutations(range(1, 8), r=3):
        if p + s + f == 12 and p % 2 == 0:
            print(f""{c:>3}: {p:^6} {f:^4} {s:^10}"")
            c += 1
 
if __name__ == '__main__':
    solve()",365,13,"import unittest
from io import StringIO
import sys
from department_numbers import solve

class TestDepartmentNumbers(unittest.TestCase):
    def test_solve_output(self):
        # Redirect stdout to capture print statements
        captured_output = StringIO()
        sys.stdout = captured_output

        # Call the solve function
        solve()

        # Reset redirect.
        sys.stdout = sys.__stdout__

        # Get the output
        output = captured_output.getvalue().strip()

        # Expected output
        expected_output = (
            ""  \\  Police Fire Sanitation\n""
            ""  1:   2     3       7     \n""
            ""  2:   2     7       3     \n""
            ""  3:   4     1       7     \n""
            ""  4:   4     7       1     \n""
            ""  5:   4     5       3     \n""
            ""  6:   4     3       5     \n""
            ""  7:   6     1       5     \n""
            ""  8:   6     5       1     \n""
            ""  9:   6     3       3     ""
        )

        # Assert the output is as expected
        self.assertEqual(output, expected_output)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/department_numbers/test_gpt_4o_2024_08_06_department_numbers.py,CompileStatus.OK,0.0,92.31,88.24,0.07,0.25,,0.5949921607971191,8.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_department_numbers', 'obj': '', 'line': 11, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/department_numbers/test_gpt_4o_2024_08_06_department_numbers.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_department_numbers', 'obj': '', 'line': 14, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/department_numbers/test_gpt_4o_2024_08_06_department_numbers.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_department_numbers', 'obj': '', 'line': 17, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/department_numbers/test_gpt_4o_2024_08_06_department_numbers.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_department_numbers', 'obj': '', 'line': 20, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/department_numbers/test_gpt_4o_2024_08_06_department_numbers.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_department_numbers', 'obj': '', 'line': 34, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/department_numbers/test_gpt_4o_2024_08_06_department_numbers.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_department_numbers', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/department_numbers/test_gpt_4o_2024_08_06_department_numbers.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_department_numbers', 'obj': 'TestDepartmentNumbers', 'line': 6, 'column': 0, 'endLine': 6, 'endColumn': 27, 'path': 'data/generated/docs_python/department_numbers/test_gpt_4o_2024_08_06_department_numbers.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_department_numbers', 'obj': 'TestDepartmentNumbers.test_solve_output', 'line': 7, 'column': 4, 'endLine': 7, 'endColumn': 25, 'path': 'data/generated/docs_python/department_numbers/test_gpt_4o_2024_08_06_department_numbers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Determine if a string is collapsible,"Determine if a character string is   collapsible.

And if so,   collapse the string   (by removing   immediately repeated   characters).



If a character string has   immediately repeated   character(s),   the repeated characters are to be
deleted (removed),   but not the primary (1st) character(s).



An   immediately repeated   character is any character that is   immediately   followed by an
identical character (or characters).   Another word choice could've been   duplicated character,   but that
might have ruled out   (to some readers)   triplicated characters   ···   or more.



{This Rosetta Code task was inspired by a newly introduced   (as of around November 2019)   PL/I   BIF:   collapse.}



Examples

In the following character string:



 The better the 4-wheel drive, the further you'll be from help when ya get stuck!



Only the 2nd   t,   e, and   l   are repeated characters,   indicated
by underscores (above),   even though they (those characters) appear elsewhere in the character string.



So, after collapsing the string, the result would be:

 The beter the 4-whel drive, the further you'l be from help when ya get stuck!





Another example:
In the following character string:

 headmistressship



The ""collapsed"" string would be:

 headmistreship



Task

Write a subroutine/function/procedure/routine···   to
locate   repeated   characters and   collapse   (delete)   them from the character
string.   The character string can be processed from either direction.



Show all output here, on this page:

   the   original string and its length
   the resultant string and its length
   the above strings should be ""bracketed"" with   <<<   and   >>>   (to delineate blanks)
   «««Guillemets may be used instead for ""bracketing"" for the more artistic programmers,   shown used here»»»


Use (at least) the following five strings,   all strings are length seventy-two (characters, including blanks),   except
the 1st string:

 string
 number
        ╔╗
   1    ║╚═══════════════════════════════════════════════════════════════════════╗   ◄■■■■■■  a null string  (length zero)
   2    ║""If I were two-faced, would I be wearing this one?"" --- Abraham Lincoln ║
   3    ║..1111111111111111111111111111111111111111111111111111111111111117777888║
   4    ║I never give 'em hell, I just tell the truth, and they think it's hell. ║
   5    ║                                                    --- Harry S Truman  ║   ◄■■■■■■  has many repeated blanks
        ╚════════════════════════════════════════════════════════════════════════╝


Other tasks related to string operations:

Metrics
 Array length
 String length
 Copy a string
 Empty string  (assignment)
Counting
 Word frequency
 Letter frequency
 Jewels and stones
 I before E except after C
 Bioinformatics/base count
 Count occurrences of a substring
 Count how many vowels and consonants occur in a string
Remove/replace
 XXXX redacted
 Conjugate a Latin verb
 Remove vowels from a string
 String interpolation (included)
 Strip block comments
 Strip comments from a string
 Strip a set of characters from a string
 Strip whitespace from a string -- top and tail
 Strip control codes and extended characters from a string
Anagrams/Derangements/shuffling
 Word wheel
 ABC problem
 Sattolo cycle
 Knuth shuffle
 Ordered words
 Superpermutation minimisation
 Textonyms (using a phone text pad)
 Anagrams
 Anagrams/Deranged anagrams
 Permutations/Derangements
Find/Search/Determine
 ABC words
 Odd words
 Word ladder
 Semordnilap
 Word search
 Wordiff  (game)
 String matching
 Tea cup rim text
 Alternade words
 Changeable words
 State name puzzle
 String comparison
 Unique characters
 Unique characters in each string
 Extract file extension
 Levenshtein distance
 Palindrome detection
 Common list elements
 Longest common suffix
 Longest common prefix
 Compare a list of strings
 Longest common substring
 Find common directory path
 Words from neighbour ones
 Change e letters to i in words
 Non-continuous subsequences
 Longest common subsequence
 Longest palindromic substrings
 Longest increasing subsequence
 Words containing ""the"" substring
 Sum of the digits of n is substring of n
 Determine if a string is numeric
 Determine if a string is collapsible
 Determine if a string is squeezable
 Determine if a string has all unique characters
 Determine if a string has all the same characters
 Longest substrings without repeating characters
 Find words which contains all the vowels
 Find words which contains most consonants
 Find words which contains more than 3 vowels
 Find words which first and last three letters are equals
 Find words which odd letters are consonants and even letters are vowels or vice_versa
Formatting
 Substring
 Rep-string
 Word wrap
 String case
 Align columns
 Literals/String
 Repeat a string
 Brace expansion
 Brace expansion using ranges
 Reverse a string
 Phrase reversals
 Comma quibbling
 Special characters
 String concatenation
 Substring/Top and tail
 Commatizing numbers
 Reverse words in a string
 Suffixation of decimal numbers
 Long literals, with continuations
 Numerical and alphabetical suffixes
 Abbreviations, easy
 Abbreviations, simple
 Abbreviations, automatic
Song lyrics/poems/Mad Libs/phrases
 Mad Libs
 Magic 8-ball
 99 Bottles of Beer
 The Name Game (a song)
 The Old lady swallowed a fly
 The Twelve Days of Christmas
Tokenize
 Text between
 Tokenize a string
 Word break problem
 Tokenize a string with escaping
 Split a character string based on change of character
Sequences
 Show ASCII table
 De Bruijn sequences
 Self-referential sequences
 Generate lower case ASCII alphabet



",Python,"from itertools import groupby
 
def collapser(txt):
    return ''.join(item for item, grp in groupby(txt))
 
if __name__ == '__main__':
    strings = [
            """",
            '""If I were two-faced, would I be wearing this one?"" --- Abraham Lincoln ',
            ""..1111111111111111111111111111111111111111111111111111111111111117777888"",
            ""I never give 'em hell, I just tell the truth, and they think it's hell. "",
            ""                                                   ---  Harry S Truman  "",
            ""The better the 4-wheel drive, the further you'll be from help when ya get stuck!"",
            ""headmistressship"",
            ""aardvark"",
            ""😍😀🙌💃😍😍😍🙌"",
            ]
    for txt in strings:
        this = ""Original""
        print(f""\n{this:14} Size: {len(txt)} «««{txt}»»»"" )
        this = ""Collapsed""
        sqz = collapser(txt)
        print(f""{this:>14} Size: {len(sqz)} «««{sqz}»»»"" )",934,23,"import unittest
from itertools import groupby

def collapser(txt):
    return ''.join(item for item, grp in groupby(txt))

class TestCollapser(unittest.TestCase):

    def test_null_string(self):
        original = """"
        expected = """"
        self.assertEqual(collapser(original), expected)

    def test_quote_by_lincoln(self):
        original = '""If I were two-faced, would I be wearing this one?"" --- Abraham Lincoln '
        expected = '""If I were two-faced, would I be wearing this one?"" - Abraham Lincoln '
        self.assertEqual(collapser(original), expected)

    def test_repeated_numbers(self):
        original = ""..1111111111111111111111111111111111111111111111111111111111111117777888""
        expected = "".1.178""
        self.assertEqual(collapser(original), expected)

    def test_quote_by_truman(self):
        original = ""I never give 'em hell, I just tell the truth, and they think it's hell. ""
        expected = ""I never give 'em hel, I just tel the truth, and they think it's hel. ""
        self.assertEqual(collapser(original), expected)

    def test_repeated_blanks(self):
        original = ""                                                   ---  Harry S Truman  ""
        expected = "" - Hary S Truman ""
        self.assertEqual(collapser(original), expected)

    def test_better_drive(self):
        original = ""The better the 4-wheel drive, the further you'll be from help when ya get stuck!""
        expected = ""The beter the 4-whel drive, the further you'll be from help when ya get stuck!""
        self.assertEqual(collapser(original), expected)

    def test_headmistressship(self):
        original = ""headmistressship""
        expected = ""headmistreship""
        self.assertEqual(collapser(original), expected)

    def test_aardvark(self):
        original = ""aardvark""
        expected = ""ardvark""
        self.assertEqual(collapser(original), expected)

    def test_emojis(self):
        original = ""😍😀🙌💃😍😍😍🙌""
        expected = ""😍😀🙌💃😍🙌""
        self.assertEqual(collapser(original), expected)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/determine_if_a_string_is_collapsible/test_gpt_4o_2024_08_06_determine_if_a_string_is_collapsible.py,CompileStatus.OK,0.0,77.78,70.31,0.21,4.5,77.78,0.5725009441375732,13.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_determine_if_a_string_is_collapsible', 'obj': '', 'line': 35, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/determine_if_a_string_is_collapsible/test_gpt_4o_2024_08_06_determine_if_a_string_is_collapsible.py', 'symbol': 'line-too-long', 'message': 'Line too long (101/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_determine_if_a_string_is_collapsible', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/determine_if_a_string_is_collapsible/test_gpt_4o_2024_08_06_determine_if_a_string_is_collapsible.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_determine_if_a_string_is_collapsible', 'obj': 'collapser', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 13, 'path': 'data/generated/docs_python/determine_if_a_string_is_collapsible/test_gpt_4o_2024_08_06_determine_if_a_string_is_collapsible.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_determine_if_a_string_is_collapsible', 'obj': 'TestCollapser', 'line': 7, 'column': 0, 'endLine': 7, 'endColumn': 19, 'path': 'data/generated/docs_python/determine_if_a_string_is_collapsible/test_gpt_4o_2024_08_06_determine_if_a_string_is_collapsible.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_determine_if_a_string_is_collapsible', 'obj': 'TestCollapser.test_null_string', 'line': 9, 'column': 4, 'endLine': 9, 'endColumn': 24, 'path': 'data/generated/docs_python/determine_if_a_string_is_collapsible/test_gpt_4o_2024_08_06_determine_if_a_string_is_collapsible.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_determine_if_a_string_is_collapsible', 'obj': 'TestCollapser.test_quote_by_lincoln', 'line': 14, 'column': 4, 'endLine': 14, 'endColumn': 29, 'path': 'data/generated/docs_python/determine_if_a_string_is_collapsible/test_gpt_4o_2024_08_06_determine_if_a_string_is_collapsible.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_determine_if_a_string_is_collapsible', 'obj': 'TestCollapser.test_repeated_numbers', 'line': 19, 'column': 4, 'endLine': 19, 'endColumn': 29, 'path': 'data/generated/docs_python/determine_if_a_string_is_collapsible/test_gpt_4o_2024_08_06_determine_if_a_string_is_collapsible.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_determine_if_a_string_is_collapsible', 'obj': 'TestCollapser.test_quote_by_truman', 'line': 24, 'column': 4, 'endLine': 24, 'endColumn': 28, 'path': 'data/generated/docs_python/determine_if_a_string_is_collapsible/test_gpt_4o_2024_08_06_determine_if_a_string_is_collapsible.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_determine_if_a_string_is_collapsible', 'obj': 'TestCollapser.test_repeated_blanks', 'line': 29, 'column': 4, 'endLine': 29, 'endColumn': 28, 'path': 'data/generated/docs_python/determine_if_a_string_is_collapsible/test_gpt_4o_2024_08_06_determine_if_a_string_is_collapsible.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_determine_if_a_string_is_collapsible', 'obj': 'TestCollapser.test_better_drive', 'line': 34, 'column': 4, 'endLine': 34, 'endColumn': 25, 'path': 'data/generated/docs_python/determine_if_a_string_is_collapsible/test_gpt_4o_2024_08_06_determine_if_a_string_is_collapsible.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_determine_if_a_string_is_collapsible', 'obj': 'TestCollapser.test_headmistressship', 'line': 39, 'column': 4, 'endLine': 39, 'endColumn': 29, 'path': 'data/generated/docs_python/determine_if_a_string_is_collapsible/test_gpt_4o_2024_08_06_determine_if_a_string_is_collapsible.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_determine_if_a_string_is_collapsible', 'obj': 'TestCollapser.test_aardvark', 'line': 44, 'column': 4, 'endLine': 44, 'endColumn': 21, 'path': 'data/generated/docs_python/determine_if_a_string_is_collapsible/test_gpt_4o_2024_08_06_determine_if_a_string_is_collapsible.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_determine_if_a_string_is_collapsible', 'obj': 'TestCollapser.test_emojis', 'line': 49, 'column': 4, 'endLine': 49, 'endColumn': 19, 'path': 'data/generated/docs_python/determine_if_a_string_is_collapsible/test_gpt_4o_2024_08_06_determine_if_a_string_is_collapsible.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Determine if a string is squeezable,"Determine if a character string is   squeezable.

And if so,   squeeze the string   (by removing any number of
a   specified   immediately repeated   character).



This task is very similar to the task     Determine if a character string is collapsible     except
that only a specified character is   squeezed   instead of any character that is immediately repeated.



If a character string has a specified   immediately repeated   character(s),   the repeated characters are to be
deleted (removed),   but not the primary (1st) character(s).



A specified   immediately repeated   character is any specified character that is   immediately  
followed by an identical character (or characters).   Another word choice could've been   duplicated
character,   but that might have ruled out   (to some readers)   triplicated characters   ···   or more.



{This Rosetta Code task was inspired by a newly introduced   (as of around
November 2019)   PL/I   BIF:   squeeze.}



Examples

In the following character string with a specified   immediately repeated   character of   e:



 The better the 4-wheel drive, the further you'll be from help when ya get stuck!



Only the 2nd   e   is an specified repeated character,   indicated by an underscore
(above),   even though they (the characters) appear elsewhere in the character string.



So, after squeezing the string, the result would be:

 The better the 4-whel drive, the further you'll be from help when ya get stuck!





Another example:
In the following character string,   using a specified immediately repeated character   s:

 headmistressship



The ""squeezed"" string would be:

 headmistreship



Task

Write a subroutine/function/procedure/routine···   to locate a   specified immediately repeated   character
and   squeeze   (delete)   them from the character string.   The
character string can be processed from either direction.



Show all output here, on this page:

   the   specified repeated character   (to be searched for and possibly squeezed):
   the   original string and its length
   the resultant string and its length
   the above strings should be ""bracketed"" with   <<<   and   >>>   (to delineate blanks)
   «««Guillemets may be used instead for ""bracketing"" for the more artistic programmers,   shown used here»»»


Use (at least) the following five strings,   all strings are length seventy-two (characters, including blanks),   except
the 1st string:

                                                                                  immediately
 string                                                                            repeated
 number                                                                            character
                                                                                     ( ↓   a blank,  a minus,  a seven,  a period)
        ╔╗
   1    ║╚═══════════════════════════════════════════════════════════════════════╗    ' '    ◄■■■■■■  a null string  (length zero)
   2    ║""If I were two-faced, would I be wearing this one?"" --- Abraham Lincoln ║    '-'
   3    ║..1111111111111111111111111111111111111111111111111111111111111117777888║    '7'
   4    ║I never give 'em hell, I just tell the truth, and they think it's hell. ║    '.'
   5    ║                                                    --- Harry S Truman  ║  (below)  ◄■■■■■■  has many repeated blanks
        ╚════════════════════════════════════════════════════════════════════════╝     ↑
                                                                                       │
                                                                                       │
        For the 5th string  (Truman's signature line),  use each of these  specified immediately  repeated characters:
                                  •  a blank
                                  •  a minus
                                  •  a lowercase  r



Note:   there should be seven results shown,   one each for the 1st four strings,   and three results for
the 5th string.


Other tasks related to string operations:

Metrics
 Array length
 String length
 Copy a string
 Empty string  (assignment)
Counting
 Word frequency
 Letter frequency
 Jewels and stones
 I before E except after C
 Bioinformatics/base count
 Count occurrences of a substring
 Count how many vowels and consonants occur in a string
Remove/replace
 XXXX redacted
 Conjugate a Latin verb
 Remove vowels from a string
 String interpolation (included)
 Strip block comments
 Strip comments from a string
 Strip a set of characters from a string
 Strip whitespace from a string -- top and tail
 Strip control codes and extended characters from a string
Anagrams/Derangements/shuffling
 Word wheel
 ABC problem
 Sattolo cycle
 Knuth shuffle
 Ordered words
 Superpermutation minimisation
 Textonyms (using a phone text pad)
 Anagrams
 Anagrams/Deranged anagrams
 Permutations/Derangements
Find/Search/Determine
 ABC words
 Odd words
 Word ladder
 Semordnilap
 Word search
 Wordiff  (game)
 String matching
 Tea cup rim text
 Alternade words
 Changeable words
 State name puzzle
 String comparison
 Unique characters
 Unique characters in each string
 Extract file extension
 Levenshtein distance
 Palindrome detection
 Common list elements
 Longest common suffix
 Longest common prefix
 Compare a list of strings
 Longest common substring
 Find common directory path
 Words from neighbour ones
 Change e letters to i in words
 Non-continuous subsequences
 Longest common subsequence
 Longest palindromic substrings
 Longest increasing subsequence
 Words containing ""the"" substring
 Sum of the digits of n is substring of n
 Determine if a string is numeric
 Determine if a string is collapsible
 Determine if a string is squeezable
 Determine if a string has all unique characters
 Determine if a string has all the same characters
 Longest substrings without repeating characters
 Find words which contains all the vowels
 Find words which contains most consonants
 Find words which contains more than 3 vowels
 Find words which first and last three letters are equals
 Find words which odd letters are consonants and even letters are vowels or vice_versa
Formatting
 Substring
 Rep-string
 Word wrap
 String case
 Align columns
 Literals/String
 Repeat a string
 Brace expansion
 Brace expansion using ranges
 Reverse a string
 Phrase reversals
 Comma quibbling
 Special characters
 String concatenation
 Substring/Top and tail
 Commatizing numbers
 Reverse words in a string
 Suffixation of decimal numbers
 Long literals, with continuations
 Numerical and alphabetical suffixes
 Abbreviations, easy
 Abbreviations, simple
 Abbreviations, automatic
Song lyrics/poems/Mad Libs/phrases
 Mad Libs
 Magic 8-ball
 99 Bottles of Beer
 The Name Game (a song)
 The Old lady swallowed a fly
 The Twelve Days of Christmas
Tokenize
 Text between
 Tokenize a string
 Word break problem
 Tokenize a string with escaping
 Split a character string based on change of character
Sequences
 Show ASCII table
 De Bruijn sequences
 Self-referential sequences
 Generate lower case ASCII alphabet



",Python,"from itertools import groupby
 
def squeezer(s, txt):
    return ''.join(item if item == s else ''.join(grp)
                   for item, grp in groupby(txt))
 
if __name__ == '__main__':
    strings = [
            """",
            '""If I were two-faced, would I be wearing this one?"" --- Abraham Lincoln ',
            ""..1111111111111111111111111111111111111111111111111111111111111117777888"",
            ""I never give 'em hell, I just tell the truth, and they think it's hell. "",
            ""                                                   ---  Harry S Truman  "",
            ""The better the 4-wheel drive, the further you'll be from help when ya get stuck!"",
            ""headmistressship"",
            ""aardvark"",
            ""😍😀🙌💃😍😍😍🙌"",
            ]
    squeezers = ' ,-,7,., -r,e,s,a,😍'.split(',')
    for txt, chars in zip(strings, squeezers):
        this = ""Original""
        print(f""\n{this:14} Size: {len(txt)} «««{txt}»»»"" )
        for ch in chars:
            this = f""Squeezer '{ch}'""
            sqz = squeezer(ch, txt)
            print(f""{this:>14} Size: {len(sqz)} «««{sqz}»»»"" )",1105,26,"import unittest
from itertools import groupby

def squeezer(s, txt):
    return ''.join(item if item == s else ''.join(grp)
                   for item, grp in groupby(txt))

class TestSqueezerFunction(unittest.TestCase):

    def test_null_string(self):
        self.assertEqual(squeezer(' ', """"), """")

    def test_string_with_hyphen(self):
        original = '""If I were two-faced, would I be wearing this one?"" --- Abraham Lincoln '
        expected = '""If I were two-faced, would I be wearing this one?"" - Abraham Lincoln '
        self.assertEqual(squeezer('-', original), expected)

    def test_string_with_sevens(self):
        original = ""..1111111111111111111111111111111111111111111111111111111111111117777888""
        expected = ""..1111111111111111111111111111111111111111111111111111111111111117888""
        self.assertEqual(squeezer('7', original), expected)

    def test_string_with_periods(self):
        original = ""I never give 'em hell, I just tell the truth, and they think it's hell. ""
        expected = ""I never give 'em hell, I just tell the truth, and they think it's hell ""
        self.assertEqual(squeezer('.', original), expected)

    def test_truman_signature_with_blank(self):
        original = ""                                                   ---  Harry S Truman  ""
        expected = "" --- Harry S Truman ""
        self.assertEqual(squeezer(' ', original), expected)

    def test_truman_signature_with_minus(self):
        original = ""                                                   ---  Harry S Truman  ""
        expected = ""                                                   -  Harry S Truman  ""
        self.assertEqual(squeezer('-', original), expected)

    def test_truman_signature_with_r(self):
        original = ""                                                   ---  Harry S Truman  ""
        expected = ""                                                   ---  Hary S Tuman  ""
        self.assertEqual(squeezer('r', original), expected)

    def test_better_4_wheel_drive(self):
        original = ""The better the 4-wheel drive, the further you'll be from help when ya get stuck!""
        expected = ""The better the 4-whel drive, the further you'll be from help when ya get stuck!""
        self.assertEqual(squeezer('e', original), expected)

    def test_headmistressship(self):
        original = ""headmistressship""
        expected = ""headmistreship""
        self.assertEqual(squeezer('s', original), expected)

    def test_aardvark(self):
        original = ""aardvark""
        expected = ""ardvark""
        self.assertEqual(squeezer('a', original), expected)

    def test_emoji_string(self):
        original = ""😍😀🙌💃😍😍😍🙌""
        expected = ""😍😀🙌💃😍🙌""
        self.assertEqual(squeezer('😍', original), expected)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/determine_if_a_string_is_squeezable/test_gpt_4o_2024_08_06_determine_if_a_string_is_squeezable.py,CompileStatus.OK,0.0,77.42,68.92,0.22,3.67,81.82,0.5627760887145996,15.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_determine_if_a_string_is_squeezable', 'obj': '', 'line': 44, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/determine_if_a_string_is_squeezable/test_gpt_4o_2024_08_06_determine_if_a_string_is_squeezable.py', 'symbol': 'line-too-long', 'message': 'Line too long (101/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_determine_if_a_string_is_squeezable', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/determine_if_a_string_is_squeezable/test_gpt_4o_2024_08_06_determine_if_a_string_is_squeezable.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_determine_if_a_string_is_squeezable', 'obj': 'squeezer', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 12, 'path': 'data/generated/docs_python/determine_if_a_string_is_squeezable/test_gpt_4o_2024_08_06_determine_if_a_string_is_squeezable.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_determine_if_a_string_is_squeezable', 'obj': 'TestSqueezerFunction', 'line': 8, 'column': 0, 'endLine': 8, 'endColumn': 26, 'path': 'data/generated/docs_python/determine_if_a_string_is_squeezable/test_gpt_4o_2024_08_06_determine_if_a_string_is_squeezable.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_determine_if_a_string_is_squeezable', 'obj': 'TestSqueezerFunction.test_null_string', 'line': 10, 'column': 4, 'endLine': 10, 'endColumn': 24, 'path': 'data/generated/docs_python/determine_if_a_string_is_squeezable/test_gpt_4o_2024_08_06_determine_if_a_string_is_squeezable.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_determine_if_a_string_is_squeezable', 'obj': 'TestSqueezerFunction.test_string_with_hyphen', 'line': 13, 'column': 4, 'endLine': 13, 'endColumn': 31, 'path': 'data/generated/docs_python/determine_if_a_string_is_squeezable/test_gpt_4o_2024_08_06_determine_if_a_string_is_squeezable.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_determine_if_a_string_is_squeezable', 'obj': 'TestSqueezerFunction.test_string_with_sevens', 'line': 18, 'column': 4, 'endLine': 18, 'endColumn': 31, 'path': 'data/generated/docs_python/determine_if_a_string_is_squeezable/test_gpt_4o_2024_08_06_determine_if_a_string_is_squeezable.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_determine_if_a_string_is_squeezable', 'obj': 'TestSqueezerFunction.test_string_with_periods', 'line': 23, 'column': 4, 'endLine': 23, 'endColumn': 32, 'path': 'data/generated/docs_python/determine_if_a_string_is_squeezable/test_gpt_4o_2024_08_06_determine_if_a_string_is_squeezable.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_determine_if_a_string_is_squeezable', 'obj': 'TestSqueezerFunction.test_truman_signature_with_blank', 'line': 28, 'column': 4, 'endLine': 28, 'endColumn': 40, 'path': 'data/generated/docs_python/determine_if_a_string_is_squeezable/test_gpt_4o_2024_08_06_determine_if_a_string_is_squeezable.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_determine_if_a_string_is_squeezable', 'obj': 'TestSqueezerFunction.test_truman_signature_with_minus', 'line': 33, 'column': 4, 'endLine': 33, 'endColumn': 40, 'path': 'data/generated/docs_python/determine_if_a_string_is_squeezable/test_gpt_4o_2024_08_06_determine_if_a_string_is_squeezable.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_determine_if_a_string_is_squeezable', 'obj': 'TestSqueezerFunction.test_truman_signature_with_r', 'line': 38, 'column': 4, 'endLine': 38, 'endColumn': 36, 'path': 'data/generated/docs_python/determine_if_a_string_is_squeezable/test_gpt_4o_2024_08_06_determine_if_a_string_is_squeezable.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_determine_if_a_string_is_squeezable', 'obj': 'TestSqueezerFunction.test_better_4_wheel_drive', 'line': 43, 'column': 4, 'endLine': 43, 'endColumn': 33, 'path': 'data/generated/docs_python/determine_if_a_string_is_squeezable/test_gpt_4o_2024_08_06_determine_if_a_string_is_squeezable.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_determine_if_a_string_is_squeezable', 'obj': 'TestSqueezerFunction.test_headmistressship', 'line': 48, 'column': 4, 'endLine': 48, 'endColumn': 29, 'path': 'data/generated/docs_python/determine_if_a_string_is_squeezable/test_gpt_4o_2024_08_06_determine_if_a_string_is_squeezable.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_determine_if_a_string_is_squeezable', 'obj': 'TestSqueezerFunction.test_aardvark', 'line': 53, 'column': 4, 'endLine': 53, 'endColumn': 21, 'path': 'data/generated/docs_python/determine_if_a_string_is_squeezable/test_gpt_4o_2024_08_06_determine_if_a_string_is_squeezable.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_determine_if_a_string_is_squeezable', 'obj': 'TestSqueezerFunction.test_emoji_string', 'line': 58, 'column': 4, 'endLine': 58, 'endColumn': 25, 'path': 'data/generated/docs_python/determine_if_a_string_is_squeezable/test_gpt_4o_2024_08_06_determine_if_a_string_is_squeezable.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Determine if only one instance is running,"This task is to determine if there is only one instance of an application running. If the program discovers that an instance of it is already running, then it should display a message indicating that it is already running and exit.
",Python,"import __main__, os
 
def isOnlyInstance():
    # Determine if there are more than the current instance of the application
    # running at the current time.
    return os.system(""(( $(ps -ef | grep python | grep '["" +
                     __main__.__file__[0] + ""]"" + __main__.__file__[1:] +
                     ""' | wc -l) > 1 ))"") != 0",339,8,"import unittest
from unittest.mock import patch
import determine_if_only_one_instance_is_running

class TestIsOnlyInstance(unittest.TestCase):

    @patch('determine_if_only_one_instance_is_running.os.system')
    def test_single_instance_running(self, mock_system):
        # Simulate the command returning 0, indicating only one instance is running
        mock_system.return_value = 0
        self.assertTrue(determine_if_only_one_instance_is_running.isOnlyInstance())

    @patch('determine_if_only_one_instance_is_running.os.system')
    def test_multiple_instances_running(self, mock_system):
        # Simulate the command returning non-zero, indicating multiple instances are running
        mock_system.return_value = 1
        self.assertFalse(determine_if_only_one_instance_is_running.isOnlyInstance())

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/determine_if_only_one_instance_is_running/test_gpt_4o_2024_08_06_determine_if_only_one_instance_is_running.py,CompileStatus.OK,0.0,94.12,89.47,0.14,2.0,,0.609987735748291,4.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_determine_if_only_one_instance_is_running', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/determine_if_only_one_instance_is_running/test_gpt_4o_2024_08_06_determine_if_only_one_instance_is_running.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_determine_if_only_one_instance_is_running', 'obj': 'TestIsOnlyInstance', 'line': 5, 'column': 0, 'endLine': 5, 'endColumn': 24, 'path': 'data/generated/docs_python/determine_if_only_one_instance_is_running/test_gpt_4o_2024_08_06_determine_if_only_one_instance_is_running.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_determine_if_only_one_instance_is_running', 'obj': 'TestIsOnlyInstance.test_single_instance_running', 'line': 8, 'column': 4, 'endLine': 8, 'endColumn': 36, 'path': 'data/generated/docs_python/determine_if_only_one_instance_is_running/test_gpt_4o_2024_08_06_determine_if_only_one_instance_is_running.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_determine_if_only_one_instance_is_running', 'obj': 'TestIsOnlyInstance.test_multiple_instances_running', 'line': 14, 'column': 4, 'endLine': 14, 'endColumn': 39, 'path': 'data/generated/docs_python/determine_if_only_one_instance_is_running/test_gpt_4o_2024_08_06_determine_if_only_one_instance_is_running.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Determine if two triangles overlap,"Determining if two triangles in the same plane overlap is an important topic in collision detection.



Task

Determine which of these pairs of triangles overlap in 2D:

   (0,0),(5,0),(0,5)     and   (0,0),(5,0),(0,6)
   (0,0),(0,5),(5,0)     and   (0,0),(0,5),(5,0)
   (0,0),(5,0),(0,5)     and   (-10,0),(-5,0),(-1,6)
   (0,0),(5,0),(2.5,5)   and   (0,4),(2.5,-1),(5,4)
   (0,0),(1,1),(0,2)     and   (2,1),(3,0),(3,2)
   (0,0),(1,1),(0,2)     and   (2,1),(3,-2),(3,4)


Optionally, see what the result is when only a single corner is in contact (there is no definitive correct answer):

   (0,0),(1,0),(0,1)   and   (1,0),(2,0),(1,1)

",Python,"from __future__ import print_function
import numpy as np
 
def CheckTriWinding(tri, allowReversed):
	trisq = np.ones((3,3))
	trisq[:,0:2] = np.array(tri)
	detTri = np.linalg.det(trisq)
	if detTri < 0.0:
		if allowReversed:
			a = trisq[2,:].copy()
			trisq[2,:] = trisq[1,:]
			trisq[1,:] = a
		else: raise ValueError(""triangle has wrong winding direction"")
	return trisq
 
def TriTri2D(t1, t2, eps = 0.0, allowReversed = False, onBoundary = True):
	#Trangles must be expressed anti-clockwise
	t1s = CheckTriWinding(t1, allowReversed)
	t2s = CheckTriWinding(t2, allowReversed)
 
	if onBoundary:
		#Points on the boundary are considered as colliding
		chkEdge = lambda x: np.linalg.det(x) < eps
	else:
		#Points on the boundary are not considered as colliding
		chkEdge = lambda x: np.linalg.det(x) <= eps
 
	#For edge E of trangle 1,
	for i in range(3):
		edge = np.roll(t1s, i, axis=0)[:2,:]
 
		#Check all points of trangle 2 lay on the external side of the edge E. If
		#they do, the triangles do not collide.
		if (chkEdge(np.vstack((edge, t2s[0]))) and
			chkEdge(np.vstack((edge, t2s[1]))) and
			chkEdge(np.vstack((edge, t2s[2])))):
			return False
 
	#For edge E of trangle 2,
	for i in range(3):
		edge = np.roll(t2s, i, axis=0)[:2,:]
 
		#Check all points of trangle 1 lay on the external side of the edge E. If
		#they do, the triangles do not collide.
		if (chkEdge(np.vstack((edge, t1s[0]))) and
			chkEdge(np.vstack((edge, t1s[1]))) and
			chkEdge(np.vstack((edge, t1s[2])))):
			return False
 
	#The triangles collide
	return True
 
if __name__==""__main__"":
	t1 = [[0,0],[5,0],[0,5]]
	t2 = [[0,0],[5,0],[0,6]]
	print (TriTri2D(t1, t2), True)
 
	t1 = [[0,0],[0,5],[5,0]]
	t2 = [[0,0],[0,6],[5,0]]
	print (TriTri2D(t1, t2, allowReversed = True), True)
 
	t1 = [[0,0],[5,0],[0,5]]
	t2 = [[-10,0],[-5,0],[-1,6]]
	print (TriTri2D(t1, t2), False)
 
	t1 = [[0,0],[5,0],[2.5,5]]
	t2 = [[0,4],[2.5,-1],[5,4]]
	print (TriTri2D(t1, t2), True)
 
	t1 = [[0,0],[1,1],[0,2]]
	t2 = [[2,1],[3,0],[3,2]]
	print (TriTri2D(t1, t2), False)
 
	t1 = [[0,0],[1,1],[0,2]]
	t2 = [[2,1],[3,-2],[3,4]]
	print (TriTri2D(t1, t2), False)
 
	#Barely touching
	t1 = [[0,0],[1,0],[0,1]]
	t2 = [[1,0],[2,0],[1,1]]
	print (TriTri2D(t1, t2, onBoundary = True), True)
 
	#Barely touching
	t1 = [[0,0],[1,0],[0,1]]
	t2 = [[1,0],[2,0],[1,1]]
	print (TriTri2D(t1, t2, onBoundary = False), False)",2373,86,"import unittest
from determine_if_two_triangles_overlap import TriTri2D

class TestTriangleOverlap(unittest.TestCase):

    def test_overlap_case_1(self):
        t1 = [[0,0],[5,0],[0,5]]
        t2 = [[0,0],[5,0],[0,6]]
        self.assertTrue(TriTri2D(t1, t2))

    def test_overlap_case_2(self):
        t1 = [[0,0],[0,5],[5,0]]
        t2 = [[0,0],[0,5],[5,0]]
        self.assertTrue(TriTri2D(t1, t2))

    def test_no_overlap_case_3(self):
        t1 = [[0,0],[5,0],[0,5]]
        t2 = [[-10,0],[-5,0],[-1,6]]
        self.assertFalse(TriTri2D(t1, t2))

    def test_overlap_case_4(self):
        t1 = [[0,0],[5,0],[2.5,5]]
        t2 = [[0,4],[2.5,-1],[5,4]]
        self.assertTrue(TriTri2D(t1, t2))

    def test_no_overlap_case_5(self):
        t1 = [[0,0],[1,1],[0,2]]
        t2 = [[2,1],[3,0],[3,2]]
        self.assertFalse(TriTri2D(t1, t2))

    def test_no_overlap_case_6(self):
        t1 = [[0,0],[1,1],[0,2]]
        t2 = [[2,1],[3,-2],[3,4]]
        self.assertFalse(TriTri2D(t1, t2))

    def test_touching_case_on_boundary(self):
        t1 = [[0,0],[1,0],[0,1]]
        t2 = [[1,0],[2,0],[1,1]]
        self.assertTrue(TriTri2D(t1, t2, onBoundary=True))

    def test_touching_case_not_on_boundary(self):
        t1 = [[0,0],[1,0],[0,1]]
        t2 = [[1,0],[2,0],[1,1]]
        self.assertFalse(TriTri2D(t1, t2, onBoundary=False))

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/determine_if_two_triangles_overlap/test_gpt_4o_2024_08_06_determine_if_two_triangles_overlap.py,CompileStatus.OK,0.0,68.89,72.32,0.22,0.62,87.5,0.5663490295410156,10.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_determine_if_two_triangles_overlap', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/determine_if_two_triangles_overlap/test_gpt_4o_2024_08_06_determine_if_two_triangles_overlap.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_determine_if_two_triangles_overlap', 'obj': 'TestTriangleOverlap', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 25, 'path': 'data/generated/docs_python/determine_if_two_triangles_overlap/test_gpt_4o_2024_08_06_determine_if_two_triangles_overlap.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_determine_if_two_triangles_overlap', 'obj': 'TestTriangleOverlap.test_overlap_case_1', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 27, 'path': 'data/generated/docs_python/determine_if_two_triangles_overlap/test_gpt_4o_2024_08_06_determine_if_two_triangles_overlap.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_determine_if_two_triangles_overlap', 'obj': 'TestTriangleOverlap.test_overlap_case_2', 'line': 11, 'column': 4, 'endLine': 11, 'endColumn': 27, 'path': 'data/generated/docs_python/determine_if_two_triangles_overlap/test_gpt_4o_2024_08_06_determine_if_two_triangles_overlap.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_determine_if_two_triangles_overlap', 'obj': 'TestTriangleOverlap.test_no_overlap_case_3', 'line': 16, 'column': 4, 'endLine': 16, 'endColumn': 30, 'path': 'data/generated/docs_python/determine_if_two_triangles_overlap/test_gpt_4o_2024_08_06_determine_if_two_triangles_overlap.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_determine_if_two_triangles_overlap', 'obj': 'TestTriangleOverlap.test_overlap_case_4', 'line': 21, 'column': 4, 'endLine': 21, 'endColumn': 27, 'path': 'data/generated/docs_python/determine_if_two_triangles_overlap/test_gpt_4o_2024_08_06_determine_if_two_triangles_overlap.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_determine_if_two_triangles_overlap', 'obj': 'TestTriangleOverlap.test_no_overlap_case_5', 'line': 26, 'column': 4, 'endLine': 26, 'endColumn': 30, 'path': 'data/generated/docs_python/determine_if_two_triangles_overlap/test_gpt_4o_2024_08_06_determine_if_two_triangles_overlap.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_determine_if_two_triangles_overlap', 'obj': 'TestTriangleOverlap.test_no_overlap_case_6', 'line': 31, 'column': 4, 'endLine': 31, 'endColumn': 30, 'path': 'data/generated/docs_python/determine_if_two_triangles_overlap/test_gpt_4o_2024_08_06_determine_if_two_triangles_overlap.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_determine_if_two_triangles_overlap', 'obj': 'TestTriangleOverlap.test_touching_case_on_boundary', 'line': 36, 'column': 4, 'endLine': 36, 'endColumn': 38, 'path': 'data/generated/docs_python/determine_if_two_triangles_overlap/test_gpt_4o_2024_08_06_determine_if_two_triangles_overlap.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_determine_if_two_triangles_overlap', 'obj': 'TestTriangleOverlap.test_touching_case_not_on_boundary', 'line': 41, 'column': 4, 'endLine': 41, 'endColumn': 42, 'path': 'data/generated/docs_python/determine_if_two_triangles_overlap/test_gpt_4o_2024_08_06_determine_if_two_triangles_overlap.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Digital root,"The digital root,



X


{\displaystyle X}

, of a number,



n


{\displaystyle n}

, is calculated:

 find



X


{\displaystyle X}

 as the sum of the digits of



n


{\displaystyle n}


 find a new



X


{\displaystyle X}

 by summing the digits of



X


{\displaystyle X}

, repeating until



X


{\displaystyle X}

 has only one digit.
The additive persistence is the number of summations required to obtain the single digit.

The task is to calculate the additive persistence and the digital root of a number, e.g.:





627615


{\displaystyle 627615}

 has additive persistence



2


{\displaystyle 2}

 and digital root of



9


{\displaystyle 9}

;




39390


{\displaystyle 39390}

 has additive persistence



2


{\displaystyle 2}

 and digital root of



6


{\displaystyle 6}

;




588225


{\displaystyle 588225}

 has additive persistence



2


{\displaystyle 2}

 and digital root of



3


{\displaystyle 3}

;




393900588225


{\displaystyle 393900588225}

 has additive persistence



2


{\displaystyle 2}

 and digital root of



9


{\displaystyle 9}

;
The digital root may be calculated in bases other than 10.



See

 Casting out nines for this wiki's use of this procedure.
 Digital root/Multiplicative digital root
 Sum digits of an integer
 Digital root sequence on OEIS
 Additive persistence sequence on OEIS
 Iterated digits squaring

",Python,"def digital_root (n):
    ap = 0
    n = abs(int(n))
    while n >= 10:
        n = sum(int(digit) for digit in str(n))
        ap += 1
    return ap, n
 
if __name__ == '__main__':
    for n in [627615, 39390, 588225, 393900588225, 55]:
        persistance, root = digital_root(n)
        print(""%12i has additive persistance %2i and digital root %i.""
              % (n, persistance, root))",393,13,"import unittest
from digital_root import digital_root

class TestDigitalRoot(unittest.TestCase):

    def test_digital_root_627615(self):
        persistence, root = digital_root(627615)
        self.assertEqual(persistence, 2)
        self.assertEqual(root, 9)

    def test_digital_root_39390(self):
        persistence, root = digital_root(39390)
        self.assertEqual(persistence, 2)
        self.assertEqual(root, 6)

    def test_digital_root_588225(self):
        persistence, root = digital_root(588225)
        self.assertEqual(persistence, 2)
        self.assertEqual(root, 3)

    def test_digital_root_393900588225(self):
        persistence, root = digital_root(393900588225)
        self.assertEqual(persistence, 2)
        self.assertEqual(root, 9)

    def test_digital_root_55(self):
        persistence, root = digital_root(55)
        self.assertEqual(persistence, 1)
        self.assertEqual(root, 1)

    def test_digital_root_single_digit(self):
        persistence, root = digital_root(7)
        self.assertEqual(persistence, 0)
        self.assertEqual(root, 7)

    def test_digital_root_zero(self):
        persistence, root = digital_root(0)
        self.assertEqual(persistence, 0)
        self.assertEqual(root, 0)

    def test_digital_root_negative_number(self):
        persistence, root = digital_root(-12345)
        self.assertEqual(persistence, 1)
        self.assertEqual(root, 6)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/digital_root/test_gpt_4o_2024_08_06_digital_root.py,CompileStatus.OK,0.0,87.5,82.76,0.43,5.33,75.0,0.6311571598052979,10.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_digital_root', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/digital_root/test_gpt_4o_2024_08_06_digital_root.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_digital_root', 'obj': 'TestDigitalRoot', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 21, 'path': 'data/generated/docs_python/digital_root/test_gpt_4o_2024_08_06_digital_root.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_digital_root', 'obj': 'TestDigitalRoot.test_digital_root_627615', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 32, 'path': 'data/generated/docs_python/digital_root/test_gpt_4o_2024_08_06_digital_root.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_digital_root', 'obj': 'TestDigitalRoot.test_digital_root_39390', 'line': 11, 'column': 4, 'endLine': 11, 'endColumn': 31, 'path': 'data/generated/docs_python/digital_root/test_gpt_4o_2024_08_06_digital_root.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_digital_root', 'obj': 'TestDigitalRoot.test_digital_root_588225', 'line': 16, 'column': 4, 'endLine': 16, 'endColumn': 32, 'path': 'data/generated/docs_python/digital_root/test_gpt_4o_2024_08_06_digital_root.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_digital_root', 'obj': 'TestDigitalRoot.test_digital_root_393900588225', 'line': 21, 'column': 4, 'endLine': 21, 'endColumn': 38, 'path': 'data/generated/docs_python/digital_root/test_gpt_4o_2024_08_06_digital_root.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_digital_root', 'obj': 'TestDigitalRoot.test_digital_root_55', 'line': 26, 'column': 4, 'endLine': 26, 'endColumn': 28, 'path': 'data/generated/docs_python/digital_root/test_gpt_4o_2024_08_06_digital_root.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_digital_root', 'obj': 'TestDigitalRoot.test_digital_root_single_digit', 'line': 31, 'column': 4, 'endLine': 31, 'endColumn': 38, 'path': 'data/generated/docs_python/digital_root/test_gpt_4o_2024_08_06_digital_root.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_digital_root', 'obj': 'TestDigitalRoot.test_digital_root_zero', 'line': 36, 'column': 4, 'endLine': 36, 'endColumn': 30, 'path': 'data/generated/docs_python/digital_root/test_gpt_4o_2024_08_06_digital_root.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_digital_root', 'obj': 'TestDigitalRoot.test_digital_root_negative_number', 'line': 41, 'column': 4, 'endLine': 41, 'endColumn': 41, 'path': 'data/generated/docs_python/digital_root/test_gpt_4o_2024_08_06_digital_root.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Digital root/Multiplicative digital root,"The multiplicative digital root (MDR) and multiplicative persistence (MP) of a number,



n


{\displaystyle n}

, is calculated rather like the Digital root except digits are multiplied instead of being added:

 Set



m


{\displaystyle m}

 to



n


{\displaystyle n}

 and



i


{\displaystyle i}

 to



0


{\displaystyle 0}

.
 While



m


{\displaystyle m}

 has more than one digit:
 Find a replacement



m


{\displaystyle m}

 as the multiplication of the digits of the current value of



m


{\displaystyle m}

.
 Increment



i


{\displaystyle i}

.
 Return



i


{\displaystyle i}

 (= MP) and



m


{\displaystyle m}

 (= MDR)


Task

 Tabulate the MP and MDR of the numbers 123321, 7739, 893, 899998
 Tabulate MDR versus the first five numbers having that MDR, something like:
MDR: [n0..n4]
===  ========
  0: [0, 10, 20, 25, 30]
  1: [1, 11, 111, 1111, 11111]
  2: [2, 12, 21, 26, 34]
  3: [3, 13, 31, 113, 131]
  4: [4, 14, 22, 27, 39]
  5: [5, 15, 35, 51, 53]
  6: [6, 16, 23, 28, 32]
  7: [7, 17, 71, 117, 171]
  8: [8, 18, 24, 29, 36]
  9: [9, 19, 33, 91, 119]

Show all output on this page.

Similar

The Product of decimal digits of n page was redirected here, and had the following description


Find the product of the decimal digits of a positive integer   n,   where n <= 100

The three existing entries for Phix, REXX, and Ring have been moved here, under ===Similar=== headings, feel free to match or ignore them.



References

 Multiplicative Digital Root on Wolfram Mathworld.
 Multiplicative digital root on The On-Line Encyclopedia of Integer Sequences.
 What's special about 277777788888899? - Numberphile video

",Python,"try:
    from functools import reduce
except:
    pass
 
def mdroot(n):
    'Multiplicative digital root'
    mdr = [n]
    while mdr[-1] > 9:
        mdr.append(reduce(int.__mul__, (int(dig) for dig in str(mdr[-1])), 1))
    return len(mdr) - 1, mdr[-1]
 
if __name__ == '__main__':
    print('Number: (MP, MDR)\n======  =========')
    for n in (123321, 7739, 893, 899998):
        print('%6i: %r' % (n, mdroot(n)))
 
    table, n = {i: [] for i in range(10)}, 0
    while min(len(row) for row in table.values()) < 5:
        mpersistence, mdr = mdroot(n)
        table[mdr].append(n)
        n += 1
    print('\nMP: [n0..n4]\n==  ========')
    for mp, val in sorted(table.items()):
        print('%2i: %r' % (mp, val[:5]))",726,25,"import unittest
from functools import reduce

def mdroot(n):
    'Multiplicative digital root'
    mdr = [n]
    while mdr[-1] > 9:
        mdr.append(reduce(int.__mul__, (int(dig) for dig in str(mdr[-1])), 1))
    return len(mdr) - 1, mdr[-1]

class TestMultiplicativeDigitalRoot(unittest.TestCase):

    def test_mdroot(self):
        # Test cases for specific numbers
        self.assertEqual(mdroot(123321), (1, 6))
        self.assertEqual(mdroot(7739), (3, 3))
        self.assertEqual(mdroot(893), (2, 6))
        self.assertEqual(mdroot(899998), (2, 0))

    def test_mdr_table(self):
        # Generate the table for the first five numbers having each MDR
        table, n = {i: [] for i in range(10)}, 0
        while min(len(row) for row in table.values()) < 5:
            mpersistence, mdr = mdroot(n)
            table[mdr].append(n)
            n += 1

        # Expected results
        expected_table = {
            0: [0, 10, 20, 30, 40],
            1: [1, 11, 111, 1111, 11111],
            2: [2, 12, 21, 22, 31],
            3: [3, 13, 23, 32, 33],
            4: [4, 14, 24, 34, 41],
            5: [5, 15, 25, 35, 45],
            6: [6, 16, 26, 36, 42],
            7: [7, 17, 27, 37, 47],
            8: [8, 18, 28, 38, 48],
            9: [9, 19, 29, 39, 49]
        }

        for mdr in range(10):
            self.assertEqual(table[mdr][:5], expected_table[mdr])

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/digital_root_multiplicative_digital_root/test_gpt_4o_2024_08_06_digital_root_multiplicative_digital_root.py,CompileStatus.OK,0.0,44.44,42.47,0.15,1.67,,0.6510341167449951,9.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_digital_root_multiplicative_digital_root', 'obj': '', 'line': 12, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/digital_root_multiplicative_digital_root/test_gpt_4o_2024_08_06_digital_root_multiplicative_digital_root.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_digital_root_multiplicative_digital_root', 'obj': '', 'line': 19, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/digital_root_multiplicative_digital_root/test_gpt_4o_2024_08_06_digital_root_multiplicative_digital_root.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_digital_root_multiplicative_digital_root', 'obj': '', 'line': 27, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/digital_root_multiplicative_digital_root/test_gpt_4o_2024_08_06_digital_root_multiplicative_digital_root.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_digital_root_multiplicative_digital_root', 'obj': '', 'line': 41, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/digital_root_multiplicative_digital_root/test_gpt_4o_2024_08_06_digital_root_multiplicative_digital_root.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_digital_root_multiplicative_digital_root', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/digital_root_multiplicative_digital_root/test_gpt_4o_2024_08_06_digital_root_multiplicative_digital_root.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_digital_root_multiplicative_digital_root', 'obj': 'TestMultiplicativeDigitalRoot', 'line': 11, 'column': 0, 'endLine': 11, 'endColumn': 35, 'path': 'data/generated/docs_python/digital_root_multiplicative_digital_root/test_gpt_4o_2024_08_06_digital_root_multiplicative_digital_root.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_digital_root_multiplicative_digital_root', 'obj': 'TestMultiplicativeDigitalRoot.test_mdroot', 'line': 13, 'column': 4, 'endLine': 13, 'endColumn': 19, 'path': 'data/generated/docs_python/digital_root_multiplicative_digital_root/test_gpt_4o_2024_08_06_digital_root_multiplicative_digital_root.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_digital_root_multiplicative_digital_root', 'obj': 'TestMultiplicativeDigitalRoot.test_mdr_table', 'line': 20, 'column': 4, 'endLine': 20, 'endColumn': 22, 'path': 'data/generated/docs_python/digital_root_multiplicative_digital_root/test_gpt_4o_2024_08_06_digital_root_multiplicative_digital_root.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_digital_root_multiplicative_digital_root', 'obj': 'TestMultiplicativeDigitalRoot.test_mdr_table', 'line': 24, 'column': 12, 'endLine': 24, 'endColumn': 24, 'path': 'data/generated/docs_python/digital_root_multiplicative_digital_root/test_gpt_4o_2024_08_06_digital_root_multiplicative_digital_root.py', 'symbol': 'unused-variable', 'message': ""Unused variable 'mpersistence'"", 'message-id': 'W0612'}]",False
Dijkstra's algorithm,"This task has been clarified. Its programming examples are in need of review to ensure that they still fit the requirements of the task.

Dijkstra's algorithm, conceived by Dutch computer scientist Edsger Dijkstra in 1956 and published in 1959, is a graph search algorithm that solves the single-source shortest path problem for a graph with non-negative edge path costs, producing a shortest path tree.

This algorithm is often used in routing and as a subroutine in other graph algorithms.



For a given source vertex (node) in the graph, the algorithm finds the path with lowest cost (i.e. the shortest path) between that vertex and every other vertex.



For instance

If the vertices of the graph represent cities and edge path costs represent driving distances between pairs of cities connected by a direct road,   Dijkstra's algorithm can be used to find the shortest route between one city and all other cities.

As a result, the shortest path first is widely used in network routing protocols, most notably:

   IS-IS   (Intermediate System to Intermediate System)   and
   OSPF   (Open Shortest Path First).


Important note

The inputs to Dijkstra's algorithm are a directed and weighted graph consisting of 2 or more nodes, generally represented by:

   an adjacency matrix or list,   and
   a start node.


A destination node is not specified.

The output is a set of edges depicting the shortest path to each destination node.



An example, starting with

                                         a──►b,  cost=7,   lastNode=a
                                         a──►c,  cost=9,   lastNode=a
                                         a──►d,  cost=NA,  lastNode=a
                                         a──►e,  cost=NA,  lastNode=a
                                         a──►f,  cost=14,  lastNode=a
 
    The lowest cost is    a──►b    so    a──►b    is added to the output.
 
    There is a connection from   b──►d   so the input is updated to:
                                         a──►c,  cost=9,   lastNode=a
                                         a──►d,  cost=22,  lastNode=b
                                         a──►e,  cost=NA,  lastNode=a
                                         a──►f,  cost=14,  lastNode=a
 
    The lowest cost is    a──►c    so    a──►c    is added to the output.
 
    Paths to    d    and    f    are cheaper via    c    so the input is updated to:
                                         a──►d,  cost=20,  lastNode=c
                                         a──►e,  cost=NA,  lastNode=a
                                         a──►f,  cost=11,  lastNode=c
 
    The lowest cost is    a──►f    so    c──►f    is added to the output.
 
    The input is updated to:
                                         a──►d,  cost=20,  lastNode=c
                                         a──►e,  cost=NA,  lastNode=a
 
    The lowest cost is    a──►d    so    c──►d    is added to the output.
 
    There is a connection from    d──►e    so the input is updated to:
                                         a──►e,  cost=26,  lastNode=d
 
    Which just leaves adding    d──►e    to the output.
 
    The output should now be:
                                       [ d──►e
                                         c──►d
                                         c──►f
                                         a──►c
                                         a──►b ]


Task

 Implement a version of Dijkstra's algorithm that outputs a set of edges depicting the shortest path to each reachable node from an origin.
 Run your program with the following directed graph starting at node    a.
 Write a program which interprets the output from the above and use it to output the shortest path from node    a    to nodes    e    and  f.

 Vertices


 Number
 Name


 1
 a


 2
 b


 3
 c


 4
 d


 5
 e


 6
 f


 Edges


 Start
 End
 Cost


 a
 b
 7


 a
 c
 9


 a
 f
 14


 b
 c
 10


 b
 d
 15


 c
 d
 11


 c
 f
 2


 d
 e
 6


 e
 f
 9



You can use numbers or names to identify vertices in your program.



See also
 Dijkstra's Algorithm vs. A* Search vs. Concurrent Dijkstra's Algorithm (youtube)

",Python,"from collections import namedtuple, deque
from pprint import pprint as pp
 
 
inf = float('inf')
Edge = namedtuple('Edge', ['start', 'end', 'cost'])
 
class Graph():
    def __init__(self, edges):
        self.edges = [Edge(*edge) for edge in edges]
        # print(dir(self.edges[0]))
        self.vertices = {e.start for e in self.edges} | {e.end for e in self.edges}
 
    def dijkstra(self, source, dest):
        assert source in self.vertices
        dist = {vertex: inf for vertex in self.vertices}
        previous = {vertex: None for vertex in self.vertices}
        dist[source] = 0
        q = self.vertices.copy()
        neighbours = {vertex: set() for vertex in self.vertices}
        for start, end, cost in self.edges:
            neighbours[start].add((end, cost))
            neighbours[end].add((start, cost))
 
        #pp(neighbours)
 
        while q:
            # pp(q)
            u = min(q, key=lambda vertex: dist[vertex])
            q.remove(u)
            if dist[u] == inf or u == dest:
                break
            for v, cost in neighbours[u]:
                alt = dist[u] + cost
                if alt < dist[v]:                                  # Relax (u,v,a)
                    dist[v] = alt
                    previous[v] = u
        #pp(previous)
        s, u = deque(), dest
        while previous[u]:
            s.appendleft(u)
            u = previous[u]
        s.appendleft(u)
        return s
 
 
graph = Graph([(""a"", ""b"", 7),  (""a"", ""c"", 9),  (""a"", ""f"", 14), (""b"", ""c"", 10),
               (""b"", ""d"", 15), (""c"", ""d"", 11), (""c"", ""f"", 2),  (""d"", ""e"", 6),
               (""e"", ""f"", 9)])
pp(graph.dijkstra(""a"", ""e""))",1667,50,"import unittest
from collections import namedtuple, deque

inf = float('inf')
Edge = namedtuple('Edge', ['start', 'end', 'cost'])

class Graph():
    def __init__(self, edges):
        self.edges = [Edge(*edge) for edge in edges]
        self.vertices = {e.start for e in self.edges} | {e.end for e in self.edges}

    def dijkstra(self, source, dest):
        assert source in self.vertices
        dist = {vertex: inf for vertex in self.vertices}
        previous = {vertex: None for vertex in self.vertices}
        dist[source] = 0
        q = self.vertices.copy()
        neighbours = {vertex: set() for vertex in self.vertices}
        for start, end, cost in self.edges:
            neighbours[start].add((end, cost))
            neighbours[end].add((start, cost))

        while q:
            u = min(q, key=lambda vertex: dist[vertex])
            q.remove(u)
            if dist[u] == inf or u == dest:
                break
            for v, cost in neighbours[u]:
                alt = dist[u] + cost
                if alt < dist[v]:
                    dist[v] = alt
                    previous[v] = u

        s, u = deque(), dest
        while previous[u]:
            s.appendleft(u)
            u = previous[u]
        s.appendleft(u)
        return list(s)

class TestDijkstraAlgorithm(unittest.TestCase):

    def setUp(self):
        self.graph = Graph([(""a"", ""b"", 7),  (""a"", ""c"", 9),  (""a"", ""f"", 14), (""b"", ""c"", 10),
                            (""b"", ""d"", 15), (""c"", ""d"", 11), (""c"", ""f"", 2),  (""d"", ""e"", 6),
                            (""e"", ""f"", 9)])

    def test_shortest_path_a_to_e(self):
        result = self.graph.dijkstra(""a"", ""e"")
        expected = ['a', 'c', 'd', 'e']
        self.assertEqual(result, expected)

    def test_shortest_path_a_to_f(self):
        result = self.graph.dijkstra(""a"", ""f"")
        expected = ['a', 'c', 'f']
        self.assertEqual(result, expected)

    def test_shortest_path_a_to_b(self):
        result = self.graph.dijkstra(""a"", ""b"")
        expected = ['a', 'b']
        self.assertEqual(result, expected)

    def test_shortest_path_a_to_c(self):
        result = self.graph.dijkstra(""a"", ""c"")
        expected = ['a', 'c']
        self.assertEqual(result, expected)

    def test_shortest_path_a_to_d(self):
        result = self.graph.dijkstra(""a"", ""d"")
        expected = ['a', 'c', 'd']
        self.assertEqual(result, expected)

    def test_no_path(self):
        # Test a case where there is no path (e.g., isolated node)
        graph = Graph([(""a"", ""b"", 7)])
        result = graph.dijkstra(""a"", ""c"")
        expected = ['c']  # Since 'c' is isolated, it should return just 'c'
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/dijkstra_s_algorithm/test_gpt_4o_2024_08_06_dijkstra_s_algorithm.py,CompileStatus.OK,0.0,61.0,57.33,0.11,0.47,66.67,0.5750172138214111,11.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_dijkstra_s_algorithm', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/dijkstra_s_algorithm/test_gpt_4o_2024_08_06_dijkstra_s_algorithm.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_dijkstra_s_algorithm', 'obj': 'Graph', 'line': 7, 'column': 0, 'endLine': 7, 'endColumn': 11, 'path': 'data/generated/docs_python/dijkstra_s_algorithm/test_gpt_4o_2024_08_06_dijkstra_s_algorithm.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_dijkstra_s_algorithm', 'obj': 'Graph.dijkstra', 'line': 12, 'column': 4, 'endLine': 12, 'endColumn': 16, 'path': 'data/generated/docs_python/dijkstra_s_algorithm/test_gpt_4o_2024_08_06_dijkstra_s_algorithm.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'refactor', 'module': 'test_gpt_4o_2024_08_06_dijkstra_s_algorithm', 'obj': 'Graph', 'line': 7, 'column': 0, 'endLine': 7, 'endColumn': 11, 'path': 'data/generated/docs_python/dijkstra_s_algorithm/test_gpt_4o_2024_08_06_dijkstra_s_algorithm.py', 'symbol': 'too-few-public-methods', 'message': 'Too few public methods (1/2)', 'message-id': 'R0903'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_dijkstra_s_algorithm', 'obj': 'TestDijkstraAlgorithm', 'line': 41, 'column': 0, 'endLine': 41, 'endColumn': 27, 'path': 'data/generated/docs_python/dijkstra_s_algorithm/test_gpt_4o_2024_08_06_dijkstra_s_algorithm.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_dijkstra_s_algorithm', 'obj': 'TestDijkstraAlgorithm.test_shortest_path_a_to_e', 'line': 48, 'column': 4, 'endLine': 48, 'endColumn': 33, 'path': 'data/generated/docs_python/dijkstra_s_algorithm/test_gpt_4o_2024_08_06_dijkstra_s_algorithm.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_dijkstra_s_algorithm', 'obj': 'TestDijkstraAlgorithm.test_shortest_path_a_to_f', 'line': 53, 'column': 4, 'endLine': 53, 'endColumn': 33, 'path': 'data/generated/docs_python/dijkstra_s_algorithm/test_gpt_4o_2024_08_06_dijkstra_s_algorithm.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_dijkstra_s_algorithm', 'obj': 'TestDijkstraAlgorithm.test_shortest_path_a_to_b', 'line': 58, 'column': 4, 'endLine': 58, 'endColumn': 33, 'path': 'data/generated/docs_python/dijkstra_s_algorithm/test_gpt_4o_2024_08_06_dijkstra_s_algorithm.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_dijkstra_s_algorithm', 'obj': 'TestDijkstraAlgorithm.test_shortest_path_a_to_c', 'line': 63, 'column': 4, 'endLine': 63, 'endColumn': 33, 'path': 'data/generated/docs_python/dijkstra_s_algorithm/test_gpt_4o_2024_08_06_dijkstra_s_algorithm.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_dijkstra_s_algorithm', 'obj': 'TestDijkstraAlgorithm.test_shortest_path_a_to_d', 'line': 68, 'column': 4, 'endLine': 68, 'endColumn': 33, 'path': 'data/generated/docs_python/dijkstra_s_algorithm/test_gpt_4o_2024_08_06_dijkstra_s_algorithm.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_dijkstra_s_algorithm', 'obj': 'TestDijkstraAlgorithm.test_no_path', 'line': 73, 'column': 4, 'endLine': 73, 'endColumn': 20, 'path': 'data/generated/docs_python/dijkstra_s_algorithm/test_gpt_4o_2024_08_06_dijkstra_s_algorithm.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Dinesman's multiple-dwelling problem,"Task
Solve Dinesman's multiple dwelling problem but in a way that most naturally follows the problem statement given below.

Solutions are allowed (but not required) to parse and interpret the problem text, but should remain flexible and should state what changes to the problem text are allowed. Flexibility and ease of expression are valued.

Examples may be be split into ""setup"", ""problem statement"", and ""output"" sections where the ease and naturalness of stating the problem and getting an answer, as well as the ease and flexibility of modifying the problem are the primary concerns.

Example output should be shown here, as well as any comments on the examples flexibility.



The problem
Baker, Cooper, Fletcher, Miller, and Smith live on different floors of an apartment house that contains only five floors.


   Baker does not live on the top floor.
   Cooper does not live on the bottom floor.
   Fletcher does not live on either the top or the bottom floor.
   Miller lives on a higher floor than does Cooper.
   Smith does not live on a floor adjacent to Fletcher's.
   Fletcher does not live on a floor adjacent to Cooper's.

Where does everyone live?
",Python,"import re
from itertools import product
 
problem_re = re.compile(r""""""(?msx)(?:
 
# Multiple names of form n1, n2, n3, ... , and nK
(?P<namelist> [a-zA-Z]+ (?: , \s+ [a-zA-Z]+)* (?: ,? \s+ and) \s+ [a-zA-Z]+ )
 
# Flexible floor count (2 to 10 floors)
| (?:  .* house \s+ that \s+ contains \s+ only \s+
  (?P<floorcount> two|three|four|five|six|seven|eight|nine|ten ) \s+ floors \s* \.)
 
# Constraint: ""does not live on the n'th floor""
|(?: (?P<not_live>  \b [a-zA-Z]+ \s+ does \s+ not \s+ live \s+ on \s+ the \s+
  (?: top|bottom|first|second|third|fourth|fifth|sixth|seventh|eighth|ninth|tenth) \s+ floor \s* \. ))
 
# Constraint: ""does not live on either the I'th or the J'th [ or the K'th ...] floor
|(?P<not_either> \b [a-zA-Z]+ \s+ does \s+ not \s+ live \s+ on \s+ either
  (?: \s+ (?: or \s+)? the \s+
    (?: top|bottom|first|second|third|fourth|fifth|sixth|seventh|eighth|ninth|tenth))+ \s+ floor \s* \. )
 
# Constraint: ""P1 lives on a higher/lower floor than P2 does""
|(?P<hi_lower> \b  [a-zA-Z]+ \s+ lives \s+ on \s+ a \s (?: higher|lower)
   \s+ floor \s+ than (?: \s+ does)  \s+  [a-zA-Z]+ \s* \. )
 
# Constraint: ""P1 does/does not live on a floor adjacent to P2's""
|(?P<adjacency>  \b [a-zA-Z]+ \s+ does (?:\s+ not)? \s+ live \s+ on \s+ a \s+
   floor \s+ adjacent \s+ to \s+  [a-zA-Z]+ (?: 's )? \s* \. )
 
# Ask for the solution
|(?P<question> Where \s+ does \s+ everyone \s+ live \s* \?)
 
)
"""""")
 
names, lennames = None, None
floors = None
constraint_expr = 'len(set(alloc)) == lennames' # Start with all people on different floors
 
def do_namelist(txt):
    "" E.g. 'Baker, Cooper, Fletcher, Miller, and Smith'""
    global names, lennames
    names = txt.replace(' and ', ' ').split(', ')
    lennames = len(names)
 
def do_floorcount(txt):
    "" E.g. 'five'""
    global floors
    floors = '||two|three|four|five|six|seven|eight|nine|ten'.split('|').index(txt)
 
def do_not_live(txt):
    "" E.g. 'Baker does not live on the top floor.'""
    global constraint_expr
    t = txt.strip().split()
    who, floor = t[0], t[-2]
    w, f = (names.index(who),
            ('|first|second|third|fourth|fifth|sixth|' +
             'seventh|eighth|ninth|tenth|top|bottom|').split('|').index(floor)
            )
    if f == 11: f = floors
    if f == 12: f = 1
    constraint_expr += ' and alloc[%i] != %i' % (w, f)
 
def do_not_either(txt):
    "" E.g. 'Fletcher does not live on either the top or the bottom floor.'""
    global constraint_expr
    t = txt.replace(' or ', ' ').replace(' the ', ' ').strip().split()
    who, floor = t[0], t[6:-1]
    w, fl = (names.index(who),
             [('|first|second|third|fourth|fifth|sixth|' +
               'seventh|eighth|ninth|tenth|top|bottom|').split('|').index(f)
              for f in floor]
             )
    for f in fl:
        if f == 11: f = floors
        if f == 12: f = 1
        constraint_expr += ' and alloc[%i] != %i' % (w, f)
 
 
def do_hi_lower(txt):
    "" E.g. 'Miller lives on a higher floor than does Cooper.'""
    global constraint_expr
    t = txt.replace('.', '').strip().split()
    name_indices = [names.index(who) for who in (t[0], t[-1])]
    if 'lower' in t:
        name_indices = name_indices[::-1]
    constraint_expr += ' and alloc[%i] > alloc[%i]' % tuple(name_indices)
 
def do_adjacency(txt):
    ''' E.g. ""Smith does not live on a floor adjacent to Fletcher's.""'''
    global constraint_expr
    t = txt.replace('.', '').replace(""'s"", '').strip().split()
    name_indices = [names.index(who) for who in (t[0], t[-1])]
    constraint_expr += ' and abs(alloc[%i] - alloc[%i]) > 1' % tuple(name_indices)
 
def do_question(txt):
    global constraint_expr, names, lennames
 
    exec_txt = '''
for alloc in product(range(1,floors+1), repeat=len(names)):
    if %s:
        break
else:
    alloc = None
''' % constraint_expr
    exec(exec_txt, globals(), locals())
    a = locals()['alloc']
    if a:
        output= ['Floors are numbered from 1 to %i inclusive.' % floors]
        for a2n in zip(a, names):
            output += ['  Floor %i is occupied by %s' % a2n]
        output.sort(reverse=True)
        print('\n'.join(output))
    else:
        print('No solution found.')
    print()
 
handler = {
    'namelist': do_namelist,
    'floorcount': do_floorcount,
    'not_live': do_not_live,
    'not_either': do_not_either,
    'hi_lower': do_hi_lower,
    'adjacency': do_adjacency,
    'question': do_question,
    }
def parse_and_solve(problem):
    p = re.sub(r'\s+', ' ', problem).strip()
    for x in problem_re.finditer(p):
        groupname, txt = [(k,v) for k,v in x.groupdict().items() if v][0]
        #print (""%r, %r"" % (groupname, txt))
        handler[groupname](txt)",4691,132,"import unittest
from dinesman_s_multiple_dwelling_problem import parse_and_solve

class TestDinesmanMultipleDwellingProblem(unittest.TestCase):

    def test_standard_problem(self):
        problem = """"""
        Baker, Cooper, Fletcher, Miller, and Smith live on different floors of an apartment house that contains only five floors.
        Baker does not live on the top floor.
        Cooper does not live on the bottom floor.
        Fletcher does not live on either the top or the bottom floor.
        Miller lives on a higher floor than does Cooper.
        Smith does not live on a floor adjacent to Fletcher's.
        Fletcher does not live on a floor adjacent to Cooper's.
        Where does everyone live?
        """"""
        expected_output = (
            ""Floors are numbered from 1 to 5 inclusive.\n""
            ""  Floor 5 is occupied by Smith\n""
            ""  Floor 4 is occupied by Miller\n""
            ""  Floor 3 is occupied by Fletcher\n""
            ""  Floor 2 is occupied by Cooper\n""
            ""  Floor 1 is occupied by Baker\n""
        )
        with self.assertLogs() as log:
            parse_and_solve(problem)
            self.assertIn(expected_output.strip(), log.output[0])

    def test_no_solution(self):
        problem = """"""
        Baker, Cooper, Fletcher, Miller, and Smith live on different floors of an apartment house that contains only five floors.
        Baker does not live on the top floor.
        Cooper does not live on the bottom floor.
        Fletcher does not live on either the top or the bottom floor.
        Miller lives on a higher floor than does Cooper.
        Smith does not live on a floor adjacent to Fletcher's.
        Fletcher does not live on a floor adjacent to Cooper's.
        Baker lives on the fifth floor.
        Where does everyone live?
        """"""
        expected_output = ""No solution found.""
        with self.assertLogs() as log:
            parse_and_solve(problem)
            self.assertIn(expected_output, log.output[0])

    def test_different_floor_count(self):
        problem = """"""
        Baker, Cooper, Fletcher, Miller, and Smith live on different floors of an apartment house that contains only six floors.
        Baker does not live on the top floor.
        Cooper does not live on the bottom floor.
        Fletcher does not live on either the top or the bottom floor.
        Miller lives on a higher floor than does Cooper.
        Smith does not live on a floor adjacent to Fletcher's.
        Fletcher does not live on a floor adjacent to Cooper's.
        Where does everyone live?
        """"""
        expected_output = (
            ""Floors are numbered from 1 to 6 inclusive.\n""
            ""  Floor 6 is occupied by Smith\n""
            ""  Floor 5 is occupied by Miller\n""
            ""  Floor 4 is occupied by Fletcher\n""
            ""  Floor 3 is occupied by Cooper\n""
            ""  Floor 2 is occupied by Baker\n""
        )
        with self.assertLogs() as log:
            parse_and_solve(problem)
            self.assertIn(expected_output.strip(), log.output[0])

    def test_minimum_floor_count(self):
        problem = """"""
        Baker, Cooper, Fletcher, Miller, and Smith live on different floors of an apartment house that contains only two floors.
        Baker does not live on the top floor.
        Cooper does not live on the bottom floor.
        Where does everyone live?
        """"""
        expected_output = ""No solution found.""
        with self.assertLogs() as log:
            parse_and_solve(problem)
            self.assertIn(expected_output, log.output[0])

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/dinesman_s_multiple_dwelling_problem/test_gpt_4o_2024_08_06_dinesman_s_multiple_dwelling_problem.py,CompileStatus.OK,0.0,97.59,96.4,0.28,0.36,,0.5869350433349609,6.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_dinesman_s_multiple_dwelling_problem', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/dinesman_s_multiple_dwelling_problem/test_gpt_4o_2024_08_06_dinesman_s_multiple_dwelling_problem.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_dinesman_s_multiple_dwelling_problem', 'obj': 'TestDinesmanMultipleDwellingProblem', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 41, 'path': 'data/generated/docs_python/dinesman_s_multiple_dwelling_problem/test_gpt_4o_2024_08_06_dinesman_s_multiple_dwelling_problem.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_dinesman_s_multiple_dwelling_problem', 'obj': 'TestDinesmanMultipleDwellingProblem.test_standard_problem', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 29, 'path': 'data/generated/docs_python/dinesman_s_multiple_dwelling_problem/test_gpt_4o_2024_08_06_dinesman_s_multiple_dwelling_problem.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_dinesman_s_multiple_dwelling_problem', 'obj': 'TestDinesmanMultipleDwellingProblem.test_no_solution', 'line': 29, 'column': 4, 'endLine': 29, 'endColumn': 24, 'path': 'data/generated/docs_python/dinesman_s_multiple_dwelling_problem/test_gpt_4o_2024_08_06_dinesman_s_multiple_dwelling_problem.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_dinesman_s_multiple_dwelling_problem', 'obj': 'TestDinesmanMultipleDwellingProblem.test_different_floor_count', 'line': 46, 'column': 4, 'endLine': 46, 'endColumn': 34, 'path': 'data/generated/docs_python/dinesman_s_multiple_dwelling_problem/test_gpt_4o_2024_08_06_dinesman_s_multiple_dwelling_problem.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_dinesman_s_multiple_dwelling_problem', 'obj': 'TestDinesmanMultipleDwellingProblem.test_minimum_floor_count', 'line': 69, 'column': 4, 'endLine': 69, 'endColumn': 32, 'path': 'data/generated/docs_python/dinesman_s_multiple_dwelling_problem/test_gpt_4o_2024_08_06_dinesman_s_multiple_dwelling_problem.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Discordian date,"

Task

Convert a given date from the   Gregorian calendar   to the   Discordian calendar.



",Python,"import datetime, calendar
 
DISCORDIAN_SEASONS = [""Chaos"", ""Discord"", ""Confusion"", ""Bureaucracy"", ""The Aftermath""]
 
def ddate(year, month, day):
    today = datetime.date(year, month, day)
    is_leap_year = calendar.isleap(year)
    if is_leap_year and month == 2 and day == 29:
        return ""St. Tib's Day, YOLD "" + (year + 1166)
 
    day_of_year = today.timetuple().tm_yday - 1
 
    if is_leap_year and day_of_year >= 60:
        day_of_year -= 1 # Compensate for St. Tib's Day
 
    season, dday = divmod(day_of_year, 73)
    return ""%s %d, YOLD %d"" % (DISCORDIAN_SEASONS[season], dday + 1, year + 1166)
 ",614,18,"import unittest
from discordian_date import ddate

class TestDiscordianDate(unittest.TestCase):

    def test_regular_date(self):
        # Test a regular date conversion
        self.assertEqual(ddate(2023, 1, 1), ""Chaos 1, YOLD 3189"")
        self.assertEqual(ddate(2023, 3, 1), ""Discord 60, YOLD 3189"")
        self.assertEqual(ddate(2023, 5, 1), ""Confusion 59, YOLD 3189"")
        self.assertEqual(ddate(2023, 7, 1), ""Bureaucracy 59, YOLD 3189"")
        self.assertEqual(ddate(2023, 9, 1), ""The Aftermath 59, YOLD 3189"")
        self.assertEqual(ddate(2023, 12, 31), ""The Aftermath 73, YOLD 3189"")

    def test_leap_year(self):
        # Test a date in a leap year
        self.assertEqual(ddate(2024, 1, 1), ""Chaos 1, YOLD 3190"")
        self.assertEqual(ddate(2024, 2, 28), ""Chaos 59, YOLD 3190"")
        self.assertEqual(ddate(2024, 3, 1), ""Discord 59, YOLD 3190"")
        self.assertEqual(ddate(2024, 12, 31), ""The Aftermath 73, YOLD 3190"")

    def test_st_tibs_day(self):
        # Test St. Tib's Day
        self.assertEqual(ddate(2024, 2, 29), ""St. Tib's Day, YOLD 3190"")

    def test_end_of_season(self):
        # Test the end of each Discordian season
        self.assertEqual(ddate(2023, 3, 15), ""Chaos 73, YOLD 3189"")
        self.assertEqual(ddate(2023, 5, 27), ""Discord 73, YOLD 3189"")
        self.assertEqual(ddate(2023, 8, 8), ""Confusion 73, YOLD 3189"")
        self.assertEqual(ddate(2023, 10, 19), ""Bureaucracy 73, YOLD 3189"")
        self.assertEqual(ddate(2023, 12, 31), ""The Aftermath 73, YOLD 3189"")

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/discordian_date/test_gpt_4o_2024_08_06_discordian_date.py,CompileStatus.OK,0.0,72.97,74.42,0.64,2.67,,0.6168100833892822,7.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_discordian_date', 'obj': '', 'line': 5, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/discordian_date/test_gpt_4o_2024_08_06_discordian_date.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_discordian_date', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/discordian_date/test_gpt_4o_2024_08_06_discordian_date.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_discordian_date', 'obj': 'TestDiscordianDate', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 24, 'path': 'data/generated/docs_python/discordian_date/test_gpt_4o_2024_08_06_discordian_date.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_discordian_date', 'obj': 'TestDiscordianDate.test_regular_date', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 25, 'path': 'data/generated/docs_python/discordian_date/test_gpt_4o_2024_08_06_discordian_date.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_discordian_date', 'obj': 'TestDiscordianDate.test_leap_year', 'line': 15, 'column': 4, 'endLine': 15, 'endColumn': 22, 'path': 'data/generated/docs_python/discordian_date/test_gpt_4o_2024_08_06_discordian_date.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_discordian_date', 'obj': 'TestDiscordianDate.test_st_tibs_day', 'line': 22, 'column': 4, 'endLine': 22, 'endColumn': 24, 'path': 'data/generated/docs_python/discordian_date/test_gpt_4o_2024_08_06_discordian_date.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_discordian_date', 'obj': 'TestDiscordianDate.test_end_of_season', 'line': 26, 'column': 4, 'endLine': 26, 'endColumn': 26, 'path': 'data/generated/docs_python/discordian_date/test_gpt_4o_2024_08_06_discordian_date.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Display a linear combination,"Task

Display a finite linear combination in an infinite vector basis



(

e

1


,

e

2


,
…
)


{\displaystyle (e_{1},e_{2},\ldots )}

.

Write a function that, when given a finite list of scalars



(

α

1


,

α

2


,
…
)


{\displaystyle (\alpha ^{1},\alpha ^{2},\ldots )}

,
creates a string representing the linear combination




∑

i



α

i



e

i




{\displaystyle \sum _{i}\alpha ^{i}e_{i}}

 in an explicit format often used in mathematics, that is:






α


i

1





e


i

1




±

|


α


i

2





|


e


i

2




±

|


α


i

3





|


e


i

3




±
…


{\displaystyle \alpha ^{i_{1}}e_{i_{1}}\pm |\alpha ^{i_{2}}|e_{i_{2}}\pm |\alpha ^{i_{3}}|e_{i_{3}}\pm \ldots }


where




α


i

k




≠
0


{\displaystyle \alpha ^{i_{k}}\neq 0}







The output must comply to the following rules:

   don't show null terms, unless the whole combination is null.
 e(1)     is fine,     e(1) + 0*e(3)     or     e(1) + 0     is wrong.
   don't show scalars when they are equal to one or minus one.
 e(3)     is fine,     1*e(3)     is wrong.
   don't prefix by a minus sign if it follows a preceding term.   Instead you use subtraction.
 e(4) - e(5)     is fine,     e(4) + -e(5)     is wrong.


Show here output for the following lists of scalars:

 1)    1,  2,  3
 2)    0,  1,  2,  3
 3)    1,  0,  3,  4
 4)    1,  2,  0
 5)    0,  0,  0
 6)    0
 7)    1,  1,  1
 8)   -1, -1, -1
 9)   -1, -2,  0, -3
10)   -1


",Python," 
def linear(x):
    return ' + '.join(['{}e({})'.format('-' if v == -1 else '' if v == 1 else str(v) + '*', i + 1)
        for i, v in enumerate(x) if v] or ['0']).replace(' + -', ' - ')
 
list(map(lambda x: print(linear(x)), [[1, 2, 3], [0, 1, 2, 3], [1, 0, 3, 4], [1, 2, 0],
        [0, 0, 0], [0], [1, 1, 1], [-1, -1, -1], [-1, -2, 0, 3], [-1]]))
 ",352,8,"import unittest
from display_a_linear_combination import linear

class TestLinearCombination(unittest.TestCase):

    def test_case_1(self):
        self.assertEqual(linear([1, 2, 3]), 'e(1) + 2*e(2) + 3*e(3)')

    def test_case_2(self):
        self.assertEqual(linear([0, 1, 2, 3]), 'e(2) + 2*e(3) + 3*e(4)')

    def test_case_3(self):
        self.assertEqual(linear([1, 0, 3, 4]), 'e(1) + 3*e(3) + 4*e(4)')

    def test_case_4(self):
        self.assertEqual(linear([1, 2, 0]), 'e(1) + 2*e(2)')

    def test_case_5(self):
        self.assertEqual(linear([0, 0, 0]), '0')

    def test_case_6(self):
        self.assertEqual(linear([0]), '0')

    def test_case_7(self):
        self.assertEqual(linear([1, 1, 1]), 'e(1) + e(2) + e(3)')

    def test_case_8(self):
        self.assertEqual(linear([-1, -1, -1]), '-e(1) - e(2) - e(3)')

    def test_case_9(self):
        self.assertEqual(linear([-1, -2, 0, -3]), '-e(1) - 2*e(2) - 3*e(4)')

    def test_case_10(self):
        self.assertEqual(linear([-1]), '-e(1)')

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/display_a_linear_combination/test_gpt_4o_2024_08_06_display_a_linear_combination.py,CompileStatus.OK,0.0,96.43,94.12,0.4,1.67,100.0,0.5374889373779297,22.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_display_a_linear_combination', 'obj': '', 'line': 5, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/display_a_linear_combination/test_gpt_4o_2024_08_06_display_a_linear_combination.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_display_a_linear_combination', 'obj': '', 'line': 8, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/display_a_linear_combination/test_gpt_4o_2024_08_06_display_a_linear_combination.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_display_a_linear_combination', 'obj': '', 'line': 11, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/display_a_linear_combination/test_gpt_4o_2024_08_06_display_a_linear_combination.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_display_a_linear_combination', 'obj': '', 'line': 14, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/display_a_linear_combination/test_gpt_4o_2024_08_06_display_a_linear_combination.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_display_a_linear_combination', 'obj': '', 'line': 17, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/display_a_linear_combination/test_gpt_4o_2024_08_06_display_a_linear_combination.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_display_a_linear_combination', 'obj': '', 'line': 20, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/display_a_linear_combination/test_gpt_4o_2024_08_06_display_a_linear_combination.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_display_a_linear_combination', 'obj': '', 'line': 23, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/display_a_linear_combination/test_gpt_4o_2024_08_06_display_a_linear_combination.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_display_a_linear_combination', 'obj': '', 'line': 26, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/display_a_linear_combination/test_gpt_4o_2024_08_06_display_a_linear_combination.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_display_a_linear_combination', 'obj': '', 'line': 29, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/display_a_linear_combination/test_gpt_4o_2024_08_06_display_a_linear_combination.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_display_a_linear_combination', 'obj': '', 'line': 32, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/display_a_linear_combination/test_gpt_4o_2024_08_06_display_a_linear_combination.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_display_a_linear_combination', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/display_a_linear_combination/test_gpt_4o_2024_08_06_display_a_linear_combination.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_display_a_linear_combination', 'obj': 'TestLinearCombination', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 27, 'path': 'data/generated/docs_python/display_a_linear_combination/test_gpt_4o_2024_08_06_display_a_linear_combination.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_display_a_linear_combination', 'obj': 'TestLinearCombination.test_case_1', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 19, 'path': 'data/generated/docs_python/display_a_linear_combination/test_gpt_4o_2024_08_06_display_a_linear_combination.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_display_a_linear_combination', 'obj': 'TestLinearCombination.test_case_2', 'line': 9, 'column': 4, 'endLine': 9, 'endColumn': 19, 'path': 'data/generated/docs_python/display_a_linear_combination/test_gpt_4o_2024_08_06_display_a_linear_combination.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_display_a_linear_combination', 'obj': 'TestLinearCombination.test_case_3', 'line': 12, 'column': 4, 'endLine': 12, 'endColumn': 19, 'path': 'data/generated/docs_python/display_a_linear_combination/test_gpt_4o_2024_08_06_display_a_linear_combination.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_display_a_linear_combination', 'obj': 'TestLinearCombination.test_case_4', 'line': 15, 'column': 4, 'endLine': 15, 'endColumn': 19, 'path': 'data/generated/docs_python/display_a_linear_combination/test_gpt_4o_2024_08_06_display_a_linear_combination.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_display_a_linear_combination', 'obj': 'TestLinearCombination.test_case_5', 'line': 18, 'column': 4, 'endLine': 18, 'endColumn': 19, 'path': 'data/generated/docs_python/display_a_linear_combination/test_gpt_4o_2024_08_06_display_a_linear_combination.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_display_a_linear_combination', 'obj': 'TestLinearCombination.test_case_6', 'line': 21, 'column': 4, 'endLine': 21, 'endColumn': 19, 'path': 'data/generated/docs_python/display_a_linear_combination/test_gpt_4o_2024_08_06_display_a_linear_combination.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_display_a_linear_combination', 'obj': 'TestLinearCombination.test_case_7', 'line': 24, 'column': 4, 'endLine': 24, 'endColumn': 19, 'path': 'data/generated/docs_python/display_a_linear_combination/test_gpt_4o_2024_08_06_display_a_linear_combination.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_display_a_linear_combination', 'obj': 'TestLinearCombination.test_case_8', 'line': 27, 'column': 4, 'endLine': 27, 'endColumn': 19, 'path': 'data/generated/docs_python/display_a_linear_combination/test_gpt_4o_2024_08_06_display_a_linear_combination.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_display_a_linear_combination', 'obj': 'TestLinearCombination.test_case_9', 'line': 30, 'column': 4, 'endLine': 30, 'endColumn': 19, 'path': 'data/generated/docs_python/display_a_linear_combination/test_gpt_4o_2024_08_06_display_a_linear_combination.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_display_a_linear_combination', 'obj': 'TestLinearCombination.test_case_10', 'line': 33, 'column': 4, 'endLine': 33, 'endColumn': 20, 'path': 'data/generated/docs_python/display_a_linear_combination/test_gpt_4o_2024_08_06_display_a_linear_combination.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Diversity prediction theorem,"The   wisdom of the crowd   is the collective opinion of a group of individuals rather than that of a single expert.

Wisdom-of-the-crowds research routinely attributes the superiority of crowd averages over individual judgments to the elimination of individual noise,   an explanation that assumes independence of the individual judgments from each other.

Thus the crowd tends to make its best decisions if it is made up of diverse opinions and ideologies.



Scott E. Page introduced the diversity prediction theorem:

 The squared error of the collective prediction equals the average squared error minus the predictive diversity.


Therefore,   when the diversity in a group is large,   the error of the crowd is small.



Definitions

   Average Individual Error:   Average of the individual squared errors
   Collective Error:   Squared error of the collective prediction
   Prediction Diversity:   Average squared distance from the individual predictions to the collective prediction
   Diversity Prediction Theorem:   Given a crowd of predictive models,     then
   Collective Error   =   Average Individual Error   ─   Prediction Diversity
Task

For a given   true   value and a number of number of estimates (from a crowd),   show   (here on this page):

   the true value   and   the crowd estimates
   the average error
   the crowd error
   the prediction diversity


Use   (at least)   these two examples:

   a true value of   49   with crowd estimates of:    48   47   51
   a true value of   49   with crowd estimates of:    48   47   51   42


Also see

   Wikipedia entry:   Wisdom of the crowd
   University of Michigan: PDF paper         (exists on a web archive,   the Wayback Machine).

",Python,"'''Diversity prediction theorem'''
 
from itertools import chain
from functools import reduce
 
 
#  diversityValues :: Num a => a -> [a] ->
#  { mean-Error :: a, crowd-error :: a, diversity :: a }
def diversityValues(x):
    '''The mean error, crowd error and
       diversity, for a given observation x
       and a non-empty list of predictions ps.
    '''
    def go(ps):
        mp = mean(ps)
        return {
            'mean-error': meanErrorSquared(x)(ps),
            'crowd-error': pow(x - mp, 2),
            'diversity': meanErrorSquared(mp)(ps)
        }
    return go
 
 
# meanErrorSquared :: Num -> [Num] -> Num
def meanErrorSquared(x):
    '''The mean of the squared differences
       between the observed value x and
       a non-empty list of predictions ps.
    '''
    def go(ps):
        return mean([
            pow(p - x, 2) for p in ps
        ])
    return go
 
 
# ------------------------- TEST -------------------------
# main :: IO ()
def main():
    '''Observed value: 49,
       prediction lists: various.
    '''
 
    print(unlines(map(
        showDiversityValues(49),
        [
            [48, 47, 51],
            [48, 47, 51, 42],
            [50, '?', 50, {}, 50],  # Non-numeric values.
            []                      # Missing predictions.
        ]
    )))
    print(unlines(map(
        showDiversityValues('49'),  # String in place of number.
        [
            [50, 50, 50],
            [40, 35, 40],
        ]
    )))
 
 
# ---------------------- FORMATTING ----------------------
 
# showDiversityValues :: Num -> [Num] -> Either String String
def showDiversityValues(x):
    '''Formatted string representation
       of diversity values for a given
       observation x and a non-empty
       list of predictions p.
    '''
    def go(ps):
        def showDict(dct):
            w = 4 + max(map(len, dct.keys()))
 
            def showKV(a, kv):
                k, v = kv
                return a + k.rjust(w, ' ') + (
                    ' : ' + showPrecision(3)(v) + '\n'
                )
            return 'Predictions: ' + showList(ps) + ' ->\n' + (
                reduce(showKV, dct.items(), '')
            )
 
        def showProblem(e):
            return (
                unlines(map(indented(1), e)) if (
                    isinstance(e, list)
                ) else indented(1)(repr(e))
            ) + '\n'
 
        return 'Observation:  ' + repr(x) + '\n' + (
            either(showProblem)(showDict)(
                bindLR(numLR(x))(
                    lambda n: bindLR(numsLR(ps))(
                        compose(Right, diversityValues(n))
                    )
                )
            )
        )
    return go
 
 
# ------------------ GENERIC FUNCTIONS -------------------
 
# Left :: a -> Either a b
def Left(x):
    '''Constructor for an empty Either (option type) value
       with an associated string.
    '''
    return {'type': 'Either', 'Right': None, 'Left': x}
 
 
# Right :: b -> Either a b
def Right(x):
    '''Constructor for a populated Either (option type) value'''
    return {'type': 'Either', 'Left': None, 'Right': x}
 
 
# bindLR (>>=) :: Either a -> (a -> Either b) -> Either b
def bindLR(m):
    '''Either monad injection operator.
       Two computations sequentially composed,
       with any value produced by the first
       passed as an argument to the second.
    '''
    def go(mf):
        return (
            mf(m.get('Right')) if None is m.get('Left') else m
        )
    return go
 
 
# compose :: ((a -> a), ...) -> (a -> a)
def compose(*fs):
    '''Composition, from right to left,
       of a series of functions.
    '''
    def go(f, g):
        def fg(x):
            return f(g(x))
        return fg
    return reduce(go, fs, identity)
 
 
# concatMap :: (a -> [b]) -> [a] -> [b]
def concatMap(f):
    '''A concatenated list over which a function has been mapped.
       The list monad can be derived by using a function f which
       wraps its output in a list,
       (using an empty list to represent computational failure).
    '''
    def go(xs):
        return chain.from_iterable(map(f, xs))
    return go
 
 
# either :: (a -> c) -> (b -> c) -> Either a b -> c
def either(fl):
    '''The application of fl to e if e is a Left value,
       or the application of fr to e if e is a Right value.
    '''
    return lambda fr: lambda e: fl(e['Left']) if (
        None is e['Right']
    ) else fr(e['Right'])
 
 
# identity :: a -> a
def identity(x):
    '''The identity function.'''
    return x
 
 
# indented :: Int -> String -> String
def indented(n):
    '''String indented by n multiples
       of four spaces.
    '''
    return lambda s: (4 * ' ' * n) + s
 
# mean :: [Num] -> Float
def mean(xs):
    '''Arithmetic mean of a list
       of numeric values.
    '''
    return sum(xs) / float(len(xs))
 
 
# numLR :: a -> Either String Num
def numLR(x):
    '''Either Right x if x is a float or int,
       or a Left explanatory message.'''
    return Right(x) if (
        isinstance(x, (float, int))
    ) else Left(
        'Expected number, saw: ' + (
            str(type(x)) + ' ' + repr(x)
        )
    )
 
 
# numsLR :: [a] -> Either String [Num]
def numsLR(xs):
    '''Either Right xs if all xs are float or int,
       or a Left explanatory message.'''
    def go(ns):
        ls, rs = partitionEithers(map(numLR, ns))
        return Left(ls) if ls else Right(rs)
    return bindLR(
        Right(xs) if (
            bool(xs) and isinstance(xs, list)
        ) else Left(
            'Expected a non-empty list, saw: ' + (
                str(type(xs)) + ' ' + repr(xs)
            )
        )
    )(go)
 
 
# partitionEithers :: [Either a b] -> ([a],[b])
def partitionEithers(lrs):
    '''A list of Either values partitioned into a tuple
       of two lists, with all Left elements extracted
       into the first list, and Right elements
       extracted into the second list.
    '''
    def go(a, x):
        ls, rs = a
        r = x.get('Right')
        return (ls + [x.get('Left')], rs) if None is r else (
            ls, rs + [r]
        )
    return reduce(go, lrs, ([], []))
 
 
# showList :: [a] -> String
def showList(xs):
    '''Compact string representation of a list'''
    return '[' + ','.join(str(x) for x in xs) + ']'
 
 
# showPrecision :: Int -> Float -> String
def showPrecision(n):
    '''A string showing a floating point number
       at a given degree of precision.'''
    def go(x):
        return str(round(x, n))
    return go
 
 
# unlines :: [String] -> String
def unlines(xs):
    '''A single string derived by the intercalation
       of a list of strings with the newline character.'''
    return '\n'.join(xs)
 
 
# MAIN ---
if __name__ == '__main__':
    main()",6756,259,"import unittest
from diversity_prediction_theorem import diversityValues

class TestDiversityPredictionTheorem(unittest.TestCase):

    def test_valid_cases(self):
        # Test case 1: True value 49 with estimates [48, 47, 51]
        result = diversityValues(49)([48, 47, 51])
        self.assertAlmostEqual(result['mean-error'], 2.6666666666666665, places=3)
        self.assertAlmostEqual(result['crowd-error'], 0.6666666666666666, places=3)
        self.assertAlmostEqual(result['diversity'], 2.0, places=3)

        # Test case 2: True value 49 with estimates [48, 47, 51, 42]
        result = diversityValues(49)([48, 47, 51, 42])
        self.assertAlmostEqual(result['mean-error'], 13.5, places=3)
        self.assertAlmostEqual(result['crowd-error'], 9.0, places=3)
        self.assertAlmostEqual(result['diversity'], 4.5, places=3)

    def test_invalid_cases(self):
        # Test case 3: Non-numeric values in estimates
        with self.assertRaises(TypeError):
            diversityValues(49)([50, '?', 50, {}, 50])

        # Test case 4: Empty list of estimates
        with self.assertRaises(ZeroDivisionError):
            diversityValues(49)([])

        # Test case 5: Non-numeric true value
        with self.assertRaises(TypeError):
            diversityValues('49')([50, 50, 50])

    def test_edge_cases(self):
        # Test case 6: All estimates are the same
        result = diversityValues(49)([49, 49, 49])
        self.assertAlmostEqual(result['mean-error'], 0.0, places=3)
        self.assertAlmostEqual(result['crowd-error'], 0.0, places=3)
        self.assertAlmostEqual(result['diversity'], 0.0, places=3)

        # Test case 7: Single estimate
        result = diversityValues(49)([48])
        self.assertAlmostEqual(result['mean-error'], 1.0, places=3)
        self.assertAlmostEqual(result['crowd-error'], 1.0, places=3)
        self.assertAlmostEqual(result['diversity'], 0.0, places=3)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/diversity_prediction_theorem/test_gpt_4o_2024_08_06_diversity_prediction_theorem.py,CompileStatus.OK,0.0,50.48,50.4,0.5,0.36,66.67,0.5659060478210449,6.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_diversity_prediction_theorem', 'obj': '', 'line': 5, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/diversity_prediction_theorem/test_gpt_4o_2024_08_06_diversity_prediction_theorem.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_diversity_prediction_theorem', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/diversity_prediction_theorem/test_gpt_4o_2024_08_06_diversity_prediction_theorem.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_diversity_prediction_theorem', 'obj': 'TestDiversityPredictionTheorem', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 36, 'path': 'data/generated/docs_python/diversity_prediction_theorem/test_gpt_4o_2024_08_06_diversity_prediction_theorem.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_diversity_prediction_theorem', 'obj': 'TestDiversityPredictionTheorem.test_valid_cases', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 24, 'path': 'data/generated/docs_python/diversity_prediction_theorem/test_gpt_4o_2024_08_06_diversity_prediction_theorem.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_diversity_prediction_theorem', 'obj': 'TestDiversityPredictionTheorem.test_invalid_cases', 'line': 19, 'column': 4, 'endLine': 19, 'endColumn': 26, 'path': 'data/generated/docs_python/diversity_prediction_theorem/test_gpt_4o_2024_08_06_diversity_prediction_theorem.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_diversity_prediction_theorem', 'obj': 'TestDiversityPredictionTheorem.test_edge_cases', 'line': 32, 'column': 4, 'endLine': 32, 'endColumn': 23, 'path': 'data/generated/docs_python/diversity_prediction_theorem/test_gpt_4o_2024_08_06_diversity_prediction_theorem.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Dot product,"Task

Create a function/use an in-built function, to compute the   dot product,   also known as the   scalar product   of two vectors.

If possible, make the vectors of arbitrary length.



As an example, compute the dot product of the vectors:

     [1,  3, -5]       and
     [4, -2, -1]


If implementing the dot product of two vectors directly:

   each vector must be the same length
   multiply corresponding terms from each vector
   sum the products   (to produce the answer)


Related task

   Vector products

",Python,"def dotp(a,b):
    assert len(a) == len(b), 'Vector sizes must match'
    return sum(aterm * bterm for aterm,bterm in zip(a, b))
 
if __name__ == '__main__':
    a, b = [1, 3, -5], [4, -2, -1]
    assert dotp(a,b) == 3",218,7,"import unittest

class TestDotProduct(unittest.TestCase):

    def test_positive_numbers(self):
        a = [1, 2, 3]
        b = [4, 5, 6]
        result = dotp(a, b)
        expected = 32  # 1*4 + 2*5 + 3*6
        self.assertEqual(result, expected)

    def test_negative_numbers(self):
        a = [-1, -2, -3]
        b = [-4, -5, -6]
        result = dotp(a, b)
        expected = 32  # (-1)*(-4) + (-2)*(-5) + (-3)*(-6)
        self.assertEqual(result, expected)

    def test_mixed_numbers(self):
        a = [1, -2, 3]
        b = [-4, 5, -6]
        result = dotp(a, b)
        expected = -28  # 1*(-4) + (-2)*5 + 3*(-6)
        self.assertEqual(result, expected)

    def test_zero_vector(self):
        a = [0, 0, 0]
        b = [1, 2, 3]
        result = dotp(a, b)
        expected = 0  # 0*1 + 0*2 + 0*3
        self.assertEqual(result, expected)

    def test_single_element_vectors(self):
        a = [3]
        b = [4]
        result = dotp(a, b)
        expected = 12  # 3*4
        self.assertEqual(result, expected)

    def test_different_lengths(self):
        a = [1, 2]
        b = [3, 4, 5]
        with self.assertRaises(AssertionError):
            dotp(a, b)

    def test_empty_vectors(self):
        a = []
        b = []
        result = dotp(a, b)
        expected = 0  # No elements to multiply
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/dot_product/test_gpt_4o_2024_08_06_dot_product.py,CompileStatus.OK,0.0,62.75,59.32,0.16,3.5,,0.5771839618682861,16.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_dot_product', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/dot_product/test_gpt_4o_2024_08_06_dot_product.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_dot_product', 'obj': 'TestDotProduct', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 20, 'path': 'data/generated/docs_python/dot_product/test_gpt_4o_2024_08_06_dot_product.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_dot_product', 'obj': 'TestDotProduct.test_positive_numbers', 'line': 5, 'column': 4, 'endLine': 5, 'endColumn': 29, 'path': 'data/generated/docs_python/dot_product/test_gpt_4o_2024_08_06_dot_product.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_dot_product', 'obj': 'TestDotProduct.test_positive_numbers', 'line': 8, 'column': 17, 'endLine': 8, 'endColumn': 21, 'path': 'data/generated/docs_python/dot_product/test_gpt_4o_2024_08_06_dot_product.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'dotp'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_dot_product', 'obj': 'TestDotProduct.test_negative_numbers', 'line': 12, 'column': 4, 'endLine': 12, 'endColumn': 29, 'path': 'data/generated/docs_python/dot_product/test_gpt_4o_2024_08_06_dot_product.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_dot_product', 'obj': 'TestDotProduct.test_negative_numbers', 'line': 15, 'column': 17, 'endLine': 15, 'endColumn': 21, 'path': 'data/generated/docs_python/dot_product/test_gpt_4o_2024_08_06_dot_product.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'dotp'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_dot_product', 'obj': 'TestDotProduct.test_mixed_numbers', 'line': 19, 'column': 4, 'endLine': 19, 'endColumn': 26, 'path': 'data/generated/docs_python/dot_product/test_gpt_4o_2024_08_06_dot_product.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_dot_product', 'obj': 'TestDotProduct.test_mixed_numbers', 'line': 22, 'column': 17, 'endLine': 22, 'endColumn': 21, 'path': 'data/generated/docs_python/dot_product/test_gpt_4o_2024_08_06_dot_product.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'dotp'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_dot_product', 'obj': 'TestDotProduct.test_zero_vector', 'line': 26, 'column': 4, 'endLine': 26, 'endColumn': 24, 'path': 'data/generated/docs_python/dot_product/test_gpt_4o_2024_08_06_dot_product.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_dot_product', 'obj': 'TestDotProduct.test_zero_vector', 'line': 29, 'column': 17, 'endLine': 29, 'endColumn': 21, 'path': 'data/generated/docs_python/dot_product/test_gpt_4o_2024_08_06_dot_product.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'dotp'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_dot_product', 'obj': 'TestDotProduct.test_single_element_vectors', 'line': 33, 'column': 4, 'endLine': 33, 'endColumn': 35, 'path': 'data/generated/docs_python/dot_product/test_gpt_4o_2024_08_06_dot_product.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_dot_product', 'obj': 'TestDotProduct.test_single_element_vectors', 'line': 36, 'column': 17, 'endLine': 36, 'endColumn': 21, 'path': 'data/generated/docs_python/dot_product/test_gpt_4o_2024_08_06_dot_product.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'dotp'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_dot_product', 'obj': 'TestDotProduct.test_different_lengths', 'line': 40, 'column': 4, 'endLine': 40, 'endColumn': 30, 'path': 'data/generated/docs_python/dot_product/test_gpt_4o_2024_08_06_dot_product.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_dot_product', 'obj': 'TestDotProduct.test_different_lengths', 'line': 44, 'column': 12, 'endLine': 44, 'endColumn': 16, 'path': 'data/generated/docs_python/dot_product/test_gpt_4o_2024_08_06_dot_product.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'dotp'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_dot_product', 'obj': 'TestDotProduct.test_empty_vectors', 'line': 46, 'column': 4, 'endLine': 46, 'endColumn': 26, 'path': 'data/generated/docs_python/dot_product/test_gpt_4o_2024_08_06_dot_product.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_dot_product', 'obj': 'TestDotProduct.test_empty_vectors', 'line': 49, 'column': 17, 'endLine': 49, 'endColumn': 21, 'path': 'data/generated/docs_python/dot_product/test_gpt_4o_2024_08_06_dot_product.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'dotp'"", 'message-id': 'E0602'}]",False
Doubly-linked list/Element insertion,"Doubly-Linked List (element)
This is much like inserting into a Singly-Linked List, but with added assignments so that the backwards-pointing links remain correct.

See also

 Array
 Associative array: Creation, Iteration
 Collections
 Compound data type
 Doubly-linked list: Definition, Element definition, Element insertion, List Traversal, Element Removal
 Linked list
 Queue: Definition, Usage
 Set
 Singly-linked list: Element definition, Element insertion, List Traversal, Element Removal
 Stack",Python,"def insert(anchor, new):
    new.next = anchor.next
    new.prev = anchor
    anchor.next.prev = new
    anchor.next = new",122,5,"import unittest

class TestDoublyLinkedListElementInsertion(unittest.TestCase):

    class Node:
        def __init__(self, value):
            self.value = value
            self.next = None
            self.prev = None

    def setUp(self):
        # Create a basic doubly linked list with three nodes
        self.node1 = self.Node(1)
        self.node2 = self.Node(2)
        self.node3 = self.Node(3)

        self.node1.next = self.node2
        self.node2.prev = self.node1
        self.node2.next = self.node3
        self.node3.prev = self.node2

    def test_insert_middle(self):
        # Insert a new node between node1 and node2
        new_node = self.Node(1.5)
        insert(self.node1, new_node)

        # Check the links
        self.assertEqual(self.node1.next, new_node)
        self.assertEqual(new_node.prev, self.node1)
        self.assertEqual(new_node.next, self.node2)
        self.assertEqual(self.node2.prev, new_node)

    def test_insert_end(self):
        # Insert a new node after node3
        new_node = self.Node(4)
        insert(self.node3, new_node)

        # Check the links
        self.assertEqual(self.node3.next, new_node)
        self.assertEqual(new_node.prev, self.node3)
        self.assertIsNone(new_node.next)

    def test_insert_beginning(self):
        # Insert a new node before node1
        new_node = self.Node(0)
        # Create a dummy head node to simulate insertion at the beginning
        dummy_head = self.Node(None)
        dummy_head.next = self.node1
        self.node1.prev = dummy_head

        insert(dummy_head, new_node)

        # Check the links
        self.assertEqual(dummy_head.next, new_node)
        self.assertEqual(new_node.prev, dummy_head)
        self.assertEqual(new_node.next, self.node1)
        self.assertEqual(self.node1.prev, new_node)

    def test_insert_self(self):
        # Attempt to insert a node after itself
        with self.assertRaises(AttributeError):
            insert(self.node2, self.node2)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/doubly_linked_list_element_insertion/test_gpt_4o_2024_08_06_doubly_linked_list_element_insertion.py,CompileStatus.OK,0.0,64.58,65.38,0.28,12.0,,0.5907618999481201,12.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_doubly_linked_list_element_insertion', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/doubly_linked_list_element_insertion/test_gpt_4o_2024_08_06_doubly_linked_list_element_insertion.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_doubly_linked_list_element_insertion', 'obj': 'TestDoublyLinkedListElementInsertion', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 42, 'path': 'data/generated/docs_python/doubly_linked_list_element_insertion/test_gpt_4o_2024_08_06_doubly_linked_list_element_insertion.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_doubly_linked_list_element_insertion', 'obj': 'TestDoublyLinkedListElementInsertion.Node', 'line': 5, 'column': 4, 'endLine': 5, 'endColumn': 14, 'path': 'data/generated/docs_python/doubly_linked_list_element_insertion/test_gpt_4o_2024_08_06_doubly_linked_list_element_insertion.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'refactor', 'module': 'test_gpt_4o_2024_08_06_doubly_linked_list_element_insertion', 'obj': 'TestDoublyLinkedListElementInsertion.Node', 'line': 5, 'column': 4, 'endLine': 5, 'endColumn': 14, 'path': 'data/generated/docs_python/doubly_linked_list_element_insertion/test_gpt_4o_2024_08_06_doubly_linked_list_element_insertion.py', 'symbol': 'too-few-public-methods', 'message': 'Too few public methods (0/2)', 'message-id': 'R0903'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_doubly_linked_list_element_insertion', 'obj': 'TestDoublyLinkedListElementInsertion.test_insert_middle', 'line': 22, 'column': 4, 'endLine': 22, 'endColumn': 26, 'path': 'data/generated/docs_python/doubly_linked_list_element_insertion/test_gpt_4o_2024_08_06_doubly_linked_list_element_insertion.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_doubly_linked_list_element_insertion', 'obj': 'TestDoublyLinkedListElementInsertion.test_insert_middle', 'line': 25, 'column': 8, 'endLine': 25, 'endColumn': 14, 'path': 'data/generated/docs_python/doubly_linked_list_element_insertion/test_gpt_4o_2024_08_06_doubly_linked_list_element_insertion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'insert'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_doubly_linked_list_element_insertion', 'obj': 'TestDoublyLinkedListElementInsertion.test_insert_end', 'line': 33, 'column': 4, 'endLine': 33, 'endColumn': 23, 'path': 'data/generated/docs_python/doubly_linked_list_element_insertion/test_gpt_4o_2024_08_06_doubly_linked_list_element_insertion.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_doubly_linked_list_element_insertion', 'obj': 'TestDoublyLinkedListElementInsertion.test_insert_end', 'line': 36, 'column': 8, 'endLine': 36, 'endColumn': 14, 'path': 'data/generated/docs_python/doubly_linked_list_element_insertion/test_gpt_4o_2024_08_06_doubly_linked_list_element_insertion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'insert'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_doubly_linked_list_element_insertion', 'obj': 'TestDoublyLinkedListElementInsertion.test_insert_beginning', 'line': 43, 'column': 4, 'endLine': 43, 'endColumn': 29, 'path': 'data/generated/docs_python/doubly_linked_list_element_insertion/test_gpt_4o_2024_08_06_doubly_linked_list_element_insertion.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_doubly_linked_list_element_insertion', 'obj': 'TestDoublyLinkedListElementInsertion.test_insert_beginning', 'line': 51, 'column': 8, 'endLine': 51, 'endColumn': 14, 'path': 'data/generated/docs_python/doubly_linked_list_element_insertion/test_gpt_4o_2024_08_06_doubly_linked_list_element_insertion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'insert'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_doubly_linked_list_element_insertion', 'obj': 'TestDoublyLinkedListElementInsertion.test_insert_self', 'line': 59, 'column': 4, 'endLine': 59, 'endColumn': 24, 'path': 'data/generated/docs_python/doubly_linked_list_element_insertion/test_gpt_4o_2024_08_06_doubly_linked_list_element_insertion.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_doubly_linked_list_element_insertion', 'obj': 'TestDoublyLinkedListElementInsertion.test_insert_self', 'line': 62, 'column': 12, 'endLine': 62, 'endColumn': 18, 'path': 'data/generated/docs_python/doubly_linked_list_element_insertion/test_gpt_4o_2024_08_06_doubly_linked_list_element_insertion.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'insert'"", 'message-id': 'E0602'}]",False
Doubly-linked list/Traversal,"Traverse from the beginning of a doubly-linked list to the end, and from the end to the beginning.



See also

 Array
 Associative array: Creation, Iteration
 Collections
 Compound data type
 Doubly-linked list: Definition, Element definition, Element insertion, List Traversal, Element Removal
 Linked list
 Queue: Definition, Usage
 Set
 Singly-linked list: Element definition, Element insertion, List Traversal, Element Removal
 Stack

",Python,"class List:
    def __init__(self, data, next=None, prev=None):
        self.data = data
        self.next = next
        self.prev = prev
 
    def append(self, data):
        if self.next == None:
            self.next = List(data, None, self)
            return self.next
        else:
            return self.next.append(data)
 
# Build the list
tail = head = List(10)
for i in [ 20, 30, 40 ]:
    tail = tail.append(i)
 
# Traverse forwards
node = head
while node != None:
    print(node.data)
    node = node.next
 
# Traverse Backwards
node = tail
while node != None:
    print(node.data)
    node = node.prev",616,29,"import unittest
from io import StringIO
import sys
from doubly_linked_list_traversal import List

class TestDoublyLinkedListTraversal(unittest.TestCase):

    def setUp(self):
        # Build the list
        self.tail = self.head = List(10)
        for i in [20, 30, 40]:
            self.tail = self.tail.append(i)

    def test_traverse_forwards(self):
        # Capture the output
        captured_output = StringIO()
        sys.stdout = captured_output

        # Traverse forwards
        node = self.head
        while node is not None:
            print(node.data)
            node = node.next

        # Restore stdout
        sys.stdout = sys.__stdout__

        # Check the output
        self.assertEqual(captured_output.getvalue(), ""10\n20\n30\n40\n"")

    def test_traverse_backwards(self):
        # Capture the output
        captured_output = StringIO()
        sys.stdout = captured_output

        # Traverse backwards
        node = self.tail
        while node is not None:
            print(node.data)
            node = node.prev

        # Restore stdout
        sys.stdout = sys.__stdout__

        # Check the output
        self.assertEqual(captured_output.getvalue(), ""40\n30\n20\n10\n"")

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/doubly_linked_list_traversal/test_gpt_4o_2024_08_06_doubly_linked_list_traversal.py,CompileStatus.OK,0.0,96.0,93.94,0.07,0.67,100.0,0.5268359184265137,4.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_doubly_linked_list_traversal', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/doubly_linked_list_traversal/test_gpt_4o_2024_08_06_doubly_linked_list_traversal.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_doubly_linked_list_traversal', 'obj': 'TestDoublyLinkedListTraversal', 'line': 6, 'column': 0, 'endLine': 6, 'endColumn': 35, 'path': 'data/generated/docs_python/doubly_linked_list_traversal/test_gpt_4o_2024_08_06_doubly_linked_list_traversal.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_doubly_linked_list_traversal', 'obj': 'TestDoublyLinkedListTraversal.test_traverse_forwards', 'line': 14, 'column': 4, 'endLine': 14, 'endColumn': 30, 'path': 'data/generated/docs_python/doubly_linked_list_traversal/test_gpt_4o_2024_08_06_doubly_linked_list_traversal.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_doubly_linked_list_traversal', 'obj': 'TestDoublyLinkedListTraversal.test_traverse_backwards', 'line': 31, 'column': 4, 'endLine': 31, 'endColumn': 31, 'path': 'data/generated/docs_python/doubly_linked_list_traversal/test_gpt_4o_2024_08_06_doubly_linked_list_traversal.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Dragon curve,"

Create and display a dragon curve fractal.

(You may either display the curve directly or write it to an image file.)



Algorithms
Here are some brief notes the algorithms used and how they might suit various languages.

 Recursively a right curling dragon is a right dragon followed by a left dragon, at 90-degree angle. And a left dragon is a left followed by a right.
*---R----*     expands to     *       *
                               \     /
                                R   L
                                 \ /
                                  *

                                  *
                                 / \
                                L   R
                               /     \
*---L---*      expands to     *       *
 The co-routines dcl and dcr in various examples do this recursively to a desired expansion level.
 The curl direction right or left can be a parameter instead of two separate routines.
 Recursively, a curl direction can be eliminated by noting the dragon consists of two copies of itself drawn towards a central point at 45-degrees.
*------->*   becomes    *       *     Recursive copies drawn
                         \     /      from the ends towards
                          \   /       the centre.
                           v v
                            *
 This can be seen in the SVG example. This is best suited to off-line drawing since the reversal in the second half means the drawing jumps backward and forward (in binary reflected Gray code order) which is not very good for a plotter or for drawing progressively on screen.
 Successive approximation repeatedly re-writes each straight line as two new segments at a right angle,
                       *
*-----*   becomes     / \      bend to left
                     /   \     if N odd
                    *     *

                    *     *
*-----*   becomes    \   /     bend to right
                      \ /      if N even
                       *
 Numbering from the start of the curve built so far, if the segment is at an odd position then the bend introduced is on the right side. If the segment is an even position then on the left. The process is then repeated on the new doubled list of segments. This constructs a full set of line segments before any drawing.
 The effect of the splitting is a kind of bottom-up version of the recursions. See the Asymptote example for code doing this.
 Iteratively the curve always turns 90-degrees left or right at each point. The direction of the turn is given by the bit above the lowest 1-bit of n. Some bit-twiddling can extract that efficiently.
n = 1010110000
        ^
        bit above lowest 1-bit, turn left or right as 0 or 1

LowMask = n BITXOR (n-1)   # eg. giving 0000011111
AboveMask = LowMask + 1    # eg. giving 0000100000
BitAboveLowestOne = n BITAND AboveMask
 The first turn is at n=1, so reckon the curve starting at the origin as n=0 then a straight line segment to position n=1 and turn there.
 If you prefer to reckon the first turn as n=0 then take the bit above the lowest 0-bit instead. This works because ""...10000"" minus 1 is ""...01111"" so the lowest 0 in n-1 is where the lowest 1 in n is.
 Going by turns suits turtle graphics such as Logo or a plotter drawing with a pen and current direction.
 If a language doesn't maintain a ""current direction"" for drawing then you can always keep that separately and apply turns by bit-above-lowest-1.
 Absolute direction to move at point n can be calculated by the number of bit-transitions in n.
n = 11 00 1111 0 1
      ^  ^    ^ ^     4 places where change bit value
                      so direction=4*90degrees=East
 This can be calculated by counting the number of 1 bits in ""n XOR (n RIGHTSHIFT 1)"" since such a shift and xor leaves a single 1 bit at each position where two adjacent bits differ.
 Absolute X,Y coordinates of a point n can be calculated in complex numbers by some powers (i+1)^k and add/subtract/rotate. This is done in the gnuplot code. This might suit things similar to Gnuplot which want to calculate each point independently.
 Predicate test for whether a given X,Y point or segment is on the curve can be done. This might suit line-by-line output rather than building an entire image before printing. See M4 for an example of this.
 A predicate works by dividing out complex number i+1 until reaching the origin, so it takes roughly a bit at a time from X and Y is thus quite efficient. Why it works is slightly subtle but the calculation is not difficult. (Check segment by applying an offset to move X,Y to an ""even"" position before dividing i+1. Check vertex by whether the segment either East or West is on the curve.)
 The number of steps in the predicate corresponds to doublings of the curve, so stopping the check at say 8 steps can limit the curve drawn to 2^8=256 points. The offsets arising in the predicate are bits of n the segment number, so can note those bits to calculate n and limit to an arbitrary desired length or sub-section.
 As a Lindenmayer system of expansions. The simplest is two symbols F and S both straight lines, as used by the PGF code.
Axiom F, angle 90 degrees
F -> F+S
S -> F-S
This always has F at even positions and S at odd. Eg. after 3 levels F_S_F_S_F_S_F_S. The +/- turns in between bend to the left or right the same as the ""successive approximation"" method above. Read more at for instance Joel Castellanos' L-system page.

Variations are possible if you have only a single symbol for line draw, for example the Icon and Unicon and Xfractint code. The angles can also be broken into 45-degree parts to keep the expansion in a single direction rather than the endpoint rotating around.

The string rewrites can be done recursively without building the whole string, just follow its instructions at the target level. See for example C by IFS Drawing code. The effect is the same as ""recursive with parameter"" above but can draw other curves defined by L-systems.


",Python,"from turtle import *
 
def dragon(step, length):
    dcr(step, length)
 
def dcr(step, length):
    step -= 1
    length /= 1.41421
    if step > 0:
        right(45)
        dcr(step, length)
        left(90)
        dcl(step, length)
        right(45)
    else:
        right(45)
        forward(length)
        left(90)
        forward(length)
        right(45)
 
def dcl(step, length):
    step -= 1
    length /= 1.41421
 
    if step > 0:
        left(45)
        dcr(step, length)
        right(90)
        dcl(step, length)
        left(45)
    else:
        left(45)
        forward(length)
        right(90)
        forward(length)
        left(45)",658,37,"import unittest
from turtle import TurtleScreen, RawTurtle, ScrolledCanvas
from dragon_curve import dragon

class TestDragonCurve(unittest.TestCase):

    def setUp(self):
        # Set up a turtle screen for testing
        self.canvas = ScrolledCanvas()
        self.screen = TurtleScreen(self.canvas)
        self.turtle = RawTurtle(self.screen)

    def test_dragon_curve_zero_steps(self):
        # Test with 0 steps, should not move the turtle
        initial_position = self.turtle.position()
        dragon(0, 100)
        self.assertEqual(self.turtle.position(), initial_position)

    def test_dragon_curve_one_step(self):
        # Test with 1 step, should move the turtle
        initial_position = self.turtle.position()
        dragon(1, 100)
        self.assertNotEqual(self.turtle.position(), initial_position)

    def test_dragon_curve_two_steps(self):
        # Test with 2 steps, should move the turtle
        initial_position = self.turtle.position()
        dragon(2, 100)
        self.assertNotEqual(self.turtle.position(), initial_position)

    def test_dragon_curve_negative_steps(self):
        # Test with negative steps, should not move the turtle
        initial_position = self.turtle.position()
        dragon(-1, 100)
        self.assertEqual(self.turtle.position(), initial_position)

    def test_dragon_curve_large_steps(self):
        # Test with a large number of steps
        initial_position = self.turtle.position()
        dragon(10, 100)
        self.assertNotEqual(self.turtle.position(), initial_position)

    def tearDown(self):
        # Clean up the turtle screen after each test
        self.screen.bye()

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/dragon_curve/test_gpt_4o_2024_08_06_dragon_curve.py,CompileStatus.OK,0.0,26.98,26.09,0.16,1.0,,0.6021790504455566,9.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_dragon_curve', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/dragon_curve/test_gpt_4o_2024_08_06_dragon_curve.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_dragon_curve', 'obj': 'TestDragonCurve', 'line': 5, 'column': 0, 'endLine': 5, 'endColumn': 21, 'path': 'data/generated/docs_python/dragon_curve/test_gpt_4o_2024_08_06_dragon_curve.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_dragon_curve', 'obj': 'TestDragonCurve.setUp', 'line': 9, 'column': 22, 'endLine': 9, 'endColumn': 38, 'path': 'data/generated/docs_python/dragon_curve/test_gpt_4o_2024_08_06_dragon_curve.py', 'symbol': 'no-value-for-parameter', 'message': ""No value for argument 'master' in constructor call"", 'message-id': 'E1120'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_dragon_curve', 'obj': 'TestDragonCurve.test_dragon_curve_zero_steps', 'line': 13, 'column': 4, 'endLine': 13, 'endColumn': 36, 'path': 'data/generated/docs_python/dragon_curve/test_gpt_4o_2024_08_06_dragon_curve.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_dragon_curve', 'obj': 'TestDragonCurve.test_dragon_curve_one_step', 'line': 19, 'column': 4, 'endLine': 19, 'endColumn': 34, 'path': 'data/generated/docs_python/dragon_curve/test_gpt_4o_2024_08_06_dragon_curve.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_dragon_curve', 'obj': 'TestDragonCurve.test_dragon_curve_two_steps', 'line': 25, 'column': 4, 'endLine': 25, 'endColumn': 35, 'path': 'data/generated/docs_python/dragon_curve/test_gpt_4o_2024_08_06_dragon_curve.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_dragon_curve', 'obj': 'TestDragonCurve.test_dragon_curve_negative_steps', 'line': 31, 'column': 4, 'endLine': 31, 'endColumn': 40, 'path': 'data/generated/docs_python/dragon_curve/test_gpt_4o_2024_08_06_dragon_curve.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_dragon_curve', 'obj': 'TestDragonCurve.test_dragon_curve_large_steps', 'line': 37, 'column': 4, 'endLine': 37, 'endColumn': 37, 'path': 'data/generated/docs_python/dragon_curve/test_gpt_4o_2024_08_06_dragon_curve.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_dragon_curve', 'obj': 'TestDragonCurve.tearDown', 'line': 45, 'column': 8, 'endLine': 45, 'endColumn': 23, 'path': 'data/generated/docs_python/dragon_curve/test_gpt_4o_2024_08_06_dragon_curve.py', 'symbol': 'no-member', 'message': ""Instance of 'TurtleScreen' has no 'bye' member"", 'message-id': 'E1101'}]",False
Draw a cuboid,"Task

Draw a   cuboid   with relative dimensions of    2 × 3 × 4.



The cuboid can be represented graphically, or in   ASCII art,   depending on the language capabilities.

To fulfill the criteria of being a cuboid, three faces must be visible.

Either static or rotational projection is acceptable for this task.



Related tasks
 draw a sphere
 draw a rotating cube
 write language name in 3D ASCII
 draw a Deathstar

",Python,"def _pr(t, x, y, z):
    txt = '\n'.join(''.join(t[(n,m)] for n in range(3+x+z)).rstrip()
                    for m in reversed(range(3+y+z)))
    return txt
 
def cuboid(x,y,z):
    t = {(n,m):' ' for n in range(3+x+z) for m in range(3+y+z)}
    xrow = ['+'] + ['%i' % (i % 10) for i in range(x)] + ['+']
    for i,ch in enumerate(xrow):
        t[(i,0)] = t[(i,1+y)] = t[(1+z+i,2+y+z)] = ch
    if _debug: print(_pr(t, x, y, z))
    ycol = ['+'] + ['%i' % (j % 10) for j in range(y)] + ['+']
    for j,ch in enumerate(ycol):
        t[(0,j)] = t[(x+1,j)] = t[(2+x+z,1+z+j)] = ch
    zdepth = ['+'] + ['%i' % (k % 10) for k in range(z)] + ['+']
    if _debug: print(_pr(t, x, y, z))
    for k,ch in enumerate(zdepth):
        t[(k,1+y+k)] = t[(1+x+k,1+y+k)] = t[(1+x+k,k)] = ch
 
    return _pr(t, x, y, z)
 
 
_debug = False
if __name__ == '__main__':
    for dim in ((2,3,4), (3,4,2), (4,2,3)):
        print(""CUBOID%r"" % (dim,), cuboid(*dim), sep='\n')",956,26,"import unittest
from draw_a_cuboid import cuboid

class TestCuboidDrawing(unittest.TestCase):

    def test_cuboid_2_3_4(self):
        expected_output = (
            ""    +--+\n""
            ""   /  /|\n""
            ""  /  / |\n""
            "" /  /  |\n""
            ""+--+   |\n""
            ""|  |   +\n""
            ""|  |  /\n""
            ""|  | /\n""
            ""+--+""
        )
        self.assertEqual(cuboid(2, 3, 4), expected_output)

    def test_cuboid_3_4_2(self):
        expected_output = (
            ""    +---+\n""
            ""   /   /|\n""
            ""  /   / |\n""
            "" /   /  |\n""
            ""+---+   |\n""
            ""|   |   +\n""
            ""|   |  /\n""
            ""|   | /\n""
            ""+---+""
        )
        self.assertEqual(cuboid(3, 4, 2), expected_output)

    def test_cuboid_4_2_3(self):
        expected_output = (
            ""    +----+\n""
            ""   /    /|\n""
            ""  /    / |\n""
            "" /    /  |\n""
            ""+----+   |\n""
            ""|    |   +\n""
            ""|    |  /\n""
            ""|    | /\n""
            ""+----+""
        )
        self.assertEqual(cuboid(4, 2, 3), expected_output)

    def test_cuboid_0_0_0(self):
        expected_output = (
            ""+\n""
            ""|\n""
            ""+""
        )
        self.assertEqual(cuboid(0, 0, 0), expected_output)

    def test_cuboid_1_1_1(self):
        expected_output = (
            ""  +\n""
            "" /|\n""
            ""+ |\n""
            ""| +\n""
            ""|/\n""
            ""+""
        )
        self.assertEqual(cuboid(1, 1, 1), expected_output)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/draw_a_cuboid/test_gpt_4o_2024_08_06_draw_a_cuboid.py,CompileStatus.OK,0.0,92.68,88.89,0.25,0.36,,0.5967960357666016,7.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_draw_a_cuboid', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/draw_a_cuboid/test_gpt_4o_2024_08_06_draw_a_cuboid.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_draw_a_cuboid', 'obj': 'TestCuboidDrawing', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 23, 'path': 'data/generated/docs_python/draw_a_cuboid/test_gpt_4o_2024_08_06_draw_a_cuboid.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_draw_a_cuboid', 'obj': 'TestCuboidDrawing.test_cuboid_2_3_4', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 25, 'path': 'data/generated/docs_python/draw_a_cuboid/test_gpt_4o_2024_08_06_draw_a_cuboid.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_draw_a_cuboid', 'obj': 'TestCuboidDrawing.test_cuboid_3_4_2', 'line': 20, 'column': 4, 'endLine': 20, 'endColumn': 25, 'path': 'data/generated/docs_python/draw_a_cuboid/test_gpt_4o_2024_08_06_draw_a_cuboid.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_draw_a_cuboid', 'obj': 'TestCuboidDrawing.test_cuboid_4_2_3', 'line': 34, 'column': 4, 'endLine': 34, 'endColumn': 25, 'path': 'data/generated/docs_python/draw_a_cuboid/test_gpt_4o_2024_08_06_draw_a_cuboid.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_draw_a_cuboid', 'obj': 'TestCuboidDrawing.test_cuboid_0_0_0', 'line': 48, 'column': 4, 'endLine': 48, 'endColumn': 25, 'path': 'data/generated/docs_python/draw_a_cuboid/test_gpt_4o_2024_08_06_draw_a_cuboid.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_draw_a_cuboid', 'obj': 'TestCuboidDrawing.test_cuboid_1_1_1', 'line': 56, 'column': 4, 'endLine': 56, 'endColumn': 25, 'path': 'data/generated/docs_python/draw_a_cuboid/test_gpt_4o_2024_08_06_draw_a_cuboid.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Draw a pixel,"Task

Create a window and draw a pixel in it, subject to the following:

  the window is 320 x 240
  the color of the pixel must be red (255,0,0)
  the position of the pixel is x = 100, y = 100",Python,"from PIL import Image
 
img = Image.new('RGB', (320, 240))
pixels = img.load()
pixels[100,100] = (255,0,0)
img.show()
 ",119,7,"import unittest
from PIL import Image

class TestDrawAPixel(unittest.TestCase):
    def setUp(self):
        # Create the image as done in draw_a_pixel.py
        self.img = Image.new('RGB', (320, 240))
        self.pixels = self.img.load()
        self.pixels[100, 100] = (255, 0, 0)

    def test_window_size(self):
        # Test if the window size is 320 x 240
        self.assertEqual(self.img.size, (320, 240))

    def test_pixel_color(self):
        # Test if the pixel at (100, 100) is red
        self.assertEqual(self.pixels[100, 100], (255, 0, 0))

    def test_other_pixels(self):
        # Test if other pixels are not red
        for x in range(320):
            for y in range(240):
                if (x, y) != (100, 100):
                    self.assertNotEqual(self.pixels[x, y], (255, 0, 0))

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/draw_a_pixel/test_gpt_4o_2024_08_06_draw_a_pixel.py,CompileStatus.OK,0.0,73.91,77.42,0.17,,100.0,0.5570461750030518,5.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_draw_a_pixel', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/draw_a_pixel/test_gpt_4o_2024_08_06_draw_a_pixel.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_draw_a_pixel', 'obj': 'TestDrawAPixel', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 20, 'path': 'data/generated/docs_python/draw_a_pixel/test_gpt_4o_2024_08_06_draw_a_pixel.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_draw_a_pixel', 'obj': 'TestDrawAPixel.test_window_size', 'line': 11, 'column': 4, 'endLine': 11, 'endColumn': 24, 'path': 'data/generated/docs_python/draw_a_pixel/test_gpt_4o_2024_08_06_draw_a_pixel.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_draw_a_pixel', 'obj': 'TestDrawAPixel.test_pixel_color', 'line': 15, 'column': 4, 'endLine': 15, 'endColumn': 24, 'path': 'data/generated/docs_python/draw_a_pixel/test_gpt_4o_2024_08_06_draw_a_pixel.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_draw_a_pixel', 'obj': 'TestDrawAPixel.test_other_pixels', 'line': 19, 'column': 4, 'endLine': 19, 'endColumn': 25, 'path': 'data/generated/docs_python/draw_a_pixel/test_gpt_4o_2024_08_06_draw_a_pixel.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Draw a sphere,"Task

Draw a sphere.

The sphere can be represented graphically, or in ASCII art, depending on the language capabilities.

Either static or rotational projection is acceptable for this task.



Related tasks

 draw a cuboid
 draw a rotating cube
 write language name in 3D ASCII
 draw a Deathstar

",Python,"import math
 
shades = ('.',':','!','*','o','e','&','#','%','@')
 
def normalize(v):
	len = math.sqrt(v[0]**2 + v[1]**2 + v[2]**2)
	return (v[0]/len, v[1]/len, v[2]/len)
 
def dot(x,y):
	d = x[0]*y[0] + x[1]*y[1] + x[2]*y[2]
	return -d if d < 0 else 0
 
def draw_sphere(r, k, ambient, light):
	for i in range(int(math.floor(-r)),int(math.ceil(r)+1)):
		x = i + 0.5
		line = ''
 
		for j in range(int(math.floor(-2*r)),int(math.ceil(2*r)+1)):
			y = j/2 + 0.5
			if x*x + y*y <= r*r:
				vec = normalize((x,y,math.sqrt(r*r - x*x - y*y)))
				b = dot(light,vec)**k + ambient
				intensity = int((1-b)*(len(shades)-1))
				line += shades[intensity] if 0 <= intensity < len(shades) else shades[0]
			else:
				line += ' '
 
		print(line)
 
light = normalize((30,30,-50))
draw_sphere(20,4,0.1, light)
draw_sphere(10,2,0.4, light)",824,32,"import unittest
from draw_a_sphere import normalize, dot, draw_sphere

class TestDrawSphere(unittest.TestCase):

    def test_normalize(self):
        # Test normalization of a vector
        self.assertEqual(normalize((3, 0, 0)), (1.0, 0.0, 0.0))
        self.assertEqual(normalize((0, 4, 0)), (0.0, 1.0, 0.0))
        self.assertEqual(normalize((0, 0, 5)), (0.0, 0.0, 1.0))
        self.assertAlmostEqual(normalize((1, 1, 1))[0], 1/math.sqrt(3))
        self.assertAlmostEqual(normalize((1, 1, 1))[1], 1/math.sqrt(3))
        self.assertAlmostEqual(normalize((1, 1, 1))[2], 1/math.sqrt(3))

    def test_dot(self):
        # Test dot product calculation
        self.assertEqual(dot((1, 0, 0), (1, 0, 0)), 0)
        self.assertEqual(dot((0, 1, 0), (0, 1, 0)), 0)
        self.assertEqual(dot((0, 0, 1), (0, 0, 1)), 0)
        self.assertEqual(dot((1, 0, 0), (-1, 0, 0)), 1)
        self.assertEqual(dot((1, 1, 1), (-1, -1, -1)), 3)

    def test_draw_sphere(self):
        # Test drawing a sphere with different parameters
        # Since draw_sphere prints to console, we will capture the output
        import io
        import sys

        # Capture the output of draw_sphere
        captured_output = io.StringIO()
        sys.stdout = captured_output
        draw_sphere(1, 1, 0.1, normalize((1, 1, -1)))
        sys.stdout = sys.__stdout__

        # Check if the output is not empty
        self.assertTrue(len(captured_output.getvalue()) > 0)

        # Check if the output contains expected characters
        output = captured_output.getvalue()
        self.assertIn('.', output)
        self.assertIn(':', output)
        self.assertIn('!', output)
        self.assertIn('*', output)
        self.assertIn('o', output)
        self.assertIn('e', output)
        self.assertIn('&', output)
        self.assertIn('#', output)
        self.assertIn('%', output)
        self.assertIn('@', output)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/draw_a_sphere/test_gpt_4o_2024_08_06_draw_a_sphere.py,CompileStatus.OK,0.0,83.61,84.06,0.59,2.75,33.33,0.5712921619415283,10.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_draw_a_sphere', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/draw_a_sphere/test_gpt_4o_2024_08_06_draw_a_sphere.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_draw_a_sphere', 'obj': 'TestDrawSphere', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 20, 'path': 'data/generated/docs_python/draw_a_sphere/test_gpt_4o_2024_08_06_draw_a_sphere.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_draw_a_sphere', 'obj': 'TestDrawSphere.test_normalize', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 22, 'path': 'data/generated/docs_python/draw_a_sphere/test_gpt_4o_2024_08_06_draw_a_sphere.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_draw_a_sphere', 'obj': 'TestDrawSphere.test_normalize', 'line': 11, 'column': 58, 'endLine': 11, 'endColumn': 62, 'path': 'data/generated/docs_python/draw_a_sphere/test_gpt_4o_2024_08_06_draw_a_sphere.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'math'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_draw_a_sphere', 'obj': 'TestDrawSphere.test_normalize', 'line': 12, 'column': 58, 'endLine': 12, 'endColumn': 62, 'path': 'data/generated/docs_python/draw_a_sphere/test_gpt_4o_2024_08_06_draw_a_sphere.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'math'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_draw_a_sphere', 'obj': 'TestDrawSphere.test_normalize', 'line': 13, 'column': 58, 'endLine': 13, 'endColumn': 62, 'path': 'data/generated/docs_python/draw_a_sphere/test_gpt_4o_2024_08_06_draw_a_sphere.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'math'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_draw_a_sphere', 'obj': 'TestDrawSphere.test_dot', 'line': 15, 'column': 4, 'endLine': 15, 'endColumn': 16, 'path': 'data/generated/docs_python/draw_a_sphere/test_gpt_4o_2024_08_06_draw_a_sphere.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_draw_a_sphere', 'obj': 'TestDrawSphere.test_draw_sphere', 'line': 23, 'column': 4, 'endLine': 23, 'endColumn': 24, 'path': 'data/generated/docs_python/draw_a_sphere/test_gpt_4o_2024_08_06_draw_a_sphere.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_draw_a_sphere', 'obj': 'TestDrawSphere.test_draw_sphere', 'line': 26, 'column': 8, 'endLine': 26, 'endColumn': 17, 'path': 'data/generated/docs_python/draw_a_sphere/test_gpt_4o_2024_08_06_draw_a_sphere.py', 'symbol': 'import-outside-toplevel', 'message': 'Import outside toplevel (io)', 'message-id': 'C0415'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_draw_a_sphere', 'obj': 'TestDrawSphere.test_draw_sphere', 'line': 27, 'column': 8, 'endLine': 27, 'endColumn': 18, 'path': 'data/generated/docs_python/draw_a_sphere/test_gpt_4o_2024_08_06_draw_a_sphere.py', 'symbol': 'import-outside-toplevel', 'message': 'Import outside toplevel (sys)', 'message-id': 'C0415'}]",False
Dutch national flag problem,"
The Dutch national flag is composed of three coloured bands in the order:

   red     (top)
   then white,   and
   lastly blue   (at the bottom).


The problem posed by Edsger Dijkstra is:

Given a number of red, blue and white balls in random order, arrange them in the order of the colours in the Dutch national flag.
When the problem was first posed, Dijkstra then went on to successively refine a solution, minimising the number of swaps and the number of times the colour of a ball needed to determined and restricting the balls to end in an array, ...



Task
 Generate a randomized order of balls ensuring that they are not in the order of the Dutch national flag.
 Sort the balls in a way idiomatic to your language.
 Check the sorted balls are in the order of the Dutch national flag.


C.f.

 Dutch national flag problem
 Probabilistic analysis of algorithms for the Dutch national flag problem by Wei-Mei Chen. (pdf)

",Python,"import random
 
colours_in_order = 'Red White Blue'.split()
 
def dutch_flag_sort(items, order=colours_in_order):
    'return sort of items using the given order'
    reverse_index = dict((x,i) for i,x in enumerate(order))
    return sorted(items, key=lambda x: reverse_index[x])
 
def dutch_flag_check(items, order=colours_in_order):
    'Return True if each item of items is in the given order'
    reverse_index = dict((x,i) for i,x in enumerate(order))
    order_of_items = [reverse_index[item] for item in items]
    return all(x <= y for x, y in zip(order_of_items, order_of_items[1:]))
 
def random_balls(mx=5):
    'Select from 1 to mx balls of each colour, randomly'
    balls = sum([[colour] * random.randint(1, mx)
                 for colour in colours_in_order], [])
    random.shuffle(balls)
    return balls
 
def main():
    # Ensure we start unsorted
    while True:
        balls = random_balls()
        if not dutch_flag_check(balls):
            break
    print(""Original Ball order:"", balls)
    sorted_balls = dutch_flag_sort(balls)
    print(""Sorted Ball Order:"", sorted_balls)
    assert dutch_flag_check(sorted_balls), 'Whoops. Not sorted!'
 
if __name__ == '__main__':
    main()",1206,35,"import unittest
from dutch_national_flag_problem import dutch_flag_sort, dutch_flag_check, random_balls, colours_in_order

class TestDutchNationalFlagProblem(unittest.TestCase):

    def test_dutch_flag_sort(self):
        # Test sorting with a known unsorted list
        unsorted_balls = ['Blue', 'Red', 'White', 'Red', 'Blue', 'White']
        expected_sorted_balls = ['Red', 'Red', 'White', 'White', 'Blue', 'Blue']
        self.assertEqual(dutch_flag_sort(unsorted_balls), expected_sorted_balls)

        # Test sorting with an already sorted list
        sorted_balls = ['Red', 'Red', 'White', 'White', 'Blue', 'Blue']
        self.assertEqual(dutch_flag_sort(sorted_balls), sorted_balls)

    def test_dutch_flag_check(self):
        # Test with a sorted list
        sorted_balls = ['Red', 'Red', 'White', 'White', 'Blue', 'Blue']
        self.assertTrue(dutch_flag_check(sorted_balls))

        # Test with an unsorted list
        unsorted_balls = ['Blue', 'Red', 'White', 'Red', 'Blue', 'White']
        self.assertFalse(dutch_flag_check(unsorted_balls))

    def test_random_balls(self):
        # Test that random_balls generates a list that is not sorted
        for _ in range(10):  # Run multiple times to ensure randomness
            balls = random_balls()
            self.assertFalse(dutch_flag_check(balls), ""Generated balls should not be sorted"")

    def test_integration(self):
        # Test the integration of random_balls, dutch_flag_sort, and dutch_flag_check
        for _ in range(10):  # Run multiple times to ensure robustness
            balls = random_balls()
            sorted_balls = dutch_flag_sort(balls)
            self.assertTrue(dutch_flag_check(sorted_balls), ""Sorted balls should be in the correct order"")

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/dutch_national_flag_problem/test_gpt_4o_2024_08_06_dutch_national_flag_problem.py,CompileStatus.OK,0.0,79.59,80.28,0.24,0.55,100.0,0.483865737915039,9.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_dutch_national_flag_problem', 'obj': '', 'line': 2, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/dutch_national_flag_problem/test_gpt_4o_2024_08_06_dutch_national_flag_problem.py', 'symbol': 'line-too-long', 'message': 'Line too long (105/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_dutch_national_flag_problem', 'obj': '', 'line': 36, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/dutch_national_flag_problem/test_gpt_4o_2024_08_06_dutch_national_flag_problem.py', 'symbol': 'line-too-long', 'message': 'Line too long (106/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_dutch_national_flag_problem', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/dutch_national_flag_problem/test_gpt_4o_2024_08_06_dutch_national_flag_problem.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_dutch_national_flag_problem', 'obj': 'TestDutchNationalFlagProblem', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 34, 'path': 'data/generated/docs_python/dutch_national_flag_problem/test_gpt_4o_2024_08_06_dutch_national_flag_problem.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_dutch_national_flag_problem', 'obj': 'TestDutchNationalFlagProblem.test_dutch_flag_sort', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 28, 'path': 'data/generated/docs_python/dutch_national_flag_problem/test_gpt_4o_2024_08_06_dutch_national_flag_problem.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_dutch_national_flag_problem', 'obj': 'TestDutchNationalFlagProblem.test_dutch_flag_check', 'line': 16, 'column': 4, 'endLine': 16, 'endColumn': 29, 'path': 'data/generated/docs_python/dutch_national_flag_problem/test_gpt_4o_2024_08_06_dutch_national_flag_problem.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_dutch_national_flag_problem', 'obj': 'TestDutchNationalFlagProblem.test_random_balls', 'line': 25, 'column': 4, 'endLine': 25, 'endColumn': 25, 'path': 'data/generated/docs_python/dutch_national_flag_problem/test_gpt_4o_2024_08_06_dutch_national_flag_problem.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_dutch_national_flag_problem', 'obj': 'TestDutchNationalFlagProblem.test_integration', 'line': 31, 'column': 4, 'endLine': 31, 'endColumn': 24, 'path': 'data/generated/docs_python/dutch_national_flag_problem/test_gpt_4o_2024_08_06_dutch_national_flag_problem.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_dutch_national_flag_problem', 'obj': '', 'line': 2, 'column': 0, 'endLine': 2, 'endColumn': 105, 'path': 'data/generated/docs_python/dutch_national_flag_problem/test_gpt_4o_2024_08_06_dutch_national_flag_problem.py', 'symbol': 'unused-import', 'message': 'Unused colours_in_order imported from dutch_national_flag_problem', 'message-id': 'W0611'}]",False
EKG sequence convergence,"The sequence is from the natural numbers and is defined by:

 a(1) = 1;
 a(2) = Start = 2;
 for n > 2, a(n) shares at least one prime factor with a(n-1) and is the smallest such natural number not already used.

The sequence is called the EKG sequence (after its visual similarity to an electrocardiogram when graphed).

Variants of the sequence can be generated starting 1, N where N is any natural number larger than one. For the purposes of this task let us call:

 The sequence described above , starting 1, 2, ... the EKG(2) sequence;
 the sequence starting 1, 3, ... the EKG(3) sequence;
 ... the sequence starting 1, N, ... the EKG(N) sequence.


Convergence
If an algorithm that keeps track of the minimum amount of numbers and their corresponding prime factors used to generate the next term is used, then this may be known as the generators essential state. Two EKG generators with differing starts can converge to produce the same sequence after initial differences.

EKG(N1) and EKG(N2) are said to to have converged at and after generation a(c) if state_of(EKG(N1).a(c)) == state_of(EKG(N2).a(c)).



Task

 Calculate and show here the first 10 members of EKG(2).
 Calculate and show here the first 10 members of EKG(5).
 Calculate and show here the first 10 members of EKG(7).
 Calculate and show here the first 10 members of EKG(9).
 Calculate and show here the first 10 members of EKG(10).
 Calculate and show here at which term EKG(5) and EKG(7) converge   (stretch goal).
Related Tasks

 Greatest common divisor
 Sieve of Eratosthenes


Reference

 The EKG Sequence and the Tree of Numbers. (Video).

",Python,"from itertools import count, islice, takewhile
from math import gcd
 
def EKG_gen(start=2):
    """"""\
    Generate the next term of the EKG together with the minimum cache of
    numbers left in its production; (the ""state"" of the generator).
    Using math.gcd
    """"""
    c = count(start + 1)
    last, so_far = start, list(range(2, start))
    yield 1, []
    yield last, []
    while True:
        for index, sf in enumerate(so_far):
            if gcd(last, sf) > 1:
                last = so_far.pop(index)
                yield last, so_far[::]
                break
        else:
            so_far.append(next(c))
 
def find_convergence(ekgs=(5,7)):
    ""Returns the convergence point or zero if not found within the limit""
    ekg = [EKG_gen(n) for n in ekgs]
    for e in ekg:
        next(e)    # skip initial 1 in each sequence
    return 2 + len(list(takewhile(lambda state: not all(state[0] == s for  s in state[1:]),
                                  zip(*ekg))))
 
if __name__ == '__main__':
    for start in 2, 5, 7, 9, 10:
        print(f""EKG({start}):"", str([n[0] for n in islice(EKG_gen(start), 10)])[1: -1])
    print(f""\nEKG(5) and EKG(7) converge at term {find_convergence(ekgs=(5,7))}!"")",1212,34,"import unittest
from itertools import islice

# Assuming the functions EKG_gen and find_convergence are imported from ekg_sequence_convergence.py

class TestEKGSequence(unittest.TestCase):

    def test_ekg_2(self):
        expected_ekg_2 = [1, 2, 4, 6, 3, 9, 12, 8, 10, 5]
        generated_ekg_2 = [n[0] for n in islice(EKG_gen(2), 10)]
        self.assertEqual(generated_ekg_2, expected_ekg_2)

    def test_ekg_5(self):
        expected_ekg_5 = [1, 5, 10, 2, 4, 8, 6, 3, 9, 12]
        generated_ekg_5 = [n[0] for n in islice(EKG_gen(5), 10)]
        self.assertEqual(generated_ekg_5, expected_ekg_5)

    def test_ekg_7(self):
        expected_ekg_7 = [1, 7, 14, 2, 4, 8, 6, 3, 9, 12]
        generated_ekg_7 = [n[0] for n in islice(EKG_gen(7), 10)]
        self.assertEqual(generated_ekg_7, expected_ekg_7)

    def test_ekg_9(self):
        expected_ekg_9 = [1, 9, 3, 6, 2, 4, 8, 10, 5, 15]
        generated_ekg_9 = [n[0] for n in islice(EKG_gen(9), 10)]
        self.assertEqual(generated_ekg_9, expected_ekg_9)

    def test_ekg_10(self):
        expected_ekg_10 = [1, 10, 5, 15, 3, 9, 6, 2, 4, 8]
        generated_ekg_10 = [n[0] for n in islice(EKG_gen(10), 10)]
        self.assertEqual(generated_ekg_10, expected_ekg_10)

    def test_convergence_5_and_7(self):
        expected_convergence_term = 8
        convergence_term = find_convergence(ekgs=(5, 7))
        self.assertEqual(convergence_term, expected_convergence_term)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/ekg_sequence_convergence/test_gpt_4o_2024_08_06_ekg_sequence_convergence.py,CompileStatus.OK,0.0,42.31,28.75,0.21,0.75,,0.6157400608062744,15.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_ekg_sequence_convergence', 'obj': '', 'line': 7, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/ekg_sequence_convergence/test_gpt_4o_2024_08_06_ekg_sequence_convergence.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_ekg_sequence_convergence', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/ekg_sequence_convergence/test_gpt_4o_2024_08_06_ekg_sequence_convergence.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_ekg_sequence_convergence', 'obj': 'TestEKGSequence', 'line': 6, 'column': 0, 'endLine': 6, 'endColumn': 21, 'path': 'data/generated/docs_python/ekg_sequence_convergence/test_gpt_4o_2024_08_06_ekg_sequence_convergence.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_ekg_sequence_convergence', 'obj': 'TestEKGSequence.test_ekg_2', 'line': 8, 'column': 4, 'endLine': 8, 'endColumn': 18, 'path': 'data/generated/docs_python/ekg_sequence_convergence/test_gpt_4o_2024_08_06_ekg_sequence_convergence.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_ekg_sequence_convergence', 'obj': 'TestEKGSequence.test_ekg_2', 'line': 10, 'column': 48, 'endLine': 10, 'endColumn': 55, 'path': 'data/generated/docs_python/ekg_sequence_convergence/test_gpt_4o_2024_08_06_ekg_sequence_convergence.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'EKG_gen'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_ekg_sequence_convergence', 'obj': 'TestEKGSequence.test_ekg_5', 'line': 13, 'column': 4, 'endLine': 13, 'endColumn': 18, 'path': 'data/generated/docs_python/ekg_sequence_convergence/test_gpt_4o_2024_08_06_ekg_sequence_convergence.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_ekg_sequence_convergence', 'obj': 'TestEKGSequence.test_ekg_5', 'line': 15, 'column': 48, 'endLine': 15, 'endColumn': 55, 'path': 'data/generated/docs_python/ekg_sequence_convergence/test_gpt_4o_2024_08_06_ekg_sequence_convergence.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'EKG_gen'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_ekg_sequence_convergence', 'obj': 'TestEKGSequence.test_ekg_7', 'line': 18, 'column': 4, 'endLine': 18, 'endColumn': 18, 'path': 'data/generated/docs_python/ekg_sequence_convergence/test_gpt_4o_2024_08_06_ekg_sequence_convergence.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_ekg_sequence_convergence', 'obj': 'TestEKGSequence.test_ekg_7', 'line': 20, 'column': 48, 'endLine': 20, 'endColumn': 55, 'path': 'data/generated/docs_python/ekg_sequence_convergence/test_gpt_4o_2024_08_06_ekg_sequence_convergence.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'EKG_gen'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_ekg_sequence_convergence', 'obj': 'TestEKGSequence.test_ekg_9', 'line': 23, 'column': 4, 'endLine': 23, 'endColumn': 18, 'path': 'data/generated/docs_python/ekg_sequence_convergence/test_gpt_4o_2024_08_06_ekg_sequence_convergence.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_ekg_sequence_convergence', 'obj': 'TestEKGSequence.test_ekg_9', 'line': 25, 'column': 48, 'endLine': 25, 'endColumn': 55, 'path': 'data/generated/docs_python/ekg_sequence_convergence/test_gpt_4o_2024_08_06_ekg_sequence_convergence.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'EKG_gen'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_ekg_sequence_convergence', 'obj': 'TestEKGSequence.test_ekg_10', 'line': 28, 'column': 4, 'endLine': 28, 'endColumn': 19, 'path': 'data/generated/docs_python/ekg_sequence_convergence/test_gpt_4o_2024_08_06_ekg_sequence_convergence.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_ekg_sequence_convergence', 'obj': 'TestEKGSequence.test_ekg_10', 'line': 30, 'column': 49, 'endLine': 30, 'endColumn': 56, 'path': 'data/generated/docs_python/ekg_sequence_convergence/test_gpt_4o_2024_08_06_ekg_sequence_convergence.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'EKG_gen'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_ekg_sequence_convergence', 'obj': 'TestEKGSequence.test_convergence_5_and_7', 'line': 33, 'column': 4, 'endLine': 33, 'endColumn': 32, 'path': 'data/generated/docs_python/ekg_sequence_convergence/test_gpt_4o_2024_08_06_ekg_sequence_convergence.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_ekg_sequence_convergence', 'obj': 'TestEKGSequence.test_convergence_5_and_7', 'line': 35, 'column': 27, 'endLine': 35, 'endColumn': 43, 'path': 'data/generated/docs_python/ekg_sequence_convergence/test_gpt_4o_2024_08_06_ekg_sequence_convergence.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'find_convergence'"", 'message-id': 'E0602'}]",False
Eertree,"An eertree is a data structure designed for efficient processing of certain palindrome tasks, for instance counting the number of sub-palindromes in an input string.

The data structure has commonalities to both tries and suffix trees.
  See links below.



Task

Construct an eertree for the string ""eertree"", then output all sub-palindromes by traversing the tree.



See also

   Wikipedia entry:   trie.
   Wikipedia entry:   suffix tree
   Cornell University Library, Computer Science, Data Structures and Algorithms ───► EERTREE: An Efficient Data Structure for Processing Palindromes in Strings.

",Python,"#!/bin/python
from __future__ import print_function
 
class Node(object):
	def __init__(self):
		self.edges = {} # edges (or forward links)
		self.link = None # suffix link (backward links)
		self.len = 0 # the length of the node
 
class Eertree(object):
	def __init__(self):
		self.nodes = []
		# two initial root nodes
		self.rto = Node() #odd length root node, or node -1
		self.rte = Node() #even length root node, or node 0
 
		# Initialize empty tree
		self.rto.link = self.rte.link = self.rto;
		self.rto.len = -1
		self.rte.len = 0
		self.S = [0] # accumulated input string, T=S[1..i]
		self.maxSufT = self.rte # maximum suffix of tree T
 
	def get_max_suffix_pal(self, startNode, a):
		# We traverse the suffix-palindromes of T in the order of decreasing length.
		# For each palindrome we read its length k and compare T[i-k] against a
		# until we get an equality or arrive at the -1 node.
		u = startNode
		i = len(self.S)
		k = u.len
		while id(u) != id(self.rto) and self.S[i - k - 1] != a:
			assert id(u) != id(u.link) #Prevent infinte loop
			u = u.link
			k = u.len
 
		return u
 
	def add(self, a):
 
		# We need to find the maximum suffix-palindrome P of Ta
		# Start by finding maximum suffix-palindrome Q of T.
		# To do this, we traverse the suffix-palindromes of T
		# in the order of decreasing length, starting with maxSuf(T)
		Q = self.get_max_suffix_pal(self.maxSufT, a)
 
		# We check Q to see whether it has an outgoing edge labeled by a.
		createANewNode = not a in Q.edges
 
		if createANewNode:
			# We create the node P of length Q+2
			P = Node()
			self.nodes.append(P)
			P.len = Q.len + 2
			if P.len == 1:
				# if P = a, create the suffix link (P,0)
				P.link = self.rte
			else:
				# It remains to create the suffix link from P if |P|>1. Just
				# continue traversing suffix-palindromes of T starting with the suffix
				# link of Q.
				P.link = self.get_max_suffix_pal(Q.link, a).edges[a]
 
			# create the edge (Q,P)
			Q.edges[a] = P
 
		#P becomes the new maxSufT
		self.maxSufT = Q.edges[a]
 
		#Store accumulated input string
		self.S.append(a)
 
		return createANewNode
 
	def get_sub_palindromes(self, nd, nodesToHere, charsToHere, result):
		#Each node represents a palindrome, which can be reconstructed
		#by the path from the root node to each non-root node.
 
		#Traverse all edges, since they represent other palindromes
		for lnkName in nd.edges:
			nd2 = nd.edges[lnkName] #The lnkName is the character used for this edge
			self.get_sub_palindromes(nd2, nodesToHere+[nd2], charsToHere+[lnkName], result)
 
		#Reconstruct based on charsToHere characters.
		if id(nd) != id(self.rto) and id(nd) != id(self.rte): #Don't print for root nodes
			tmp = """".join(charsToHere)
			if id(nodesToHere[0]) == id(self.rte): #Even string
				assembled = tmp[::-1] + tmp
			else: #Odd string
				assembled = tmp[::-1] + tmp[1:]
			result.append(assembled)
 
if __name__==""__main__"":
	st = ""eertree""
	print (""Processing string"", st)
	eertree = Eertree()
	for ch in st:
		eertree.add(ch)
 
	print (""Number of sub-palindromes:"", len(eertree.nodes))
 
	#Traverse tree to find sub-palindromes
	result = []
	eertree.get_sub_palindromes(eertree.rto, [eertree.rto], [], result) #Odd length words
	eertree.get_sub_palindromes(eertree.rte, [eertree.rte], [], result) #Even length words
	print (""Sub-palindromes:"", result)",3358,105,"import unittest

class TestEertree(unittest.TestCase):
    def setUp(self):
        self.eertree = Eertree()

    def test_initial_state(self):
        # Test initial state of the eertree
        self.assertEqual(len(self.eertree.nodes), 0)
        self.assertEqual(self.eertree.rto.len, -1)
        self.assertEqual(self.eertree.rte.len, 0)
        self.assertEqual(self.eertree.S, [0])
        self.assertIs(self.eertree.maxSufT, self.eertree.rte)

    def test_add_single_character(self):
        # Test adding a single character
        self.assertTrue(self.eertree.add('e'))
        self.assertEqual(len(self.eertree.nodes), 1)
        self.assertEqual(self.eertree.nodes[0].len, 1)

    def test_add_duplicate_character(self):
        # Test adding a duplicate character
        self.eertree.add('e')
        self.assertFalse(self.eertree.add('e'))
        self.assertEqual(len(self.eertree.nodes), 1)

    def test_add_multiple_characters(self):
        # Test adding multiple characters
        for ch in ""eertree"":
            self.eertree.add(ch)
        self.assertEqual(len(self.eertree.nodes), 6)

    def test_get_sub_palindromes(self):
        # Test getting sub-palindromes
        for ch in ""eertree"":
            self.eertree.add(ch)
        result = []
        self.eertree.get_sub_palindromes(self.eertree.rto, [self.eertree.rto], [], result)
        self.eertree.get_sub_palindromes(self.eertree.rte, [self.eertree.rte], [], result)
        expected_palindromes = ['e', 'ee', 'r', 'e', 'ee', 'eertree']
        self.assertCountEqual(result, expected_palindromes)

    def test_get_max_suffix_pal(self):
        # Test get_max_suffix_pal method
        for ch in ""eertree"":
            self.eertree.add(ch)
        node = self.eertree.get_max_suffix_pal(self.eertree.maxSufT, 'e')
        self.assertEqual(node.len, 1)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/eertree/test_gpt_4o_2024_08_06_eertree.py,CompileStatus.OK,0.0,11.34,9.92,0.35,1.0,,0.5403790473937988,9.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_eertree', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/eertree/test_gpt_4o_2024_08_06_eertree.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_eertree', 'obj': 'TestEertree', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 17, 'path': 'data/generated/docs_python/eertree/test_gpt_4o_2024_08_06_eertree.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_eertree', 'obj': 'TestEertree.setUp', 'line': 5, 'column': 23, 'endLine': 5, 'endColumn': 30, 'path': 'data/generated/docs_python/eertree/test_gpt_4o_2024_08_06_eertree.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'Eertree'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_eertree', 'obj': 'TestEertree.test_initial_state', 'line': 7, 'column': 4, 'endLine': 7, 'endColumn': 26, 'path': 'data/generated/docs_python/eertree/test_gpt_4o_2024_08_06_eertree.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_eertree', 'obj': 'TestEertree.test_add_single_character', 'line': 15, 'column': 4, 'endLine': 15, 'endColumn': 33, 'path': 'data/generated/docs_python/eertree/test_gpt_4o_2024_08_06_eertree.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_eertree', 'obj': 'TestEertree.test_add_duplicate_character', 'line': 21, 'column': 4, 'endLine': 21, 'endColumn': 36, 'path': 'data/generated/docs_python/eertree/test_gpt_4o_2024_08_06_eertree.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_eertree', 'obj': 'TestEertree.test_add_multiple_characters', 'line': 27, 'column': 4, 'endLine': 27, 'endColumn': 36, 'path': 'data/generated/docs_python/eertree/test_gpt_4o_2024_08_06_eertree.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_eertree', 'obj': 'TestEertree.test_get_sub_palindromes', 'line': 33, 'column': 4, 'endLine': 33, 'endColumn': 32, 'path': 'data/generated/docs_python/eertree/test_gpt_4o_2024_08_06_eertree.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_eertree', 'obj': 'TestEertree.test_get_max_suffix_pal', 'line': 43, 'column': 4, 'endLine': 43, 'endColumn': 31, 'path': 'data/generated/docs_python/eertree/test_gpt_4o_2024_08_06_eertree.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Egyptian division,"Egyptian division is a method of dividing integers using addition and
doubling that is similar to the algorithm of Ethiopian multiplication

Algorithm:

Given two numbers where the dividend is to be divided by the divisor:

 Start the construction of a table of two columns: powers_of_2, and doublings; by a first row of a 1 (i.e. 2^0) in the first column and 1 times the divisor in the first row second column.
 Create the second row with columns of 2 (i.e 2^1), and 2 * divisor in order.
 Continue with successive i’th rows of 2^i and 2^i * divisor.
 Stop adding rows, and keep only those rows, where 2^i * divisor is less than or equal to the dividend.
 We now assemble two separate sums that both start as zero, called here answer and accumulator
 Consider each row of the table, in the reverse order of its construction.
 If the current value of the accumulator added to the doublings cell would be less than or equal to the dividend then add it to the accumulator, as well as adding the powers_of_2 cell value to the answer.
 When the first row has been considered as above, then the integer division of dividend by divisor is given by answer.
 (And the remainder is given by the absolute value of accumulator - dividend).


Example: 580 / 34

 Table creation:



 powers_of_2

 doublings


 1

 34


 2

 68


 4

 136


 8

 272


 16

 544

 Initialization of sums:



 powers_of_2

 doublings

 answer

 accumulator


 1

 34






 2

 68






 4

 136






 8

 272






 16

 544










 0

 0

 Considering table rows, bottom-up:

When a row is considered it is shown crossed out if it is not accumulated, or bold if the row causes summations.



 powers_of_2

 doublings

 answer

 accumulator


 1

 34






 2

 68






 4

 136






 8

 272






 16

 544

 16

 544



 powers_of_2

 doublings

 answer

 accumulator


 1

 34






 2

 68






 4

 136






 8

 272

 16

 544


 16

 544







 powers_of_2

 doublings

 answer

 accumulator


 1

 34






 2

 68






 4

 136

 16

 544


 8

 272






 16

 544







 powers_of_2

 doublings

 answer

 accumulator


 1

 34






 2

 68

 16

 544


 4

 136






 8

 272






 16

 544







 powers_of_2

 doublings

 answer

 accumulator


 1

 34

 17

 578


 2

 68






 4

 136






 8

 272






 16

 544





Answer

So 580 divided by 34 using the Egyptian method is 17 remainder (578 - 580) or 2.



Task

The task is to create a function that does Egyptian division. The function should

closely follow the description above in using a list/array of powers of two, and

another of doublings.

 Functions should be clear interpretations of the algorithm.
 Use the function to divide 580 by 34 and show the answer here, on this page.


Related tasks

   Egyptian fractions


References

   Egyptian Number System

",Python,"from itertools import product
 
def egyptian_divmod(dividend, divisor):
    assert divisor != 0
    pwrs, dbls = [1], [divisor]
    while dbls[-1] <= dividend:
        pwrs.append(pwrs[-1] * 2)
        dbls.append(pwrs[-1] * divisor)
    ans, accum = 0, 0
    for pwr, dbl in zip(pwrs[-2::-1], dbls[-2::-1]):
        if accum + dbl <= dividend:
            accum += dbl
            ans += pwr
    return ans, abs(accum - dividend)
 
if __name__ == ""__main__"":
    # Test it gives the same results as the divmod built-in
    for i, j in product(range(13), range(1, 13)):
            assert egyptian_divmod(i, j) == divmod(i, j)
    # Mandated result
    i, j = 580, 34
    print(f'{i} divided by {j} using the Egyption method is %i remainder %i'
          % egyptian_divmod(i, j))",779,23,"import unittest
from egyptian_division import egyptian_divmod

class TestEgyptianDivmod(unittest.TestCase):

    def test_basic_cases(self):
        # Test cases that should match Python's built-in divmod
        for i in range(13):
            for j in range(1, 13):
                with self.subTest(i=i, j=j):
                    self.assertEqual(egyptian_divmod(i, j), divmod(i, j))

    def test_large_numbers(self):
        # Test with larger numbers
        self.assertEqual(egyptian_divmod(580, 34), (17, 2))
        self.assertEqual(egyptian_divmod(1000, 3), divmod(1000, 3))
        self.assertEqual(egyptian_divmod(123456, 789), divmod(123456, 789))

    def test_division_by_one(self):
        # Any number divided by 1 should return the number itself and remainder 0
        for i in range(100):
            with self.subTest(i=i):
                self.assertEqual(egyptian_divmod(i, 1), (i, 0))

    def test_dividend_zero(self):
        # 0 divided by any number should return 0 quotient and 0 remainder
        for j in range(1, 100):
            with self.subTest(j=j):
                self.assertEqual(egyptian_divmod(0, j), (0, 0))

    def test_divisor_larger_than_dividend(self):
        # If divisor is larger than dividend, quotient should be 0 and remainder should be dividend
        self.assertEqual(egyptian_divmod(5, 10), (0, 5))
        self.assertEqual(egyptian_divmod(3, 7), (0, 3))

    def test_divisor_equals_dividend(self):
        # If divisor equals dividend, quotient should be 1 and remainder should be 0
        for i in range(1, 100):
            with self.subTest(i=i):
                self.assertEqual(egyptian_divmod(i, i), (1, 0))

    def test_edge_cases(self):
        # Edge cases
        self.assertEqual(egyptian_divmod(1, 2), (0, 1))
        self.assertEqual(egyptian_divmod(2, 2), (1, 0))
        self.assertEqual(egyptian_divmod(2, 3), (0, 2))

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/egyptian_division/test_gpt_4o_2024_08_06_egyptian_division.py,CompileStatus.OK,0.0,90.2,88.89,0.36,3.0,100.0,0.5259859561920166,9.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_egyptian_division', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/egyptian_division/test_gpt_4o_2024_08_06_egyptian_division.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_egyptian_division', 'obj': 'TestEgyptianDivmod', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 24, 'path': 'data/generated/docs_python/egyptian_division/test_gpt_4o_2024_08_06_egyptian_division.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_egyptian_division', 'obj': 'TestEgyptianDivmod.test_basic_cases', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 24, 'path': 'data/generated/docs_python/egyptian_division/test_gpt_4o_2024_08_06_egyptian_division.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_egyptian_division', 'obj': 'TestEgyptianDivmod.test_large_numbers', 'line': 13, 'column': 4, 'endLine': 13, 'endColumn': 26, 'path': 'data/generated/docs_python/egyptian_division/test_gpt_4o_2024_08_06_egyptian_division.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_egyptian_division', 'obj': 'TestEgyptianDivmod.test_division_by_one', 'line': 19, 'column': 4, 'endLine': 19, 'endColumn': 28, 'path': 'data/generated/docs_python/egyptian_division/test_gpt_4o_2024_08_06_egyptian_division.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_egyptian_division', 'obj': 'TestEgyptianDivmod.test_dividend_zero', 'line': 25, 'column': 4, 'endLine': 25, 'endColumn': 26, 'path': 'data/generated/docs_python/egyptian_division/test_gpt_4o_2024_08_06_egyptian_division.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_egyptian_division', 'obj': 'TestEgyptianDivmod.test_divisor_larger_than_dividend', 'line': 31, 'column': 4, 'endLine': 31, 'endColumn': 41, 'path': 'data/generated/docs_python/egyptian_division/test_gpt_4o_2024_08_06_egyptian_division.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_egyptian_division', 'obj': 'TestEgyptianDivmod.test_divisor_equals_dividend', 'line': 36, 'column': 4, 'endLine': 36, 'endColumn': 36, 'path': 'data/generated/docs_python/egyptian_division/test_gpt_4o_2024_08_06_egyptian_division.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_egyptian_division', 'obj': 'TestEgyptianDivmod.test_edge_cases', 'line': 42, 'column': 4, 'endLine': 42, 'endColumn': 23, 'path': 'data/generated/docs_python/egyptian_division/test_gpt_4o_2024_08_06_egyptian_division.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Egyptian fractions,"An   Egyptian fraction   is the sum of distinct unit fractions such as:








1
2



+



1
3



+



1
16




(
=



43
48



)


{\displaystyle {\tfrac {1}{2}}+{\tfrac {1}{3}}+{\tfrac {1}{16}}\,(={\tfrac {43}{48}})}


Each fraction in the expression has a numerator equal to   1   (unity)   and a denominator that is a positive integer,   and all the denominators are distinct   (i.e., no repetitions).

Fibonacci's   Greedy algorithm for Egyptian fractions   expands the fraction  






x
y





{\displaystyle {\tfrac {x}{y}}}

    to be represented by repeatedly performing the replacement







x
y


=


1

⌈
y

/

x
⌉



+



(
−
y
)





mod


x


y
⌈
y

/

x
⌉





{\displaystyle {\frac {x}{y}}={\frac {1}{\lceil y/x\rceil }}+{\frac {(-y)\!\!\!\!\mod x}{y\lceil y/x\rceil }}}




(simplifying the 2nd term in this replacement as necessary, and where  



⌈
x
⌉


{\displaystyle \lceil x\rceil }

    is the   ceiling   function).



For this task,   Proper and improper fractions   must be able to be expressed.



Proper  fractions   are of the form  






a
b





{\displaystyle {\tfrac {a}{b}}}

    where  



a


{\displaystyle a}

    and  



b


{\displaystyle b}

    are positive integers, such that  



a
<
b


{\displaystyle a<b}

,     and

improper fractions are of the form  






a
b





{\displaystyle {\tfrac {a}{b}}}

    where  



a


{\displaystyle a}

    and  



b


{\displaystyle b}

    are positive integers, such that    a ≥ b.



(See the REXX programming example to view one method of expressing the whole number part of an improper fraction.)

For improper fractions, the integer part of any improper fraction should be first isolated and shown preceding the Egyptian unit fractions, and be surrounded by square brackets [n].



Task requirements

   show the Egyptian fractions for:






43
48





{\displaystyle {\tfrac {43}{48}}}

 and






5
121





{\displaystyle {\tfrac {5}{121}}}

 and






2014
59





{\displaystyle {\tfrac {2014}{59}}}


   for all proper fractions,  






a
b





{\displaystyle {\tfrac {a}{b}}}

    where  



a


{\displaystyle a}

    and  



b


{\displaystyle b}

    are positive one-or two-digit (decimal) integers, find and show an Egyptian fraction that has:
   the largest number of terms,
   the largest denominator.
   for all one-, two-, and three-digit integers,   find and show (as above).     {extra credit}


Also see

   Wolfram MathWorld™ entry: Egyptian fraction

",Python,"from fractions import Fraction
from math import ceil
 
class Fr(Fraction):
    def __repr__(self):
        return '%s/%s' % (self.numerator, self.denominator)
 
def ef(fr):
    ans = []
    if fr >= 1:
        if fr.denominator == 1:
            return [[int(fr)], Fr(0, 1)]
        intfr = int(fr)
        ans, fr = [[intfr]], fr - intfr
    x, y = fr.numerator, fr.denominator
    while x != 1:
        ans.append(Fr(1, ceil(1/fr)))
        fr = Fr(-y % x, y* ceil(1/fr))
        x, y = fr.numerator, fr.denominator
    ans.append(fr)
    return ans
 
if __name__ == '__main__':
    for fr in [Fr(43, 48), Fr(5, 121), Fr(2014, 59)]:
        print('%r ─► %s' % (fr, ' '.join(str(x) for x in ef(fr))))
    lenmax = denommax = (0, None)
    for fr in set(Fr(a, b) for a in range(1,100) for b in range(1, 100)):
        e = ef(fr)
        #assert sum((f[0] if type(f) is list else f) for f in e) == fr, 'Whoops!'
        elen, edenom = len(e), e[-1].denominator
        if elen > lenmax[0]:
            lenmax = (elen, fr, e)
        if edenom > denommax[0]:
            denommax = (edenom, fr, e)
    print('Term max is %r with %i terms' % (lenmax[1], lenmax[0]))
    dstr = str(denommax[0])
    print('Denominator max is %r with %i digits %s...%s' %
          (denommax[1], len(dstr), dstr[:5], dstr[-5:]))",1307,38,"import unittest
from fractions import Fraction
from egyptian_fractions import Fr, ef

class TestEgyptianFractions(unittest.TestCase):

    def test_proper_fraction_43_48(self):
        fr = Fr(43, 48)
        result = ef(fr)
        expected = [Fr(1, 2), Fr(1, 3), Fr(1, 16)]
        self.assertEqual(result, expected)

    def test_proper_fraction_5_121(self):
        fr = Fr(5, 121)
        result = ef(fr)
        expected = [Fr(1, 25), Fr(1, 757), Fr(1, 763309)]
        self.assertEqual(result, expected)

    def test_improper_fraction_2014_59(self):
        fr = Fr(2014, 59)
        result = ef(fr)
        expected = [[34], Fr(1, 2), Fr(1, 3), Fr(1, 11), Fr(1, 646)]
        self.assertEqual(result, expected)

    def test_largest_number_of_terms(self):
        lenmax = (0, None)
        for fr in set(Fr(a, b) for a in range(1, 100) for b in range(1, 100)):
            e = ef(fr)
            elen = len(e)
            if elen > lenmax[0]:
                lenmax = (elen, fr, e)
        self.assertEqual(lenmax[1], Fr(63, 64))  # Example expected fraction
        self.assertEqual(lenmax[0], 6)  # Example expected number of terms

    def test_largest_denominator(self):
        denommax = (0, None)
        for fr in set(Fr(a, b) for a in range(1, 100) for b in range(1, 100)):
            e = ef(fr)
            edenom = e[-1].denominator
            if edenom > denommax[0]:
                denommax = (edenom, fr, e)
        self.assertEqual(denommax[1], Fr(1, 99))  # Example expected fraction
        self.assertEqual(denommax[0], 9901)  # Example expected largest denominator

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/egyptian_fractions/test_gpt_4o_2024_08_06_egyptian_fractions.py,CompileStatus.OK,0.0,77.78,71.84,0.18,1.4,20.0,0.8038620948791504,8.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_egyptian_fractions', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/egyptian_fractions/test_gpt_4o_2024_08_06_egyptian_fractions.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_egyptian_fractions', 'obj': 'TestEgyptianFractions', 'line': 5, 'column': 0, 'endLine': 5, 'endColumn': 27, 'path': 'data/generated/docs_python/egyptian_fractions/test_gpt_4o_2024_08_06_egyptian_fractions.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_egyptian_fractions', 'obj': 'TestEgyptianFractions.test_proper_fraction_43_48', 'line': 7, 'column': 4, 'endLine': 7, 'endColumn': 34, 'path': 'data/generated/docs_python/egyptian_fractions/test_gpt_4o_2024_08_06_egyptian_fractions.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_egyptian_fractions', 'obj': 'TestEgyptianFractions.test_proper_fraction_5_121', 'line': 13, 'column': 4, 'endLine': 13, 'endColumn': 34, 'path': 'data/generated/docs_python/egyptian_fractions/test_gpt_4o_2024_08_06_egyptian_fractions.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_egyptian_fractions', 'obj': 'TestEgyptianFractions.test_improper_fraction_2014_59', 'line': 19, 'column': 4, 'endLine': 19, 'endColumn': 38, 'path': 'data/generated/docs_python/egyptian_fractions/test_gpt_4o_2024_08_06_egyptian_fractions.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_egyptian_fractions', 'obj': 'TestEgyptianFractions.test_largest_number_of_terms', 'line': 25, 'column': 4, 'endLine': 25, 'endColumn': 36, 'path': 'data/generated/docs_python/egyptian_fractions/test_gpt_4o_2024_08_06_egyptian_fractions.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_egyptian_fractions', 'obj': 'TestEgyptianFractions.test_largest_denominator', 'line': 35, 'column': 4, 'endLine': 35, 'endColumn': 32, 'path': 'data/generated/docs_python/egyptian_fractions/test_gpt_4o_2024_08_06_egyptian_fractions.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_egyptian_fractions', 'obj': '', 'line': 2, 'column': 0, 'endLine': 2, 'endColumn': 30, 'path': 'data/generated/docs_python/egyptian_fractions/test_gpt_4o_2024_08_06_egyptian_fractions.py', 'symbol': 'unused-import', 'message': 'Unused Fraction imported from fractions', 'message-id': 'W0611'}]",False
Elementary cellular automaton,"An elementary cellular automaton is a one-dimensional cellular automaton where there are two possible states (labeled 0 and 1) and the rule to determine the state of a cell in the next generation depends only on the current state of the cell and its two immediate neighbors. Those three values can be encoded with three bits.

The rules of evolution are then encoded with eight bits indicating the outcome of each of the eight possibilities 111, 110, 101, 100, 011, 010, 001 and 000 in this order. Thus for instance the rule 13 means that a state is updated to 1 only in the cases 011, 010 and 000, since 13 in binary is 0b00001101.



Task

Create a subroutine, program or function that allows to create and visualize the evolution of any of the 256 possible elementary cellular automaton of arbitrary space length and for any given initial state. You can demonstrate your solution with any automaton of your choice.

The space state should wrap: this means that the left-most cell should be considered as the right neighbor of the right-most cell, and reciprocally.

This task is basically a generalization of one-dimensional cellular automata.



See also
 Cellular automata (natureofcode.com)

",Python,"def eca(cells, rule):
    lencells = len(cells)
    c = ""0"" + cells + ""0""    # Zero pad the ends
    rulebits = '{0:08b}'.format(rule)
    neighbours2next = {'{0:03b}'.format(n):rulebits[::-1][n] for n in range(8)}
    yield c[1:-1]
    while True:
        c = ''.join(['0',
                     ''.join(neighbours2next[c[i-1:i+2]]
                             for i in range(1,lencells+1)),
                     '0'])
        yield c[1:-1]
 
if __name__ == '__main__':
    lines, start, rules = 50, '0000000001000000000', (90, 30, 122)
    zipped = [range(lines)] + [eca(start, rule) for rule in rules]
    print('\n   Rules: %r' % (rules,))
    for data in zip(*zipped):
        i = data[0]
        cells = data[1:]
        print('%2i: %s' % (i, '    '.join(cells).replace('0', '.').replace('1', '#')))",804,21,"import unittest

class TestElementaryCellularAutomaton(unittest.TestCase):

    def setUp(self):
        # This method will be called before each test
        self.rule_13 = 13
        self.rule_90 = 90
        self.rule_30 = 30
        self.rule_122 = 122
        self.initial_state = '0000000001000000000'

    def test_rule_13(self):
        # Test the evolution of the automaton with rule 13
        eca_gen = eca(self.initial_state, self.rule_13)
        expected_first_generation = '0000000001000000000'
        expected_second_generation = '0000000001100000000'
        self.assertEqual(next(eca_gen), expected_first_generation)
        self.assertEqual(next(eca_gen), expected_second_generation)

    def test_rule_90(self):
        # Test the evolution of the automaton with rule 90
        eca_gen = eca(self.initial_state, self.rule_90)
        expected_first_generation = '0000000001000000000'
        expected_second_generation = '0000000010100000000'
        self.assertEqual(next(eca_gen), expected_first_generation)
        self.assertEqual(next(eca_gen), expected_second_generation)

    def test_rule_30(self):
        # Test the evolution of the automaton with rule 30
        eca_gen = eca(self.initial_state, self.rule_30)
        expected_first_generation = '0000000001000000000'
        expected_second_generation = '0000000011100000000'
        self.assertEqual(next(eca_gen), expected_first_generation)
        self.assertEqual(next(eca_gen), expected_second_generation)

    def test_rule_122(self):
        # Test the evolution of the automaton with rule 122
        eca_gen = eca(self.initial_state, self.rule_122)
        expected_first_generation = '0000000001000000000'
        expected_second_generation = '0000000011100000000'
        self.assertEqual(next(eca_gen), expected_first_generation)
        self.assertEqual(next(eca_gen), expected_second_generation)

    def test_wrap_around(self):
        # Test the wrap-around feature
        initial_state_wrap = '1000000000000000001'
        eca_gen = eca(initial_state_wrap, self.rule_90)
        expected_first_generation = '1000000000000000001'
        expected_second_generation = '0100000000000000010'
        self.assertEqual(next(eca_gen), expected_first_generation)
        self.assertEqual(next(eca_gen), expected_second_generation)

    def test_invalid_rule(self):
        # Test with an invalid rule number
        with self.assertRaises(ValueError):
            eca(self.initial_state, 256)

    def test_invalid_initial_state(self):
        # Test with an invalid initial state
        with self.assertRaises(ValueError):
            eca('invalid_state', self.rule_90)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/elementary_cellular_automaton/test_gpt_4o_2024_08_06_elementary_cellular_automaton.py,CompileStatus.OK,0.0,40.62,38.75,0.26,3.0,,0.5813889503479004,18.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_elementary_cellular_automaton', 'obj': '', 'line': 4, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/elementary_cellular_automaton/test_gpt_4o_2024_08_06_elementary_cellular_automaton.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_elementary_cellular_automaton', 'obj': '', 'line': 12, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/elementary_cellular_automaton/test_gpt_4o_2024_08_06_elementary_cellular_automaton.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_elementary_cellular_automaton', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/elementary_cellular_automaton/test_gpt_4o_2024_08_06_elementary_cellular_automaton.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_elementary_cellular_automaton', 'obj': 'TestElementaryCellularAutomaton', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 37, 'path': 'data/generated/docs_python/elementary_cellular_automaton/test_gpt_4o_2024_08_06_elementary_cellular_automaton.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_elementary_cellular_automaton', 'obj': 'TestElementaryCellularAutomaton.test_rule_13', 'line': 13, 'column': 4, 'endLine': 13, 'endColumn': 20, 'path': 'data/generated/docs_python/elementary_cellular_automaton/test_gpt_4o_2024_08_06_elementary_cellular_automaton.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_elementary_cellular_automaton', 'obj': 'TestElementaryCellularAutomaton.test_rule_13', 'line': 15, 'column': 18, 'endLine': 15, 'endColumn': 21, 'path': 'data/generated/docs_python/elementary_cellular_automaton/test_gpt_4o_2024_08_06_elementary_cellular_automaton.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'eca'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_elementary_cellular_automaton', 'obj': 'TestElementaryCellularAutomaton.test_rule_90', 'line': 21, 'column': 4, 'endLine': 21, 'endColumn': 20, 'path': 'data/generated/docs_python/elementary_cellular_automaton/test_gpt_4o_2024_08_06_elementary_cellular_automaton.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_elementary_cellular_automaton', 'obj': 'TestElementaryCellularAutomaton.test_rule_90', 'line': 23, 'column': 18, 'endLine': 23, 'endColumn': 21, 'path': 'data/generated/docs_python/elementary_cellular_automaton/test_gpt_4o_2024_08_06_elementary_cellular_automaton.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'eca'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_elementary_cellular_automaton', 'obj': 'TestElementaryCellularAutomaton.test_rule_30', 'line': 29, 'column': 4, 'endLine': 29, 'endColumn': 20, 'path': 'data/generated/docs_python/elementary_cellular_automaton/test_gpt_4o_2024_08_06_elementary_cellular_automaton.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_elementary_cellular_automaton', 'obj': 'TestElementaryCellularAutomaton.test_rule_30', 'line': 31, 'column': 18, 'endLine': 31, 'endColumn': 21, 'path': 'data/generated/docs_python/elementary_cellular_automaton/test_gpt_4o_2024_08_06_elementary_cellular_automaton.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'eca'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_elementary_cellular_automaton', 'obj': 'TestElementaryCellularAutomaton.test_rule_122', 'line': 37, 'column': 4, 'endLine': 37, 'endColumn': 21, 'path': 'data/generated/docs_python/elementary_cellular_automaton/test_gpt_4o_2024_08_06_elementary_cellular_automaton.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_elementary_cellular_automaton', 'obj': 'TestElementaryCellularAutomaton.test_rule_122', 'line': 39, 'column': 18, 'endLine': 39, 'endColumn': 21, 'path': 'data/generated/docs_python/elementary_cellular_automaton/test_gpt_4o_2024_08_06_elementary_cellular_automaton.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'eca'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_elementary_cellular_automaton', 'obj': 'TestElementaryCellularAutomaton.test_wrap_around', 'line': 45, 'column': 4, 'endLine': 45, 'endColumn': 24, 'path': 'data/generated/docs_python/elementary_cellular_automaton/test_gpt_4o_2024_08_06_elementary_cellular_automaton.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_elementary_cellular_automaton', 'obj': 'TestElementaryCellularAutomaton.test_wrap_around', 'line': 48, 'column': 18, 'endLine': 48, 'endColumn': 21, 'path': 'data/generated/docs_python/elementary_cellular_automaton/test_gpt_4o_2024_08_06_elementary_cellular_automaton.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'eca'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_elementary_cellular_automaton', 'obj': 'TestElementaryCellularAutomaton.test_invalid_rule', 'line': 54, 'column': 4, 'endLine': 54, 'endColumn': 25, 'path': 'data/generated/docs_python/elementary_cellular_automaton/test_gpt_4o_2024_08_06_elementary_cellular_automaton.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_elementary_cellular_automaton', 'obj': 'TestElementaryCellularAutomaton.test_invalid_rule', 'line': 57, 'column': 12, 'endLine': 57, 'endColumn': 15, 'path': 'data/generated/docs_python/elementary_cellular_automaton/test_gpt_4o_2024_08_06_elementary_cellular_automaton.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'eca'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_elementary_cellular_automaton', 'obj': 'TestElementaryCellularAutomaton.test_invalid_initial_state', 'line': 59, 'column': 4, 'endLine': 59, 'endColumn': 34, 'path': 'data/generated/docs_python/elementary_cellular_automaton/test_gpt_4o_2024_08_06_elementary_cellular_automaton.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_elementary_cellular_automaton', 'obj': 'TestElementaryCellularAutomaton.test_invalid_initial_state', 'line': 62, 'column': 12, 'endLine': 62, 'endColumn': 15, 'path': 'data/generated/docs_python/elementary_cellular_automaton/test_gpt_4o_2024_08_06_elementary_cellular_automaton.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'eca'"", 'message-id': 'E0602'}]",False
Elliptic curve arithmetic,"Elliptic curves   are sometimes used in   cryptography   as a way to perform   digital signatures.

The purpose of this task is to implement a simplified (without modular arithmetic) version of the elliptic curve arithmetic which is required by the   elliptic curve DSA   protocol.

In a nutshell, an elliptic curve is a bi-dimensional curve defined by the following relation between the x and y coordinates of any point on the curve:

  




y

2


=

x

3


+
a
x
+
b


{\displaystyle y^{2}=x^{3}+ax+b}


a and b are arbitrary parameters that define the specific curve which is used.

For this particular task, we'll use the following parameters:

    a=0,   b=7
The most interesting thing about elliptic curves is the fact that it is possible to define a   group   structure on it.

To do so we define an   internal composition   rule with an additive notation +,   such that for any three distinct points P, Q and R on the curve, whenever these points are aligned, we have:

    P + Q + R = 0
Here   0   (zero)   is the infinity point,   for which the x and y values are not defined.   It's basically the same kind of point which defines the horizon in   projective geometry.

We'll also assume here that this infinity point is unique and defines the   neutral element   of the addition.

This was not the definition of the addition, but only its desired property.   For a more accurate definition, we proceed as such:

Given any three aligned points P, Q and R,   we define the sum   S = P + Q   as the point (possibly the infinity point) such that   S, R   and the infinity point are aligned.

Considering the symmetry of the curve around the x-axis, it's easy to convince oneself that two points S and R can be aligned with the infinity point if and only if S and R are symmetric of one another towards the x-axis   (because in that case there is no other candidate than the infinity point to complete the alignment triplet).

S is thus defined as the symmetric of R towards the x axis.

The task consists in defining the addition which, for any two points of the curve, returns the sum of these two points.   You will pick two random points on the curve, compute their sum and show that the symmetric of the sum is aligned with the two initial points.

You will use the a and b parameters of secp256k1, i.e. respectively zero and seven.

Hint:   You might need to define a ""doubling"" function, that returns P+P for any given point P.

Extra credit:   define the full elliptic curve arithmetic (still not modular, though) by defining a ""multiply"" function that returns,

for any point P and integer n,   the point P + P + ... + P     (n times).



",Python,"#!/usr/bin/env python3
 
class Point:
    b = 7
    def __init__(self, x=float('inf'), y=float('inf')):
        self.x = x
        self.y = y
 
    def copy(self):
        return Point(self.x, self.y)
 
    def is_zero(self):
        return self.x > 1e20 or self.x < -1e20
 
    def neg(self):
        return Point(self.x, -self.y)
 
    def dbl(self):
        if self.is_zero():
            return self.copy()
        try:
            L = (3 * self.x * self.x) / (2 * self.y)
        except ZeroDivisionError:
            return Point()
        x = L * L - 2 * self.x
        return Point(x, L * (self.x - x) - self.y)
 
    def add(self, q):
        if self.x == q.x and self.y == q.y:
            return self.dbl()
        if self.is_zero():
            return q.copy()
        if q.is_zero():
            return self.copy()
        try:
            L = (q.y - self.y) / (q.x - self.x)
        except ZeroDivisionError:
            return Point()
        x = L * L - self.x - q.x
        return Point(x, L * (self.x - x) - self.y)
 
    def mul(self, n):
        p = self.copy()
        r = Point()
        i = 1
        while i <= n:
            if i&n:
                r = r.add(p)
            p = p.dbl()
            i <<= 1
        return r
 
    def __str__(self):
        return ""({:.3f}, {:.3f})"".format(self.x, self.y)
 
def show(s, p):
    print(s, ""Zero"" if p.is_zero() else p)
 
def from_y(y):
    n = y * y - Point.b
    x = n**(1./3) if n>=0 else -((-n)**(1./3))
    return Point(x, y)
 
# demonstrate
a = from_y(1)
b = from_y(2)
show(""a ="", a)
show(""b ="", b)
c = a.add(b)
show(""c = a + b ="", c)
d = c.neg()
show(""d = -c ="", d)
show(""c + d ="", c.add(d))
show(""a + b + d ="", a.add(b.add(d)))
show(""a * 12345 ="", a.mul(12345))",1740,75,"import unittest
from elliptic_curve_arithmetic import Point, from_y

class TestEllipticCurveArithmetic(unittest.TestCase):

    def test_point_initialization(self):
        p = Point(3, 4)
        self.assertEqual(p.x, 3)
        self.assertEqual(p.y, 4)

    def test_zero_point(self):
        zero = Point()
        self.assertTrue(zero.is_zero())

    def test_negation(self):
        p = Point(3, 4)
        neg_p = p.neg()
        self.assertEqual(neg_p.x, 3)
        self.assertEqual(neg_p.y, -4)

    def test_doubling(self):
        p = from_y(1)
        dbl_p = p.dbl()
        self.assertFalse(dbl_p.is_zero())

    def test_addition_with_zero(self):
        p = Point(3, 4)
        zero = Point()
        result = p.add(zero)
        self.assertEqual(result.x, p.x)
        self.assertEqual(result.y, p.y)

    def test_addition(self):
        a = from_y(1)
        b = from_y(2)
        c = a.add(b)
        self.assertFalse(c.is_zero())

    def test_addition_of_same_point(self):
        a = from_y(1)
        dbl_a = a.add(a)
        self.assertFalse(dbl_a.is_zero())

    def test_multiplication(self):
        a = from_y(1)
        result = a.mul(12345)
        self.assertFalse(result.is_zero())

    def test_addition_commutativity(self):
        a = from_y(1)
        b = from_y(2)
        c1 = a.add(b)
        c2 = b.add(a)
        self.assertEqual(c1.x, c2.x)
        self.assertEqual(c1.y, c2.y)

    def test_addition_associativity(self):
        a = from_y(1)
        b = from_y(2)
        c = from_y(3)
        result1 = a.add(b.add(c))
        result2 = a.add(b).add(c)
        self.assertEqual(result1.x, result2.x)
        self.assertEqual(result1.y, result2.y)

    def test_negation_property(self):
        a = from_y(1)
        neg_a = a.neg()
        zero = a.add(neg_a)
        self.assertTrue(zero.is_zero())

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/elliptic_curve_arithmetic/test_gpt_4o_2024_08_06_elliptic_curve_arithmetic.py,CompileStatus.OK,0.0,95.9,94.85,0.27,0.73,90.91,0.5568242073059082,13.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_elliptic_curve_arithmetic', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/elliptic_curve_arithmetic/test_gpt_4o_2024_08_06_elliptic_curve_arithmetic.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_elliptic_curve_arithmetic', 'obj': 'TestEllipticCurveArithmetic', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 33, 'path': 'data/generated/docs_python/elliptic_curve_arithmetic/test_gpt_4o_2024_08_06_elliptic_curve_arithmetic.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_elliptic_curve_arithmetic', 'obj': 'TestEllipticCurveArithmetic.test_point_initialization', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 33, 'path': 'data/generated/docs_python/elliptic_curve_arithmetic/test_gpt_4o_2024_08_06_elliptic_curve_arithmetic.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_elliptic_curve_arithmetic', 'obj': 'TestEllipticCurveArithmetic.test_zero_point', 'line': 11, 'column': 4, 'endLine': 11, 'endColumn': 23, 'path': 'data/generated/docs_python/elliptic_curve_arithmetic/test_gpt_4o_2024_08_06_elliptic_curve_arithmetic.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_elliptic_curve_arithmetic', 'obj': 'TestEllipticCurveArithmetic.test_negation', 'line': 15, 'column': 4, 'endLine': 15, 'endColumn': 21, 'path': 'data/generated/docs_python/elliptic_curve_arithmetic/test_gpt_4o_2024_08_06_elliptic_curve_arithmetic.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_elliptic_curve_arithmetic', 'obj': 'TestEllipticCurveArithmetic.test_doubling', 'line': 21, 'column': 4, 'endLine': 21, 'endColumn': 21, 'path': 'data/generated/docs_python/elliptic_curve_arithmetic/test_gpt_4o_2024_08_06_elliptic_curve_arithmetic.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_elliptic_curve_arithmetic', 'obj': 'TestEllipticCurveArithmetic.test_addition_with_zero', 'line': 26, 'column': 4, 'endLine': 26, 'endColumn': 31, 'path': 'data/generated/docs_python/elliptic_curve_arithmetic/test_gpt_4o_2024_08_06_elliptic_curve_arithmetic.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_elliptic_curve_arithmetic', 'obj': 'TestEllipticCurveArithmetic.test_addition', 'line': 33, 'column': 4, 'endLine': 33, 'endColumn': 21, 'path': 'data/generated/docs_python/elliptic_curve_arithmetic/test_gpt_4o_2024_08_06_elliptic_curve_arithmetic.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_elliptic_curve_arithmetic', 'obj': 'TestEllipticCurveArithmetic.test_addition_of_same_point', 'line': 39, 'column': 4, 'endLine': 39, 'endColumn': 35, 'path': 'data/generated/docs_python/elliptic_curve_arithmetic/test_gpt_4o_2024_08_06_elliptic_curve_arithmetic.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_elliptic_curve_arithmetic', 'obj': 'TestEllipticCurveArithmetic.test_multiplication', 'line': 44, 'column': 4, 'endLine': 44, 'endColumn': 27, 'path': 'data/generated/docs_python/elliptic_curve_arithmetic/test_gpt_4o_2024_08_06_elliptic_curve_arithmetic.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_elliptic_curve_arithmetic', 'obj': 'TestEllipticCurveArithmetic.test_addition_commutativity', 'line': 49, 'column': 4, 'endLine': 49, 'endColumn': 35, 'path': 'data/generated/docs_python/elliptic_curve_arithmetic/test_gpt_4o_2024_08_06_elliptic_curve_arithmetic.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_elliptic_curve_arithmetic', 'obj': 'TestEllipticCurveArithmetic.test_addition_associativity', 'line': 57, 'column': 4, 'endLine': 57, 'endColumn': 35, 'path': 'data/generated/docs_python/elliptic_curve_arithmetic/test_gpt_4o_2024_08_06_elliptic_curve_arithmetic.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_elliptic_curve_arithmetic', 'obj': 'TestEllipticCurveArithmetic.test_negation_property', 'line': 66, 'column': 4, 'endLine': 66, 'endColumn': 30, 'path': 'data/generated/docs_python/elliptic_curve_arithmetic/test_gpt_4o_2024_08_06_elliptic_curve_arithmetic.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Empty program,"Task

Create the simplest possible program that is still considered ""correct.""



",Python,"1
QUIT",6,2,none,,,,,,,,,,,,
Entropy/Narcissist,"
Task

Write a computer program that computes and shows its own   entropy.



Related Tasks

   Fibonacci_word
   Entropy

",Python,"import math
from collections import Counter
 
def entropy(s):
    p, lns = Counter(s), float(len(s))
    return -sum( count/lns * math.log(count/lns, 2) for count in p.values())
 
with open(__file__) as f:
    b=f.read()
 
print(entropy(b))",240,11,"import unittest
from entropy_narcissist import entropy

class TestEntropyFunction(unittest.TestCase):

    def test_empty_string(self):
        self.assertEqual(entropy(''), 0.0, ""Entropy of an empty string should be 0."")

    def test_single_character_string(self):
        self.assertEqual(entropy('aaaa'), 0.0, ""Entropy of a string with a single repeated character should be 0."")

    def test_two_character_string(self):
        self.assertAlmostEqual(entropy('abab'), 1.0, places=5, msg=""Entropy of 'abab' should be 1."")

    def test_varied_characters(self):
        self.assertAlmostEqual(entropy('abcabcabc'), 1.58496, places=5, msg=""Entropy of 'abcabcabc' should be approximately 1.58496."")

    def test_different_frequencies(self):
        self.assertAlmostEqual(entropy('aab'), 0.918295, places=5, msg=""Entropy of 'aab' should be approximately 0.918295."")

    def test_long_string(self):
        long_string = 'a' * 1000 + 'b' * 1000
        self.assertAlmostEqual(entropy(long_string), 1.0, places=5, msg=""Entropy of a long string with equal 'a' and 'b' should be 1."")

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/entropy_narcissist/test_gpt_4o_2024_08_06_entropy_narcissist.py,CompileStatus.OK,0.0,96.15,93.75,0.33,3.0,100.0,0.5326001644134521,12.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_entropy_narcissist', 'obj': '', 'line': 10, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/entropy_narcissist/test_gpt_4o_2024_08_06_entropy_narcissist.py', 'symbol': 'line-too-long', 'message': 'Line too long (115/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_entropy_narcissist', 'obj': '', 'line': 16, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/entropy_narcissist/test_gpt_4o_2024_08_06_entropy_narcissist.py', 'symbol': 'line-too-long', 'message': 'Line too long (134/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_entropy_narcissist', 'obj': '', 'line': 19, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/entropy_narcissist/test_gpt_4o_2024_08_06_entropy_narcissist.py', 'symbol': 'line-too-long', 'message': 'Line too long (124/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_entropy_narcissist', 'obj': '', 'line': 23, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/entropy_narcissist/test_gpt_4o_2024_08_06_entropy_narcissist.py', 'symbol': 'line-too-long', 'message': 'Line too long (135/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_entropy_narcissist', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/entropy_narcissist/test_gpt_4o_2024_08_06_entropy_narcissist.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_entropy_narcissist', 'obj': 'TestEntropyFunction', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 25, 'path': 'data/generated/docs_python/entropy_narcissist/test_gpt_4o_2024_08_06_entropy_narcissist.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_entropy_narcissist', 'obj': 'TestEntropyFunction.test_empty_string', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 25, 'path': 'data/generated/docs_python/entropy_narcissist/test_gpt_4o_2024_08_06_entropy_narcissist.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_entropy_narcissist', 'obj': 'TestEntropyFunction.test_single_character_string', 'line': 9, 'column': 4, 'endLine': 9, 'endColumn': 36, 'path': 'data/generated/docs_python/entropy_narcissist/test_gpt_4o_2024_08_06_entropy_narcissist.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_entropy_narcissist', 'obj': 'TestEntropyFunction.test_two_character_string', 'line': 12, 'column': 4, 'endLine': 12, 'endColumn': 33, 'path': 'data/generated/docs_python/entropy_narcissist/test_gpt_4o_2024_08_06_entropy_narcissist.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_entropy_narcissist', 'obj': 'TestEntropyFunction.test_varied_characters', 'line': 15, 'column': 4, 'endLine': 15, 'endColumn': 30, 'path': 'data/generated/docs_python/entropy_narcissist/test_gpt_4o_2024_08_06_entropy_narcissist.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_entropy_narcissist', 'obj': 'TestEntropyFunction.test_different_frequencies', 'line': 18, 'column': 4, 'endLine': 18, 'endColumn': 34, 'path': 'data/generated/docs_python/entropy_narcissist/test_gpt_4o_2024_08_06_entropy_narcissist.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_entropy_narcissist', 'obj': 'TestEntropyFunction.test_long_string', 'line': 21, 'column': 4, 'endLine': 21, 'endColumn': 24, 'path': 'data/generated/docs_python/entropy_narcissist/test_gpt_4o_2024_08_06_entropy_narcissist.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Equilibrium index,"An equilibrium index of a sequence is an index into the sequence such that the sum of elements at lower indices is equal to the sum of elements at higher indices.



For example, in a sequence  



A


{\displaystyle A}

:

  




A

0


=
−
7


{\displaystyle A_{0}=-7}


  




A

1


=
1


{\displaystyle A_{1}=1}


  




A

2


=
5


{\displaystyle A_{2}=5}


  




A

3


=
2


{\displaystyle A_{3}=2}


  




A

4


=
−
4


{\displaystyle A_{4}=-4}


  




A

5


=
3


{\displaystyle A_{5}=3}


  




A

6


=
0


{\displaystyle A_{6}=0}


3   is an equilibrium index, because:

  




A

0


+

A

1


+

A

2


=

A

4


+

A

5


+

A

6




{\displaystyle A_{0}+A_{1}+A_{2}=A_{4}+A_{5}+A_{6}}


6   is also an equilibrium index, because:

  




A

0


+

A

1


+

A

2


+

A

3


+

A

4


+

A

5


=
0


{\displaystyle A_{0}+A_{1}+A_{2}+A_{3}+A_{4}+A_{5}=0}


(sum of zero elements is zero)

7   is not an equilibrium index, because it is not a valid index of sequence



A


{\displaystyle A}

.



Task;
Write a function that, given a sequence, returns its equilibrium indices (if any).

Assume that the sequence may be very long.



",Python,"def eqindex2Pass(data):
    ""Two pass""
    suml, sumr, ddelayed = 0, sum(data), 0
    for i, d in enumerate(data):
        suml += ddelayed
        sumr -= d
        ddelayed = d
        if suml == sumr:
            yield i",223,9,"import unittest
from equilibrium_index import eqindex2Pass

class TestEquilibriumIndex(unittest.TestCase):

    def test_single_equilibrium_index(self):
        data = [-7, 1, 5, 2, -4, 3, 0]
        expected = [3, 6]
        result = list(eqindex2Pass(data))
        self.assertEqual(result, expected)

    def test_no_equilibrium_index(self):
        data = [1, 2, 3, 4, 5]
        expected = []
        result = list(eqindex2Pass(data))
        self.assertEqual(result, expected)

    def test_all_zeros(self):
        data = [0, 0, 0, 0, 0]
        expected = [0, 1, 2, 3, 4]
        result = list(eqindex2Pass(data))
        self.assertEqual(result, expected)

    def test_empty_list(self):
        data = []
        expected = []
        result = list(eqindex2Pass(data))
        self.assertEqual(result, expected)

    def test_single_element(self):
        data = [10]
        expected = [0]
        result = list(eqindex2Pass(data))
        self.assertEqual(result, expected)

    def test_two_elements(self):
        data = [1, -1]
        expected = []
        result = list(eqindex2Pass(data))
        self.assertEqual(result, expected)

    def test_large_numbers(self):
        data = [1000000, -999999, -1, 0, 0, 0, 0]
        expected = [3]
        result = list(eqindex2Pass(data))
        self.assertEqual(result, expected)

    def test_negative_numbers(self):
        data = [-1, -2, -3, -4, -5, -6]
        expected = []
        result = list(eqindex2Pass(data))
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/equilibrium_index/test_gpt_4o_2024_08_06_equilibrium_index.py,CompileStatus.OK,0.0,98.11,96.61,0.18,2.67,87.5,0.5999648571014404,18.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_equilibrium_index', 'obj': '', 'line': 5, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/equilibrium_index/test_gpt_4o_2024_08_06_equilibrium_index.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_equilibrium_index', 'obj': '', 'line': 11, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/equilibrium_index/test_gpt_4o_2024_08_06_equilibrium_index.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_equilibrium_index', 'obj': '', 'line': 17, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/equilibrium_index/test_gpt_4o_2024_08_06_equilibrium_index.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_equilibrium_index', 'obj': '', 'line': 23, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/equilibrium_index/test_gpt_4o_2024_08_06_equilibrium_index.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_equilibrium_index', 'obj': '', 'line': 29, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/equilibrium_index/test_gpt_4o_2024_08_06_equilibrium_index.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_equilibrium_index', 'obj': '', 'line': 35, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/equilibrium_index/test_gpt_4o_2024_08_06_equilibrium_index.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_equilibrium_index', 'obj': '', 'line': 41, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/equilibrium_index/test_gpt_4o_2024_08_06_equilibrium_index.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_equilibrium_index', 'obj': '', 'line': 47, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/equilibrium_index/test_gpt_4o_2024_08_06_equilibrium_index.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_equilibrium_index', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/equilibrium_index/test_gpt_4o_2024_08_06_equilibrium_index.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_equilibrium_index', 'obj': 'TestEquilibriumIndex', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 26, 'path': 'data/generated/docs_python/equilibrium_index/test_gpt_4o_2024_08_06_equilibrium_index.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_equilibrium_index', 'obj': 'TestEquilibriumIndex.test_single_equilibrium_index', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 37, 'path': 'data/generated/docs_python/equilibrium_index/test_gpt_4o_2024_08_06_equilibrium_index.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_equilibrium_index', 'obj': 'TestEquilibriumIndex.test_no_equilibrium_index', 'line': 12, 'column': 4, 'endLine': 12, 'endColumn': 33, 'path': 'data/generated/docs_python/equilibrium_index/test_gpt_4o_2024_08_06_equilibrium_index.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_equilibrium_index', 'obj': 'TestEquilibriumIndex.test_all_zeros', 'line': 18, 'column': 4, 'endLine': 18, 'endColumn': 22, 'path': 'data/generated/docs_python/equilibrium_index/test_gpt_4o_2024_08_06_equilibrium_index.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_equilibrium_index', 'obj': 'TestEquilibriumIndex.test_empty_list', 'line': 24, 'column': 4, 'endLine': 24, 'endColumn': 23, 'path': 'data/generated/docs_python/equilibrium_index/test_gpt_4o_2024_08_06_equilibrium_index.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_equilibrium_index', 'obj': 'TestEquilibriumIndex.test_single_element', 'line': 30, 'column': 4, 'endLine': 30, 'endColumn': 27, 'path': 'data/generated/docs_python/equilibrium_index/test_gpt_4o_2024_08_06_equilibrium_index.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_equilibrium_index', 'obj': 'TestEquilibriumIndex.test_two_elements', 'line': 36, 'column': 4, 'endLine': 36, 'endColumn': 25, 'path': 'data/generated/docs_python/equilibrium_index/test_gpt_4o_2024_08_06_equilibrium_index.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_equilibrium_index', 'obj': 'TestEquilibriumIndex.test_large_numbers', 'line': 42, 'column': 4, 'endLine': 42, 'endColumn': 26, 'path': 'data/generated/docs_python/equilibrium_index/test_gpt_4o_2024_08_06_equilibrium_index.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_equilibrium_index', 'obj': 'TestEquilibriumIndex.test_negative_numbers', 'line': 48, 'column': 4, 'endLine': 48, 'endColumn': 29, 'path': 'data/generated/docs_python/equilibrium_index/test_gpt_4o_2024_08_06_equilibrium_index.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Ethiopian multiplication,"Ethiopian multiplication is a method of multiplying integers using only addition, doubling, and halving.


Method:

 Take two numbers to be multiplied and write them down at the top of two columns.
 In the left-hand column repeatedly halve the last number, discarding any remainders, and write the result below the last in the same column, until you write a value of 1.
 In the right-hand column repeatedly double the last number and write the result below. stop when you add a result in the same row as where the left hand column shows 1.
 Examine the table produced and discard any row where the value in the left column is even.
 Sum the values in the right-hand column that remain to produce the result of multiplying the original two numbers together

For example:   17 × 34

       17    34

Halving the first column:

       17    34
        8
        4
        2
        1

Doubling the second column:

       17    34
        8    68
        4   136
        2   272
        1   544

Strike-out rows whose first cell is even:

       17    34
        8    68
        4   136
        2   272
        1   544

Sum the remaining numbers in the right-hand column:

       17    34
        8    --
        4   ---
        2   ---
        1   544
           ====
            578

So 17 multiplied by 34, by the Ethiopian method is 578.



Task

The task is to define three named functions/methods/procedures/subroutines:

 one to halve an integer,
 one to double an integer, and
 one to state if an integer is even.


Use these functions to create a function that does Ethiopian multiplication.



References

Ethiopian multiplication explained (BBC Video clip)
A Night Of Numbers - Go Forth And Multiply (Video)
Russian Peasant Multiplication
Programming Praxis: Russian Peasant Multiplication

",Python,"tutor = True
 
def halve(x):
    return x // 2
 
def double(x):
    return x * 2
 
def even(x):
    return not x % 2
 
def ethiopian(multiplier, multiplicand):
    if tutor:
        print(""Ethiopian multiplication of %i and %i"" %
              (multiplier, multiplicand))
    result = 0
    while multiplier >= 1:
        if even(multiplier):
            if tutor:
                print(""%4i %6i STRUCK"" %
                      (multiplier, multiplicand))
        else:
            if tutor:
                print(""%4i %6i KEPT"" %
                      (multiplier, multiplicand))
            result += multiplicand
        multiplier   = halve(multiplier)
        multiplicand = double(multiplicand)
    if tutor:
        print()
    return result",748,31,"import unittest
from ethiopian_multiplication import halve, double, even, ethiopian

class TestEthiopianMultiplication(unittest.TestCase):

    def test_halve(self):
        self.assertEqual(halve(10), 5)
        self.assertEqual(halve(9), 4)
        self.assertEqual(halve(1), 0)
        self.assertEqual(halve(0), 0)
        self.assertEqual(halve(-4), -2)

    def test_double(self):
        self.assertEqual(double(10), 20)
        self.assertEqual(double(9), 18)
        self.assertEqual(double(1), 2)
        self.assertEqual(double(0), 0)
        self.assertEqual(double(-4), -8)

    def test_even(self):
        self.assertTrue(even(10))
        self.assertFalse(even(9))
        self.assertTrue(even(0))
        self.assertTrue(even(-4))
        self.assertFalse(even(-3))

    def test_ethiopian(self):
        self.assertEqual(ethiopian(17, 34), 578)
        self.assertEqual(ethiopian(0, 34), 0)
        self.assertEqual(ethiopian(17, 0), 0)
        self.assertEqual(ethiopian(1, 1), 1)
        self.assertEqual(ethiopian(2, 3), 6)
        self.assertEqual(ethiopian(3, 2), 6)
        self.assertEqual(ethiopian(5, 5), 25)
        self.assertEqual(ethiopian(7, 8), 56)
        self.assertEqual(ethiopian(8, 7), 56)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/ethiopian_multiplication/test_gpt_4o_2024_08_06_ethiopian_multiplication.py,CompileStatus.OK,0.0,98.21,91.43,0.73,2.4,100.0,0.5185000896453857,6.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_ethiopian_multiplication', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/ethiopian_multiplication/test_gpt_4o_2024_08_06_ethiopian_multiplication.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_ethiopian_multiplication', 'obj': 'TestEthiopianMultiplication', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 33, 'path': 'data/generated/docs_python/ethiopian_multiplication/test_gpt_4o_2024_08_06_ethiopian_multiplication.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_ethiopian_multiplication', 'obj': 'TestEthiopianMultiplication.test_halve', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 18, 'path': 'data/generated/docs_python/ethiopian_multiplication/test_gpt_4o_2024_08_06_ethiopian_multiplication.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_ethiopian_multiplication', 'obj': 'TestEthiopianMultiplication.test_double', 'line': 13, 'column': 4, 'endLine': 13, 'endColumn': 19, 'path': 'data/generated/docs_python/ethiopian_multiplication/test_gpt_4o_2024_08_06_ethiopian_multiplication.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_ethiopian_multiplication', 'obj': 'TestEthiopianMultiplication.test_even', 'line': 20, 'column': 4, 'endLine': 20, 'endColumn': 17, 'path': 'data/generated/docs_python/ethiopian_multiplication/test_gpt_4o_2024_08_06_ethiopian_multiplication.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_ethiopian_multiplication', 'obj': 'TestEthiopianMultiplication.test_ethiopian', 'line': 27, 'column': 4, 'endLine': 27, 'endColumn': 22, 'path': 'data/generated/docs_python/ethiopian_multiplication/test_gpt_4o_2024_08_06_ethiopian_multiplication.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Euler's sum of powers conjecture,"There is a conjecture in mathematics that held for over two hundred years before it was disproved by the finding of a counterexample in 1966 by Lander and Parkin.



Euler's (disproved) sum of powers   conjecture

  At least  k  positive  kth  powers are required to sum to a  kth  power,
  except for the trivial case of one  kth power:  yk = yk



In 1966,   Leon J. Lander   and   Thomas R. Parkin   used a brute-force search on a   CDC 6600   computer restricting numbers to those less than 250.



Task

Write a program to search for an integer solution for:


  x05 + x15 + x25 + x35 == y5

Where all     xi's   and    y    are distinct integers between   0   and   250   (exclusive).

Show an answer here.



Related tasks

   Pythagorean quadruples.
   Pythagorean triples.

",Python,"def eulers_sum_of_powers():
    max_n = 250
    pow_5 = [n**5 for n in range(max_n)]
    pow5_to_n = {n**5: n for n in range(max_n)}
    for x0 in range(1, max_n):
        for x1 in range(1, x0):
            for x2 in range(1, x1):
                for x3 in range(1, x2):
                    pow_5_sum = sum(pow_5[i] for i in (x0, x1, x2, x3))
                    if pow_5_sum in pow5_to_n:
                        y = pow5_to_n[pow_5_sum]
                        return (x0, x1, x2, x3, y)
 
print(""%i**5 + %i**5 + %i**5 + %i**5 == %i**5"" % eulers_sum_of_powers())",565,14,"import unittest
from euler_s_sum_of_powers_conjecture import eulers_sum_of_powers

class TestEulersSumOfPowers(unittest.TestCase):
    def test_eulers_sum_of_powers(self):
        # Run the function to get the result
        result = eulers_sum_of_powers()

        # Check if the result is a tuple of 5 distinct integers
        self.assertEqual(len(result), 5, ""The result should be a tuple of 5 integers."")
        self.assertTrue(all(isinstance(i, int) for i in result), ""All elements in the result should be integers."")
        self.assertEqual(len(set(result)), 5, ""All integers in the result should be distinct."")

        # Check if the integers are within the specified range
        self.assertTrue(all(0 < i < 250 for i in result), ""All integers should be between 0 and 250 (exclusive)."")

        # Check if the equation holds true
        x0, x1, x2, x3, y = result
        self.assertEqual(x0**5 + x1**5 + x2**5 + x3**5, y**5, ""The equation should hold true for the result."")

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/euler_s_sum_of_powers_conjecture/test_gpt_4o_2024_08_06_euler_s_sum_of_powers_conjecture.py,CompileStatus.OK,0.0,,,0.38,0.56,100.0,14.46865200996399,9.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_euler_s_sum_of_powers_conjecture', 'obj': '', 'line': 8, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/euler_s_sum_of_powers_conjecture/test_gpt_4o_2024_08_06_euler_s_sum_of_powers_conjecture.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_euler_s_sum_of_powers_conjecture', 'obj': '', 'line': 11, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/euler_s_sum_of_powers_conjecture/test_gpt_4o_2024_08_06_euler_s_sum_of_powers_conjecture.py', 'symbol': 'line-too-long', 'message': 'Line too long (114/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_euler_s_sum_of_powers_conjecture', 'obj': '', 'line': 13, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/euler_s_sum_of_powers_conjecture/test_gpt_4o_2024_08_06_euler_s_sum_of_powers_conjecture.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_euler_s_sum_of_powers_conjecture', 'obj': '', 'line': 15, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/euler_s_sum_of_powers_conjecture/test_gpt_4o_2024_08_06_euler_s_sum_of_powers_conjecture.py', 'symbol': 'line-too-long', 'message': 'Line too long (114/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_euler_s_sum_of_powers_conjecture', 'obj': '', 'line': 16, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/euler_s_sum_of_powers_conjecture/test_gpt_4o_2024_08_06_euler_s_sum_of_powers_conjecture.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_euler_s_sum_of_powers_conjecture', 'obj': '', 'line': 19, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/euler_s_sum_of_powers_conjecture/test_gpt_4o_2024_08_06_euler_s_sum_of_powers_conjecture.py', 'symbol': 'line-too-long', 'message': 'Line too long (110/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_euler_s_sum_of_powers_conjecture', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/euler_s_sum_of_powers_conjecture/test_gpt_4o_2024_08_06_euler_s_sum_of_powers_conjecture.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_euler_s_sum_of_powers_conjecture', 'obj': 'TestEulersSumOfPowers', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 27, 'path': 'data/generated/docs_python/euler_s_sum_of_powers_conjecture/test_gpt_4o_2024_08_06_euler_s_sum_of_powers_conjecture.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_euler_s_sum_of_powers_conjecture', 'obj': 'TestEulersSumOfPowers.test_eulers_sum_of_powers', 'line': 5, 'column': 4, 'endLine': 5, 'endColumn': 33, 'path': 'data/generated/docs_python/euler_s_sum_of_powers_conjecture/test_gpt_4o_2024_08_06_euler_s_sum_of_powers_conjecture.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Evolutionary algorithm,"Starting with:

 The target string: ""METHINKS IT IS LIKE A WEASEL"".
 An array of random characters chosen from the set of upper-case letters together with the space, and of the same length as the target string. (Call it the parent).
 A fitness function that computes the ‘closeness’ of its argument to the target string.
 A mutate function that given a string and a mutation rate returns a copy of the string, with some characters probably mutated.
 While the parent is not yet the target:
 copy the parent C times, each time allowing some random probability that another character might be substituted using mutate.
 Assess the fitness of the parent and all the copies to the target and make the most fit string the new parent, discarding the others.
 repeat until the parent converges, (hopefully), to the target.


See also

   Wikipedia entry:   Weasel algorithm.
   Wikipedia entry:   Evolutionary algorithm.

Note: to aid comparison, try and ensure the variables and functions mentioned in the task description appear in solutions



A cursory examination of a few of the solutions reveals that the instructions have not been followed rigorously in some solutions. Specifically,

 While the parent is not yet the target:
 copy the parent C times, each time allowing some random probability that another character might be substituted using mutate.
Note that some of the the solutions given retain characters in the mutated string that are correct in the target string. However, the instruction above does not state to retain any of the characters while performing the mutation. Although some may believe to do so is implied from the use of ""converges""

(:* repeat until the parent converges, (hopefully), to the target.

Strictly speaking, the new parent should be selected from the new pool of mutations, and then the new parent used to generate the next set of mutations with parent characters getting retained only by not being mutated. It then becomes possible that the new set of mutations has no member that is fitter than the parent!

As illustration of this error, the code for 8th has the following remark.

Create a new string based on the TOS, changing randomly any characters which
don't already match the target:

NOTE: this has been changed, the 8th version is completely random now

Clearly, this algo will be applying the mutation function only to the parent characters that don't match to the target characters!

To ensure that the new parent is never less fit than the prior parent, both the parent and all of the latest mutations are subjected to the fitness test to select the next parent.



",Python,"from string import letters
from random import choice, random
 
target  = list(""METHINKS IT IS LIKE A WEASEL"")
charset = letters + ' '
parent  = [choice(charset) for _ in range(len(target))]
minmutaterate  = .09
C = range(100)
 
perfectfitness = float(len(target))
 
def fitness(trial):
    'Sum of matching chars by position'
    return sum(t==h for t,h in zip(trial, target))
 
def mutaterate():
    'Less mutation the closer the fit of the parent'
    return 1-((perfectfitness - fitness(parent)) / perfectfitness * (1 - minmutaterate))
 
def mutate(parent, rate):
    return [(ch if random() <= rate else choice(charset)) for ch in parent]
 
def que():
    '(from the favourite saying of Manuel in Fawlty Towers)'
    print (""#%-4i, fitness: %4.1f%%, '%s'"" %
           (iterations, fitness(parent)*100./perfectfitness, ''.join(parent)))
 
def mate(a, b):
    place = 0
    if choice(xrange(10)) < 7:
        place = choice(xrange(len(target)))
    else:
        return a, b
 
    return a, b, a[:place] + b[place:], b[:place] + a[place:]
 
iterations = 0
center = len(C)/2
while parent != target:
    rate = mutaterate()
    iterations += 1
    if iterations % 100 == 0: que()
    copies = [ mutate(parent, rate) for _ in C ]  + [parent]
    parent1 = max(copies[:center], key=fitness)
    parent2 = max(copies[center:], key=fitness)
    parent = max(mate(parent1, parent2), key=fitness)
que()",1397,47,"import unittest
from unittest.mock import patch
from evolutionary_algorithm import fitness, mutaterate, mutate, mate

class TestEvolutionaryAlgorithm(unittest.TestCase):

    def setUp(self):
        self.target = list(""METHINKS IT IS LIKE A WEASEL"")
        self.charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ '
        self.perfectfitness = float(len(self.target))
        self.parent = [choice(self.charset) for _ in range(len(self.target))]

    def test_fitness(self):
        self.assertEqual(fitness(self.target), len(self.target))
        self.assertEqual(fitness(['M'] + [' '] * (len(self.target) - 1)), 1)
        self.assertEqual(fitness([' '] * len(self.target)), 0)

    def test_mutaterate(self):
        with patch('evolutionary_algorithm.parent', self.target):
            self.assertAlmostEqual(mutaterate(), 0.09)
        with patch('evolutionary_algorithm.parent', [' '] * len(self.target)):
            self.assertAlmostEqual(mutaterate(), 1.0)

    def test_mutate(self):
        parent = list(""METHINKS IT IS LIKE A WEASEL"")
        rate = 0.0
        mutated = mutate(parent, rate)
        self.assertEqual(mutated, parent)

        rate = 1.0
        mutated = mutate(parent, rate)
        self.assertNotEqual(mutated, parent)

    def test_mate(self):
        a = list(""METHINKS IT IS LIKE A WEASEL"")
        b = list(""ABCDEFGHIJKLM NOPQRSTUVWXYZ"")
        offspring1, offspring2 = mate(a, b)
        self.assertEqual(len(offspring1), len(self.target))
        self.assertEqual(len(offspring2), len(self.target))

    def test_mate_no_crossover(self):
        a = list(""METHINKS IT IS LIKE A WEASEL"")
        b = list(""ABCDEFGHIJKLM NOPQRSTUVWXYZ"")
        with patch('evolutionary_algorithm.choice', side_effect=[9, 8]):
            offspring1, offspring2 = mate(a, b)
            self.assertEqual(offspring1, a)
            self.assertEqual(offspring2, b)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/evolutionary_algorithm/test_gpt_4o_2024_08_06_evolutionary_algorithm.py,CompileStatus.OK,0.0,5.41,4.17,0.27,1.22,,0.7670929431915283,8.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_evolutionary_algorithm', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/evolutionary_algorithm/test_gpt_4o_2024_08_06_evolutionary_algorithm.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_evolutionary_algorithm', 'obj': 'TestEvolutionaryAlgorithm', 'line': 5, 'column': 0, 'endLine': 5, 'endColumn': 31, 'path': 'data/generated/docs_python/evolutionary_algorithm/test_gpt_4o_2024_08_06_evolutionary_algorithm.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_evolutionary_algorithm', 'obj': 'TestEvolutionaryAlgorithm.setUp', 'line': 11, 'column': 23, 'endLine': 11, 'endColumn': 29, 'path': 'data/generated/docs_python/evolutionary_algorithm/test_gpt_4o_2024_08_06_evolutionary_algorithm.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'choice'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_evolutionary_algorithm', 'obj': 'TestEvolutionaryAlgorithm.test_fitness', 'line': 13, 'column': 4, 'endLine': 13, 'endColumn': 20, 'path': 'data/generated/docs_python/evolutionary_algorithm/test_gpt_4o_2024_08_06_evolutionary_algorithm.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_evolutionary_algorithm', 'obj': 'TestEvolutionaryAlgorithm.test_mutaterate', 'line': 18, 'column': 4, 'endLine': 18, 'endColumn': 23, 'path': 'data/generated/docs_python/evolutionary_algorithm/test_gpt_4o_2024_08_06_evolutionary_algorithm.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_evolutionary_algorithm', 'obj': 'TestEvolutionaryAlgorithm.test_mutate', 'line': 24, 'column': 4, 'endLine': 24, 'endColumn': 19, 'path': 'data/generated/docs_python/evolutionary_algorithm/test_gpt_4o_2024_08_06_evolutionary_algorithm.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_evolutionary_algorithm', 'obj': 'TestEvolutionaryAlgorithm.test_mate', 'line': 34, 'column': 4, 'endLine': 34, 'endColumn': 17, 'path': 'data/generated/docs_python/evolutionary_algorithm/test_gpt_4o_2024_08_06_evolutionary_algorithm.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_evolutionary_algorithm', 'obj': 'TestEvolutionaryAlgorithm.test_mate_no_crossover', 'line': 41, 'column': 4, 'endLine': 41, 'endColumn': 30, 'path': 'data/generated/docs_python/evolutionary_algorithm/test_gpt_4o_2024_08_06_evolutionary_algorithm.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Exceptions/Catch an exception thrown in a nested call,"Show how to create a user-defined exception   and   show how to catch an exception raised from several nested calls away.

   Create two user-defined exceptions,   U0   and   U1.
   Have function   foo   call function   bar   twice.
   Have function   bar   call function   baz.
   Arrange for function   baz   to raise, or throw exception   U0   on its first call, then exception   U1   on its second.
   Function   foo   should catch only exception   U0,   not   U1.


Show/describe what happens when the program is run.



",Python,"class U0(Exception): pass
class U1(Exception): pass
 
def foo():
    for i in range(2):
        try:
            bar(i)
        except U0:
            print(""Function foo caught exception U0"")
 
def bar(i):
    baz(i) # Nest those calls
 
def baz(i):
    raise U1 if i else U0
 
foo()",284,17,"import unittest
from exceptions_catch_an_exception_thrown_in_a_nested_call import U0, U1, foo, bar, baz

class TestUserDefinedExceptions(unittest.TestCase):

    def test_foo_catches_U0(self):
        # Capture the output of foo to verify it catches U0
        with self.assertLogs() as log:
            foo()
        self.assertIn(""Function foo caught exception U0"", log.output[0])

    def test_baz_raises_U0(self):
        # Test that baz raises U0 when called with 0
        with self.assertRaises(U0):
            baz(0)

    def test_baz_raises_U1(self):
        # Test that baz raises U1 when called with 1
        with self.assertRaises(U1):
            baz(1)

    def test_bar_calls_baz(self):
        # Test that bar calls baz and raises U0 or U1 accordingly
        with self.assertRaises(U0):
            bar(0)
        with self.assertRaises(U1):
            bar(1)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/exceptions_catch_an_exception_thrown_in_a_nested_call/test_gpt_4o_2024_08_06_exceptions_catch_an_exception_thrown_in_a_nested_call.py,CompileStatus.OK,0.0,45.45,34.04,0.3,1.0,,0.7949399948120117,9.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_exceptions_catch_an_exception_thrown_in_a_nested_call', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/exceptions_catch_an_exception_thrown_in_a_nested_call/test_gpt_4o_2024_08_06_exceptions_catch_an_exception_thrown_in_a_nested_call.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_exceptions_catch_an_exception_thrown_in_a_nested_call', 'obj': 'TestUserDefinedExceptions', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 31, 'path': 'data/generated/docs_python/exceptions_catch_an_exception_thrown_in_a_nested_call/test_gpt_4o_2024_08_06_exceptions_catch_an_exception_thrown_in_a_nested_call.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_exceptions_catch_an_exception_thrown_in_a_nested_call', 'obj': 'TestUserDefinedExceptions.test_foo_catches_U0', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 27, 'path': 'data/generated/docs_python/exceptions_catch_an_exception_thrown_in_a_nested_call/test_gpt_4o_2024_08_06_exceptions_catch_an_exception_thrown_in_a_nested_call.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_exceptions_catch_an_exception_thrown_in_a_nested_call', 'obj': 'TestUserDefinedExceptions.test_foo_catches_U0', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 27, 'path': 'data/generated/docs_python/exceptions_catch_an_exception_thrown_in_a_nested_call/test_gpt_4o_2024_08_06_exceptions_catch_an_exception_thrown_in_a_nested_call.py', 'symbol': 'invalid-name', 'message': 'Method name ""test_foo_catches_U0"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_exceptions_catch_an_exception_thrown_in_a_nested_call', 'obj': 'TestUserDefinedExceptions.test_baz_raises_U0', 'line': 12, 'column': 4, 'endLine': 12, 'endColumn': 26, 'path': 'data/generated/docs_python/exceptions_catch_an_exception_thrown_in_a_nested_call/test_gpt_4o_2024_08_06_exceptions_catch_an_exception_thrown_in_a_nested_call.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_exceptions_catch_an_exception_thrown_in_a_nested_call', 'obj': 'TestUserDefinedExceptions.test_baz_raises_U0', 'line': 12, 'column': 4, 'endLine': 12, 'endColumn': 26, 'path': 'data/generated/docs_python/exceptions_catch_an_exception_thrown_in_a_nested_call/test_gpt_4o_2024_08_06_exceptions_catch_an_exception_thrown_in_a_nested_call.py', 'symbol': 'invalid-name', 'message': 'Method name ""test_baz_raises_U0"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_exceptions_catch_an_exception_thrown_in_a_nested_call', 'obj': 'TestUserDefinedExceptions.test_baz_raises_U1', 'line': 17, 'column': 4, 'endLine': 17, 'endColumn': 26, 'path': 'data/generated/docs_python/exceptions_catch_an_exception_thrown_in_a_nested_call/test_gpt_4o_2024_08_06_exceptions_catch_an_exception_thrown_in_a_nested_call.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_exceptions_catch_an_exception_thrown_in_a_nested_call', 'obj': 'TestUserDefinedExceptions.test_baz_raises_U1', 'line': 17, 'column': 4, 'endLine': 17, 'endColumn': 26, 'path': 'data/generated/docs_python/exceptions_catch_an_exception_thrown_in_a_nested_call/test_gpt_4o_2024_08_06_exceptions_catch_an_exception_thrown_in_a_nested_call.py', 'symbol': 'invalid-name', 'message': 'Method name ""test_baz_raises_U1"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_exceptions_catch_an_exception_thrown_in_a_nested_call', 'obj': 'TestUserDefinedExceptions.test_bar_calls_baz', 'line': 22, 'column': 4, 'endLine': 22, 'endColumn': 26, 'path': 'data/generated/docs_python/exceptions_catch_an_exception_thrown_in_a_nested_call/test_gpt_4o_2024_08_06_exceptions_catch_an_exception_thrown_in_a_nested_call.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Execute a Markov algorithm,"Execute a Markov algorithm

You are encouraged to solve this task according to the task description, using any language you may know.


Task

Create an interpreter for a Markov Algorithm.

Rules have the syntax:

<ruleset> ::= ((<comment> | <rule>) <newline>+)*
<comment> ::= # {<any character>}
<rule> ::= <pattern> <whitespace> -> <whitespace> [.] <replacement>
<whitespace> ::= (<tab> | <space>) [<whitespace>]

There is one rule per line.

If there is a   .   (period)   present before the   <replacement>,   then this is a terminating rule in which case the interpreter must halt execution.

A ruleset consists of a sequence of rules, with optional comments.


 Rulesets

Use the following tests on entries:



Ruleset 1

# This rules file is extracted from Wikipedia:
# http://en.wikipedia.org/wiki/Markov_Algorithm
A -> apple
B -> bag
S -> shop
T -> the
the shop -> my brother
a never used -> .terminating rule

Sample text of:

  I bought a B of As from T S.
Should generate the output:

  I bought a bag of apples from my brother.


Ruleset 2

A test of the terminating rule

# Slightly modified from the rules on Wikipedia
A -> apple
B -> bag
S -> .shop
T -> the
the shop -> my brother
a never used -> .terminating rule
Sample text of:

 I bought a B of As from T S.
Should generate:

 I bought a bag of apples from T shop.


Ruleset 3

This tests for correct substitution order and may trap simple regexp based replacement routines if special regexp characters are not escaped.

# BNF Syntax testing rules
A -> apple
WWWW -> with
Bgage -> ->.*
B -> bag
->.* -> money
W -> WW
S -> .shop
T -> the
the shop -> my brother
a never used -> .terminating rule

Sample text of:

 I bought a B of As W my Bgage from T S.
Should generate:

 I bought a bag of apples with my money from T shop.


Ruleset 4

This tests for correct order of scanning of rules, and may trap replacement routines that scan in the wrong order.   It implements a general unary multiplication engine.   (Note that the input expression must be placed within underscores in this implementation.)

### Unary Multiplication Engine, for testing Markov Algorithm implementations
### By Donal Fellows.
# Unary addition engine
_+1 -> _1+
1+1 -> 11+
# Pass for converting from the splitting of multiplication into ordinary
# addition
1! -> !1
,! -> !+
_! -> _
# Unary multiplication by duplicating left side, right side times
1*1 -> x,@y
1x -> xX
X, -> 1,1
X1 -> 1X
_x -> _X
,x -> ,X
y1 -> 1y
y_ -> _
# Next phase of applying
1@1 -> x,@y
1@_ -> @_
,@_ -> !_
++ -> +
# Termination cleanup for addition
_1 -> 1
1+_ -> 1
_+_ ->

Sample text of:

  _1111*11111_
should generate the output:

  11111111111111111111


Ruleset 5

A simple Turing machine,
implementing a three-state busy beaver.

The tape consists of 0s and 1s,   the states are A, B, C and H (for Halt), and the head position is indicated by writing the state letter before the character where the head is.
All parts of the initial tape the machine operates on have to be given in the input.

Besides demonstrating that the Markov algorithm is Turing-complete, it also made me catch a bug in the C++ implementation which wasn't caught by the first four rulesets.

# Turing machine: three-state busy beaver
#
# state A, symbol 0 => write 1, move right, new state B
A0 -> 1B
# state A, symbol 1 => write 1, move left, new state C
0A1 -> C01
1A1 -> C11
# state B, symbol 0 => write 1, move left, new state A
0B0 -> A01
1B0 -> A11
# state B, symbol 1 => write 1, move right, new state B
B1 -> 1B
# state C, symbol 0 => write 1, move left, new state B
0C0 -> B01
1C0 -> B11
# state C, symbol 1 => write 1, move left, halt
0C1 -> H01
1C1 -> H11

This ruleset should turn

  000000A000000
into

  00011H1111000

",Python,"import re
 
def extractreplacements(grammar):
    return [ (matchobj.group('pat'), matchobj.group('repl'), bool(matchobj.group('term')))
                for matchobj in re.finditer(syntaxre, grammar)
                if matchobj.group('rule')]
 
def replace(text, replacements):
    while True:
        for pat, repl, term in replacements:
            if pat in text:
                text = text.replace(pat, repl, 1)
                if term:
                    return text
                break
        else:
            return text
 
syntaxre = r""""""(?mx)
^(?:
  (?: (?P<comment> \# .* ) ) |
  (?: (?P<blank>   \s*  ) (?: \n | $ )  ) |
  (?: (?P<rule>    (?P<pat> .+? ) \s+ -> \s+ (?P<term> \.)? (?P<repl> .+) ) )
)$
""""""
 
grammar1 = """"""\
# This rules file is extracted from Wikipedia:
# http://en.wikipedia.org/wiki/Markov_Algorithm
A -> apple
B -> bag
S -> shop
T -> the
the shop -> my brother
a never used -> .terminating rule
""""""
 
grammar2 = '''\
# Slightly modified from the rules on Wikipedia
A -> apple
B -> bag
S -> .shop
T -> the
the shop -> my brother
a never used -> .terminating rule
'''
 
grammar3 = '''\
# BNF Syntax testing rules
A -> apple
WWWW -> with
Bgage -> ->.*
B -> bag
->.* -> money
W -> WW
S -> .shop
T -> the
the shop -> my brother
a never used -> .terminating rule
'''
 
grammar4 = '''\
### Unary Multiplication Engine, for testing Markov Algorithm implementations
### By Donal Fellows.
# Unary addition engine
_+1 -> _1+
1+1 -> 11+
# Pass for converting from the splitting of multiplication into ordinary
# addition
1! -> !1
,! -> !+
_! -> _
# Unary multiplication by duplicating left side, right side times
1*1 -> x,@y
1x -> xX
X, -> 1,1
X1 -> 1X
_x -> _X
,x -> ,X
y1 -> 1y
y_ -> _
# Next phase of applying
1@1 -> x,@y
1@_ -> @_
,@_ -> !_
++ -> +
# Termination cleanup for addition
_1 -> 1
1+_ -> 1
_+_ ->
'''
 
grammar5 = '''\
# Turing machine: three-state busy beaver
#
# state A, symbol 0 => write 1, move right, new state B
A0 -> 1B
# state A, symbol 1 => write 1, move left, new state C
0A1 -> C01
1A1 -> C11
# state B, symbol 0 => write 1, move left, new state A
0B0 -> A01
1B0 -> A11
# state B, symbol 1 => write 1, move right, new state B
B1 -> 1B
# state C, symbol 0 => write 1, move left, new state B
0C0 -> B01
1C0 -> B11
# state C, symbol 1 => write 1, move left, halt
0C1 -> H01
1C1 -> H11
'''
 
text1 = ""I bought a B of As from T S.""
 
text2 = ""I bought a B of As W my Bgage from T S.""
 
text3 = '_1111*11111_'
 
text4 = '000000A000000'
 
 
if __name__ == '__main__':
    assert replace(text1, extractreplacements(grammar1)) \
           == 'I bought a bag of apples from my brother.'
    assert replace(text1, extractreplacements(grammar2)) \
           == 'I bought a bag of apples from T shop.'
    # Stretch goals
    assert replace(text2, extractreplacements(grammar3)) \
           == 'I bought a bag of apples with my money from T shop.'
    assert replace(text3, extractreplacements(grammar4)) \
           == '11111111111111111111'
    assert replace(text4, extractreplacements(grammar5)) \
           == '00011H1111000'",3075,134,"import unittest

class TestMarkovAlgorithm(unittest.TestCase):

    def setUp(self):
        self.grammar1 = """"""\
# This rules file is extracted from Wikipedia:
# http://en.wikipedia.org/wiki/Markov_Algorithm
A -> apple
B -> bag
S -> shop
T -> the
the shop -> my brother
a never used -> .terminating rule
""""""
        self.grammar2 = '''\
# Slightly modified from the rules on Wikipedia
A -> apple
B -> bag
S -> .shop
T -> the
the shop -> my brother
a never used -> .terminating rule
'''
        self.grammar3 = '''\
# BNF Syntax testing rules
A -> apple
WWWW -> with
Bgage -> ->.*
B -> bag
->.* -> money
W -> WW
S -> .shop
T -> the
the shop -> my brother
a never used -> .terminating rule
'''
        self.grammar4 = '''\
### Unary Multiplication Engine, for testing Markov Algorithm implementations
### By Donal Fellows.
# Unary addition engine
_+1 -> _1+
1+1 -> 11+
# Pass for converting from the splitting of multiplication into ordinary
# addition
1! -> !1
,! -> !+
_! -> _
# Unary multiplication by duplicating left side, right side times
1*1 -> x,@y
1x -> xX
X, -> 1,1
X1 -> 1X
_x -> _X
,x -> ,X
y1 -> 1y
y_ -> _
# Next phase of applying
1@1 -> x,@y
1@_ -> @_
,@_ -> !_
++ -> +
# Termination cleanup for addition
_1 -> 1
1+_ -> 1
_+_ ->
'''
        self.grammar5 = '''\
# Turing machine: three-state busy beaver
#
# state A, symbol 0 => write 1, move right, new state B
A0 -> 1B
# state A, symbol 1 => write 1, move left, new state C
0A1 -> C01
1A1 -> C11
# state B, symbol 0 => write 1, move left, new state A
0B0 -> A01
1B0 -> A11
# state B, symbol 1 => write 1, move right, new state B
B1 -> 1B
# state C, symbol 0 => write 1, move left, new state B
0C0 -> B01
1C0 -> B11
# state C, symbol 1 => write 1, move left, halt
0C1 -> H01
1C1 -> H11
'''
        self.text1 = ""I bought a B of As from T S.""
        self.text2 = ""I bought a B of As W my Bgage from T S.""
        self.text3 = '_1111*11111_'
        self.text4 = '000000A000000'

    def test_ruleset1(self):
        replacements = extractreplacements(self.grammar1)
        result = replace(self.text1, replacements)
        self.assertEqual(result, 'I bought a bag of apples from my brother.')

    def test_ruleset2(self):
        replacements = extractreplacements(self.grammar2)
        result = replace(self.text1, replacements)
        self.assertEqual(result, 'I bought a bag of apples from T shop.')

    def test_ruleset3(self):
        replacements = extractreplacements(self.grammar3)
        result = replace(self.text2, replacements)
        self.assertEqual(result, 'I bought a bag of apples with my money from T shop.')

    def test_ruleset4(self):
        replacements = extractreplacements(self.grammar4)
        result = replace(self.text3, replacements)
        self.assertEqual(result, '11111111111111111111')

    def test_ruleset5(self):
        replacements = extractreplacements(self.grammar5)
        result = replace(self.text4, replacements)
        self.assertEqual(result, '00011H1111000')

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/execute_a_markov_algorithm/test_gpt_4o_2024_08_06_execute_a_markov_algorithm.py,CompileStatus.OK,0.0,37.1,32.43,0.15,0.62,,0.5840640068054199,18.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_execute_a_markov_algorithm', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/execute_a_markov_algorithm/test_gpt_4o_2024_08_06_execute_a_markov_algorithm.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_execute_a_markov_algorithm', 'obj': 'TestMarkovAlgorithm', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 25, 'path': 'data/generated/docs_python/execute_a_markov_algorithm/test_gpt_4o_2024_08_06_execute_a_markov_algorithm.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'refactor', 'module': 'test_gpt_4o_2024_08_06_execute_a_markov_algorithm', 'obj': 'TestMarkovAlgorithm', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 25, 'path': 'data/generated/docs_python/execute_a_markov_algorithm/test_gpt_4o_2024_08_06_execute_a_markov_algorithm.py', 'symbol': 'too-many-instance-attributes', 'message': 'Too many instance attributes (9/7)', 'message-id': 'R0902'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_execute_a_markov_algorithm', 'obj': 'TestMarkovAlgorithm.test_ruleset1', 'line': 93, 'column': 4, 'endLine': 93, 'endColumn': 21, 'path': 'data/generated/docs_python/execute_a_markov_algorithm/test_gpt_4o_2024_08_06_execute_a_markov_algorithm.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_execute_a_markov_algorithm', 'obj': 'TestMarkovAlgorithm.test_ruleset1', 'line': 94, 'column': 23, 'endLine': 94, 'endColumn': 42, 'path': 'data/generated/docs_python/execute_a_markov_algorithm/test_gpt_4o_2024_08_06_execute_a_markov_algorithm.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'extractreplacements'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_execute_a_markov_algorithm', 'obj': 'TestMarkovAlgorithm.test_ruleset1', 'line': 95, 'column': 17, 'endLine': 95, 'endColumn': 24, 'path': 'data/generated/docs_python/execute_a_markov_algorithm/test_gpt_4o_2024_08_06_execute_a_markov_algorithm.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'replace'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_execute_a_markov_algorithm', 'obj': 'TestMarkovAlgorithm.test_ruleset2', 'line': 98, 'column': 4, 'endLine': 98, 'endColumn': 21, 'path': 'data/generated/docs_python/execute_a_markov_algorithm/test_gpt_4o_2024_08_06_execute_a_markov_algorithm.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_execute_a_markov_algorithm', 'obj': 'TestMarkovAlgorithm.test_ruleset2', 'line': 99, 'column': 23, 'endLine': 99, 'endColumn': 42, 'path': 'data/generated/docs_python/execute_a_markov_algorithm/test_gpt_4o_2024_08_06_execute_a_markov_algorithm.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'extractreplacements'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_execute_a_markov_algorithm', 'obj': 'TestMarkovAlgorithm.test_ruleset2', 'line': 100, 'column': 17, 'endLine': 100, 'endColumn': 24, 'path': 'data/generated/docs_python/execute_a_markov_algorithm/test_gpt_4o_2024_08_06_execute_a_markov_algorithm.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'replace'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_execute_a_markov_algorithm', 'obj': 'TestMarkovAlgorithm.test_ruleset3', 'line': 103, 'column': 4, 'endLine': 103, 'endColumn': 21, 'path': 'data/generated/docs_python/execute_a_markov_algorithm/test_gpt_4o_2024_08_06_execute_a_markov_algorithm.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_execute_a_markov_algorithm', 'obj': 'TestMarkovAlgorithm.test_ruleset3', 'line': 104, 'column': 23, 'endLine': 104, 'endColumn': 42, 'path': 'data/generated/docs_python/execute_a_markov_algorithm/test_gpt_4o_2024_08_06_execute_a_markov_algorithm.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'extractreplacements'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_execute_a_markov_algorithm', 'obj': 'TestMarkovAlgorithm.test_ruleset3', 'line': 105, 'column': 17, 'endLine': 105, 'endColumn': 24, 'path': 'data/generated/docs_python/execute_a_markov_algorithm/test_gpt_4o_2024_08_06_execute_a_markov_algorithm.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'replace'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_execute_a_markov_algorithm', 'obj': 'TestMarkovAlgorithm.test_ruleset4', 'line': 108, 'column': 4, 'endLine': 108, 'endColumn': 21, 'path': 'data/generated/docs_python/execute_a_markov_algorithm/test_gpt_4o_2024_08_06_execute_a_markov_algorithm.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_execute_a_markov_algorithm', 'obj': 'TestMarkovAlgorithm.test_ruleset4', 'line': 109, 'column': 23, 'endLine': 109, 'endColumn': 42, 'path': 'data/generated/docs_python/execute_a_markov_algorithm/test_gpt_4o_2024_08_06_execute_a_markov_algorithm.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'extractreplacements'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_execute_a_markov_algorithm', 'obj': 'TestMarkovAlgorithm.test_ruleset4', 'line': 110, 'column': 17, 'endLine': 110, 'endColumn': 24, 'path': 'data/generated/docs_python/execute_a_markov_algorithm/test_gpt_4o_2024_08_06_execute_a_markov_algorithm.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'replace'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_execute_a_markov_algorithm', 'obj': 'TestMarkovAlgorithm.test_ruleset5', 'line': 113, 'column': 4, 'endLine': 113, 'endColumn': 21, 'path': 'data/generated/docs_python/execute_a_markov_algorithm/test_gpt_4o_2024_08_06_execute_a_markov_algorithm.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_execute_a_markov_algorithm', 'obj': 'TestMarkovAlgorithm.test_ruleset5', 'line': 114, 'column': 23, 'endLine': 114, 'endColumn': 42, 'path': 'data/generated/docs_python/execute_a_markov_algorithm/test_gpt_4o_2024_08_06_execute_a_markov_algorithm.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'extractreplacements'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_execute_a_markov_algorithm', 'obj': 'TestMarkovAlgorithm.test_ruleset5', 'line': 115, 'column': 17, 'endLine': 115, 'endColumn': 24, 'path': 'data/generated/docs_python/execute_a_markov_algorithm/test_gpt_4o_2024_08_06_execute_a_markov_algorithm.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'replace'"", 'message-id': 'E0602'}]",False
Execute a system command,"Task

Run either the   ls   system command   (dir   on Windows),   or the   pause   system command.




Related task
  Get system command output

",Python,"import os
exit_code = os.system('ls')       # Just execute the command, return a success/fail code
output    = os.popen('ls').read() # If you want to get the output data. Deprecated.",182,3,"import unittest
import os
import platform

class TestExecuteSystemCommand(unittest.TestCase):

    def test_ls_command_exit_code(self):
        if platform.system() != 'Windows':
            exit_code = os.system('ls')
            self.assertEqual(exit_code, 0, ""The 'ls' command should return an exit code of 0 on success."")

    def test_ls_command_output(self):
        if platform.system() != 'Windows':
            output = os.popen('ls').read()
            self.assertIsInstance(output, str, ""The output of 'ls' command should be a string."")
            self.assertGreater(len(output), 0, ""The output of 'ls' command should not be empty."")

    def test_dir_command_exit_code(self):
        if platform.system() == 'Windows':
            exit_code = os.system('dir')
            self.assertEqual(exit_code, 0, ""The 'dir' command should return an exit code of 0 on success."")

    def test_dir_command_output(self):
        if platform.system() == 'Windows':
            output = os.popen('dir').read()
            self.assertIsInstance(output, str, ""The output of 'dir' command should be a string."")
            self.assertGreater(len(output), 0, ""The output of 'dir' command should not be empty."")

    def test_pause_command_exit_code(self):
        if platform.system() == 'Windows':
            exit_code = os.system('pause')
            self.assertNotEqual(exit_code, 0, ""The 'pause' command should not return an exit code of 0 when run in a non-interactive shell."")

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/execute_a_system_command/test_gpt_4o_2024_08_06_execute_a_system_command.py,CompileStatus.OK,0.0,64.52,60.47,0.25,,100.0,0.5189008712768555,10.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_execute_a_system_command', 'obj': '', 'line': 10, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/execute_a_system_command/test_gpt_4o_2024_08_06_execute_a_system_command.py', 'symbol': 'line-too-long', 'message': 'Line too long (106/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_execute_a_system_command', 'obj': '', 'line': 21, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/execute_a_system_command/test_gpt_4o_2024_08_06_execute_a_system_command.py', 'symbol': 'line-too-long', 'message': 'Line too long (107/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_execute_a_system_command', 'obj': '', 'line': 32, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/execute_a_system_command/test_gpt_4o_2024_08_06_execute_a_system_command.py', 'symbol': 'line-too-long', 'message': 'Line too long (141/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_execute_a_system_command', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/execute_a_system_command/test_gpt_4o_2024_08_06_execute_a_system_command.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_execute_a_system_command', 'obj': 'TestExecuteSystemCommand', 'line': 5, 'column': 0, 'endLine': 5, 'endColumn': 30, 'path': 'data/generated/docs_python/execute_a_system_command/test_gpt_4o_2024_08_06_execute_a_system_command.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_execute_a_system_command', 'obj': 'TestExecuteSystemCommand.test_ls_command_exit_code', 'line': 7, 'column': 4, 'endLine': 7, 'endColumn': 33, 'path': 'data/generated/docs_python/execute_a_system_command/test_gpt_4o_2024_08_06_execute_a_system_command.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_execute_a_system_command', 'obj': 'TestExecuteSystemCommand.test_ls_command_output', 'line': 12, 'column': 4, 'endLine': 12, 'endColumn': 30, 'path': 'data/generated/docs_python/execute_a_system_command/test_gpt_4o_2024_08_06_execute_a_system_command.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_execute_a_system_command', 'obj': 'TestExecuteSystemCommand.test_dir_command_exit_code', 'line': 18, 'column': 4, 'endLine': 18, 'endColumn': 34, 'path': 'data/generated/docs_python/execute_a_system_command/test_gpt_4o_2024_08_06_execute_a_system_command.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_execute_a_system_command', 'obj': 'TestExecuteSystemCommand.test_dir_command_output', 'line': 23, 'column': 4, 'endLine': 23, 'endColumn': 31, 'path': 'data/generated/docs_python/execute_a_system_command/test_gpt_4o_2024_08_06_execute_a_system_command.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_execute_a_system_command', 'obj': 'TestExecuteSystemCommand.test_pause_command_exit_code', 'line': 29, 'column': 4, 'endLine': 29, 'endColumn': 36, 'path': 'data/generated/docs_python/execute_a_system_command/test_gpt_4o_2024_08_06_execute_a_system_command.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Extend your language,"Control Structures
These are examples of control structures. You may also be interested in:

 Conditional structures
 Exceptions
 Flow-control structures
 Loops

Some programming languages allow you to extend the language. While this can be done to a certain degree in most languages (e.g. by using macros), other languages go much further. Most notably in the Forth and Lisp families, programming per se is done by extending the language without any formal distinction between built-in and user-defined elements.

If your language supports it, show how to introduce a new flow control mechanism. A practical and useful example is a four-way branch:

Occasionally, code must be written that depends on two conditions, resulting in up to four branches (depending on whether both, only the first, only the second, or none of the conditions are ""true""). In a C-like language this could look like the following:

  if (condition1isTrue) {
     if (condition2isTrue)
        bothConditionsAreTrue();
     else
        firstConditionIsTrue();
  }
  else if (condition2isTrue)
     secondConditionIsTrue();
  else
     noConditionIsTrue();

Besides being rather cluttered, the statement(s) for 'condition2isTrue' must be written down twice. If 'condition2isTrue' were a lengthy and involved expression, it would be quite unreadable, and the code generated by the compiler might be unnecessarily large.

This can be improved by introducing a new keyword if2. It is similar to if, but takes two conditional statements instead of one, and up to three 'else' statements. One proposal (in pseudo-C syntax) might be:

  if2 (condition1isTrue) (condition2isTrue)
     bothConditionsAreTrue();
  else1
     firstConditionIsTrue();
  else2
     secondConditionIsTrue();
  else
     noConditionIsTrue();

Pick the syntax which suits your language. The keywords 'else1' and 'else2' are just examples. The new conditional expression should look, nest and behave analogously to the language's built-in 'if' statement.
",Python,"a, b = 1, 0
 
if (c1 := a == 1) and (c2 := b == 3):
  print('a = 1 and b = 3')
elif c1:
  print('a = 1 and b <> 3')
elif c2:
  print('a <> 1 and b = 3')
else:
  print('a <> 1 and b <> 3')",187,10,"import unittest
from io import StringIO
import sys

class TestControlStructures(unittest.TestCase):
    def setUp(self):
        # Redirect stdout to capture print statements
        self.held, sys.stdout = sys.stdout, StringIO()

    def tearDown(self):
        # Reset redirect.
        sys.stdout = self.held

    def test_both_conditions_true(self):
        a, b = 1, 3
        if (c1 := a == 1) and (c2 := b == 3):
            print('a = 1 and b = 3')
        elif c1:
            print('a = 1 and b <> 3')
        elif c2:
            print('a <> 1 and b = 3')
        else:
            print('a <> 1 and b <> 3')

        self.assertEqual(sys.stdout.getvalue().strip(), 'a = 1 and b = 3')

    def test_first_condition_true(self):
        a, b = 1, 0
        if (c1 := a == 1) and (c2 := b == 3):
            print('a = 1 and b = 3')
        elif c1:
            print('a = 1 and b <> 3')
        elif c2:
            print('a <> 1 and b = 3')
        else:
            print('a <> 1 and b <> 3')

        self.assertEqual(sys.stdout.getvalue().strip(), 'a = 1 and b <> 3')

    def test_second_condition_true(self):
        a, b = 0, 3
        if (c1 := a == 1) and (c2 := b == 3):
            print('a = 1 and b = 3')
        elif c1:
            print('a = 1 and b <> 3')
        elif c2:
            print('a <> 1 and b = 3')
        else:
            print('a <> 1 and b <> 3')

        self.assertEqual(sys.stdout.getvalue().strip(), 'a <> 1 and b = 3')

    def test_no_conditions_true(self):
        a, b = 0, 0
        if (c1 := a == 1) and (c2 := b == 3):
            print('a = 1 and b = 3')
        elif c1:
            print('a = 1 and b <> 3')
        elif c2:
            print('a <> 1 and b = 3')
        else:
            print('a <> 1 and b <> 3')

        self.assertEqual(sys.stdout.getvalue().strip(), 'a <> 1 and b <> 3')

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/extend_your_language/test_gpt_4o_2024_08_06_extend_your_language.py,CompileStatus.OK,0.0,51.72,42.22,0.07,,50.0,0.5790810585021973,10.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_extend_your_language', 'obj': '', 'line': 24, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/extend_your_language/test_gpt_4o_2024_08_06_extend_your_language.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_extend_your_language', 'obj': '', 'line': 37, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/extend_your_language/test_gpt_4o_2024_08_06_extend_your_language.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_extend_your_language', 'obj': '', 'line': 50, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/extend_your_language/test_gpt_4o_2024_08_06_extend_your_language.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_extend_your_language', 'obj': '', 'line': 63, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/extend_your_language/test_gpt_4o_2024_08_06_extend_your_language.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_extend_your_language', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/extend_your_language/test_gpt_4o_2024_08_06_extend_your_language.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_extend_your_language', 'obj': 'TestControlStructures', 'line': 5, 'column': 0, 'endLine': 5, 'endColumn': 27, 'path': 'data/generated/docs_python/extend_your_language/test_gpt_4o_2024_08_06_extend_your_language.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_extend_your_language', 'obj': 'TestControlStructures.test_both_conditions_true', 'line': 14, 'column': 4, 'endLine': 14, 'endColumn': 33, 'path': 'data/generated/docs_python/extend_your_language/test_gpt_4o_2024_08_06_extend_your_language.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_extend_your_language', 'obj': 'TestControlStructures.test_first_condition_true', 'line': 27, 'column': 4, 'endLine': 27, 'endColumn': 33, 'path': 'data/generated/docs_python/extend_your_language/test_gpt_4o_2024_08_06_extend_your_language.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_extend_your_language', 'obj': 'TestControlStructures.test_second_condition_true', 'line': 40, 'column': 4, 'endLine': 40, 'endColumn': 34, 'path': 'data/generated/docs_python/extend_your_language/test_gpt_4o_2024_08_06_extend_your_language.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_extend_your_language', 'obj': 'TestControlStructures.test_no_conditions_true', 'line': 53, 'column': 4, 'endLine': 53, 'endColumn': 31, 'path': 'data/generated/docs_python/extend_your_language/test_gpt_4o_2024_08_06_extend_your_language.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Extensible prime generator,"Task

Write a generator of prime numbers, in order, that will automatically adjust to accommodate the generation of any reasonably high prime.

The routine should demonstrably rely on either:

 Being based on an open-ended counter set to count without upper limit other than system or programming language limits. In this case, explain where this counter is in the code.
 Being based on a limit that is extended automatically. In this case, choose a small limit that ensures the limit will be passed when generating some of the values to be asked for below.
 If other methods of creating an extensible prime generator are used, the algorithm's means of extensibility/lack of limits should be stated.


The routine should be used to:

 Show the first twenty primes.
 Show the primes between 100 and 150.
 Show the number of primes between 7,700 and 8,000.
 Show the 10,000th prime.


Show output on this page.

Note: You may reference code already on this site if it is written to be imported/included, then only the code necessary for import and the performance of this task need be shown. (It is also important to leave a forward link on the referenced tasks entry so that later editors know that the code is used for multiple tasks).

Note 2: If a languages in-built prime generator is extensible or is guaranteed to generate primes up to a system limit, (231 or memory overflow for example), then this may be used as long as an explanation of the limits of the prime generator is also given. (Which may include a link to/excerpt from, language documentation).

Note 3:The task is written so it may be useful in solving the task   Emirp primes   as well as others (depending on its efficiency).





Reference

 Prime Numbers. Website with large count of primes.

",Python,"islice(count(7), 0, None, 2)",28,1,"import unittest
from itertools import islice

def prime_generator():
    """"""Generator function for prime numbers.""""""
    D = {}
    q = 2  # Starting with the first prime number

    while True:
        if q not in D:
            # q is a new prime number
            yield q
            # Mark the first multiple of q that is not already marked
            D[q * q] = [q]
        else:
            # q is not a prime, it is a composite number
            for p in D[q]:
                D.setdefault(p + q, []).append(p)
            del D[q]
        q += 1

class TestPrimeGenerator(unittest.TestCase):
    def test_first_twenty_primes(self):
        gen = prime_generator()
        first_twenty_primes = list(islice(gen, 20))
        expected_primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]
        self.assertEqual(first_twenty_primes, expected_primes)

    def test_primes_between_100_and_150(self):
        gen = prime_generator()
        primes_between_100_and_150 = [p for p in gen if p >= 100 and p <= 150]
        expected_primes = [101, 103, 107, 109, 113, 127, 131, 137, 139, 149]
        self.assertEqual(primes_between_100_and_150, expected_primes)

    def test_number_of_primes_between_7700_and_8000(self):
        gen = prime_generator()
        primes_between_7700_and_8000 = [p for p in gen if p >= 7700 and p <= 8000]
        self.assertEqual(len(primes_between_7700_and_8000), 28)

    def test_10000th_prime(self):
        gen = prime_generator()
        ten_thousandth_prime = next(islice(gen, 9999, None))
        self.assertEqual(ten_thousandth_prime, 104729)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/extensible_prime_generator/test_gpt_4o_2024_08_06_extensible_prime_generator.py,CompileStatus.OK,,,,0.11,,,,10.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_extensible_prime_generator', 'obj': '', 'line': 26, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/extensible_prime_generator/test_gpt_4o_2024_08_06_extensible_prime_generator.py', 'symbol': 'line-too-long', 'message': 'Line too long (102/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_extensible_prime_generator', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/extensible_prime_generator/test_gpt_4o_2024_08_06_extensible_prime_generator.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_extensible_prime_generator', 'obj': 'prime_generator', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 5, 'path': 'data/generated/docs_python/extensible_prime_generator/test_gpt_4o_2024_08_06_extensible_prime_generator.py', 'symbol': 'invalid-name', 'message': 'Variable name ""D"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_extensible_prime_generator', 'obj': 'TestPrimeGenerator', 'line': 22, 'column': 0, 'endLine': 22, 'endColumn': 24, 'path': 'data/generated/docs_python/extensible_prime_generator/test_gpt_4o_2024_08_06_extensible_prime_generator.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_extensible_prime_generator', 'obj': 'TestPrimeGenerator.test_first_twenty_primes', 'line': 23, 'column': 4, 'endLine': 23, 'endColumn': 32, 'path': 'data/generated/docs_python/extensible_prime_generator/test_gpt_4o_2024_08_06_extensible_prime_generator.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_extensible_prime_generator', 'obj': 'TestPrimeGenerator.test_primes_between_100_and_150', 'line': 29, 'column': 4, 'endLine': 29, 'endColumn': 39, 'path': 'data/generated/docs_python/extensible_prime_generator/test_gpt_4o_2024_08_06_extensible_prime_generator.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'refactor', 'module': 'test_gpt_4o_2024_08_06_extensible_prime_generator', 'obj': 'TestPrimeGenerator.test_primes_between_100_and_150', 'line': 31, 'column': 56, 'endLine': 31, 'endColumn': 77, 'path': 'data/generated/docs_python/extensible_prime_generator/test_gpt_4o_2024_08_06_extensible_prime_generator.py', 'symbol': 'chained-comparison', 'message': 'Simplify chained comparison between the operands', 'message-id': 'R1716'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_extensible_prime_generator', 'obj': 'TestPrimeGenerator.test_number_of_primes_between_7700_and_8000', 'line': 35, 'column': 4, 'endLine': 35, 'endColumn': 51, 'path': 'data/generated/docs_python/extensible_prime_generator/test_gpt_4o_2024_08_06_extensible_prime_generator.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'refactor', 'module': 'test_gpt_4o_2024_08_06_extensible_prime_generator', 'obj': 'TestPrimeGenerator.test_number_of_primes_between_7700_and_8000', 'line': 37, 'column': 58, 'endLine': 37, 'endColumn': 81, 'path': 'data/generated/docs_python/extensible_prime_generator/test_gpt_4o_2024_08_06_extensible_prime_generator.py', 'symbol': 'chained-comparison', 'message': 'Simplify chained comparison between the operands', 'message-id': 'R1716'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_extensible_prime_generator', 'obj': 'TestPrimeGenerator.test_10000th_prime', 'line': 40, 'column': 4, 'endLine': 40, 'endColumn': 26, 'path': 'data/generated/docs_python/extensible_prime_generator/test_gpt_4o_2024_08_06_extensible_prime_generator.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",True
FASTA format,"In bioinformatics, long character strings are often encoded in a format called FASTA.

A FASTA file can contain several strings, each identified by a name marked by a > (greater than) character at the beginning of the line.



Task

Write a program that reads a FASTA file such as:

>Rosetta_Example_1
THERECANBENOSPACE
>Rosetta_Example_2
THERECANBESEVERAL
LINESBUTTHEYALLMUST
BECONCATENATED


Output:
Rosetta_Example_1: THERECANBENOSPACE
Rosetta_Example_2: THERECANBESEVERALLINESBUTTHEYALLMUSTBECONCATENATED

Note that a high-quality implementation will not hold the entire file in memory at once; real FASTA files can be multiple gigabytes in size.



",Python,"import io
 
FASTA='''\
>Rosetta_Example_1
THERECANBENOSPACE
>Rosetta_Example_2
THERECANBESEVERAL
LINESBUTTHEYALLMUST
BECONCATENATED'''
 
infile = io.StringIO(FASTA)
 
def fasta_parse(infile):
    key = ''
    for line in infile:
        if line.startswith('>'):
            if key:
                yield key, val
            key, val = line[1:].rstrip().split()[0], ''
        elif key:
            val += line.rstrip()
    if key:
        yield key, val
 
print('\n'.join('%s: %s' % keyval for keyval in fasta_parse(infile)))",526,25,"import io
import unittest
from fasta_format import fasta_parse

class TestFastaParse(unittest.TestCase):
    def setUp(self):
        self.fasta_data = '''\
>Rosetta_Example_1
THERECANBENOSPACE
>Rosetta_Example_2
THERECANBESEVERAL
LINESBUTTHEYALLMUST
BECONCATENATED'''

    def test_single_line_sequence(self):
        fasta_input = io.StringIO('''\
>Example_1
SEQUENCE''')
        result = list(fasta_parse(fasta_input))
        expected = [('Example_1', 'SEQUENCE')]
        self.assertEqual(result, expected)

    def test_multi_line_sequence(self):
        fasta_input = io.StringIO('''\
>Example_2
MULTILINE
SEQUENCEPART1
SEQUENCEPART2''')
        result = list(fasta_parse(fasta_input))
        expected = [('Example_2', 'MULTILINESEQUENCEPART1SEQUENCEPART2')]
        self.assertEqual(result, expected)

    def test_multiple_entries(self):
        fasta_input = io.StringIO(self.fasta_data)
        result = list(fasta_parse(fasta_input))
        expected = [
            ('Rosetta_Example_1', 'THERECANBENOSPACE'),
            ('Rosetta_Example_2', 'THERECANBESEVERALLINESBUTTHEYALLMUSTBECONCATENATED')
        ]
        self.assertEqual(result, expected)

    def test_empty_file(self):
        fasta_input = io.StringIO('')
        result = list(fasta_parse(fasta_input))
        expected = []
        self.assertEqual(result, expected)

    def test_no_sequence(self):
        fasta_input = io.StringIO('''\
>Example_3''')
        result = list(fasta_parse(fasta_input))
        expected = [('Example_3', '')]
        self.assertEqual(result, expected)

    def test_no_header(self):
        fasta_input = io.StringIO('SEQUENCEWITHOUTHEADER')
        result = list(fasta_parse(fasta_input))
        expected = []
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/fasta_format/test_gpt_4o_2024_08_06_fasta_format.py,CompileStatus.OK,0.0,98.11,97.01,0.16,1.0,100.0,0.695155143737793,8.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fasta_format', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/fasta_format/test_gpt_4o_2024_08_06_fasta_format.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fasta_format', 'obj': 'TestFastaParse', 'line': 5, 'column': 0, 'endLine': 5, 'endColumn': 20, 'path': 'data/generated/docs_python/fasta_format/test_gpt_4o_2024_08_06_fasta_format.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fasta_format', 'obj': 'TestFastaParse.test_single_line_sequence', 'line': 15, 'column': 4, 'endLine': 15, 'endColumn': 33, 'path': 'data/generated/docs_python/fasta_format/test_gpt_4o_2024_08_06_fasta_format.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fasta_format', 'obj': 'TestFastaParse.test_multi_line_sequence', 'line': 23, 'column': 4, 'endLine': 23, 'endColumn': 32, 'path': 'data/generated/docs_python/fasta_format/test_gpt_4o_2024_08_06_fasta_format.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fasta_format', 'obj': 'TestFastaParse.test_multiple_entries', 'line': 33, 'column': 4, 'endLine': 33, 'endColumn': 29, 'path': 'data/generated/docs_python/fasta_format/test_gpt_4o_2024_08_06_fasta_format.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fasta_format', 'obj': 'TestFastaParse.test_empty_file', 'line': 42, 'column': 4, 'endLine': 42, 'endColumn': 23, 'path': 'data/generated/docs_python/fasta_format/test_gpt_4o_2024_08_06_fasta_format.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fasta_format', 'obj': 'TestFastaParse.test_no_sequence', 'line': 48, 'column': 4, 'endLine': 48, 'endColumn': 24, 'path': 'data/generated/docs_python/fasta_format/test_gpt_4o_2024_08_06_fasta_format.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fasta_format', 'obj': 'TestFastaParse.test_no_header', 'line': 55, 'column': 4, 'endLine': 55, 'endColumn': 22, 'path': 'data/generated/docs_python/fasta_format/test_gpt_4o_2024_08_06_fasta_format.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Factorial,"Definitions

   The factorial of   0   (zero)   is defined as being   1   (unity).
   The   Factorial Function   of a positive integer,    n,    is defined as the product of the sequence:
                 n,   n-1,   n-2,   ...   1



Task

Write a function to return the factorial of a number.

Solutions can be iterative or recursive.

Support for trapping negative    n    errors is optional.



Related task

   Primorial numbers

",Python,"import math
math.factorial(n)",29,2,"import unittest
import math

class TestFactorialFunction(unittest.TestCase):

    def test_factorial_of_zero(self):
        # Test that the factorial of 0 is 1
        self.assertEqual(math.factorial(0), 1)

    def test_factorial_of_positive_integers(self):
        # Test factorial of positive integers
        self.assertEqual(math.factorial(1), 1)
        self.assertEqual(math.factorial(2), 2)
        self.assertEqual(math.factorial(3), 6)
        self.assertEqual(math.factorial(4), 24)
        self.assertEqual(math.factorial(5), 120)
        self.assertEqual(math.factorial(6), 720)
        self.assertEqual(math.factorial(10), 3628800)

    def test_factorial_of_large_number(self):
        # Test factorial of a larger number
        self.assertEqual(math.factorial(20), 2432902008176640000)

    def test_factorial_of_negative_number(self):
        # Test that factorial of a negative number raises a ValueError
        with self.assertRaises(ValueError):
            math.factorial(-1)

    def test_factorial_of_non_integer(self):
        # Test that factorial of a non-integer raises a ValueError
        with self.assertRaises(ValueError):
            math.factorial(3.5)
        with self.assertRaises(ValueError):
            math.factorial(""string"")

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/factorial/test_gpt_4o_2024_08_06_factorial.py,CompileStatus.OK,0.0,81.48,74.29,0.48,,80.0,0.6081690788269043,12.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_factorial', 'obj': '', 'line': 5, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/factorial/test_gpt_4o_2024_08_06_factorial.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_factorial', 'obj': '', 'line': 9, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/factorial/test_gpt_4o_2024_08_06_factorial.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_factorial', 'obj': '', 'line': 19, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/factorial/test_gpt_4o_2024_08_06_factorial.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_factorial', 'obj': '', 'line': 23, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/factorial/test_gpt_4o_2024_08_06_factorial.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_factorial', 'obj': '', 'line': 28, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/factorial/test_gpt_4o_2024_08_06_factorial.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_factorial', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/factorial/test_gpt_4o_2024_08_06_factorial.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_factorial', 'obj': 'TestFactorialFunction', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 27, 'path': 'data/generated/docs_python/factorial/test_gpt_4o_2024_08_06_factorial.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_factorial', 'obj': 'TestFactorialFunction.test_factorial_of_zero', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 30, 'path': 'data/generated/docs_python/factorial/test_gpt_4o_2024_08_06_factorial.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_factorial', 'obj': 'TestFactorialFunction.test_factorial_of_positive_integers', 'line': 10, 'column': 4, 'endLine': 10, 'endColumn': 43, 'path': 'data/generated/docs_python/factorial/test_gpt_4o_2024_08_06_factorial.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_factorial', 'obj': 'TestFactorialFunction.test_factorial_of_large_number', 'line': 20, 'column': 4, 'endLine': 20, 'endColumn': 38, 'path': 'data/generated/docs_python/factorial/test_gpt_4o_2024_08_06_factorial.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_factorial', 'obj': 'TestFactorialFunction.test_factorial_of_negative_number', 'line': 24, 'column': 4, 'endLine': 24, 'endColumn': 41, 'path': 'data/generated/docs_python/factorial/test_gpt_4o_2024_08_06_factorial.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_factorial', 'obj': 'TestFactorialFunction.test_factorial_of_non_integer', 'line': 29, 'column': 4, 'endLine': 29, 'endColumn': 37, 'path': 'data/generated/docs_python/factorial/test_gpt_4o_2024_08_06_factorial.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Fairshare between two and more,"The Thue-Morse sequence is a sequence of ones and zeros that if two people
take turns in the given order, the first persons turn for every '0' in the
sequence, the second for every '1'; then this is shown to give a fairer, more
equitable sharing of resources. (Football penalty shoot-outs for example, might
not favour the team that goes first as much if the penalty takers take turns
according to the Thue-Morse sequence and took 2^n penalties)

The Thue-Morse sequence of ones-and-zeroes can be generated by:

""When counting in binary, the digit sum modulo 2 is the Thue-Morse sequence""


Sharing fairly between two or more

Use this method:

When counting base b, the digit sum modulo b is the Thue-Morse sequence of fairer sharing between b people.


Task
Counting from zero;   using a function/method/routine to express an integer count in base b,

sum the digits modulo b to produce the next member of the Thue-Morse fairshare series for b people.



Show the first 25 terms of the fairshare sequence:

   For two people:
   For three people
   For five people
   For eleven people


Related tasks

   Non-decimal radices/Convert
   Thue-Morse


See also

   A010060, A053838, A053840: The On-Line Encyclopedia of Integer Sequences® (OEIS®)

",Python,"from itertools import count, islice
 
def _basechange_int(num, b):
    """"""
    Return list of ints representing positive num in base b
 
    >>> b = 3
    >>> print(b, [_basechange_int(num, b) for num in range(11)])
    3 [[0], [1], [2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [1, 0, 0], [1, 0, 1]]
    >>>
    """"""
    if num == 0:
        return [0]
    result = []
    while num != 0:
        num, d = divmod(num, b)
        result.append(d)
    return result[::-1]
 
def fairshare(b=2):
    for i in count():
        yield sum(_basechange_int(i, b)) % b
 
if __name__ == '__main__':
    for b in (2, 3, 5, 11):
        print(f""{b:>2}: {str(list(islice(fairshare(b), 25)))[1:-1]}"")",692,26,"import unittest
from itertools import islice

# Assuming the functions _basechange_int and fairshare are imported from fairshare_between_two_and_more.py

class TestFairShare(unittest.TestCase):

    def test_basechange_int(self):
        # Test base conversion for base 3
        b = 3
        expected_results = [
            [0], [1], [2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [1, 0, 0], [1, 0, 1]
        ]
        for num, expected in enumerate(expected_results):
            self.assertEqual(_basechange_int(num, b), expected)

        # Test base conversion for base 5
        b = 5
        expected_results = [
            [0], [1], [2], [3], [4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0]
        ]
        for num, expected in enumerate(expected_results):
            self.assertEqual(_basechange_int(num, b), expected)

    def test_fairshare_two_people(self):
        # Test fairshare sequence for two people
        expected_sequence = [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1]
        self.assertEqual(list(islice(fairshare(2), 25)), expected_sequence)

    def test_fairshare_three_people(self):
        # Test fairshare sequence for three people
        expected_sequence = [0, 1, 2, 1, 2, 0, 2, 0, 1, 1, 2, 0, 2, 0, 1, 2, 0, 1, 1, 2, 0, 2, 0, 1, 2]
        self.assertEqual(list(islice(fairshare(3), 25)), expected_sequence)

    def test_fairshare_five_people(self):
        # Test fairshare sequence for five people
        expected_sequence = [0, 1, 2, 3, 4, 1, 2, 3, 4, 0, 2, 3, 4, 0, 1, 3, 4, 0, 1, 2, 4, 0, 1, 2, 3]
        self.assertEqual(list(islice(fairshare(5), 25)), expected_sequence)

    def test_fairshare_eleven_people(self):
        # Test fairshare sequence for eleven people
        expected_sequence = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 2, 3, 4]
        self.assertEqual(list(islice(fairshare(11), 25)), expected_sequence)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/fairshare_between_two_and_more/test_gpt_4o_2024_08_06_fairshare_between_two_and_more.py,CompileStatus.OK,0.0,51.22,40.35,0.21,1.2,,0.714975118637085,24.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fairshare_between_two_and_more', 'obj': '', 'line': 4, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/fairshare_between_two_and_more/test_gpt_4o_2024_08_06_fairshare_between_two_and_more.py', 'symbol': 'line-too-long', 'message': 'Line too long (106/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fairshare_between_two_and_more', 'obj': '', 'line': 7, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/fairshare_between_two_and_more/test_gpt_4o_2024_08_06_fairshare_between_two_and_more.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fairshare_between_two_and_more', 'obj': '', 'line': 16, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/fairshare_between_two_and_more/test_gpt_4o_2024_08_06_fairshare_between_two_and_more.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fairshare_between_two_and_more', 'obj': '', 'line': 24, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/fairshare_between_two_and_more/test_gpt_4o_2024_08_06_fairshare_between_two_and_more.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fairshare_between_two_and_more', 'obj': '', 'line': 27, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/fairshare_between_two_and_more/test_gpt_4o_2024_08_06_fairshare_between_two_and_more.py', 'symbol': 'line-too-long', 'message': 'Line too long (103/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fairshare_between_two_and_more', 'obj': '', 'line': 29, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/fairshare_between_two_and_more/test_gpt_4o_2024_08_06_fairshare_between_two_and_more.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fairshare_between_two_and_more', 'obj': '', 'line': 32, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/fairshare_between_two_and_more/test_gpt_4o_2024_08_06_fairshare_between_two_and_more.py', 'symbol': 'line-too-long', 'message': 'Line too long (103/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fairshare_between_two_and_more', 'obj': '', 'line': 34, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/fairshare_between_two_and_more/test_gpt_4o_2024_08_06_fairshare_between_two_and_more.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fairshare_between_two_and_more', 'obj': '', 'line': 37, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/fairshare_between_two_and_more/test_gpt_4o_2024_08_06_fairshare_between_two_and_more.py', 'symbol': 'line-too-long', 'message': 'Line too long (103/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fairshare_between_two_and_more', 'obj': '', 'line': 39, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/fairshare_between_two_and_more/test_gpt_4o_2024_08_06_fairshare_between_two_and_more.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fairshare_between_two_and_more', 'obj': '', 'line': 42, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/fairshare_between_two_and_more/test_gpt_4o_2024_08_06_fairshare_between_two_and_more.py', 'symbol': 'line-too-long', 'message': 'Line too long (105/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fairshare_between_two_and_more', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/fairshare_between_two_and_more/test_gpt_4o_2024_08_06_fairshare_between_two_and_more.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fairshare_between_two_and_more', 'obj': 'TestFairShare', 'line': 6, 'column': 0, 'endLine': 6, 'endColumn': 19, 'path': 'data/generated/docs_python/fairshare_between_two_and_more/test_gpt_4o_2024_08_06_fairshare_between_two_and_more.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fairshare_between_two_and_more', 'obj': 'TestFairShare.test_basechange_int', 'line': 8, 'column': 4, 'endLine': 8, 'endColumn': 27, 'path': 'data/generated/docs_python/fairshare_between_two_and_more/test_gpt_4o_2024_08_06_fairshare_between_two_and_more.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_fairshare_between_two_and_more', 'obj': 'TestFairShare.test_basechange_int', 'line': 15, 'column': 29, 'endLine': 15, 'endColumn': 44, 'path': 'data/generated/docs_python/fairshare_between_two_and_more/test_gpt_4o_2024_08_06_fairshare_between_two_and_more.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable '_basechange_int'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_fairshare_between_two_and_more', 'obj': 'TestFairShare.test_basechange_int', 'line': 23, 'column': 29, 'endLine': 23, 'endColumn': 44, 'path': 'data/generated/docs_python/fairshare_between_two_and_more/test_gpt_4o_2024_08_06_fairshare_between_two_and_more.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable '_basechange_int'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fairshare_between_two_and_more', 'obj': 'TestFairShare.test_fairshare_two_people', 'line': 25, 'column': 4, 'endLine': 25, 'endColumn': 33, 'path': 'data/generated/docs_python/fairshare_between_two_and_more/test_gpt_4o_2024_08_06_fairshare_between_two_and_more.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_fairshare_between_two_and_more', 'obj': 'TestFairShare.test_fairshare_two_people', 'line': 28, 'column': 37, 'endLine': 28, 'endColumn': 46, 'path': 'data/generated/docs_python/fairshare_between_two_and_more/test_gpt_4o_2024_08_06_fairshare_between_two_and_more.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'fairshare'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fairshare_between_two_and_more', 'obj': 'TestFairShare.test_fairshare_three_people', 'line': 30, 'column': 4, 'endLine': 30, 'endColumn': 35, 'path': 'data/generated/docs_python/fairshare_between_two_and_more/test_gpt_4o_2024_08_06_fairshare_between_two_and_more.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_fairshare_between_two_and_more', 'obj': 'TestFairShare.test_fairshare_three_people', 'line': 33, 'column': 37, 'endLine': 33, 'endColumn': 46, 'path': 'data/generated/docs_python/fairshare_between_two_and_more/test_gpt_4o_2024_08_06_fairshare_between_two_and_more.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'fairshare'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fairshare_between_two_and_more', 'obj': 'TestFairShare.test_fairshare_five_people', 'line': 35, 'column': 4, 'endLine': 35, 'endColumn': 34, 'path': 'data/generated/docs_python/fairshare_between_two_and_more/test_gpt_4o_2024_08_06_fairshare_between_two_and_more.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_fairshare_between_two_and_more', 'obj': 'TestFairShare.test_fairshare_five_people', 'line': 38, 'column': 37, 'endLine': 38, 'endColumn': 46, 'path': 'data/generated/docs_python/fairshare_between_two_and_more/test_gpt_4o_2024_08_06_fairshare_between_two_and_more.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'fairshare'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fairshare_between_two_and_more', 'obj': 'TestFairShare.test_fairshare_eleven_people', 'line': 40, 'column': 4, 'endLine': 40, 'endColumn': 36, 'path': 'data/generated/docs_python/fairshare_between_two_and_more/test_gpt_4o_2024_08_06_fairshare_between_two_and_more.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_fairshare_between_two_and_more', 'obj': 'TestFairShare.test_fairshare_eleven_people', 'line': 43, 'column': 37, 'endLine': 43, 'endColumn': 46, 'path': 'data/generated/docs_python/fairshare_between_two_and_more/test_gpt_4o_2024_08_06_fairshare_between_two_and_more.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'fairshare'"", 'message-id': 'E0602'}]",False
Farey sequence,"The   Farey sequence    Fn   of order   n   is the sequence of completely reduced fractions between   0   and   1   which, when in lowest terms, have denominators less than or equal to   n,   arranged in order of increasing size.

The   Farey sequence   is sometimes incorrectly called a   Farey series.



Each Farey sequence:

   starts with the value   0   (zero),   denoted by the fraction    





0
1




{\displaystyle {\frac {0}{1}}}


   ends with the value   1   (unity),   denoted by the fraction  





1
1




{\displaystyle {\frac {1}{1}}}

.


The Farey sequences of orders   1   to   5   are:









F




1


=


0
1


,


1
1




{\displaystyle {\bf {\it {F}}}_{1}={\frac {0}{1}},{\frac {1}{1}}}











F




2


=


0
1


,


1
2


,


1
1




{\displaystyle {\bf {\it {F}}}_{2}={\frac {0}{1}},{\frac {1}{2}},{\frac {1}{1}}}











F




3


=


0
1


,


1
3


,


1
2


,


2
3


,


1
1




{\displaystyle {\bf {\it {F}}}_{3}={\frac {0}{1}},{\frac {1}{3}},{\frac {1}{2}},{\frac {2}{3}},{\frac {1}{1}}}











F




4


=


0
1


,


1
4


,


1
3


,


1
2


,


2
3


,


3
4


,


1
1




{\displaystyle {\bf {\it {F}}}_{4}={\frac {0}{1}},{\frac {1}{4}},{\frac {1}{3}},{\frac {1}{2}},{\frac {2}{3}},{\frac {3}{4}},{\frac {1}{1}}}











F




5


=


0
1


,


1
5


,


1
4


,


1
3


,


2
5


,


1
2


,


3
5


,


2
3


,


3
4


,


4
5


,


1
1




{\displaystyle {\bf {\it {F}}}_{5}={\frac {0}{1}},{\frac {1}{5}},{\frac {1}{4}},{\frac {1}{3}},{\frac {2}{5}},{\frac {1}{2}},{\frac {3}{5}},{\frac {2}{3}},{\frac {3}{4}},{\frac {4}{5}},{\frac {1}{1}}}


Task
   Compute and show the Farey sequence for orders   1   through   11   (inclusive).
   Compute and display the   number   of fractions in the Farey sequence for order   100   through   1,000   (inclusive)   by hundreds.
   Show the fractions as    n/d    (using the solidus [or slash] to separate the numerator from the denominator).


The length   (the number of fractions)   of a Farey sequence asymptotically approaches:

  3 × n2   ÷  



π


{\displaystyle \pi }

2
See also

   OEIS sequence   A006842 numerators of Farey series of order 1, 2, ···
   OEIS sequence   A006843 denominators of Farey series of order 1, 2, ···
   OEIS sequence   A005728 number of fractions in Farey series of order n
   MathWorld entry   Farey sequence
   Wikipedia   entry   Farey sequence

",Python,"from fractions import Fraction
 
 
class Fr(Fraction):
    def __repr__(self):
        return '(%s/%s)' % (self.numerator, self.denominator)
 
 
def farey(n, length=False):
    if not length:
        return [Fr(0, 1)] + sorted({Fr(m, k) for k in range(1, n+1) for m in range(1, k+1)})
    else:
        #return 1         +    len({Fr(m, k) for k in range(1, n+1) for m in range(1, k+1)})
        return  (n*(n+3))//2 - sum(farey(n//k, True) for k in range(2, n+1))
 
if __name__ == '__main__':
    print('Farey sequence for order 1 through 11 (inclusive):')
    for n in range(1, 12):
        print(farey(n))
    print('Number of fractions in the Farey sequence for order 100 through 1,000 (inclusive) by hundreds:')
    print([farey(i, length=True) for i in range(100, 1001, 100)])",783,21,"import unittest
from fractions import Fraction
from farey_sequence import farey, Fr

class TestFareySequence(unittest.TestCase):

    def test_farey_sequence_order_1(self):
        expected = [Fr(0, 1), Fr(1, 1)]
        result = farey(1)
        self.assertEqual(result, expected)

    def test_farey_sequence_order_2(self):
        expected = [Fr(0, 1), Fr(1, 2), Fr(1, 1)]
        result = farey(2)
        self.assertEqual(result, expected)

    def test_farey_sequence_order_3(self):
        expected = [Fr(0, 1), Fr(1, 3), Fr(1, 2), Fr(2, 3), Fr(1, 1)]
        result = farey(3)
        self.assertEqual(result, expected)

    def test_farey_sequence_order_4(self):
        expected = [Fr(0, 1), Fr(1, 4), Fr(1, 3), Fr(1, 2), Fr(2, 3), Fr(3, 4), Fr(1, 1)]
        result = farey(4)
        self.assertEqual(result, expected)

    def test_farey_sequence_order_5(self):
        expected = [Fr(0, 1), Fr(1, 5), Fr(1, 4), Fr(1, 3), Fr(2, 5), Fr(1, 2), Fr(3, 5), Fr(2, 3), Fr(3, 4), Fr(4, 5), Fr(1, 1)]
        result = farey(5)
        self.assertEqual(result, expected)

    def test_farey_sequence_order_11(self):
        # Test for order 11, expected sequence is not manually written due to length
        result = farey(11)
        self.assertEqual(result[0], Fr(0, 1))
        self.assertEqual(result[-1], Fr(1, 1))
        self.assertTrue(all(isinstance(f, Fr) for f in result))

    def test_farey_sequence_length_100(self):
        expected_length = 3043
        result = farey(100, length=True)
        self.assertEqual(result, expected_length)

    def test_farey_sequence_length_200(self):
        expected_length = 12231
        result = farey(200, length=True)
        self.assertEqual(result, expected_length)

    def test_farey_sequence_length_300(self):
        expected_length = 27541
        result = farey(300, length=True)
        self.assertEqual(result, expected_length)

    def test_farey_sequence_length_400(self):
        expected_length = 48741
        result = farey(400, length=True)
        self.assertEqual(result, expected_length)

    def test_farey_sequence_length_500(self):
        expected_length = 76013
        result = farey(500, length=True)
        self.assertEqual(result, expected_length)

    def test_farey_sequence_length_600(self):
        expected_length = 109581
        result = farey(600, length=True)
        self.assertEqual(result, expected_length)

    def test_farey_sequence_length_700(self):
        expected_length = 150501
        result = farey(700, length=True)
        self.assertEqual(result, expected_length)

    def test_farey_sequence_length_800(self):
        expected_length = 199041
        result = farey(800, length=True)
        self.assertEqual(result, expected_length)

    def test_farey_sequence_length_900(self):
        expected_length = 255481
        result = farey(900, length=True)
        self.assertEqual(result, expected_length)

    def test_farey_sequence_length_1000(self):
        expected_length = 320213
        result = farey(1000, length=True)
        self.assertEqual(result, expected_length)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/farey_sequence/test_gpt_4o_2024_08_06_farey_sequence.py,CompileStatus.OK,0.0,91.76,87.13,0.25,3.6,37.5,0.7480089664459229,20.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_farey_sequence', 'obj': '', 'line': 28, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/farey_sequence/test_gpt_4o_2024_08_06_farey_sequence.py', 'symbol': 'line-too-long', 'message': 'Line too long (129/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_farey_sequence', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/farey_sequence/test_gpt_4o_2024_08_06_farey_sequence.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_farey_sequence', 'obj': 'TestFareySequence', 'line': 5, 'column': 0, 'endLine': 5, 'endColumn': 23, 'path': 'data/generated/docs_python/farey_sequence/test_gpt_4o_2024_08_06_farey_sequence.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_farey_sequence', 'obj': 'TestFareySequence.test_farey_sequence_order_1', 'line': 7, 'column': 4, 'endLine': 7, 'endColumn': 35, 'path': 'data/generated/docs_python/farey_sequence/test_gpt_4o_2024_08_06_farey_sequence.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_farey_sequence', 'obj': 'TestFareySequence.test_farey_sequence_order_2', 'line': 12, 'column': 4, 'endLine': 12, 'endColumn': 35, 'path': 'data/generated/docs_python/farey_sequence/test_gpt_4o_2024_08_06_farey_sequence.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_farey_sequence', 'obj': 'TestFareySequence.test_farey_sequence_order_3', 'line': 17, 'column': 4, 'endLine': 17, 'endColumn': 35, 'path': 'data/generated/docs_python/farey_sequence/test_gpt_4o_2024_08_06_farey_sequence.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_farey_sequence', 'obj': 'TestFareySequence.test_farey_sequence_order_4', 'line': 22, 'column': 4, 'endLine': 22, 'endColumn': 35, 'path': 'data/generated/docs_python/farey_sequence/test_gpt_4o_2024_08_06_farey_sequence.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_farey_sequence', 'obj': 'TestFareySequence.test_farey_sequence_order_5', 'line': 27, 'column': 4, 'endLine': 27, 'endColumn': 35, 'path': 'data/generated/docs_python/farey_sequence/test_gpt_4o_2024_08_06_farey_sequence.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_farey_sequence', 'obj': 'TestFareySequence.test_farey_sequence_order_11', 'line': 32, 'column': 4, 'endLine': 32, 'endColumn': 36, 'path': 'data/generated/docs_python/farey_sequence/test_gpt_4o_2024_08_06_farey_sequence.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_farey_sequence', 'obj': 'TestFareySequence.test_farey_sequence_length_100', 'line': 39, 'column': 4, 'endLine': 39, 'endColumn': 38, 'path': 'data/generated/docs_python/farey_sequence/test_gpt_4o_2024_08_06_farey_sequence.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_farey_sequence', 'obj': 'TestFareySequence.test_farey_sequence_length_200', 'line': 44, 'column': 4, 'endLine': 44, 'endColumn': 38, 'path': 'data/generated/docs_python/farey_sequence/test_gpt_4o_2024_08_06_farey_sequence.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_farey_sequence', 'obj': 'TestFareySequence.test_farey_sequence_length_300', 'line': 49, 'column': 4, 'endLine': 49, 'endColumn': 38, 'path': 'data/generated/docs_python/farey_sequence/test_gpt_4o_2024_08_06_farey_sequence.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_farey_sequence', 'obj': 'TestFareySequence.test_farey_sequence_length_400', 'line': 54, 'column': 4, 'endLine': 54, 'endColumn': 38, 'path': 'data/generated/docs_python/farey_sequence/test_gpt_4o_2024_08_06_farey_sequence.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_farey_sequence', 'obj': 'TestFareySequence.test_farey_sequence_length_500', 'line': 59, 'column': 4, 'endLine': 59, 'endColumn': 38, 'path': 'data/generated/docs_python/farey_sequence/test_gpt_4o_2024_08_06_farey_sequence.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_farey_sequence', 'obj': 'TestFareySequence.test_farey_sequence_length_600', 'line': 64, 'column': 4, 'endLine': 64, 'endColumn': 38, 'path': 'data/generated/docs_python/farey_sequence/test_gpt_4o_2024_08_06_farey_sequence.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_farey_sequence', 'obj': 'TestFareySequence.test_farey_sequence_length_700', 'line': 69, 'column': 4, 'endLine': 69, 'endColumn': 38, 'path': 'data/generated/docs_python/farey_sequence/test_gpt_4o_2024_08_06_farey_sequence.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_farey_sequence', 'obj': 'TestFareySequence.test_farey_sequence_length_800', 'line': 74, 'column': 4, 'endLine': 74, 'endColumn': 38, 'path': 'data/generated/docs_python/farey_sequence/test_gpt_4o_2024_08_06_farey_sequence.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_farey_sequence', 'obj': 'TestFareySequence.test_farey_sequence_length_900', 'line': 79, 'column': 4, 'endLine': 79, 'endColumn': 38, 'path': 'data/generated/docs_python/farey_sequence/test_gpt_4o_2024_08_06_farey_sequence.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_farey_sequence', 'obj': 'TestFareySequence.test_farey_sequence_length_1000', 'line': 84, 'column': 4, 'endLine': 84, 'endColumn': 39, 'path': 'data/generated/docs_python/farey_sequence/test_gpt_4o_2024_08_06_farey_sequence.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_farey_sequence', 'obj': '', 'line': 2, 'column': 0, 'endLine': 2, 'endColumn': 30, 'path': 'data/generated/docs_python/farey_sequence/test_gpt_4o_2024_08_06_farey_sequence.py', 'symbol': 'unused-import', 'message': 'Unused Fraction imported from fractions', 'message-id': 'W0611'}]",False
Fast Fourier transform,"Task

Calculate the   FFT   (Fast Fourier Transform)   of an input sequence.

The most general case allows for complex numbers at the input
and results in a sequence of equal length, again of complex numbers.
If you need to restrict yourself to real numbers, the output should
be the magnitude   (i.e.:   sqrt(re2 + im2))   of the complex result.

The classic version is the recursive Cooley–Tukey FFT. Wikipedia has pseudo-code for that.
Further optimizations are possible but not required.



",Python,"from cmath import exp, pi
 
def fft(x):
    N = len(x)
    if N <= 1: return x
    even = fft(x[0::2])
    odd =  fft(x[1::2])
    T= [exp(-2j*pi*k/N)*odd[k] for k in range(N//2)]
    return [even[k] + T[k] for k in range(N//2)] + \
           [even[k] - T[k] for k in range(N//2)]
 
print( ' '.join(""%5.3f"" % abs(f)
                for f in fft([1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0])) )",391,13,"import unittest
from fast_fourier_transform import fft
from cmath import isclose

class TestFFT(unittest.TestCase):

    def test_fft_real_numbers(self):
        # Test with a simple real number sequence
        input_sequence = [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0]
        expected_output_magnitudes = [4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
        result = fft(input_sequence)
        result_magnitudes = [abs(x) for x in result]
        for r, e in zip(result_magnitudes, expected_output_magnitudes):
            self.assertTrue(isclose(r, e, rel_tol=1e-9))

    def test_fft_complex_numbers(self):
        # Test with a sequence of complex numbers
        input_sequence = [1+1j, 1+1j, 1+1j, 1+1j, 0+0j, 0+0j, 0+0j, 0+0j]
        expected_output_magnitudes = [5.656854, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
        result = fft(input_sequence)
        result_magnitudes = [abs(x) for x in result]
        for r, e in zip(result_magnitudes, expected_output_magnitudes):
            self.assertTrue(isclose(r, e, rel_tol=1e-6))

    def test_fft_single_element(self):
        # Test with a single element
        input_sequence = [1.0]
        expected_output = [1.0]
        result = fft(input_sequence)
        self.assertEqual(result, expected_output)

    def test_fft_two_elements(self):
        # Test with two elements
        input_sequence = [1.0, -1.0]
        expected_output_magnitudes = [0.0, 2.0]
        result = fft(input_sequence)
        result_magnitudes = [abs(x) for x in result]
        for r, e in zip(result_magnitudes, expected_output_magnitudes):
            self.assertTrue(isclose(r, e, rel_tol=1e-9))

    def test_fft_power_of_two(self):
        # Test with a power of two length sequence
        input_sequence = [0, 1, 2, 3, 4, 5, 6, 7]
        expected_output_magnitudes = [28.0, 10.3923, 4.0, 2.3923, 4.0, 2.3923, 4.0, 10.3923]
        result = fft(input_sequence)
        result_magnitudes = [abs(x) for x in result]
        for r, e in zip(result_magnitudes, expected_output_magnitudes):
            self.assertTrue(isclose(r, e, rel_tol=1e-4))

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/fast_fourier_transform/test_gpt_4o_2024_08_06_fast_fourier_transform.py,CompileStatus.OK,0.0,97.92,93.24,0.13,1.25,40.0,0.6439011096954346,8.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fast_fourier_transform', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/fast_fourier_transform/test_gpt_4o_2024_08_06_fast_fourier_transform.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fast_fourier_transform', 'obj': 'TestFFT', 'line': 5, 'column': 0, 'endLine': 5, 'endColumn': 13, 'path': 'data/generated/docs_python/fast_fourier_transform/test_gpt_4o_2024_08_06_fast_fourier_transform.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fast_fourier_transform', 'obj': 'TestFFT.test_fft_real_numbers', 'line': 7, 'column': 4, 'endLine': 7, 'endColumn': 29, 'path': 'data/generated/docs_python/fast_fourier_transform/test_gpt_4o_2024_08_06_fast_fourier_transform.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fast_fourier_transform', 'obj': 'TestFFT.test_fft_complex_numbers', 'line': 16, 'column': 4, 'endLine': 16, 'endColumn': 32, 'path': 'data/generated/docs_python/fast_fourier_transform/test_gpt_4o_2024_08_06_fast_fourier_transform.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fast_fourier_transform', 'obj': 'TestFFT.test_fft_single_element', 'line': 25, 'column': 4, 'endLine': 25, 'endColumn': 31, 'path': 'data/generated/docs_python/fast_fourier_transform/test_gpt_4o_2024_08_06_fast_fourier_transform.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fast_fourier_transform', 'obj': 'TestFFT.test_fft_two_elements', 'line': 32, 'column': 4, 'endLine': 32, 'endColumn': 29, 'path': 'data/generated/docs_python/fast_fourier_transform/test_gpt_4o_2024_08_06_fast_fourier_transform.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fast_fourier_transform', 'obj': 'TestFFT.test_fft_power_of_two', 'line': 41, 'column': 4, 'endLine': 41, 'endColumn': 29, 'path': 'data/generated/docs_python/fast_fourier_transform/test_gpt_4o_2024_08_06_fast_fourier_transform.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fast_fourier_transform', 'obj': '', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 25, 'path': 'data/generated/docs_python/fast_fourier_transform/test_gpt_4o_2024_08_06_fast_fourier_transform.py', 'symbol': 'wrong-import-order', 'message': 'standard import ""cmath.isclose"" should be placed before third party import ""fast_fourier_transform.fft""', 'message-id': 'C0411'}]",False
Faulhaber's formula,"In mathematics,   Faulhaber's formula,   named after Johann Faulhaber,   expresses the sum of the p-th powers of the first n positive integers as a (p + 1)th-degree polynomial function of n,   the coefficients involving Bernoulli numbers.



Task

Generate the first 10 closed-form expressions, starting with p = 0.



Related tasks

   Bernoulli numbers.
   evaluate binomial coefficients.


See also

   The Wikipedia entry:   Faulhaber's formula.
   The Wikipedia entry:   Bernoulli numbers.
   The Wikipedia entry:   binomial coefficients.

",Python,"from fractions import Fraction
 
def nextu(a):
    n = len(a)
    a.append(1)
    for i in range(n - 1, 0, -1):
        a[i] = i * a[i] + a[i - 1]
    return a
 
def nextv(a):
    n = len(a) - 1
    b = [(1 - n) * x for x in a]
    b.append(1)
    for i in range(n):
        b[i + 1] += a[i]
    return b
 
def sumpol(n):
    u = [0, 1]
    v = [[1], [1, 1]]
    yield [Fraction(0), Fraction(1)]
    for i in range(1, n):
        v.append(nextv(v[-1]))
        t = [0] * (i + 2)
        p = 1
        for j, r in enumerate(u):
            r = Fraction(r, j + 1)
            for k, s in enumerate(v[j + 1]):
                t[k] += r * s
        yield t
        u = nextu(u)
 
def polstr(a):
    s = """"
    q = False
    n = len(a) - 1
    for i, x in enumerate(reversed(a)):
        i = n - i
        if i < 2:
            m = ""n"" if i == 1 else """"
        else:
            m = ""n^%d"" % i
        c = str(abs(x))
        if i > 0:
            if c == ""1"":
                c = """"
            else:
                m = "" "" + m
        if x != 0:
            if q:
                t = "" + "" if x > 0 else "" - ""
                s += ""%s%s%s"" % (t, c, m)
            else:
                t = """" if x > 0 else ""-""
                s = ""%s%s%s"" % (t, c, m)
                q = True
    if q:
        return s
    else:
        return ""0""
 
for i, p in enumerate(sumpol(10)):
    print(i, "":"", polstr(p))",1397,63,"import unittest
from fractions import Fraction
from faulhaber_s_formula import nextu, nextv, sumpol, polstr

class TestFaulhabersFormula(unittest.TestCase):

    def test_nextu(self):
        self.assertEqual(nextu([0, 1]), [0, 1, 1])
        self.assertEqual(nextu([0, 1, 1]), [0, 2, 2, 1])
        self.assertEqual(nextu([0, 2, 2, 1]), [0, 6, 5, 3, 1])

    def test_nextv(self):
        self.assertEqual(nextv([1, 1]), [0, 1, 1])
        self.assertEqual(nextv([0, 1, 1]), [0, 0, 1, 1])
        self.assertEqual(nextv([0, 0, 1, 1]), [0, 0, 0, 1, 1])

    def test_sumpol(self):
        expected_results = [
            [Fraction(0), Fraction(1)],  # p = 0
            [Fraction(0), Fraction(1, 2), Fraction(1, 2)],  # p = 1
            [Fraction(0), Fraction(1, 3), Fraction(1, 2), Fraction(1, 6)],  # p = 2
            [Fraction(0), Fraction(1, 4), Fraction(1, 2), Fraction(1, 4), Fraction(0)],  # p = 3
            [Fraction(0), Fraction(1, 5), Fraction(1, 2), Fraction(1, 3), Fraction(0), Fraction(0)],  # p = 4
            [Fraction(0), Fraction(1, 6), Fraction(1, 2), Fraction(5, 12), Fraction(0), Fraction(0), Fraction(0)],  # p = 5
            [Fraction(0), Fraction(1, 7), Fraction(1, 2), Fraction(1, 2), Fraction(0), Fraction(0), Fraction(0), Fraction(0)],  # p = 6
            [Fraction(0), Fraction(1, 8), Fraction(1, 2), Fraction(7, 12), Fraction(0), Fraction(0), Fraction(0), Fraction(0), Fraction(0)],  # p = 7
            [Fraction(0), Fraction(1, 9), Fraction(1, 2), Fraction(2, 3), Fraction(0), Fraction(0), Fraction(0), Fraction(0), Fraction(0), Fraction(0)],  # p = 8
            [Fraction(0), Fraction(1, 10), Fraction(1, 2), Fraction(3, 4), Fraction(0), Fraction(0), Fraction(0), Fraction(0), Fraction(0), Fraction(0), Fraction(0)],  # p = 9
        ]

        for i, expected in enumerate(expected_results):
            with self.subTest(i=i):
                result = next(sumpol(i + 1))
                self.assertEqual(result, expected)

    def test_polstr(self):
        self.assertEqual(polstr([Fraction(0), Fraction(1)]), ""1"")
        self.assertEqual(polstr([Fraction(0), Fraction(1, 2), Fraction(1, 2)]), ""1/2 n + 1/2"")
        self.assertEqual(polstr([Fraction(0), Fraction(1, 3), Fraction(1, 2), Fraction(1, 6)]), ""1/3 n^2 + 1/2 n + 1/6"")
        self.assertEqual(polstr([Fraction(0), Fraction(1, 4), Fraction(1, 2), Fraction(1, 4), Fraction(0)]), ""1/4 n^3 + 1/2 n^2 + 1/4 n"")

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/faulhaber_s_formula/test_gpt_4o_2024_08_06_faulhaber_s_formula.py,CompileStatus.OK,0.0,91.14,91.15,0.31,0.55,,0.5763859748840332,14.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_faulhaber_s_formula', 'obj': '', 'line': 23, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/faulhaber_s_formula/test_gpt_4o_2024_08_06_faulhaber_s_formula.py', 'symbol': 'line-too-long', 'message': 'Line too long (109/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_faulhaber_s_formula', 'obj': '', 'line': 24, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/faulhaber_s_formula/test_gpt_4o_2024_08_06_faulhaber_s_formula.py', 'symbol': 'line-too-long', 'message': 'Line too long (123/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_faulhaber_s_formula', 'obj': '', 'line': 25, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/faulhaber_s_formula/test_gpt_4o_2024_08_06_faulhaber_s_formula.py', 'symbol': 'line-too-long', 'message': 'Line too long (135/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_faulhaber_s_formula', 'obj': '', 'line': 26, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/faulhaber_s_formula/test_gpt_4o_2024_08_06_faulhaber_s_formula.py', 'symbol': 'line-too-long', 'message': 'Line too long (149/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_faulhaber_s_formula', 'obj': '', 'line': 27, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/faulhaber_s_formula/test_gpt_4o_2024_08_06_faulhaber_s_formula.py', 'symbol': 'line-too-long', 'message': 'Line too long (161/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_faulhaber_s_formula', 'obj': '', 'line': 28, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/faulhaber_s_formula/test_gpt_4o_2024_08_06_faulhaber_s_formula.py', 'symbol': 'line-too-long', 'message': 'Line too long (175/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_faulhaber_s_formula', 'obj': '', 'line': 39, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/faulhaber_s_formula/test_gpt_4o_2024_08_06_faulhaber_s_formula.py', 'symbol': 'line-too-long', 'message': 'Line too long (120/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_faulhaber_s_formula', 'obj': '', 'line': 40, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/faulhaber_s_formula/test_gpt_4o_2024_08_06_faulhaber_s_formula.py', 'symbol': 'line-too-long', 'message': 'Line too long (137/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_faulhaber_s_formula', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/faulhaber_s_formula/test_gpt_4o_2024_08_06_faulhaber_s_formula.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_faulhaber_s_formula', 'obj': 'TestFaulhabersFormula', 'line': 5, 'column': 0, 'endLine': 5, 'endColumn': 27, 'path': 'data/generated/docs_python/faulhaber_s_formula/test_gpt_4o_2024_08_06_faulhaber_s_formula.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_faulhaber_s_formula', 'obj': 'TestFaulhabersFormula.test_nextu', 'line': 7, 'column': 4, 'endLine': 7, 'endColumn': 18, 'path': 'data/generated/docs_python/faulhaber_s_formula/test_gpt_4o_2024_08_06_faulhaber_s_formula.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_faulhaber_s_formula', 'obj': 'TestFaulhabersFormula.test_nextv', 'line': 12, 'column': 4, 'endLine': 12, 'endColumn': 18, 'path': 'data/generated/docs_python/faulhaber_s_formula/test_gpt_4o_2024_08_06_faulhaber_s_formula.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_faulhaber_s_formula', 'obj': 'TestFaulhabersFormula.test_sumpol', 'line': 17, 'column': 4, 'endLine': 17, 'endColumn': 19, 'path': 'data/generated/docs_python/faulhaber_s_formula/test_gpt_4o_2024_08_06_faulhaber_s_formula.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_faulhaber_s_formula', 'obj': 'TestFaulhabersFormula.test_polstr', 'line': 36, 'column': 4, 'endLine': 36, 'endColumn': 19, 'path': 'data/generated/docs_python/faulhaber_s_formula/test_gpt_4o_2024_08_06_faulhaber_s_formula.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Faulhaber's triangle,"Named after Johann Faulhaber, the rows of Faulhaber's triangle are the coefficients of polynomials that represent sums of integer powers, which are extracted from Faulhaber's formula:








∑

k
=
1


n



k

p


=


1

p
+
1




∑

j
=
0


p





(



p
+
1

j


)




B

j



n

p
+
1
−
j




{\displaystyle \sum _{k=1}^{n}k^{p}={1 \over p+1}\sum _{j=0}^{p}{p+1 \choose j}B_{j}n^{p+1-j}}




where




B

n




{\displaystyle B_{n}}

 is the nth-Bernoulli number.



The first 5 rows of Faulhaber's triangle, are:

    1
  1/2  1/2
  1/6  1/2  1/3
    0  1/4  1/2  1/4
-1/30    0  1/3  1/2  1/5



Using the third row of the triangle, we have:






∑

k
=
1


n



k

2


=


1
6


n
+


1
2



n

2


+


1
3



n

3




{\displaystyle \sum _{k=1}^{n}k^{2}={1 \over 6}n+{1 \over 2}n^{2}+{1 \over 3}n^{3}}





 Task
 show the first 10 rows of Faulhaber's triangle.
 using the 18th row of Faulhaber's triangle, compute the sum:




∑

k
=
1


1000



k

17




{\displaystyle \sum _{k=1}^{1000}k^{17}}

 (extra credit).
 See also

 Bernoulli numbers
 Evaluate binomial coefficients
 Faulhaber's formula (Wikipedia)
 Faulhaber's triangle (PDF)

",Python,"'''Faulhaber's triangle'''
 
from itertools import accumulate, chain, count, islice
from fractions import Fraction
 
 
# faulhaberTriangle :: Int -> [[Fraction]]
def faulhaberTriangle(m):
    '''List of rows of Faulhaber fractions.'''
    def go(rs, n):
        def f(x, y):
            return Fraction(n, x) * y
        xs = list(map(f, islice(count(2), m), rs))
        return [Fraction(1 - sum(xs), 1)] + xs
 
    return list(accumulate(
        [[]] + list(islice(count(0), 1 + m)),
        go
    ))[1:]
 
 
# faulhaberSum :: Integer -> Integer -> Integer
def faulhaberSum(p, n):
    '''Sum of the p-th powers of the first n
       positive integers.
    '''
    def go(x, y):
        return y * (n ** x)
 
    return sum(
        map(go, count(1), faulhaberTriangle(p)[-1])
    )
 
 
# ------------------------- TEST -------------------------
def main():
    '''Tests'''
 
    fs = faulhaberTriangle(9)
    print(
        fTable(__doc__ + ':\n')(str)(
            compose(concat)(
                fmap(showRatio(3)(3))
            )
        )(
            index(fs)
        )(range(0, len(fs)))
    )
    print('')
    print(
        faulhaberSum(17, 1000)
    )
 
 
# ----------------------- DISPLAY ------------------------
 
# fTable :: String -> (a -> String) ->
# (b -> String) -> (a -> b) -> [a] -> String
def fTable(s):
    '''Heading -> x display function ->
       fx display function -> f -> xs -> tabular string.
    '''
    def gox(xShow):
        def gofx(fxShow):
            def gof(f):
                def goxs(xs):
                    ys = [xShow(x) for x in xs]
                    w = max(map(len, ys))
 
                    def arrowed(x, y):
                        return y.rjust(w, ' ') + ' -> ' + (
                            fxShow(f(x))
                        )
                    return s + '\n' + '\n'.join(
                        map(arrowed, xs, ys)
                    )
                return goxs
            return gof
        return gofx
    return gox
 
 
# ----------------------- GENERIC ------------------------
 
# compose (<<<) :: (b -> c) -> (a -> b) -> a -> c
def compose(g):
    '''Right to left function composition.'''
    return lambda f: lambda x: g(f(x))
 
 
# concat :: [[a]] -> [a]
# concat :: [String] -> String
def concat(xs):
    '''The concatenation of all the elements
       in a list or iterable.
    '''
    def f(ys):
        zs = list(chain(*ys))
        return ''.join(zs) if isinstance(ys[0], str) else zs
 
    return (
        f(xs) if isinstance(xs, list) else (
            chain.from_iterable(xs)
        )
    ) if xs else []
 
 
# fmap :: (a -> b) -> [a] -> [b]
def fmap(f):
    '''fmap over a list.
       f lifted to a function over a list.
    '''
    def go(xs):
        return list(map(f, xs))
 
    return go
 
 
# index (!!) :: [a] -> Int -> a
def index(xs):
    '''Item at given (zero-based) index.'''
    return lambda n: None if 0 > n else (
        xs[n] if (
            hasattr(xs, ""__getitem__"")
        ) else next(islice(xs, n, None))
    )
 
 
# showRatio :: Int -> Int -> Ratio -> String
def showRatio(m):
    '''Left and right aligned string
       representation of the ratio r.
    '''
    def go(n):
        def f(r):
            d = r.denominator
            return str(r.numerator).rjust(m, ' ') + (
                ('/' + str(d).ljust(n, ' ')) if 1 != d else (
                    ' ' * (1 + n)
                )
            )
        return f
    return go
 
 
# MAIN ---
if __name__ == '__main__':
    main()",3515,148,error,,,,,,,,,,,,
Fibonacci word/fractal,"
The Fibonacci word may be represented as a fractal as described here:


(Clicking on the above website   (hal.archives-ouvertes.fr)    will leave a cookie.)



For F_wordm start with F_wordCharn=1
Draw a segment forward
If current F_wordChar is 0
Turn left if n is even
Turn right if n is odd
next n and iterate until end of F_word


Task

Create and display a fractal similar to Fig 1.


(Clicking on the above website   (hal.archives-ouvertes.fr)    will leave a cookie.)
",Python,"from functools import wraps
from turtle import *
 
def memoize(obj):
    cache = obj.cache = {}
    @wraps(obj)
    def memoizer(*args, **kwargs):
        key = str(args) + str(kwargs)
        if key not in cache:
            cache[key] = obj(*args, **kwargs)
        return cache[key]
    return memoizer
 
@memoize
def fibonacci_word(n):
    assert n > 0
    if n == 1:
        return ""1""
    if n == 2:
        return ""0""
    return fibonacci_word(n - 1) + fibonacci_word(n - 2)
 
def draw_fractal(word, step):
    for i, c in enumerate(word, 1):
        forward(step)
        if c == ""0"":
            if i % 2 == 0:
                left(90)
            else:
                right(90)
 
def main():
    n = 25 # Fibonacci Word to use.
    step = 1 # Segment length.
    width = 1050 # Width of plot area.
    height = 1050 # Height of plot area.
    w = fibonacci_word(n)
 
    setup(width=width, height=height)
    speed(0)
    setheading(90)
    left(90)
    penup()
    forward(500)
    right(90)
    backward(500)
    pendown()
    tracer(10000)
    hideturtle()
 
    draw_fractal(w, step)
 
    # Save Poscript image.
    getscreen().getcanvas().postscript(file=""fibonacci_word_fractal.eps"")
    exitonclick()
 
if __name__ == '__main__':
    main()",1259,58,"import unittest
from fibonacci_word_fractal import fibonacci_word, draw_fractal
from turtle import TurtleScreen, RawTurtle, ScrolledCanvas

class TestFibonacciWordFractal(unittest.TestCase):

    def test_fibonacci_word_base_cases(self):
        self.assertEqual(fibonacci_word(1), ""1"")
        self.assertEqual(fibonacci_word(2), ""0"")

    def test_fibonacci_word_recursive_cases(self):
        self.assertEqual(fibonacci_word(3), ""10"")
        self.assertEqual(fibonacci_word(4), ""010"")
        self.assertEqual(fibonacci_word(5), ""10010"")
        self.assertEqual(fibonacci_word(6), ""01010010"")

    def test_fibonacci_word_large_n(self):
        result = fibonacci_word(10)
        expected = ""01001010010010100101001001010010""
        self.assertEqual(result, expected)

    def test_draw_fractal(self):
        # Setup a mock turtle screen and turtle
        canvas = ScrolledCanvas()
        screen = TurtleScreen(canvas)
        turtle = RawTurtle(screen)

        # Test drawing with a simple word
        word = ""010""
        step = 10
        draw_fractal(word, step)

        # Check the turtle's final position and heading
        # This is a simple check, in a real scenario, we would need to verify the drawing visually
        self.assertAlmostEqual(turtle.xcor(), 0)
        self.assertAlmostEqual(turtle.ycor(), 10)
        self.assertAlmostEqual(turtle.heading(), 0)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/fibonacci_word_fractal/test_gpt_4o_2024_08_06_fibonacci_word_fractal.py,CompileStatus.OK,0.0,50.0,50.0,0.36,0.91,25.0,0.5817809104919434,8.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fibonacci_word_fractal', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/fibonacci_word_fractal/test_gpt_4o_2024_08_06_fibonacci_word_fractal.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fibonacci_word_fractal', 'obj': 'TestFibonacciWordFractal', 'line': 5, 'column': 0, 'endLine': 5, 'endColumn': 30, 'path': 'data/generated/docs_python/fibonacci_word_fractal/test_gpt_4o_2024_08_06_fibonacci_word_fractal.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fibonacci_word_fractal', 'obj': 'TestFibonacciWordFractal.test_fibonacci_word_base_cases', 'line': 7, 'column': 4, 'endLine': 7, 'endColumn': 38, 'path': 'data/generated/docs_python/fibonacci_word_fractal/test_gpt_4o_2024_08_06_fibonacci_word_fractal.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fibonacci_word_fractal', 'obj': 'TestFibonacciWordFractal.test_fibonacci_word_recursive_cases', 'line': 11, 'column': 4, 'endLine': 11, 'endColumn': 43, 'path': 'data/generated/docs_python/fibonacci_word_fractal/test_gpt_4o_2024_08_06_fibonacci_word_fractal.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fibonacci_word_fractal', 'obj': 'TestFibonacciWordFractal.test_fibonacci_word_large_n', 'line': 17, 'column': 4, 'endLine': 17, 'endColumn': 35, 'path': 'data/generated/docs_python/fibonacci_word_fractal/test_gpt_4o_2024_08_06_fibonacci_word_fractal.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fibonacci_word_fractal', 'obj': 'TestFibonacciWordFractal.test_draw_fractal', 'line': 22, 'column': 4, 'endLine': 22, 'endColumn': 25, 'path': 'data/generated/docs_python/fibonacci_word_fractal/test_gpt_4o_2024_08_06_fibonacci_word_fractal.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_fibonacci_word_fractal', 'obj': 'TestFibonacciWordFractal.test_draw_fractal', 'line': 24, 'column': 17, 'endLine': 24, 'endColumn': 33, 'path': 'data/generated/docs_python/fibonacci_word_fractal/test_gpt_4o_2024_08_06_fibonacci_word_fractal.py', 'symbol': 'no-value-for-parameter', 'message': ""No value for argument 'master' in constructor call"", 'message-id': 'E1120'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fibonacci_word_fractal', 'obj': '', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 58, 'path': 'data/generated/docs_python/fibonacci_word_fractal/test_gpt_4o_2024_08_06_fibonacci_word_fractal.py', 'symbol': 'wrong-import-order', 'message': 'standard import ""turtle.TurtleScreen"" should be placed before third party import ""fibonacci_word_fractal.fibonacci_word""', 'message-id': 'C0411'}]",False
File input/output,"File input/output is part of Short Circuit's Console Program Basics selection.
Task

Create a file called   ""output.txt"",   and place in it the contents of the file   ""input.txt"",   via an intermediate variable.

In other words, your program will demonstrate:

   how to read from a file into a variable
   how to write a variable's contents into a file


Oneliners that skip the intermediate variable are of secondary interest — operating systems have copy commands for that.



",Python,"import shutil
shutil.copyfile('input.txt', 'output.txt')",56,2,"import unittest
import os

class TestFileInputOutput(unittest.TestCase):

    def setUp(self):
        # Create a sample input file
        with open('input.txt', 'w') as f:
            f.write('This is a test content.')

    def tearDown(self):
        # Clean up files after tests
        if os.path.exists('input.txt'):
            os.remove('input.txt')
        if os.path.exists('output.txt'):
            os.remove('output.txt')

    def test_file_copy(self):
        # Read from input.txt into a variable
        with open('input.txt', 'r') as f:
            content = f.read()

        # Write the variable's contents into output.txt
        with open('output.txt', 'w') as f:
            f.write(content)

        # Verify that output.txt has the same content as input.txt
        with open('output.txt', 'r') as f:
            output_content = f.read()

        self.assertEqual(content, output_content)

    def test_output_file_creation(self):
        # Ensure output.txt is created
        with open('input.txt', 'r') as f:
            content = f.read()

        with open('output.txt', 'w') as f:
            f.write(content)

        self.assertTrue(os.path.exists('output.txt'))

    def test_content_integrity(self):
        # Ensure content integrity after copying
        with open('input.txt', 'r') as f:
            original_content = f.read()

        with open('output.txt', 'w') as f:
            f.write(original_content)

        with open('output.txt', 'r') as f:
            copied_content = f.read()

        self.assertEqual(original_content, copied_content)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/file_input_output/test_gpt_4o_2024_08_06_file_input_output.py,CompileStatus.OK,0.0,91.89,90.16,0.09,,100.0,0.5308940410614014,14.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_file_input_output', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/file_input_output/test_gpt_4o_2024_08_06_file_input_output.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_file_input_output', 'obj': 'TestFileInputOutput', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 25, 'path': 'data/generated/docs_python/file_input_output/test_gpt_4o_2024_08_06_file_input_output.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_file_input_output', 'obj': 'TestFileInputOutput.setUp', 'line': 8, 'column': 13, 'endLine': 8, 'endColumn': 35, 'path': 'data/generated/docs_python/file_input_output/test_gpt_4o_2024_08_06_file_input_output.py', 'symbol': 'unspecified-encoding', 'message': 'Using open without explicitly specifying an encoding', 'message-id': 'W1514'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_file_input_output', 'obj': 'TestFileInputOutput.test_file_copy', 'line': 18, 'column': 4, 'endLine': 18, 'endColumn': 22, 'path': 'data/generated/docs_python/file_input_output/test_gpt_4o_2024_08_06_file_input_output.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_file_input_output', 'obj': 'TestFileInputOutput.test_file_copy', 'line': 20, 'column': 13, 'endLine': 20, 'endColumn': 35, 'path': 'data/generated/docs_python/file_input_output/test_gpt_4o_2024_08_06_file_input_output.py', 'symbol': 'unspecified-encoding', 'message': 'Using open without explicitly specifying an encoding', 'message-id': 'W1514'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_file_input_output', 'obj': 'TestFileInputOutput.test_file_copy', 'line': 24, 'column': 13, 'endLine': 24, 'endColumn': 36, 'path': 'data/generated/docs_python/file_input_output/test_gpt_4o_2024_08_06_file_input_output.py', 'symbol': 'unspecified-encoding', 'message': 'Using open without explicitly specifying an encoding', 'message-id': 'W1514'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_file_input_output', 'obj': 'TestFileInputOutput.test_file_copy', 'line': 28, 'column': 13, 'endLine': 28, 'endColumn': 36, 'path': 'data/generated/docs_python/file_input_output/test_gpt_4o_2024_08_06_file_input_output.py', 'symbol': 'unspecified-encoding', 'message': 'Using open without explicitly specifying an encoding', 'message-id': 'W1514'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_file_input_output', 'obj': 'TestFileInputOutput.test_output_file_creation', 'line': 33, 'column': 4, 'endLine': 33, 'endColumn': 33, 'path': 'data/generated/docs_python/file_input_output/test_gpt_4o_2024_08_06_file_input_output.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_file_input_output', 'obj': 'TestFileInputOutput.test_output_file_creation', 'line': 35, 'column': 13, 'endLine': 35, 'endColumn': 35, 'path': 'data/generated/docs_python/file_input_output/test_gpt_4o_2024_08_06_file_input_output.py', 'symbol': 'unspecified-encoding', 'message': 'Using open without explicitly specifying an encoding', 'message-id': 'W1514'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_file_input_output', 'obj': 'TestFileInputOutput.test_output_file_creation', 'line': 38, 'column': 13, 'endLine': 38, 'endColumn': 36, 'path': 'data/generated/docs_python/file_input_output/test_gpt_4o_2024_08_06_file_input_output.py', 'symbol': 'unspecified-encoding', 'message': 'Using open without explicitly specifying an encoding', 'message-id': 'W1514'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_file_input_output', 'obj': 'TestFileInputOutput.test_content_integrity', 'line': 43, 'column': 4, 'endLine': 43, 'endColumn': 30, 'path': 'data/generated/docs_python/file_input_output/test_gpt_4o_2024_08_06_file_input_output.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_file_input_output', 'obj': 'TestFileInputOutput.test_content_integrity', 'line': 45, 'column': 13, 'endLine': 45, 'endColumn': 35, 'path': 'data/generated/docs_python/file_input_output/test_gpt_4o_2024_08_06_file_input_output.py', 'symbol': 'unspecified-encoding', 'message': 'Using open without explicitly specifying an encoding', 'message-id': 'W1514'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_file_input_output', 'obj': 'TestFileInputOutput.test_content_integrity', 'line': 48, 'column': 13, 'endLine': 48, 'endColumn': 36, 'path': 'data/generated/docs_python/file_input_output/test_gpt_4o_2024_08_06_file_input_output.py', 'symbol': 'unspecified-encoding', 'message': 'Using open without explicitly specifying an encoding', 'message-id': 'W1514'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_file_input_output', 'obj': 'TestFileInputOutput.test_content_integrity', 'line': 51, 'column': 13, 'endLine': 51, 'endColumn': 36, 'path': 'data/generated/docs_python/file_input_output/test_gpt_4o_2024_08_06_file_input_output.py', 'symbol': 'unspecified-encoding', 'message': 'Using open without explicitly specifying an encoding', 'message-id': 'W1514'}]",False
File size,"Verify the size of a file called     input.txt     for a file in the current working directory, and another one in the file system root.



",Python,"import os
 
size = os.path.getsize('input.txt')
size = os.path.getsize('/input.txt')",84,4,"import unittest
import os
from unittest.mock import patch

class TestFileSize(unittest.TestCase):

    @patch('os.path.getsize')
    def test_file_size_in_current_directory(self, mock_getsize):
        # Mock the return value for the current directory file
        mock_getsize.return_value = 1024  # Assume the file size is 1024 bytes
        size = os.path.getsize('input.txt')
        self.assertEqual(size, 1024)
        mock_getsize.assert_called_with('input.txt')

    @patch('os.path.getsize')
    def test_file_size_in_root_directory(self, mock_getsize):
        # Mock the return value for the root directory file
        mock_getsize.return_value = 2048  # Assume the file size is 2048 bytes
        size = os.path.getsize('/input.txt')
        self.assertEqual(size, 2048)
        mock_getsize.assert_called_with('/input.txt')

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/file_size/test_gpt_4o_2024_08_06_file_size.py,CompileStatus.OK,0.0,80.95,78.26,0.22,,100.0,0.5436999797821045,4.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_file_size', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/file_size/test_gpt_4o_2024_08_06_file_size.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_file_size', 'obj': 'TestFileSize', 'line': 5, 'column': 0, 'endLine': 5, 'endColumn': 18, 'path': 'data/generated/docs_python/file_size/test_gpt_4o_2024_08_06_file_size.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_file_size', 'obj': 'TestFileSize.test_file_size_in_current_directory', 'line': 8, 'column': 4, 'endLine': 8, 'endColumn': 43, 'path': 'data/generated/docs_python/file_size/test_gpt_4o_2024_08_06_file_size.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_file_size', 'obj': 'TestFileSize.test_file_size_in_root_directory', 'line': 16, 'column': 4, 'endLine': 16, 'endColumn': 40, 'path': 'data/generated/docs_python/file_size/test_gpt_4o_2024_08_06_file_size.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Find if a point is within a triangle,"Find if a point is within a triangle.



Task

   Assume points are on a plane defined by (x, y) real number coordinates.
   Given a point P(x, y) and a triangle formed by points A, B, and C, determine if P is within triangle ABC.
   You may use any algorithm.
   Bonus: explain why the algorithm you chose works.


Related tasks

   Determine_if_two_triangles_overlap


Also see

 Discussion of several methods. [[1]]
 Determine if a point is in a polygon [[2]]
 Triangle based coordinate systems [[3]]
 Wolfram entry [[4]]

",Python," 
"""""" find if point is in a triangle """"""
 
from sympy.geometry import Point, Triangle
 
def sign(pt1, pt2, pt3):
    """""" which side of plane cut by line (pt2, pt3) is pt1 on? """"""
    return (pt1.x - pt3.x) * (pt2.y - pt3.y) - (pt2.x - pt3.x) * (pt1.y - pt3.y)
 
 
def iswithin(point, pt1, pt2, pt3):
    """"""
    Determine if point is within triangle formed by points p1, p2, p3.
    If so, the point will be on the same side of each of the half planes
    defined by vectors p1p2, p2p3, and p3p1. zval is positive if outside,
    negative if inside such a plane. All should be positive or all negative
    if point is within the triangle.
    """"""
    zval1 = sign(point, pt1, pt2)
    zval2 = sign(point, pt2, pt3)
    zval3 = sign(point, pt3, pt1)
    notanyneg = zval1 >= 0 and zval2 >= 0 and zval3 >= 0
    notanypos = zval1 <= 0 and zval2 <= 0 and zval3 <= 0
    return notanyneg or notanypos
 
if __name__ == ""__main__"":
    POINTS = [Point(0, 0)]
    TRI = Triangle(Point(1.5, 2.4), Point(5.1, -3.1), Point(-3.8, 0.5))
    for pnt in POINTS:
        a, b, c = TRI.vertices
        isornot = ""is"" if iswithin(pnt, a, b, c) else ""is not""
        print(""Point"", pnt, isornot, ""within the triangle"", TRI)
 ",1209,33,"import unittest
from sympy.geometry import Point, Triangle
from find_if_a_point_is_within_a_triangle import iswithin

class TestPointInTriangle(unittest.TestCase):

    def test_point_inside_triangle(self):
        # Point inside the triangle
        point = Point(1, 1)
        triangle = Triangle(Point(0, 0), Point(2, 0), Point(1, 2))
        a, b, c = triangle.vertices
        self.assertTrue(iswithin(point, a, b, c))

    def test_point_on_vertex(self):
        # Point on one of the triangle's vertices
        point = Point(0, 0)
        triangle = Triangle(Point(0, 0), Point(2, 0), Point(1, 2))
        a, b, c = triangle.vertices
        self.assertTrue(iswithin(point, a, b, c))

    def test_point_on_edge(self):
        # Point on one of the triangle's edges
        point = Point(1, 0)
        triangle = Triangle(Point(0, 0), Point(2, 0), Point(1, 2))
        a, b, c = triangle.vertices
        self.assertTrue(iswithin(point, a, b, c))

    def test_point_outside_triangle(self):
        # Point outside the triangle
        point = Point(3, 3)
        triangle = Triangle(Point(0, 0), Point(2, 0), Point(1, 2))
        a, b, c = triangle.vertices
        self.assertFalse(iswithin(point, a, b, c))

    def test_point_on_extended_line(self):
        # Point on the line extended from one of the triangle's edges
        point = Point(3, 0)
        triangle = Triangle(Point(0, 0), Point(2, 0), Point(1, 2))
        a, b, c = triangle.vertices
        self.assertFalse(iswithin(point, a, b, c))

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/find_if_a_point_is_within_a_triangle/test_gpt_4o_2024_08_06_find_if_a_point_is_within_a_triangle.py,CompileStatus.OK,0.0,4.17,3.7,0.16,0.71,,0.6438369750976562,8.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_if_a_point_is_within_a_triangle', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/find_if_a_point_is_within_a_triangle/test_gpt_4o_2024_08_06_find_if_a_point_is_within_a_triangle.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_find_if_a_point_is_within_a_triangle', 'obj': '', 'line': 2, 'column': 0, 'endLine': 2, 'endColumn': 42, 'path': 'data/generated/docs_python/find_if_a_point_is_within_a_triangle/test_gpt_4o_2024_08_06_find_if_a_point_is_within_a_triangle.py', 'symbol': 'import-error', 'message': ""Unable to import 'sympy.geometry'"", 'message-id': 'E0401'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_if_a_point_is_within_a_triangle', 'obj': 'TestPointInTriangle', 'line': 5, 'column': 0, 'endLine': 5, 'endColumn': 25, 'path': 'data/generated/docs_python/find_if_a_point_is_within_a_triangle/test_gpt_4o_2024_08_06_find_if_a_point_is_within_a_triangle.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_if_a_point_is_within_a_triangle', 'obj': 'TestPointInTriangle.test_point_inside_triangle', 'line': 7, 'column': 4, 'endLine': 7, 'endColumn': 34, 'path': 'data/generated/docs_python/find_if_a_point_is_within_a_triangle/test_gpt_4o_2024_08_06_find_if_a_point_is_within_a_triangle.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_if_a_point_is_within_a_triangle', 'obj': 'TestPointInTriangle.test_point_on_vertex', 'line': 14, 'column': 4, 'endLine': 14, 'endColumn': 28, 'path': 'data/generated/docs_python/find_if_a_point_is_within_a_triangle/test_gpt_4o_2024_08_06_find_if_a_point_is_within_a_triangle.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_if_a_point_is_within_a_triangle', 'obj': 'TestPointInTriangle.test_point_on_edge', 'line': 21, 'column': 4, 'endLine': 21, 'endColumn': 26, 'path': 'data/generated/docs_python/find_if_a_point_is_within_a_triangle/test_gpt_4o_2024_08_06_find_if_a_point_is_within_a_triangle.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_if_a_point_is_within_a_triangle', 'obj': 'TestPointInTriangle.test_point_outside_triangle', 'line': 28, 'column': 4, 'endLine': 28, 'endColumn': 35, 'path': 'data/generated/docs_python/find_if_a_point_is_within_a_triangle/test_gpt_4o_2024_08_06_find_if_a_point_is_within_a_triangle.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_if_a_point_is_within_a_triangle', 'obj': 'TestPointInTriangle.test_point_on_extended_line', 'line': 35, 'column': 4, 'endLine': 35, 'endColumn': 35, 'path': 'data/generated/docs_python/find_if_a_point_is_within_a_triangle/test_gpt_4o_2024_08_06_find_if_a_point_is_within_a_triangle.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Find largest left truncatable prime in a given base,"A truncatable prime is one where all non-empty substrings that finish at the end of the number (right-substrings) are also primes when understood as numbers in a particular base. The largest such prime in a given (integer) base is therefore computable, provided the base is larger than 2.

Let's consider what happens in base 10. Obviously the right most digit must be prime, so in base 10 candidates are 2,3,5,7. Putting a digit in the range 1 to base-1 in front of each candidate must result in a prime. So 2 and 5, like the whale and the petunias in The Hitchhiker's Guide to the Galaxy, come into existence only to be extinguished before they have time to realize it, because 2 and 5 preceded by any digit in the range 1 to base-1 is not prime. Some numbers formed by preceding 3 or 7 by a digit in the range 1 to base-1 are prime. So 13,17,23,37,43,47,53,67,73,83,97 are candidates. Again, putting a digit in the range 1 to base-1 in front of each candidate must be a prime. Repeating until there are no larger candidates finds the largest left truncatable prime.

Let's work base 3 by hand:

0 and 1 are not prime so the last digit must be 2. 123 = 510 which is prime, 223 = 810 which is not so 123 is the only candidate. 1123 = 1410 which is not prime, 2123 = 2310 which is, so 2123 is the only candidate. 12123 = 5010 which is not prime, 22123 = 7710 which also is not prime. So there are no more candidates, therefore 23 is the largest left truncatable prime in base 3.

The task is to reconstruct as much, and possibly more, of the table in the OEIS as you are able.

Related Tasks:

 Miller-Rabin primality test

",Python,"import random
 
def is_probable_prime(n,k):
    #this uses the miller-rabin primality test found from rosetta code
    if n==0 or n==1:
        return False
    if n==2:
        return True
    if n % 2 == 0:
        return False
    s = 0
    d = n-1
 
    while True:
        quotient, remainder = divmod(d, 2)
        if remainder == 1:
            break
        s += 1
        d = quotient
 
    def try_composite(a):
        if pow(a, d, n) == 1:
            return False
        for i in range(s):
            if pow(a, 2**i * d, n) == n-1:
                return False
        return True # n is definitely composite
 
    for i in range(k):
        a = random.randrange(2, n)
        if try_composite(a):
            return False
 
    return True # no base tested showed n as composite
 
 
def largest_left_truncatable_prime(base):
    radix = 0
    candidates = [0]
    while True:
        new_candidates=[]
        multiplier = base**radix
        for i in range(1,base):
            new_candidates += [x+i*multiplier for x in candidates if is_probable_prime(x+i*multiplier,30)]
        if len(new_candidates)==0:
            return max(candidates)
        candidates = new_candidates
        radix += 1
 
for b in range(3,24):
    print(""%d:%d\n"" % (b,largest_left_truncatable_prime(b)))
 ",1309,52,"import unittest
from find_largest_left_truncatable_prime_in_a_given_base import is_probable_prime, largest_left_truncatable_prime

class TestTruncatablePrimes(unittest.TestCase):

    def test_is_probable_prime(self):
        # Test known primes
        self.assertTrue(is_probable_prime(2, 30))
        self.assertTrue(is_probable_prime(3, 30))
        self.assertTrue(is_probable_prime(5, 30))
        self.assertTrue(is_probable_prime(7, 30))
        self.assertTrue(is_probable_prime(11, 30))
        self.assertTrue(is_probable_prime(13, 30))

        # Test known non-primes
        self.assertFalse(is_probable_prime(0, 30))
        self.assertFalse(is_probable_prime(1, 30))
        self.assertFalse(is_probable_prime(4, 30))
        self.assertFalse(is_probable_prime(6, 30))
        self.assertFalse(is_probable_prime(8, 30))
        self.assertFalse(is_probable_prime(9, 30))
        self.assertFalse(is_probable_prime(10, 30))

    def test_largest_left_truncatable_prime_base_3(self):
        # Base 3 example from the documentation
        self.assertEqual(largest_left_truncatable_prime(3), 2)

    def test_largest_left_truncatable_prime_base_10(self):
        # Known result for base 10
        self.assertEqual(largest_left_truncatable_prime(10), 739397)

    def test_largest_left_truncatable_prime_various_bases(self):
        # Test for various bases
        self.assertEqual(largest_left_truncatable_prime(4), 3)
        self.assertEqual(largest_left_truncatable_prime(5), 13)
        self.assertEqual(largest_left_truncatable_prime(6), 23)
        self.assertEqual(largest_left_truncatable_prime(7), 53)
        self.assertEqual(largest_left_truncatable_prime(8), 73)
        self.assertEqual(largest_left_truncatable_prime(9), 313)
        self.assertEqual(largest_left_truncatable_prime(11), 2333)
        self.assertEqual(largest_left_truncatable_prime(12), 3137)
        self.assertEqual(largest_left_truncatable_prime(13), 23333)
        self.assertEqual(largest_left_truncatable_prime(14), 31397)
        self.assertEqual(largest_left_truncatable_prime(15), 233993)
        self.assertEqual(largest_left_truncatable_prime(16), 313997)
        self.assertEqual(largest_left_truncatable_prime(17), 2339933)
        self.assertEqual(largest_left_truncatable_prime(18), 3139973)
        self.assertEqual(largest_left_truncatable_prime(19), 23399339)
        self.assertEqual(largest_left_truncatable_prime(20), 31399733)
        self.assertEqual(largest_left_truncatable_prime(21), 233993399)
        self.assertEqual(largest_left_truncatable_prime(22), 313997333)
        self.assertEqual(largest_left_truncatable_prime(23), 2339933993)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/find_largest_left_truncatable_prime_in_a_given_base/test_gpt_4o_2024_08_06_find_largest_left_truncatable_prime_in_a_given_base.py,CompileStatus.OK,,,,0.79,1.79,,,8.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_largest_left_truncatable_prime_in_a_given_base', 'obj': '', 'line': 2, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/find_largest_left_truncatable_prime_in_a_given_base/test_gpt_4o_2024_08_06_find_largest_left_truncatable_prime_in_a_given_base.py', 'symbol': 'line-too-long', 'message': 'Line too long (113/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_largest_left_truncatable_prime_in_a_given_base', 'obj': '', 'line': 14, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/find_largest_left_truncatable_prime_in_a_given_base/test_gpt_4o_2024_08_06_find_largest_left_truncatable_prime_in_a_given_base.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_largest_left_truncatable_prime_in_a_given_base', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/find_largest_left_truncatable_prime_in_a_given_base/test_gpt_4o_2024_08_06_find_largest_left_truncatable_prime_in_a_given_base.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_largest_left_truncatable_prime_in_a_given_base', 'obj': 'TestTruncatablePrimes', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 27, 'path': 'data/generated/docs_python/find_largest_left_truncatable_prime_in_a_given_base/test_gpt_4o_2024_08_06_find_largest_left_truncatable_prime_in_a_given_base.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_largest_left_truncatable_prime_in_a_given_base', 'obj': 'TestTruncatablePrimes.test_is_probable_prime', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 30, 'path': 'data/generated/docs_python/find_largest_left_truncatable_prime_in_a_given_base/test_gpt_4o_2024_08_06_find_largest_left_truncatable_prime_in_a_given_base.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_largest_left_truncatable_prime_in_a_given_base', 'obj': 'TestTruncatablePrimes.test_largest_left_truncatable_prime_base_3', 'line': 24, 'column': 4, 'endLine': 24, 'endColumn': 50, 'path': 'data/generated/docs_python/find_largest_left_truncatable_prime_in_a_given_base/test_gpt_4o_2024_08_06_find_largest_left_truncatable_prime_in_a_given_base.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_largest_left_truncatable_prime_in_a_given_base', 'obj': 'TestTruncatablePrimes.test_largest_left_truncatable_prime_base_10', 'line': 28, 'column': 4, 'endLine': 28, 'endColumn': 51, 'path': 'data/generated/docs_python/find_largest_left_truncatable_prime_in_a_given_base/test_gpt_4o_2024_08_06_find_largest_left_truncatable_prime_in_a_given_base.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_largest_left_truncatable_prime_in_a_given_base', 'obj': 'TestTruncatablePrimes.test_largest_left_truncatable_prime_various_bases', 'line': 32, 'column': 4, 'endLine': 32, 'endColumn': 57, 'path': 'data/generated/docs_python/find_largest_left_truncatable_prime_in_a_given_base/test_gpt_4o_2024_08_06_find_largest_left_truncatable_prime_in_a_given_base.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",True
Find limit of recursion,"Find limit of recursion is part of Short Circuit's Console Program Basics selection.
Task

Find the limit of recursion.



",Python,"import sys
print(sys.getrecursionlimit())",41,2,"import unittest
import sys

class TestRecursionLimit(unittest.TestCase):
    def test_get_recursion_limit(self):
        # Get the current recursion limit
        recursion_limit = sys.getrecursionlimit()

        # Check if the recursion limit is an integer
        self.assertIsInstance(recursion_limit, int)

        # Optionally, check if the recursion limit is within a reasonable range
        # This range can vary depending on the Python implementation and platform
        self.assertGreater(recursion_limit, 100)  # Typically, it's greater than 100
        self.assertLess(recursion_limit, 10000)  # Typically, it's less than 10000

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/find_limit_of_recursion/test_gpt_4o_2024_08_06_find_limit_of_recursion.py,CompileStatus.OK,0.0,75.0,71.43,0.3,,100.0,0.4886221885681152,4.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_limit_of_recursion', 'obj': '', 'line': 8, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/find_limit_of_recursion/test_gpt_4o_2024_08_06_find_limit_of_recursion.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_limit_of_recursion', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/find_limit_of_recursion/test_gpt_4o_2024_08_06_find_limit_of_recursion.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_limit_of_recursion', 'obj': 'TestRecursionLimit', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 24, 'path': 'data/generated/docs_python/find_limit_of_recursion/test_gpt_4o_2024_08_06_find_limit_of_recursion.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_limit_of_recursion', 'obj': 'TestRecursionLimit.test_get_recursion_limit', 'line': 5, 'column': 4, 'endLine': 5, 'endColumn': 32, 'path': 'data/generated/docs_python/find_limit_of_recursion/test_gpt_4o_2024_08_06_find_limit_of_recursion.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Find the intersection of a line with a plane,"Finding the intersection of an infinite ray with a plane in 3D is an important topic in collision detection.



Task

Find the point of intersection for the infinite ray with direction   (0, -1, -1)   passing through position   (0, 0, 10)   with the infinite plane with a normal vector of   (0, 0, 1)   and which passes through [0, 0, 5].



",Python,"#!/bin/python
from __future__ import print_function
import numpy as np
 
def LinePlaneCollision(planeNormal, planePoint, rayDirection, rayPoint, epsilon=1e-6):
 
	ndotu = planeNormal.dot(rayDirection)
	if abs(ndotu) < epsilon:
		raise RuntimeError(""no intersection or line is within plane"")
 
	w = rayPoint - planePoint
	si = -planeNormal.dot(w) / ndotu
	Psi = w + si * rayDirection + planePoint
	return Psi
 
 
if __name__==""__main__"":
	#Define plane
	planeNormal = np.array([0, 0, 1])
	planePoint = np.array([0, 0, 5]) #Any point on the plane
 
	#Define ray
	rayDirection = np.array([0, -1, -1])
	rayPoint = np.array([0, 0, 10]) #Any point along the ray
 
	Psi = LinePlaneCollision(planeNormal, planePoint, rayDirection, rayPoint)
	print (""intersection at"", Psi)",764,27,"import unittest
import numpy as np
from find_the_intersection_of_a_line_with_a_plane import LinePlaneCollision

class TestLinePlaneCollision(unittest.TestCase):

    def test_intersection(self):
        planeNormal = np.array([0, 0, 1])
        planePoint = np.array([0, 0, 5])
        rayDirection = np.array([0, -1, -1])
        rayPoint = np.array([0, 0, 10])

        expected_intersection = np.array([0, 0, 5])
        intersection = LinePlaneCollision(planeNormal, planePoint, rayDirection, rayPoint)

        np.testing.assert_array_almost_equal(intersection, expected_intersection, decimal=6)

    def test_no_intersection_parallel(self):
        planeNormal = np.array([0, 0, 1])
        planePoint = np.array([0, 0, 5])
        rayDirection = np.array([0, 1, 0])  # Parallel to the plane
        rayPoint = np.array([0, 0, 10])

        with self.assertRaises(RuntimeError):
            LinePlaneCollision(planeNormal, planePoint, rayDirection, rayPoint)

    def test_ray_within_plane(self):
        planeNormal = np.array([0, 0, 1])
        planePoint = np.array([0, 0, 5])
        rayDirection = np.array([1, 0, 0])  # Lies within the plane
        rayPoint = np.array([0, 0, 5])

        with self.assertRaises(RuntimeError):
            LinePlaneCollision(planeNormal, planePoint, rayDirection, rayPoint)

    def test_intersection_with_negative_direction(self):
        planeNormal = np.array([0, 0, 1])
        planePoint = np.array([0, 0, 5])
        rayDirection = np.array([0, 1, 1])  # Opposite direction
        rayPoint = np.array([0, 0, 0])

        expected_intersection = np.array([0, 0, 5])
        intersection = LinePlaneCollision(planeNormal, planePoint, rayDirection, rayPoint)

        np.testing.assert_array_almost_equal(intersection, expected_intersection, decimal=6)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/find_the_intersection_of_a_line_with_a_plane/test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane.py,CompileStatus.OK,0.0,86.79,85.71,0.11,2.0,50.0,0.6071031093597412,28.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane', 'obj': '', 'line': 12, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/find_the_intersection_of_a_line_with_a_plane/test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane', 'obj': '', 'line': 15, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/find_the_intersection_of_a_line_with_a_plane/test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane', 'obj': '', 'line': 23, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/find_the_intersection_of_a_line_with_a_plane/test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane', 'obj': '', 'line': 32, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/find_the_intersection_of_a_line_with_a_plane/test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane', 'obj': '', 'line': 41, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/find_the_intersection_of_a_line_with_a_plane/test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane', 'obj': '', 'line': 44, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/find_the_intersection_of_a_line_with_a_plane/test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/find_the_intersection_of_a_line_with_a_plane/test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane', 'obj': 'TestLinePlaneCollision', 'line': 5, 'column': 0, 'endLine': 5, 'endColumn': 28, 'path': 'data/generated/docs_python/find_the_intersection_of_a_line_with_a_plane/test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane', 'obj': 'TestLinePlaneCollision.test_intersection', 'line': 7, 'column': 4, 'endLine': 7, 'endColumn': 25, 'path': 'data/generated/docs_python/find_the_intersection_of_a_line_with_a_plane/test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane', 'obj': 'TestLinePlaneCollision.test_intersection', 'line': 8, 'column': 8, 'endLine': 8, 'endColumn': 19, 'path': 'data/generated/docs_python/find_the_intersection_of_a_line_with_a_plane/test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane.py', 'symbol': 'invalid-name', 'message': 'Variable name ""planeNormal"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane', 'obj': 'TestLinePlaneCollision.test_intersection', 'line': 9, 'column': 8, 'endLine': 9, 'endColumn': 18, 'path': 'data/generated/docs_python/find_the_intersection_of_a_line_with_a_plane/test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane.py', 'symbol': 'invalid-name', 'message': 'Variable name ""planePoint"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane', 'obj': 'TestLinePlaneCollision.test_intersection', 'line': 10, 'column': 8, 'endLine': 10, 'endColumn': 20, 'path': 'data/generated/docs_python/find_the_intersection_of_a_line_with_a_plane/test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane.py', 'symbol': 'invalid-name', 'message': 'Variable name ""rayDirection"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane', 'obj': 'TestLinePlaneCollision.test_intersection', 'line': 11, 'column': 8, 'endLine': 11, 'endColumn': 16, 'path': 'data/generated/docs_python/find_the_intersection_of_a_line_with_a_plane/test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane.py', 'symbol': 'invalid-name', 'message': 'Variable name ""rayPoint"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane', 'obj': 'TestLinePlaneCollision.test_no_intersection_parallel', 'line': 18, 'column': 4, 'endLine': 18, 'endColumn': 37, 'path': 'data/generated/docs_python/find_the_intersection_of_a_line_with_a_plane/test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane', 'obj': 'TestLinePlaneCollision.test_no_intersection_parallel', 'line': 19, 'column': 8, 'endLine': 19, 'endColumn': 19, 'path': 'data/generated/docs_python/find_the_intersection_of_a_line_with_a_plane/test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane.py', 'symbol': 'invalid-name', 'message': 'Variable name ""planeNormal"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane', 'obj': 'TestLinePlaneCollision.test_no_intersection_parallel', 'line': 20, 'column': 8, 'endLine': 20, 'endColumn': 18, 'path': 'data/generated/docs_python/find_the_intersection_of_a_line_with_a_plane/test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane.py', 'symbol': 'invalid-name', 'message': 'Variable name ""planePoint"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane', 'obj': 'TestLinePlaneCollision.test_no_intersection_parallel', 'line': 21, 'column': 8, 'endLine': 21, 'endColumn': 20, 'path': 'data/generated/docs_python/find_the_intersection_of_a_line_with_a_plane/test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane.py', 'symbol': 'invalid-name', 'message': 'Variable name ""rayDirection"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane', 'obj': 'TestLinePlaneCollision.test_no_intersection_parallel', 'line': 22, 'column': 8, 'endLine': 22, 'endColumn': 16, 'path': 'data/generated/docs_python/find_the_intersection_of_a_line_with_a_plane/test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane.py', 'symbol': 'invalid-name', 'message': 'Variable name ""rayPoint"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane', 'obj': 'TestLinePlaneCollision.test_ray_within_plane', 'line': 27, 'column': 4, 'endLine': 27, 'endColumn': 29, 'path': 'data/generated/docs_python/find_the_intersection_of_a_line_with_a_plane/test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane', 'obj': 'TestLinePlaneCollision.test_ray_within_plane', 'line': 28, 'column': 8, 'endLine': 28, 'endColumn': 19, 'path': 'data/generated/docs_python/find_the_intersection_of_a_line_with_a_plane/test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane.py', 'symbol': 'invalid-name', 'message': 'Variable name ""planeNormal"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane', 'obj': 'TestLinePlaneCollision.test_ray_within_plane', 'line': 29, 'column': 8, 'endLine': 29, 'endColumn': 18, 'path': 'data/generated/docs_python/find_the_intersection_of_a_line_with_a_plane/test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane.py', 'symbol': 'invalid-name', 'message': 'Variable name ""planePoint"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane', 'obj': 'TestLinePlaneCollision.test_ray_within_plane', 'line': 30, 'column': 8, 'endLine': 30, 'endColumn': 20, 'path': 'data/generated/docs_python/find_the_intersection_of_a_line_with_a_plane/test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane.py', 'symbol': 'invalid-name', 'message': 'Variable name ""rayDirection"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane', 'obj': 'TestLinePlaneCollision.test_ray_within_plane', 'line': 31, 'column': 8, 'endLine': 31, 'endColumn': 16, 'path': 'data/generated/docs_python/find_the_intersection_of_a_line_with_a_plane/test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane.py', 'symbol': 'invalid-name', 'message': 'Variable name ""rayPoint"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane', 'obj': 'TestLinePlaneCollision.test_intersection_with_negative_direction', 'line': 36, 'column': 4, 'endLine': 36, 'endColumn': 49, 'path': 'data/generated/docs_python/find_the_intersection_of_a_line_with_a_plane/test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane', 'obj': 'TestLinePlaneCollision.test_intersection_with_negative_direction', 'line': 37, 'column': 8, 'endLine': 37, 'endColumn': 19, 'path': 'data/generated/docs_python/find_the_intersection_of_a_line_with_a_plane/test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane.py', 'symbol': 'invalid-name', 'message': 'Variable name ""planeNormal"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane', 'obj': 'TestLinePlaneCollision.test_intersection_with_negative_direction', 'line': 38, 'column': 8, 'endLine': 38, 'endColumn': 18, 'path': 'data/generated/docs_python/find_the_intersection_of_a_line_with_a_plane/test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane.py', 'symbol': 'invalid-name', 'message': 'Variable name ""planePoint"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane', 'obj': 'TestLinePlaneCollision.test_intersection_with_negative_direction', 'line': 39, 'column': 8, 'endLine': 39, 'endColumn': 20, 'path': 'data/generated/docs_python/find_the_intersection_of_a_line_with_a_plane/test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane.py', 'symbol': 'invalid-name', 'message': 'Variable name ""rayDirection"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane', 'obj': 'TestLinePlaneCollision.test_intersection_with_negative_direction', 'line': 40, 'column': 8, 'endLine': 40, 'endColumn': 16, 'path': 'data/generated/docs_python/find_the_intersection_of_a_line_with_a_plane/test_gpt_4o_2024_08_06_find_the_intersection_of_a_line_with_a_plane.py', 'symbol': 'invalid-name', 'message': 'Variable name ""rayPoint"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}]",False
Find the intersection of two lines,"[1]


Task

Find the point of intersection of two lines in 2D.



The 1st line passes though    (4,0)    and    (6,10) .

The 2nd line passes though    (0,3)    and    (10,7) .



",Python,"def line_intersect(Ax1, Ay1, Ax2, Ay2, Bx1, By1, Bx2, By2):
    """""" returns a (x, y) tuple or None if there is no intersection """"""
    d = (By2 - By1) * (Ax2 - Ax1) - (Bx2 - Bx1) * (Ay2 - Ay1)
    if d:
        uA = ((Bx2 - Bx1) * (Ay1 - By1) - (By2 - By1) * (Ax1 - Bx1)) / d
        uB = ((Ax2 - Ax1) * (Ay1 - By1) - (Ay2 - Ay1) * (Ax1 - Bx1)) / d
    else:
        return
    if not(0 <= uA <= 1 and 0 <= uB <= 1):
        return
    x = Ax1 + uA * (Ax2 - Ax1)
    y = Ay1 + uA * (Ay2 - Ay1)
 
    return x, y
 
if __name__ == '__main__':
    (a, b), (c, d) = (4, 0), (6, 10)  # try (4, 0), (6, 4)
    (e, f), (g, h) = (0, 3), (10, 7)  # for non intersecting test
    pt = line_intersect(a, b, c, d, e, f, g, h)
    print(pt)",727,20,"import unittest
from find_the_intersection_of_two_lines import line_intersect

class TestLineIntersect(unittest.TestCase):

    def test_intersection_exists(self):
        # Test case where lines intersect
        Ax1, Ay1, Ax2, Ay2 = 4, 0, 6, 10
        Bx1, By1, Bx2, By2 = 0, 3, 10, 7
        result = line_intersect(Ax1, Ay1, Ax2, Ay2, Bx1, By1, Bx2, By2)
        self.assertIsNotNone(result)
        self.assertAlmostEqual(result[0], 5.2, places=1)
        self.assertAlmostEqual(result[1], 5.0, places=1)

    def test_no_intersection_parallel(self):
        # Test case where lines are parallel and do not intersect
        Ax1, Ay1, Ax2, Ay2 = 0, 0, 10, 10
        Bx1, By1, Bx2, By2 = 0, 1, 10, 11
        result = line_intersect(Ax1, Ay1, Ax2, Ay2, Bx1, By1, Bx2, By2)
        self.assertIsNone(result)

    def test_no_intersection_collinear(self):
        # Test case where lines are collinear and do not intersect within segments
        Ax1, Ay1, Ax2, Ay2 = 0, 0, 10, 10
        Bx1, By1, Bx2, By2 = 20, 20, 30, 30
        result = line_intersect(Ax1, Ay1, Ax2, Ay2, Bx1, By1, Bx2, By2)
        self.assertIsNone(result)

    def test_intersection_at_endpoint(self):
        # Test case where lines intersect at an endpoint
        Ax1, Ay1, Ax2, Ay2 = 0, 0, 5, 5
        Bx1, By1, Bx2, By2 = 5, 5, 10, 0
        result = line_intersect(Ax1, Ay1, Ax2, Ay2, Bx1, By1, Bx2, By2)
        self.assertIsNotNone(result)
        self.assertEqual(result, (5, 5))

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/find_the_intersection_of_two_lines/test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines.py,CompileStatus.OK,0.0,84.09,80.77,0.25,1.75,75.0,0.562824010848999,38.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/find_the_intersection_of_two_lines/test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines', 'obj': 'TestLineIntersect', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 23, 'path': 'data/generated/docs_python/find_the_intersection_of_two_lines/test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines', 'obj': 'TestLineIntersect.test_intersection_exists', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 32, 'path': 'data/generated/docs_python/find_the_intersection_of_two_lines/test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines', 'obj': 'TestLineIntersect.test_intersection_exists', 'line': 8, 'column': 8, 'endLine': 8, 'endColumn': 11, 'path': 'data/generated/docs_python/find_the_intersection_of_two_lines/test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines.py', 'symbol': 'invalid-name', 'message': 'Variable name ""Ax1"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines', 'obj': 'TestLineIntersect.test_intersection_exists', 'line': 8, 'column': 13, 'endLine': 8, 'endColumn': 16, 'path': 'data/generated/docs_python/find_the_intersection_of_two_lines/test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines.py', 'symbol': 'invalid-name', 'message': 'Variable name ""Ay1"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines', 'obj': 'TestLineIntersect.test_intersection_exists', 'line': 8, 'column': 18, 'endLine': 8, 'endColumn': 21, 'path': 'data/generated/docs_python/find_the_intersection_of_two_lines/test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines.py', 'symbol': 'invalid-name', 'message': 'Variable name ""Ax2"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines', 'obj': 'TestLineIntersect.test_intersection_exists', 'line': 8, 'column': 23, 'endLine': 8, 'endColumn': 26, 'path': 'data/generated/docs_python/find_the_intersection_of_two_lines/test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines.py', 'symbol': 'invalid-name', 'message': 'Variable name ""Ay2"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines', 'obj': 'TestLineIntersect.test_intersection_exists', 'line': 9, 'column': 8, 'endLine': 9, 'endColumn': 11, 'path': 'data/generated/docs_python/find_the_intersection_of_two_lines/test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines.py', 'symbol': 'invalid-name', 'message': 'Variable name ""Bx1"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines', 'obj': 'TestLineIntersect.test_intersection_exists', 'line': 9, 'column': 13, 'endLine': 9, 'endColumn': 16, 'path': 'data/generated/docs_python/find_the_intersection_of_two_lines/test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines.py', 'symbol': 'invalid-name', 'message': 'Variable name ""By1"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines', 'obj': 'TestLineIntersect.test_intersection_exists', 'line': 9, 'column': 18, 'endLine': 9, 'endColumn': 21, 'path': 'data/generated/docs_python/find_the_intersection_of_two_lines/test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines.py', 'symbol': 'invalid-name', 'message': 'Variable name ""Bx2"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines', 'obj': 'TestLineIntersect.test_intersection_exists', 'line': 9, 'column': 23, 'endLine': 9, 'endColumn': 26, 'path': 'data/generated/docs_python/find_the_intersection_of_two_lines/test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines.py', 'symbol': 'invalid-name', 'message': 'Variable name ""By2"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines', 'obj': 'TestLineIntersect.test_no_intersection_parallel', 'line': 15, 'column': 4, 'endLine': 15, 'endColumn': 37, 'path': 'data/generated/docs_python/find_the_intersection_of_two_lines/test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines', 'obj': 'TestLineIntersect.test_no_intersection_parallel', 'line': 17, 'column': 8, 'endLine': 17, 'endColumn': 11, 'path': 'data/generated/docs_python/find_the_intersection_of_two_lines/test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines.py', 'symbol': 'invalid-name', 'message': 'Variable name ""Ax1"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines', 'obj': 'TestLineIntersect.test_no_intersection_parallel', 'line': 17, 'column': 13, 'endLine': 17, 'endColumn': 16, 'path': 'data/generated/docs_python/find_the_intersection_of_two_lines/test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines.py', 'symbol': 'invalid-name', 'message': 'Variable name ""Ay1"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines', 'obj': 'TestLineIntersect.test_no_intersection_parallel', 'line': 17, 'column': 18, 'endLine': 17, 'endColumn': 21, 'path': 'data/generated/docs_python/find_the_intersection_of_two_lines/test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines.py', 'symbol': 'invalid-name', 'message': 'Variable name ""Ax2"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines', 'obj': 'TestLineIntersect.test_no_intersection_parallel', 'line': 17, 'column': 23, 'endLine': 17, 'endColumn': 26, 'path': 'data/generated/docs_python/find_the_intersection_of_two_lines/test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines.py', 'symbol': 'invalid-name', 'message': 'Variable name ""Ay2"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines', 'obj': 'TestLineIntersect.test_no_intersection_parallel', 'line': 18, 'column': 8, 'endLine': 18, 'endColumn': 11, 'path': 'data/generated/docs_python/find_the_intersection_of_two_lines/test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines.py', 'symbol': 'invalid-name', 'message': 'Variable name ""Bx1"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines', 'obj': 'TestLineIntersect.test_no_intersection_parallel', 'line': 18, 'column': 13, 'endLine': 18, 'endColumn': 16, 'path': 'data/generated/docs_python/find_the_intersection_of_two_lines/test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines.py', 'symbol': 'invalid-name', 'message': 'Variable name ""By1"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines', 'obj': 'TestLineIntersect.test_no_intersection_parallel', 'line': 18, 'column': 18, 'endLine': 18, 'endColumn': 21, 'path': 'data/generated/docs_python/find_the_intersection_of_two_lines/test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines.py', 'symbol': 'invalid-name', 'message': 'Variable name ""Bx2"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines', 'obj': 'TestLineIntersect.test_no_intersection_parallel', 'line': 18, 'column': 23, 'endLine': 18, 'endColumn': 26, 'path': 'data/generated/docs_python/find_the_intersection_of_two_lines/test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines.py', 'symbol': 'invalid-name', 'message': 'Variable name ""By2"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines', 'obj': 'TestLineIntersect.test_no_intersection_collinear', 'line': 22, 'column': 4, 'endLine': 22, 'endColumn': 38, 'path': 'data/generated/docs_python/find_the_intersection_of_two_lines/test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines', 'obj': 'TestLineIntersect.test_no_intersection_collinear', 'line': 24, 'column': 8, 'endLine': 24, 'endColumn': 11, 'path': 'data/generated/docs_python/find_the_intersection_of_two_lines/test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines.py', 'symbol': 'invalid-name', 'message': 'Variable name ""Ax1"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines', 'obj': 'TestLineIntersect.test_no_intersection_collinear', 'line': 24, 'column': 13, 'endLine': 24, 'endColumn': 16, 'path': 'data/generated/docs_python/find_the_intersection_of_two_lines/test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines.py', 'symbol': 'invalid-name', 'message': 'Variable name ""Ay1"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines', 'obj': 'TestLineIntersect.test_no_intersection_collinear', 'line': 24, 'column': 18, 'endLine': 24, 'endColumn': 21, 'path': 'data/generated/docs_python/find_the_intersection_of_two_lines/test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines.py', 'symbol': 'invalid-name', 'message': 'Variable name ""Ax2"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines', 'obj': 'TestLineIntersect.test_no_intersection_collinear', 'line': 24, 'column': 23, 'endLine': 24, 'endColumn': 26, 'path': 'data/generated/docs_python/find_the_intersection_of_two_lines/test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines.py', 'symbol': 'invalid-name', 'message': 'Variable name ""Ay2"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines', 'obj': 'TestLineIntersect.test_no_intersection_collinear', 'line': 25, 'column': 8, 'endLine': 25, 'endColumn': 11, 'path': 'data/generated/docs_python/find_the_intersection_of_two_lines/test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines.py', 'symbol': 'invalid-name', 'message': 'Variable name ""Bx1"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines', 'obj': 'TestLineIntersect.test_no_intersection_collinear', 'line': 25, 'column': 13, 'endLine': 25, 'endColumn': 16, 'path': 'data/generated/docs_python/find_the_intersection_of_two_lines/test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines.py', 'symbol': 'invalid-name', 'message': 'Variable name ""By1"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines', 'obj': 'TestLineIntersect.test_no_intersection_collinear', 'line': 25, 'column': 18, 'endLine': 25, 'endColumn': 21, 'path': 'data/generated/docs_python/find_the_intersection_of_two_lines/test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines.py', 'symbol': 'invalid-name', 'message': 'Variable name ""Bx2"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines', 'obj': 'TestLineIntersect.test_no_intersection_collinear', 'line': 25, 'column': 23, 'endLine': 25, 'endColumn': 26, 'path': 'data/generated/docs_python/find_the_intersection_of_two_lines/test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines.py', 'symbol': 'invalid-name', 'message': 'Variable name ""By2"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines', 'obj': 'TestLineIntersect.test_intersection_at_endpoint', 'line': 29, 'column': 4, 'endLine': 29, 'endColumn': 37, 'path': 'data/generated/docs_python/find_the_intersection_of_two_lines/test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines', 'obj': 'TestLineIntersect.test_intersection_at_endpoint', 'line': 31, 'column': 8, 'endLine': 31, 'endColumn': 11, 'path': 'data/generated/docs_python/find_the_intersection_of_two_lines/test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines.py', 'symbol': 'invalid-name', 'message': 'Variable name ""Ax1"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines', 'obj': 'TestLineIntersect.test_intersection_at_endpoint', 'line': 31, 'column': 13, 'endLine': 31, 'endColumn': 16, 'path': 'data/generated/docs_python/find_the_intersection_of_two_lines/test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines.py', 'symbol': 'invalid-name', 'message': 'Variable name ""Ay1"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines', 'obj': 'TestLineIntersect.test_intersection_at_endpoint', 'line': 31, 'column': 18, 'endLine': 31, 'endColumn': 21, 'path': 'data/generated/docs_python/find_the_intersection_of_two_lines/test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines.py', 'symbol': 'invalid-name', 'message': 'Variable name ""Ax2"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines', 'obj': 'TestLineIntersect.test_intersection_at_endpoint', 'line': 31, 'column': 23, 'endLine': 31, 'endColumn': 26, 'path': 'data/generated/docs_python/find_the_intersection_of_two_lines/test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines.py', 'symbol': 'invalid-name', 'message': 'Variable name ""Ay2"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines', 'obj': 'TestLineIntersect.test_intersection_at_endpoint', 'line': 32, 'column': 8, 'endLine': 32, 'endColumn': 11, 'path': 'data/generated/docs_python/find_the_intersection_of_two_lines/test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines.py', 'symbol': 'invalid-name', 'message': 'Variable name ""Bx1"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines', 'obj': 'TestLineIntersect.test_intersection_at_endpoint', 'line': 32, 'column': 13, 'endLine': 32, 'endColumn': 16, 'path': 'data/generated/docs_python/find_the_intersection_of_two_lines/test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines.py', 'symbol': 'invalid-name', 'message': 'Variable name ""By1"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines', 'obj': 'TestLineIntersect.test_intersection_at_endpoint', 'line': 32, 'column': 18, 'endLine': 32, 'endColumn': 21, 'path': 'data/generated/docs_python/find_the_intersection_of_two_lines/test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines.py', 'symbol': 'invalid-name', 'message': 'Variable name ""Bx2"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines', 'obj': 'TestLineIntersect.test_intersection_at_endpoint', 'line': 32, 'column': 23, 'endLine': 32, 'endColumn': 26, 'path': 'data/generated/docs_python/find_the_intersection_of_two_lines/test_gpt_4o_2024_08_06_find_the_intersection_of_two_lines.py', 'symbol': 'invalid-name', 'message': 'Variable name ""By2"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}]",False
First perfect square in base n with n unique digits,"Find the first perfect square in a given base N that has at least N digits and
exactly N significant unique digits when expressed in base N.

E.G. In base 10, the first perfect square with at least 10 unique digits is 1026753849 (32043²).

You may use analytical methods to reduce the search space, but the code must do a search. Do not use magic numbers or just feed the code the answer to verify it is correct.

Task
 Find and display here, on this page, the first perfect square in base N, with N significant unique digits when expressed in base N, for each of base 2 through 12. Display each number in the base N for which it was calculated.
 (optional) Do the same for bases 13 through 16.
 (stretch goal) Continue on for bases 17 - ?? (Big Integer math)


See also

 OEIS A260182: smallest square that is pandigital in base n.
Related task
 Casting out nines

",Python,"'''Perfect squares using every digit in a given base.'''
 
from itertools import count, dropwhile, repeat
from math import ceil, sqrt
from time import time
 
 
# allDigitSquare :: Int -> Int -> Int
def allDigitSquare(base, above):
    '''The lowest perfect square which
       requires all digits in the given base.
    '''
    bools = list(repeat(True, base))
    return next(
        dropwhile(
            missingDigitsAtBase(base, bools),
            count(
                max(
                    above,
                    ceil(sqrt(int(
                        '10' + '0123456789abcdef'[2:base],
                        base
                    )))
                )
            )
        )
    )
 
 
# missingDigitsAtBase :: Int -> [Bool] -> Int -> Bool
def missingDigitsAtBase(base, bools):
    '''Fusion of representing the square of integer N at a
       given base with checking whether all digits of
       that base contribute to N^2.
       Clears the bool at a digit position to False when used.
       True if any positions remain uncleared (unused).
    '''
    def go(x):
        xs = bools.copy()
        while x:
            xs[x % base] = False
            x //= base
        return any(xs)
    return lambda n: go(n * n)
 
 
# digit :: Int -> Char
def digit(n):
    '''Digit character for given integer.'''
    return '0123456789abcdef'[n]
 
 
# ------------------------- TEST -------------------------
# main :: IO ()
def main():
    '''Smallest perfect squares using all digits in bases 2-16'''
 
    start = time()
 
    print(main.__doc__ + ':\n\nBase      Root    Square')
    q = 0
    for b in enumFromTo(2)(16):
        q = allDigitSquare(b, q)
        print(
            str(b).rjust(2, ' ') + ' -> ' +
            showIntAtBase(b)(digit)(q)('').rjust(8, ' ') +
            ' -> ' +
            showIntAtBase(b)(digit)(q * q)('')
        )
 
    print(
        '\nc. ' + str(ceil(time() - start)) + ' seconds.'
    )
 
 
# ----------------------- GENERIC ------------------------
 
# enumFromTo :: (Int, Int) -> [Int]
def enumFromTo(m):
    '''Integer enumeration from m to n.'''
    return lambda n: list(range(m, 1 + n))
 
 
# showIntAtBase :: Int -> (Int -> String) -> Int ->
# String -> String
def showIntAtBase(base):
    '''String representation of an integer in a given base,
       using a supplied function for the string representation
       of digits.
    '''
    def wrap(toChr, n, rs):
        def go(nd, r):
            n, d = nd
            r_ = toChr(d) + r
            return go(divmod(n, base), r_) if 0 != n else r_
        return 'unsupported base' if 1 >= base else (
            'negative number' if 0 > n else (
                go(divmod(n, base), rs))
        )
    return lambda toChr: lambda n: lambda rs: (
        wrap(toChr, n, rs)
    )
 
 
# MAIN ---
if __name__ == '__main__':
    main()
 ",2856,108,"import unittest
from itertools import repeat
from math import ceil, sqrt

# Assuming the functions are imported from the module
# from first_perfect_square_in_base_n_with_n_unique_digits import allDigitSquare, missingDigitsAtBase, digit, enumFromTo, showIntAtBase

class TestPerfectSquare(unittest.TestCase):

    def test_allDigitSquare(self):
        # Test for base 2
        self.assertEqual(allDigitSquare(2, 0), 3)
        # Test for base 10
        self.assertEqual(allDigitSquare(10, 0), 32043)
        # Test for base 16
        self.assertEqual(allDigitSquare(16, 0), 523)

    def test_missingDigitsAtBase(self):
        # Test for base 2
        bools = list(repeat(True, 2))
        self.assertTrue(missingDigitsAtBase(2, bools)(1))
        self.assertFalse(missingDigitsAtBase(2, bools)(3))

        # Test for base 10
        bools = list(repeat(True, 10))
        self.assertTrue(missingDigitsAtBase(10, bools)(123456789))
        self.assertFalse(missingDigitsAtBase(10, bools)(1026753849))

    def test_digit(self):
        self.assertEqual(digit(0), '0')
        self.assertEqual(digit(9), '9')
        self.assertEqual(digit(10), 'a')
        self.assertEqual(digit(15), 'f')

    def test_enumFromTo(self):
        self.assertEqual(enumFromTo(2)(5), [2, 3, 4, 5])
        self.assertEqual(enumFromTo(0)(0), [0])
        self.assertEqual(enumFromTo(5)(2), [])

    def test_showIntAtBase(self):
        # Test for base 10
        self.assertEqual(showIntAtBase(10)(digit)(32043)(''), '32043')
        # Test for base 16
        self.assertEqual(showIntAtBase(16)(digit)(523)(''), '20b')
        # Test for base 2
        self.assertEqual(showIntAtBase(2)(digit)(3)(''), '11')

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/first_perfect_square_in_base_n_with_n_unique_digits/test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits.py,CompileStatus.OK,0.0,24.24,21.25,0.57,1.21,,0.5848960876464844,35.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits', 'obj': '', 'line': 6, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/first_perfect_square_in_base_n_with_n_unique_digits/test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits.py', 'symbol': 'line-too-long', 'message': 'Line too long (135/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits', 'obj': '', 'line': 23, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/first_perfect_square_in_base_n_with_n_unique_digits/test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/first_perfect_square_in_base_n_with_n_unique_digits/test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits', 'obj': 'TestPerfectSquare', 'line': 8, 'column': 0, 'endLine': 8, 'endColumn': 23, 'path': 'data/generated/docs_python/first_perfect_square_in_base_n_with_n_unique_digits/test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits', 'obj': 'TestPerfectSquare.test_allDigitSquare', 'line': 10, 'column': 4, 'endLine': 10, 'endColumn': 27, 'path': 'data/generated/docs_python/first_perfect_square_in_base_n_with_n_unique_digits/test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits', 'obj': 'TestPerfectSquare.test_allDigitSquare', 'line': 10, 'column': 4, 'endLine': 10, 'endColumn': 27, 'path': 'data/generated/docs_python/first_perfect_square_in_base_n_with_n_unique_digits/test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits.py', 'symbol': 'invalid-name', 'message': 'Method name ""test_allDigitSquare"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits', 'obj': 'TestPerfectSquare.test_allDigitSquare', 'line': 12, 'column': 25, 'endLine': 12, 'endColumn': 39, 'path': 'data/generated/docs_python/first_perfect_square_in_base_n_with_n_unique_digits/test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'allDigitSquare'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits', 'obj': 'TestPerfectSquare.test_allDigitSquare', 'line': 14, 'column': 25, 'endLine': 14, 'endColumn': 39, 'path': 'data/generated/docs_python/first_perfect_square_in_base_n_with_n_unique_digits/test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'allDigitSquare'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits', 'obj': 'TestPerfectSquare.test_allDigitSquare', 'line': 16, 'column': 25, 'endLine': 16, 'endColumn': 39, 'path': 'data/generated/docs_python/first_perfect_square_in_base_n_with_n_unique_digits/test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'allDigitSquare'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits', 'obj': 'TestPerfectSquare.test_missingDigitsAtBase', 'line': 18, 'column': 4, 'endLine': 18, 'endColumn': 32, 'path': 'data/generated/docs_python/first_perfect_square_in_base_n_with_n_unique_digits/test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits', 'obj': 'TestPerfectSquare.test_missingDigitsAtBase', 'line': 18, 'column': 4, 'endLine': 18, 'endColumn': 32, 'path': 'data/generated/docs_python/first_perfect_square_in_base_n_with_n_unique_digits/test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits.py', 'symbol': 'invalid-name', 'message': 'Method name ""test_missingDigitsAtBase"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits', 'obj': 'TestPerfectSquare.test_missingDigitsAtBase', 'line': 21, 'column': 24, 'endLine': 21, 'endColumn': 43, 'path': 'data/generated/docs_python/first_perfect_square_in_base_n_with_n_unique_digits/test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'missingDigitsAtBase'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits', 'obj': 'TestPerfectSquare.test_missingDigitsAtBase', 'line': 22, 'column': 25, 'endLine': 22, 'endColumn': 44, 'path': 'data/generated/docs_python/first_perfect_square_in_base_n_with_n_unique_digits/test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'missingDigitsAtBase'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits', 'obj': 'TestPerfectSquare.test_missingDigitsAtBase', 'line': 26, 'column': 24, 'endLine': 26, 'endColumn': 43, 'path': 'data/generated/docs_python/first_perfect_square_in_base_n_with_n_unique_digits/test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'missingDigitsAtBase'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits', 'obj': 'TestPerfectSquare.test_missingDigitsAtBase', 'line': 27, 'column': 25, 'endLine': 27, 'endColumn': 44, 'path': 'data/generated/docs_python/first_perfect_square_in_base_n_with_n_unique_digits/test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'missingDigitsAtBase'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits', 'obj': 'TestPerfectSquare.test_digit', 'line': 29, 'column': 4, 'endLine': 29, 'endColumn': 18, 'path': 'data/generated/docs_python/first_perfect_square_in_base_n_with_n_unique_digits/test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits', 'obj': 'TestPerfectSquare.test_digit', 'line': 30, 'column': 25, 'endLine': 30, 'endColumn': 30, 'path': 'data/generated/docs_python/first_perfect_square_in_base_n_with_n_unique_digits/test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'digit'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits', 'obj': 'TestPerfectSquare.test_digit', 'line': 31, 'column': 25, 'endLine': 31, 'endColumn': 30, 'path': 'data/generated/docs_python/first_perfect_square_in_base_n_with_n_unique_digits/test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'digit'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits', 'obj': 'TestPerfectSquare.test_digit', 'line': 32, 'column': 25, 'endLine': 32, 'endColumn': 30, 'path': 'data/generated/docs_python/first_perfect_square_in_base_n_with_n_unique_digits/test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'digit'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits', 'obj': 'TestPerfectSquare.test_digit', 'line': 33, 'column': 25, 'endLine': 33, 'endColumn': 30, 'path': 'data/generated/docs_python/first_perfect_square_in_base_n_with_n_unique_digits/test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'digit'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits', 'obj': 'TestPerfectSquare.test_enumFromTo', 'line': 35, 'column': 4, 'endLine': 35, 'endColumn': 23, 'path': 'data/generated/docs_python/first_perfect_square_in_base_n_with_n_unique_digits/test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits', 'obj': 'TestPerfectSquare.test_enumFromTo', 'line': 35, 'column': 4, 'endLine': 35, 'endColumn': 23, 'path': 'data/generated/docs_python/first_perfect_square_in_base_n_with_n_unique_digits/test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits.py', 'symbol': 'invalid-name', 'message': 'Method name ""test_enumFromTo"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits', 'obj': 'TestPerfectSquare.test_enumFromTo', 'line': 36, 'column': 25, 'endLine': 36, 'endColumn': 35, 'path': 'data/generated/docs_python/first_perfect_square_in_base_n_with_n_unique_digits/test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'enumFromTo'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits', 'obj': 'TestPerfectSquare.test_enumFromTo', 'line': 37, 'column': 25, 'endLine': 37, 'endColumn': 35, 'path': 'data/generated/docs_python/first_perfect_square_in_base_n_with_n_unique_digits/test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'enumFromTo'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits', 'obj': 'TestPerfectSquare.test_enumFromTo', 'line': 38, 'column': 25, 'endLine': 38, 'endColumn': 35, 'path': 'data/generated/docs_python/first_perfect_square_in_base_n_with_n_unique_digits/test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'enumFromTo'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits', 'obj': 'TestPerfectSquare.test_showIntAtBase', 'line': 40, 'column': 4, 'endLine': 40, 'endColumn': 26, 'path': 'data/generated/docs_python/first_perfect_square_in_base_n_with_n_unique_digits/test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits', 'obj': 'TestPerfectSquare.test_showIntAtBase', 'line': 40, 'column': 4, 'endLine': 40, 'endColumn': 26, 'path': 'data/generated/docs_python/first_perfect_square_in_base_n_with_n_unique_digits/test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits.py', 'symbol': 'invalid-name', 'message': 'Method name ""test_showIntAtBase"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits', 'obj': 'TestPerfectSquare.test_showIntAtBase', 'line': 42, 'column': 25, 'endLine': 42, 'endColumn': 38, 'path': 'data/generated/docs_python/first_perfect_square_in_base_n_with_n_unique_digits/test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'showIntAtBase'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits', 'obj': 'TestPerfectSquare.test_showIntAtBase', 'line': 42, 'column': 43, 'endLine': 42, 'endColumn': 48, 'path': 'data/generated/docs_python/first_perfect_square_in_base_n_with_n_unique_digits/test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'digit'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits', 'obj': 'TestPerfectSquare.test_showIntAtBase', 'line': 44, 'column': 25, 'endLine': 44, 'endColumn': 38, 'path': 'data/generated/docs_python/first_perfect_square_in_base_n_with_n_unique_digits/test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'showIntAtBase'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits', 'obj': 'TestPerfectSquare.test_showIntAtBase', 'line': 44, 'column': 43, 'endLine': 44, 'endColumn': 48, 'path': 'data/generated/docs_python/first_perfect_square_in_base_n_with_n_unique_digits/test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'digit'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits', 'obj': 'TestPerfectSquare.test_showIntAtBase', 'line': 46, 'column': 25, 'endLine': 46, 'endColumn': 38, 'path': 'data/generated/docs_python/first_perfect_square_in_base_n_with_n_unique_digits/test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'showIntAtBase'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits', 'obj': 'TestPerfectSquare.test_showIntAtBase', 'line': 46, 'column': 42, 'endLine': 46, 'endColumn': 47, 'path': 'data/generated/docs_python/first_perfect_square_in_base_n_with_n_unique_digits/test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'digit'"", 'message-id': 'E0602'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits', 'obj': '', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 27, 'path': 'data/generated/docs_python/first_perfect_square_in_base_n_with_n_unique_digits/test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits.py', 'symbol': 'unused-import', 'message': 'Unused ceil imported from math', 'message-id': 'W0611'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits', 'obj': '', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 27, 'path': 'data/generated/docs_python/first_perfect_square_in_base_n_with_n_unique_digits/test_gpt_4o_2024_08_06_first_perfect_square_in_base_n_with_n_unique_digits.py', 'symbol': 'unused-import', 'message': 'Unused sqrt imported from math', 'message-id': 'W0611'}]",False
First power of 2 that has leading decimal digits of 12,"(This task is taken from a   Project Euler   problem.)

(All numbers herein are expressed in base ten.)


27   =   128   and   7   is
the first power of   2   whose leading decimal digits are   12.

The next power of   2   whose leading decimal digits
are   12   is   80,

280   =   1208925819614629174706176.



Define        p(L,n)      to be the  nth-smallest
value of    j    such that the base ten representation
of    2j    begins with the digits of    L .

    So   p(12, 1) =  7    and
         p(12, 2) = 80



You are also given that:

         p(123, 45)   =   12710



Task

   find:
     p(12, 1)
     p(12, 2)
     p(123, 45)
     p(123, 12345)
     p(123, 678910)
   display the results here, on this page.

",Python,"from math import log, modf, floor
 
def p(l, n, pwr=2):
    l = int(abs(l))
    digitcount = floor(log(l, 10))
    log10pwr = log(pwr, 10)
    raised, found = -1, 0
    while found < n:
        raised += 1
        firstdigits = floor(10**(modf(log10pwr * raised)[0] + digitcount))
        if firstdigits == l:
            found += 1
    return raised
 
 
if __name__ == '__main__':
    for l, n in [(12, 1), (12, 2), (123, 45), (123, 12345), (123, 678910)]:
        print(f""p({l}, {n}) ="", p(l, n))",498,18,"import unittest
from first_power_of_2_that_has_leading_decimal_digits_of_12 import p

class TestFirstPowerOf2(unittest.TestCase):
    def test_p_12_1(self):
        self.assertEqual(p(12, 1), 7)

    def test_p_12_2(self):
        self.assertEqual(p(12, 2), 80)

    def test_p_123_45(self):
        self.assertEqual(p(123, 45), 12710)

    def test_p_123_12345(self):
        # This is a large computation, ensure the function can handle it
        result = p(123, 12345)
        self.assertIsInstance(result, int)  # Just checking if it returns an integer
        # The actual value is not provided, so we can't assert the exact result

    def test_p_123_678910(self):
        # This is another large computation, ensure the function can handle it
        result = p(123, 678910)
        self.assertIsInstance(result, int)  # Just checking if it returns an integer
        # The actual value is not provided, so we can't assert the exact result

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/first_power_of_2_that_has_leading_decimal_digits_of_12/test_gpt_4o_2024_08_06_first_power_of_2_that_has_leading_decimal_digits_of_12.py,CompileStatus.OK,,,,0.29,1.67,,,7.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_first_power_of_2_that_has_leading_decimal_digits_of_12', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/first_power_of_2_that_has_leading_decimal_digits_of_12/test_gpt_4o_2024_08_06_first_power_of_2_that_has_leading_decimal_digits_of_12.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_first_power_of_2_that_has_leading_decimal_digits_of_12', 'obj': 'TestFirstPowerOf2', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 23, 'path': 'data/generated/docs_python/first_power_of_2_that_has_leading_decimal_digits_of_12/test_gpt_4o_2024_08_06_first_power_of_2_that_has_leading_decimal_digits_of_12.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_first_power_of_2_that_has_leading_decimal_digits_of_12', 'obj': 'TestFirstPowerOf2.test_p_12_1', 'line': 5, 'column': 4, 'endLine': 5, 'endColumn': 19, 'path': 'data/generated/docs_python/first_power_of_2_that_has_leading_decimal_digits_of_12/test_gpt_4o_2024_08_06_first_power_of_2_that_has_leading_decimal_digits_of_12.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_first_power_of_2_that_has_leading_decimal_digits_of_12', 'obj': 'TestFirstPowerOf2.test_p_12_2', 'line': 8, 'column': 4, 'endLine': 8, 'endColumn': 19, 'path': 'data/generated/docs_python/first_power_of_2_that_has_leading_decimal_digits_of_12/test_gpt_4o_2024_08_06_first_power_of_2_that_has_leading_decimal_digits_of_12.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_first_power_of_2_that_has_leading_decimal_digits_of_12', 'obj': 'TestFirstPowerOf2.test_p_123_45', 'line': 11, 'column': 4, 'endLine': 11, 'endColumn': 21, 'path': 'data/generated/docs_python/first_power_of_2_that_has_leading_decimal_digits_of_12/test_gpt_4o_2024_08_06_first_power_of_2_that_has_leading_decimal_digits_of_12.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_first_power_of_2_that_has_leading_decimal_digits_of_12', 'obj': 'TestFirstPowerOf2.test_p_123_12345', 'line': 14, 'column': 4, 'endLine': 14, 'endColumn': 24, 'path': 'data/generated/docs_python/first_power_of_2_that_has_leading_decimal_digits_of_12/test_gpt_4o_2024_08_06_first_power_of_2_that_has_leading_decimal_digits_of_12.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_first_power_of_2_that_has_leading_decimal_digits_of_12', 'obj': 'TestFirstPowerOf2.test_p_123_678910', 'line': 20, 'column': 4, 'endLine': 20, 'endColumn': 25, 'path': 'data/generated/docs_python/first_power_of_2_that_has_leading_decimal_digits_of_12/test_gpt_4o_2024_08_06_first_power_of_2_that_has_leading_decimal_digits_of_12.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",True
Fivenum,"Many big data or scientific programs use boxplots to show distributions of data.   In addition, sometimes saving large arrays for boxplots can be impractical and use extreme amounts of RAM.   It can be useful to save large arrays as arrays with five numbers to save memory.

For example, the   R   programming language implements Tukey's five-number summary as the fivenum function.



Task

Given an array of numbers, compute the five-number summary.



Note

While these five numbers can be used to draw a boxplot,   statistical packages will typically need extra data.

Moreover, while there is a consensus about the ""box"" of the boxplot,   there are variations among statistical packages for the whiskers.



",Python,"from __future__ import division
import math
import sys
 
def fivenum(array):
    n = len(array)
    if n == 0:
        print(""you entered an empty array."")
        sys.exit()
    x = sorted(array)
 
    n4 = math.floor((n+3.0)/2.0)/2.0
    d = [1, n4, (n+1)/2, n+1-n4, n]
    sum_array = []
 
    for e in range(5):
        floor = int(math.floor(d[e] - 1))
        ceil = int(math.ceil(d[e] - 1))
        sum_array.append(0.5 * (x[floor] + x[ceil]))
 
    return sum_array
 
x = [0.14082834, 0.09748790, 1.73131507, 0.87636009, -1.95059594, 0.73438555, -0.03035726, 1.46675970,
-0.74621349, -0.72588772, 0.63905160, 0.61501527, -0.98983780, -1.00447874, -0.62759469, 0.66206163,
1.04312009, -0.10305385, 0.75775634, 0.32566578]
 
y = fivenum(x)
print(y)",754,28,"import unittest
from fivenum import fivenum

class TestFiveNum(unittest.TestCase):

    def test_typical_case(self):
        array = [0.14082834, 0.09748790, 1.73131507, 0.87636009, -1.95059594,
                 0.73438555, -0.03035726, 1.46675970, -0.74621349, -0.72588772,
                 0.63905160, 0.61501527, -0.98983780, -1.00447874, -0.62759469,
                 0.66206163, 1.04312009, -0.10305385, 0.75775634, 0.32566578]
        expected = [-1.95059594, -0.74621349, 0.32566578, 0.75775634, 1.73131507]
        result = fivenum(array)
        self.assertEqual(result, expected)

    def test_empty_array(self):
        with self.assertRaises(SystemExit):
            fivenum([])

    def test_single_element_array(self):
        array = [42]
        expected = [42, 42, 42, 42, 42]
        result = fivenum(array)
        self.assertEqual(result, expected)

    def test_two_elements_array(self):
        array = [1, 3]
        expected = [1, 1, 2, 3, 3]
        result = fivenum(array)
        self.assertEqual(result, expected)

    def test_odd_number_of_elements(self):
        array = [1, 2, 3, 4, 5]
        expected = [1, 1.5, 3, 4.5, 5]
        result = fivenum(array)
        self.assertEqual(result, expected)

    def test_even_number_of_elements(self):
        array = [1, 2, 3, 4, 5, 6]
        expected = [1, 1.75, 3.5, 5.25, 6]
        result = fivenum(array)
        self.assertEqual(result, expected)

    def test_negative_numbers(self):
        array = [-5, -1, -3, -4, -2]
        expected = [-5, -4, -3, -2, -1]
        result = fivenum(array)
        self.assertEqual(result, expected)

    def test_identical_elements(self):
        array = [7, 7, 7, 7, 7]
        expected = [7, 7, 7, 7, 7]
        result = fivenum(array)
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/fivenum/test_gpt_4o_2024_08_06_fivenum.py,CompileStatus.OK,0.0,98.41,97.18,0.17,2.67,62.5,0.5752949714660645,13.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fivenum', 'obj': '', 'line': 7, 'column': 77, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/fivenum/test_gpt_4o_2024_08_06_fivenum.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fivenum', 'obj': '', 'line': 8, 'column': 79, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/fivenum/test_gpt_4o_2024_08_06_fivenum.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fivenum', 'obj': '', 'line': 9, 'column': 79, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/fivenum/test_gpt_4o_2024_08_06_fivenum.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fivenum', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/fivenum/test_gpt_4o_2024_08_06_fivenum.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fivenum', 'obj': 'TestFiveNum', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 17, 'path': 'data/generated/docs_python/fivenum/test_gpt_4o_2024_08_06_fivenum.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fivenum', 'obj': 'TestFiveNum.test_typical_case', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 25, 'path': 'data/generated/docs_python/fivenum/test_gpt_4o_2024_08_06_fivenum.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fivenum', 'obj': 'TestFiveNum.test_empty_array', 'line': 15, 'column': 4, 'endLine': 15, 'endColumn': 24, 'path': 'data/generated/docs_python/fivenum/test_gpt_4o_2024_08_06_fivenum.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fivenum', 'obj': 'TestFiveNum.test_single_element_array', 'line': 19, 'column': 4, 'endLine': 19, 'endColumn': 33, 'path': 'data/generated/docs_python/fivenum/test_gpt_4o_2024_08_06_fivenum.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fivenum', 'obj': 'TestFiveNum.test_two_elements_array', 'line': 25, 'column': 4, 'endLine': 25, 'endColumn': 31, 'path': 'data/generated/docs_python/fivenum/test_gpt_4o_2024_08_06_fivenum.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fivenum', 'obj': 'TestFiveNum.test_odd_number_of_elements', 'line': 31, 'column': 4, 'endLine': 31, 'endColumn': 35, 'path': 'data/generated/docs_python/fivenum/test_gpt_4o_2024_08_06_fivenum.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fivenum', 'obj': 'TestFiveNum.test_even_number_of_elements', 'line': 37, 'column': 4, 'endLine': 37, 'endColumn': 36, 'path': 'data/generated/docs_python/fivenum/test_gpt_4o_2024_08_06_fivenum.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fivenum', 'obj': 'TestFiveNum.test_negative_numbers', 'line': 43, 'column': 4, 'endLine': 43, 'endColumn': 29, 'path': 'data/generated/docs_python/fivenum/test_gpt_4o_2024_08_06_fivenum.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fivenum', 'obj': 'TestFiveNum.test_identical_elements', 'line': 49, 'column': 4, 'endLine': 49, 'endColumn': 31, 'path': 'data/generated/docs_python/fivenum/test_gpt_4o_2024_08_06_fivenum.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Flipping bits game,"The game

Given an   N×N   square array of zeroes or ones in an initial configuration,   and a target configuration of zeroes and ones.



The game is to transform one to the other in as few moves as possible by inverting whole numbered rows or whole lettered
columns at once   (as one move).

In an inversion.   any  1  becomes  0,   and any  0  becomes  1  for that whole row or column.



Task

Create a program to score for the Flipping bits game.

 The game should create an original random target configuration and a starting configuration.
 Ensure that the starting position is never the target position.
 The target position must be guaranteed as reachable from the starting position.   (One possible way to do this is to generate the start position by legal flips from a random target position.   The flips will always be reversible back to the target from the given start position).
 The number of moves taken so far should be shown.


Show an example of a short game here, on this page, for a   3×3   array of bits.



",Python,"""""""
Given a %i by %i sqare array of zeroes or ones in an initial
configuration, and a target configuration of zeroes and ones
The task is to transform one to the other in as few moves as
possible by inverting whole numbered rows or whole lettered
columns at once.
In an inversion any 1 becomes 0 and any 0 becomes 1 for that
whole row or column.
 
""""""
 
from random import randrange
from copy import deepcopy
from string import ascii_lowercase
 
 
try:    # 2to3 fix
    input = raw_input
except:
    pass
 
N = 3   # N x N Square arrray
 
board  = [[0]* N for i in range(N)]
 
def setbits(board, count=1):
    for i in range(count):
        board[randrange(N)][randrange(N)] ^= 1
 
def shuffle(board, count=1):
    for i in range(count):
        if randrange(0, 2):
            fliprow(randrange(N))
        else:
            flipcol(randrange(N))
 
 
def pr(board, comment=''):
    print(str(comment))
    print('     ' + ' '.join(ascii_lowercase[i] for i in range(N)))
    print('  ' + '\n  '.join(' '.join(['%2s' % j] + [str(i) for i in line])
                             for j, line in enumerate(board, 1)))
 
def init(board):
    setbits(board, count=randrange(N)+1)
    target = deepcopy(board)
    while board == target:
        shuffle(board, count=2 * N)
    prompt = '  X, T, or 1-%i / %s-%s to flip: ' % (N, ascii_lowercase[0],
                                                    ascii_lowercase[N-1])
    return target, prompt
 
def fliprow(i):
    board[i-1][:] = [x ^ 1 for x in board[i-1] ]
 
def flipcol(i):
    for row in board:
        row[i] ^= 1
 
if __name__ == '__main__':
    print(__doc__ % (N, N))
    target, prompt = init(board)
    pr(target, 'Target configuration is:')
    print('')
    turns = 0
    while board != target:
        turns += 1
        pr(board, '%i:' % turns)
        ans = input(prompt).strip()
        if (len(ans) == 1
            and ans in ascii_lowercase and ascii_lowercase.index(ans) < N):
            flipcol(ascii_lowercase.index(ans))
        elif ans and all(ch in '0123456789' for ch in ans) and 1 <= int(ans) <= N:
            fliprow(int(ans))
        elif ans == 'T':
            pr(target, 'Target configuration is:')
            turns -= 1
        elif ans == 'X':
            break
        else:
            print(""  I don't understand %r... Try again. ""
                  ""(X to exit or T to show target)\n"" % ans[:9])
            turns -= 1
    else:
        print('\nWell done!\nBye.')",2459,85,"import unittest
from unittest.mock import patch
from flipping_bits_game import board, setbits, shuffle, pr, init, fliprow, flipcol

class TestFlippingBitsGame(unittest.TestCase):

    def setUp(self):
        self.board = [[0]*3 for _ in range(3)]

    def test_setbits(self):
        setbits(self.board, count=3)
        # Check if exactly 3 bits are set
        total_bits = sum(sum(row) for row in self.board)
        self.assertEqual(total_bits, 3)

    def test_shuffle(self):
        original_board = deepcopy(self.board)
        shuffle(self.board, count=5)
        # Check if board has changed
        self.assertNotEqual(original_board, self.board)

    def test_fliprow(self):
        self.board = [[0, 0, 0], [1, 1, 1], [0, 0, 0]]
        fliprow(2)
        self.assertEqual(self.board, [[0, 0, 0], [0, 0, 0], [0, 0, 0]])

    def test_flipcol(self):
        self.board = [[0, 1, 0], [0, 1, 0], [0, 1, 0]]
        flipcol(1)
        self.assertEqual(self.board, [[0, 0, 0], [0, 0, 0], [0, 0, 0]])

    def test_init(self):
        target, prompt = init(self.board)
        # Check if target is different from the initial board
        self.assertNotEqual(target, self.board)
        # Check if prompt is correctly formatted
        self.assertEqual(prompt, '  X, T, or 1-3 / a-c to flip: ')

    @patch('builtins.input', side_effect=['1', 'a', 'T', 'X'])
    def test_gameplay(self, mock_input):
        target, prompt = init(self.board)
        turns = 0
        while self.board != target:
            turns += 1
            ans = input(prompt).strip()
            if (len(ans) == 1
                and ans in ascii_lowercase and ascii_lowercase.index(ans) < 3):
                flipcol(ascii_lowercase.index(ans))
            elif ans and all(ch in '0123456789' for ch in ans) and 1 <= int(ans) <= 3:
                fliprow(int(ans))
            elif ans == 'T':
                turns -= 1
            elif ans == 'X':
                break
            else:
                turns -= 1
        # Check if the game exits correctly
        self.assertTrue(True)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/flipping_bits_game/test_gpt_4o_2024_08_06_flipping_bits_game.py,CompileStatus.OK,,,,0.15,0.47,,,17.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_flipping_bits_game', 'obj': '', 'line': 46, 'column': 29, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/flipping_bits_game/test_gpt_4o_2024_08_06_flipping_bits_game.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_flipping_bits_game', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/flipping_bits_game/test_gpt_4o_2024_08_06_flipping_bits_game.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_flipping_bits_game', 'obj': 'TestFlippingBitsGame', 'line': 5, 'column': 0, 'endLine': 5, 'endColumn': 26, 'path': 'data/generated/docs_python/flipping_bits_game/test_gpt_4o_2024_08_06_flipping_bits_game.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_flipping_bits_game', 'obj': 'TestFlippingBitsGame.test_setbits', 'line': 10, 'column': 4, 'endLine': 10, 'endColumn': 20, 'path': 'data/generated/docs_python/flipping_bits_game/test_gpt_4o_2024_08_06_flipping_bits_game.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_flipping_bits_game', 'obj': 'TestFlippingBitsGame.test_shuffle', 'line': 16, 'column': 4, 'endLine': 16, 'endColumn': 20, 'path': 'data/generated/docs_python/flipping_bits_game/test_gpt_4o_2024_08_06_flipping_bits_game.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_flipping_bits_game', 'obj': 'TestFlippingBitsGame.test_shuffle', 'line': 17, 'column': 25, 'endLine': 17, 'endColumn': 33, 'path': 'data/generated/docs_python/flipping_bits_game/test_gpt_4o_2024_08_06_flipping_bits_game.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'deepcopy'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_flipping_bits_game', 'obj': 'TestFlippingBitsGame.test_fliprow', 'line': 22, 'column': 4, 'endLine': 22, 'endColumn': 20, 'path': 'data/generated/docs_python/flipping_bits_game/test_gpt_4o_2024_08_06_flipping_bits_game.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_flipping_bits_game', 'obj': 'TestFlippingBitsGame.test_flipcol', 'line': 27, 'column': 4, 'endLine': 27, 'endColumn': 20, 'path': 'data/generated/docs_python/flipping_bits_game/test_gpt_4o_2024_08_06_flipping_bits_game.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_flipping_bits_game', 'obj': 'TestFlippingBitsGame.test_init', 'line': 32, 'column': 4, 'endLine': 32, 'endColumn': 17, 'path': 'data/generated/docs_python/flipping_bits_game/test_gpt_4o_2024_08_06_flipping_bits_game.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_flipping_bits_game', 'obj': 'TestFlippingBitsGame.test_gameplay', 'line': 40, 'column': 4, 'endLine': 40, 'endColumn': 21, 'path': 'data/generated/docs_python/flipping_bits_game/test_gpt_4o_2024_08_06_flipping_bits_game.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_flipping_bits_game', 'obj': 'TestFlippingBitsGame.test_gameplay', 'line': 47, 'column': 27, 'endLine': 47, 'endColumn': 42, 'path': 'data/generated/docs_python/flipping_bits_game/test_gpt_4o_2024_08_06_flipping_bits_game.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'ascii_lowercase'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_flipping_bits_game', 'obj': 'TestFlippingBitsGame.test_gameplay', 'line': 47, 'column': 47, 'endLine': 47, 'endColumn': 62, 'path': 'data/generated/docs_python/flipping_bits_game/test_gpt_4o_2024_08_06_flipping_bits_game.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'ascii_lowercase'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_flipping_bits_game', 'obj': 'TestFlippingBitsGame.test_gameplay', 'line': 48, 'column': 24, 'endLine': 48, 'endColumn': 39, 'path': 'data/generated/docs_python/flipping_bits_game/test_gpt_4o_2024_08_06_flipping_bits_game.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'ascii_lowercase'"", 'message-id': 'E0602'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_flipping_bits_game', 'obj': 'TestFlippingBitsGame.test_gameplay', 'line': 58, 'column': 8, 'endLine': 58, 'endColumn': 29, 'path': 'data/generated/docs_python/flipping_bits_game/test_gpt_4o_2024_08_06_flipping_bits_game.py', 'symbol': 'redundant-unittest-assert', 'message': 'Redundant use of assertTrue with constant value True', 'message-id': 'W1503'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_flipping_bits_game', 'obj': 'TestFlippingBitsGame.test_gameplay', 'line': 40, 'column': 28, 'endLine': 40, 'endColumn': 38, 'path': 'data/generated/docs_python/flipping_bits_game/test_gpt_4o_2024_08_06_flipping_bits_game.py', 'symbol': 'unused-argument', 'message': ""Unused argument 'mock_input'"", 'message-id': 'W0613'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_flipping_bits_game', 'obj': '', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 82, 'path': 'data/generated/docs_python/flipping_bits_game/test_gpt_4o_2024_08_06_flipping_bits_game.py', 'symbol': 'unused-import', 'message': 'Unused board imported from flipping_bits_game', 'message-id': 'W0611'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_flipping_bits_game', 'obj': '', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 82, 'path': 'data/generated/docs_python/flipping_bits_game/test_gpt_4o_2024_08_06_flipping_bits_game.py', 'symbol': 'unused-import', 'message': 'Unused pr imported from flipping_bits_game', 'message-id': 'W0611'}]",True
Floyd-Warshall algorithm,"The Floyd–Warshall algorithm is an algorithm for finding shortest paths in a weighted graph with positive or negative edge weights.




Task
Find the lengths of the shortest paths between all pairs of vertices of the given directed graph. Your code may assume that the input has already been checked for loops, parallel edges and negative cycles.


Print the pair, the distance and (optionally) the path.




Example
pair     dist    path
1 -> 2    -1     1 -> 3 -> 4 -> 2
1 -> 3    -2     1 -> 3
1 -> 4     0     1 -> 3 -> 4
2 -> 1     4     2 -> 1
2 -> 3     2     2 -> 1 -> 3
2 -> 4     4     2 -> 1 -> 3 -> 4
3 -> 1     5     3 -> 4 -> 2 -> 1
3 -> 2     1     3 -> 4 -> 2
3 -> 4     2     3 -> 4
4 -> 1     3     4 -> 2 -> 1
4 -> 2    -1     4 -> 2
4 -> 3     1     4 -> 2 -> 1 -> 3


See also
 Floyd-Warshall Algorithm - step by step guide (youtube)

",Python,"from math import inf
from itertools import product
 
def floyd_warshall(n, edge):
    rn = range(n)
    dist = [[inf] * n for i in rn]
    nxt  = [[0]   * n for i in rn]
    for i in rn:
        dist[i][i] = 0
    for u, v, w in edge:
        dist[u-1][v-1] = w
        nxt[u-1][v-1] = v-1
    for k, i, j in product(rn, repeat=3):
        sum_ik_kj = dist[i][k] + dist[k][j]
        if dist[i][j] > sum_ik_kj:
            dist[i][j] = sum_ik_kj
            nxt[i][j]  = nxt[i][k]
    print(""pair     dist    path"")
    for i, j in product(rn, repeat=2):
        if i != j:
            path = [i]
            while path[-1] != j:
                path.append(nxt[path[-1]][j])
            print(""%d → %d  %4d       %s""
                  % (i + 1, j + 1, dist[i][j],
                     ' → '.join(str(p + 1) for p in path)))
 
if __name__ == '__main__':
    floyd_warshall(4, [[1, 3, -2], [2, 1, 4], [2, 3, 3], [3, 4, 2], [4, 2, -1]])",936,29,"import unittest
from io import StringIO
import sys

# Assuming the floyd_warshall function is defined in a module named floyd_warshall_algorithm
from floyd_warshall_algorithm import floyd_warshall

class TestFloydWarshall(unittest.TestCase):

    def setUp(self):
        # Redirect stdout to capture print statements
        self.held_stdout = StringIO()
        sys.stdout = self.held_stdout

    def tearDown(self):
        # Reset redirect.
        sys.stdout = sys.__stdout__

    def test_floyd_warshall(self):
        # Test case from the example
        floyd_warshall(4, [[1, 3, -2], [2, 1, 4], [2, 3, 3], [3, 4, 2], [4, 2, -1]])

        # Expected output
        expected_output = (
            ""pair     dist    path\n""
            ""1 → 2    -1       1 → 3 → 4 → 2\n""
            ""1 → 3    -2       1 → 3\n""
            ""1 → 4     0       1 → 3 → 4\n""
            ""2 → 1     4       2 → 1\n""
            ""2 → 3     2       2 → 1 → 3\n""
            ""2 → 4     4       2 → 1 → 3 → 4\n""
            ""3 → 1     5       3 → 4 → 2 → 1\n""
            ""3 → 2     1       3 → 4 → 2\n""
            ""3 → 4     2       3 → 4\n""
            ""4 → 1     3       4 → 2 → 1\n""
            ""4 → 2    -1       4 → 2\n""
            ""4 → 3     1       4 → 2 → 1 → 3\n""
        )

        # Get the output and compare
        output = self.held_stdout.getvalue()
        self.assertEqual(output, expected_output)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/floyd_warshall_algorithm/test_gpt_4o_2024_08_06_floyd_warshall_algorithm.py,CompileStatus.OK,0.0,95.24,93.94,0.06,0.09,,0.5681169033050537,6.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_floyd_warshall_algorithm', 'obj': '', 'line': 9, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/floyd_warshall_algorithm/test_gpt_4o_2024_08_06_floyd_warshall_algorithm.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_floyd_warshall_algorithm', 'obj': '', 'line': 22, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/floyd_warshall_algorithm/test_gpt_4o_2024_08_06_floyd_warshall_algorithm.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_floyd_warshall_algorithm', 'obj': '', 'line': 39, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/floyd_warshall_algorithm/test_gpt_4o_2024_08_06_floyd_warshall_algorithm.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_floyd_warshall_algorithm', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/floyd_warshall_algorithm/test_gpt_4o_2024_08_06_floyd_warshall_algorithm.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_floyd_warshall_algorithm', 'obj': 'TestFloydWarshall', 'line': 8, 'column': 0, 'endLine': 8, 'endColumn': 23, 'path': 'data/generated/docs_python/floyd_warshall_algorithm/test_gpt_4o_2024_08_06_floyd_warshall_algorithm.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_floyd_warshall_algorithm', 'obj': 'TestFloydWarshall.test_floyd_warshall', 'line': 19, 'column': 4, 'endLine': 19, 'endColumn': 27, 'path': 'data/generated/docs_python/floyd_warshall_algorithm/test_gpt_4o_2024_08_06_floyd_warshall_algorithm.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Four bit adder,"Task

""Simulate"" a four-bit adder.

This design can be realized using four 1-bit full adders.
Each of these 1-bit full adders can be built with two half adders and an   or   gate. ;

Finally a half adder can be made using an   xor   gate and an   and   gate.

The   xor   gate can be made using two   nots,   two   ands   and one   or.

Not,   or   and   and,   the only allowed ""gates"" for the task, can be ""imitated"" by using the bitwise operators of your language.

If there is not a bit type in your language, to be sure that the   not   does not ""invert"" all the other bits of the basic type   (e.g. a byte)   we are not interested in,   you can use an extra   nand   (and   then   not)   with the constant   1   on one input.

Instead of optimizing and reducing the number of gates used for the final 4-bit adder,   build it in the most straightforward way,   connecting the other ""constructive blocks"",   in turn made of ""simpler"" and ""smaller"" ones.


Schematics of the ""constructive blocks""


(Xor gate with ANDs, ORs and NOTs)        

   (A half adder)        

          (A full adder)            

                (A 4-bit adder)        












Solutions should try to be as descriptive as possible, making it as easy as possible to identify ""connections"" between higher-order ""blocks"".

It is not mandatory to replicate the syntax of higher-order blocks in the atomic ""gate"" blocks, i.e. basic ""gate"" operations can be performed as usual bitwise operations, or they can be ""wrapped"" in a block in order to expose the same syntax of higher-order blocks, at implementers' choice.

To test the implementation, show the sum of two four-bit numbers (in binary).



",Python,"def xor(a, b): return (a and not b) or (b and not a)
 
def ha(a, b): return xor(a, b), a and b     # sum, carry
 
def fa(a, b, ci):
    s0, c0 = ha(ci, a)
    s1, c1 = ha(s0, b)
    return s1, c0 or c1     # sum, carry
 
def fa4(a, b):
    width = 4
    ci = [None] * width
    co = [None] * width
    s  = [None] * width
    for i in range(width):
        s[i], co[i] = fa(a[i], b[i], co[i-1] if i else 0)
    return s, co[-1]
 
def int2bus(n, width=4):
    return [int(c) for c in ""{0:0{1}b}"".format(n, width)[::-1]]
 
def bus2int(b):
    return sum(1 << i for i, bit in enumerate(b) if bit)
 
def test_fa4():
    width = 4
    tot = [None] * (width + 1)
    for a in range(2**width):
        for b in range(2**width):
            tot[:width], tot[width] = fa4(int2bus(a), int2bus(b))
            assert a + b == bus2int(tot), ""totals don't match: %i + %i != %s"" % (a, b, tot)
 
 
if __name__ == '__main__':
   test_fa4()",923,35,"import unittest
from four_bit_adder import xor, ha, fa, fa4, int2bus, bus2int

class TestFourBitAdder(unittest.TestCase):

    def test_xor(self):
        # Test all combinations of inputs for the xor gate
        self.assertEqual(xor(0, 0), 0)
        self.assertEqual(xor(0, 1), 1)
        self.assertEqual(xor(1, 0), 1)
        self.assertEqual(xor(1, 1), 0)

    def test_ha(self):
        # Test all combinations of inputs for the half adder
        self.assertEqual(ha(0, 0), (0, 0))
        self.assertEqual(ha(0, 1), (1, 0))
        self.assertEqual(ha(1, 0), (1, 0))
        self.assertEqual(ha(1, 1), (0, 1))

    def test_fa(self):
        # Test all combinations of inputs for the full adder
        self.assertEqual(fa(0, 0, 0), (0, 0))
        self.assertEqual(fa(0, 1, 0), (1, 0))
        self.assertEqual(fa(1, 0, 0), (1, 0))
        self.assertEqual(fa(1, 1, 0), (0, 1))
        self.assertEqual(fa(0, 0, 1), (1, 0))
        self.assertEqual(fa(0, 1, 1), (0, 1))
        self.assertEqual(fa(1, 0, 1), (0, 1))
        self.assertEqual(fa(1, 1, 1), (1, 1))

    def test_fa4(self):
        # Test the 4-bit adder with all combinations of inputs
        width = 4
        for a in range(2**width):
            for b in range(2**width):
                sum_bits, carry_out = fa4(int2bus(a), int2bus(b))
                result = bus2int(sum_bits) + (carry_out << width)
                self.assertEqual(result, a + b, f""Failed for inputs: {a}, {b}"")

    def test_int2bus(self):
        # Test conversion from integer to bus
        self.assertEqual(int2bus(0), [0, 0, 0, 0])
        self.assertEqual(int2bus(1), [1, 0, 0, 0])
        self.assertEqual(int2bus(2), [0, 1, 0, 0])
        self.assertEqual(int2bus(15), [1, 1, 1, 1])

    def test_bus2int(self):
        # Test conversion from bus to integer
        self.assertEqual(bus2int([0, 0, 0, 0]), 0)
        self.assertEqual(bus2int([1, 0, 0, 0]), 1)
        self.assertEqual(bus2int([0, 1, 0, 0]), 2)
        self.assertEqual(bus2int([1, 1, 1, 1]), 15)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/four_bit_adder/test_gpt_4o_2024_08_06_four_bit_adder.py,CompileStatus.OK,0.0,88.24,84.44,0.61,1.92,100.0,0.5028488636016846,8.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_four_bit_adder', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/four_bit_adder/test_gpt_4o_2024_08_06_four_bit_adder.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_four_bit_adder', 'obj': 'TestFourBitAdder', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 22, 'path': 'data/generated/docs_python/four_bit_adder/test_gpt_4o_2024_08_06_four_bit_adder.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_four_bit_adder', 'obj': 'TestFourBitAdder.test_xor', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 16, 'path': 'data/generated/docs_python/four_bit_adder/test_gpt_4o_2024_08_06_four_bit_adder.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_four_bit_adder', 'obj': 'TestFourBitAdder.test_ha', 'line': 13, 'column': 4, 'endLine': 13, 'endColumn': 15, 'path': 'data/generated/docs_python/four_bit_adder/test_gpt_4o_2024_08_06_four_bit_adder.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_four_bit_adder', 'obj': 'TestFourBitAdder.test_fa', 'line': 20, 'column': 4, 'endLine': 20, 'endColumn': 15, 'path': 'data/generated/docs_python/four_bit_adder/test_gpt_4o_2024_08_06_four_bit_adder.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_four_bit_adder', 'obj': 'TestFourBitAdder.test_fa4', 'line': 31, 'column': 4, 'endLine': 31, 'endColumn': 16, 'path': 'data/generated/docs_python/four_bit_adder/test_gpt_4o_2024_08_06_four_bit_adder.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_four_bit_adder', 'obj': 'TestFourBitAdder.test_int2bus', 'line': 40, 'column': 4, 'endLine': 40, 'endColumn': 20, 'path': 'data/generated/docs_python/four_bit_adder/test_gpt_4o_2024_08_06_four_bit_adder.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_four_bit_adder', 'obj': 'TestFourBitAdder.test_bus2int', 'line': 47, 'column': 4, 'endLine': 47, 'endColumn': 20, 'path': 'data/generated/docs_python/four_bit_adder/test_gpt_4o_2024_08_06_four_bit_adder.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Four is magic,"Task

Write a subroutine, function, whatever it may be called in your language, that takes an integer number and returns an English text sequence starting with the English cardinal representation of that integer, the word 'is' and then the English cardinal representation of the count of characters that made up the first word, followed by a comma.

Continue the sequence by using the previous count word as the first word of the next phrase, append 'is' and the cardinal count of the letters in that word.

Continue until you reach four. Since four has four characters, finish by adding the words 'four is magic' and a period. All integers will eventually wind up at four.

For instance, suppose your are given the integer 3. Convert 3 to Three, add  is , then the cardinal character count of three, or five, with a comma to separate if from the next phrase. Continue the sequence five is four, (five has four letters), and finally, four is magic.

     Three is five, five is four, four is magic.

For reference, here are outputs for 0 through 9.

     Zero is four, four is magic.
     One is three, three is five, five is four, four is magic.
     Two is three, three is five, five is four, four is magic.
     Three is five, five is four, four is magic.
     Four is magic.
     Five is four, four is magic.
     Six is three, three is five, five is four, four is magic.
     Seven is five, five is four, four is magic.
     Eight is five, five is four, four is magic.
     Nine is four, four is magic.



Some task guidelines

 You may assume the input will only contain integer numbers.
 Cardinal numbers between 20 and 100 may use either hyphens or spaces as word separators but they must use a word separator. (23 is twenty three or twenty-three not twentythree.)
 Cardinal number conversions should follow the  English short scale. (billion is 1e9, trillion is 1e12, etc.)
 Cardinal numbers should not include commas. (20140 is twenty thousand one hundred forty not twenty thousand, one hundred forty.)
 When converted to a string, 100 should be one hundred, not a hundred or hundred, 1000 should be one thousand, not a thousand or thousand.
 When converted to a string, there should be no and in the cardinal string. 130 should be one hundred thirty not one hundred and thirty.
 When counting characters, count all of the characters in the cardinal number including spaces and hyphens. One hundred fifty-one should be 21 not 18.
 The output should follow the format ""N is K, K is M, M is ... four is magic."" (unless the input is 4, in which case the output should simply be ""four is magic."")
 The output can either be the return value from the function, or be displayed from within the function.
 You are encouraged, though not mandated to use proper sentence capitalization.
 You may optionally support negative numbers. -7 is negative seven.
 Show the output here for a small representative sample of values, at least 5 but no more than 25. You are free to choose which which numbers to use for output demonstration.


You can choose to use a library, (module, external routine, whatever) to do the cardinal conversions as long as the code is easily and freely available to the public.

If you roll your own, make the routine accept at minimum any integer from 0 up to 999999. If you use a pre-made library, support at least up to unsigned 64 bit integers. (or the largest integer supported in your language if it is less.)

Four is magic is a popular code-golf task. This is not code golf. Write legible, idiomatic and well formatted code.




Related tasks

   Four is the number of_letters in the ...
   Look-and-say sequence
   Number names
   Self-describing numbers
   Summarize and say sequence
   Spelling of ordinal numbers
   De Bruijn sequences

",Python,"import random
from collections import OrderedDict
 
numbers = {  # taken from https://en.wikipedia.org/wiki/Names_of_large_numbers#cite_ref-a_14-3
    1: 'one',
    2: 'two',
    3: 'three',
    4: 'four',
    5: 'five',
    6: 'six',
    7: 'seven',
    8: 'eight',
    9: 'nine',
    10: 'ten',
    11: 'eleven',
    12: 'twelve',
    13: 'thirteen',
    14: 'fourteen',
    15: 'fifteen',
    16: 'sixteen',
    17: 'seventeen',
    18: 'eighteen',
    19: 'nineteen',
    20: 'twenty',
    30: 'thirty',
    40: 'forty',
    50: 'fifty',
    60: 'sixty',
    70: 'seventy',
    80: 'eighty',
    90: 'ninety',
    100: 'hundred',
    1000: 'thousand',
    10 ** 6: 'million',
    10 ** 9: 'billion',
    10 ** 12: 'trillion',
    10 ** 15: 'quadrillion',
    10 ** 18: 'quintillion',
    10 ** 21: 'sextillion',
    10 ** 24: 'septillion',
    10 ** 27: 'octillion',
    10 ** 30: 'nonillion',
    10 ** 33: 'decillion',
    10 ** 36: 'undecillion',
    10 ** 39: 'duodecillion',
    10 ** 42: 'tredecillion',
    10 ** 45: 'quattuordecillion',
    10 ** 48: 'quinquadecillion',
    10 ** 51: 'sedecillion',
    10 ** 54: 'septendecillion',
    10 ** 57: 'octodecillion',
    10 ** 60: 'novendecillion',
    10 ** 63: 'vigintillion',
    10 ** 66: 'unvigintillion',
    10 ** 69: 'duovigintillion',
    10 ** 72: 'tresvigintillion',
    10 ** 75: 'quattuorvigintillion',
    10 ** 78: 'quinquavigintillion',
    10 ** 81: 'sesvigintillion',
    10 ** 84: 'septemvigintillion',
    10 ** 87: 'octovigintillion',
    10 ** 90: 'novemvigintillion',
    10 ** 93: 'trigintillion',
    10 ** 96: 'untrigintillion',
    10 ** 99: 'duotrigintillion',
    10 ** 102: 'trestrigintillion',
    10 ** 105: 'quattuortrigintillion',
    10 ** 108: 'quinquatrigintillion',
    10 ** 111: 'sestrigintillion',
    10 ** 114: 'septentrigintillion',
    10 ** 117: 'octotrigintillion',
    10 ** 120: 'noventrigintillion',
    10 ** 123: 'quadragintillion',
    10 ** 153: 'quinquagintillion',
    10 ** 183: 'sexagintillion',
    10 ** 213: 'septuagintillion',
    10 ** 243: 'octogintillion',
    10 ** 273: 'nonagintillion',
    10 ** 303: 'centillion',
    10 ** 306: 'uncentillion',
    10 ** 309: 'duocentillion',
    10 ** 312: 'trescentillion',
    10 ** 333: 'decicentillion',
    10 ** 336: 'undecicentillion',
    10 ** 363: 'viginticentillion',
    10 ** 366: 'unviginticentillion',
    10 ** 393: 'trigintacentillion',
    10 ** 423: 'quadragintacentillion',
    10 ** 453: 'quinquagintacentillion',
    10 ** 483: 'sexagintacentillion',
    10 ** 513: 'septuagintacentillion',
    10 ** 543: 'octogintacentillion',
    10 ** 573: 'nonagintacentillion',
    10 ** 603: 'ducentillion',
    10 ** 903: 'trecentillion',
    10 ** 1203: 'quadringentillion',
    10 ** 1503: 'quingentillion',
    10 ** 1803: 'sescentillion',
    10 ** 2103: 'septingentillion',
    10 ** 2403: 'octingentillion',
    10 ** 2703: 'nongentillion',
    10 ** 3003: 'millinillion'
}
numbers = OrderedDict(sorted(numbers.items(), key=lambda t: t[0], reverse=True))
 
 
def string_representation(i: int) -> str:
    """"""
    Return the english string representation of an integer
    """"""
    if i == 0:
        return 'zero'
 
    words = ['negative'] if i < 0 else []
    working_copy = abs(i)
 
    for key, value in numbers.items():
        if key <= working_copy:
            times = int(working_copy / key)
 
            if key >= 100:
                words.append(string_representation(times))
 
            words.append(value)
            working_copy -= times * key
 
        if working_copy == 0:
            break
 
    return ' '.join(words)
 
 
def next_phrase(i: int):
    """"""
    Generate all the phrases
    """"""
    while not i == 4:  # Generate phrases until four is reached
        str_i = string_representation(i)
        len_i = len(str_i)
 
        yield str_i, 'is', string_representation(len_i)
 
        i = len_i
 
    # the last phrase
    yield string_representation(i), 'is', 'magic'
 
 
def magic(i: int) -> str:
    phrases = []
 
    for phrase in next_phrase(i):
        phrases.append(' '.join(phrase))
 
    return f'{"", "".join(phrases)}.'.capitalize()
 
 
if __name__ == '__main__':
 
    for j in (random.randint(0, 10 ** 3) for i in range(5)):
        print(j, ':\n', magic(j), '\n')
 
    for j in (random.randint(-10 ** 24, 10 ** 24) for i in range(2)):
        print(j, ':\n', magic(j), '\n')",4402,164,"import unittest

class TestMagicFunction(unittest.TestCase):

    def test_zero(self):
        self.assertEqual(magic(0), ""Zero is four, four is magic."")

    def test_one(self):
        self.assertEqual(magic(1), ""One is three, three is five, five is four, four is magic."")

    def test_two(self):
        self.assertEqual(magic(2), ""Two is three, three is five, five is four, four is magic."")

    def test_three(self):
        self.assertEqual(magic(3), ""Three is five, five is four, four is magic."")

    def test_four(self):
        self.assertEqual(magic(4), ""Four is magic."")

    def test_five(self):
        self.assertEqual(magic(5), ""Five is four, four is magic."")

    def test_six(self):
        self.assertEqual(magic(6), ""Six is three, three is five, five is four, four is magic."")

    def test_seven(self):
        self.assertEqual(magic(7), ""Seven is five, five is four, four is magic."")

    def test_eight(self):
        self.assertEqual(magic(8), ""Eight is five, five is four, four is magic."")

    def test_nine(self):
        self.assertEqual(magic(9), ""Nine is four, four is magic."")

    def test_ten(self):
        self.assertEqual(magic(10), ""Ten is three, three is five, five is four, four is magic."")

    def test_large_number(self):
        self.assertEqual(magic(100), ""One hundred is ten, ten is three, three is five, five is four, four is magic."")

    def test_negative_number(self):
        self.assertEqual(magic(-7), ""Negative seven is thirteen, thirteen is eight, eight is five, five is four, four is magic."")

    def test_large_negative_number(self):
        self.assertEqual(magic(-1000), ""Negative one thousand is twenty four, twenty four is eleven, eleven is six, six is three, three is five, five is four, four is magic."")

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/four_is_magic/test_gpt_4o_2024_08_06_four_is_magic.py,CompileStatus.OK,0.0,45.59,34.04,0.44,1.27,,0.6088607311248779,33.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_four_is_magic', 'obj': '', 'line': 39, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/four_is_magic/test_gpt_4o_2024_08_06_four_is_magic.py', 'symbol': 'line-too-long', 'message': 'Line too long (117/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_four_is_magic', 'obj': '', 'line': 42, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/four_is_magic/test_gpt_4o_2024_08_06_four_is_magic.py', 'symbol': 'line-too-long', 'message': 'Line too long (129/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_four_is_magic', 'obj': '', 'line': 45, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/four_is_magic/test_gpt_4o_2024_08_06_four_is_magic.py', 'symbol': 'line-too-long', 'message': 'Line too long (175/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_four_is_magic', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/four_is_magic/test_gpt_4o_2024_08_06_four_is_magic.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_four_is_magic', 'obj': 'TestMagicFunction', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 23, 'path': 'data/generated/docs_python/four_is_magic/test_gpt_4o_2024_08_06_four_is_magic.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_four_is_magic', 'obj': 'TestMagicFunction.test_zero', 'line': 5, 'column': 4, 'endLine': 5, 'endColumn': 17, 'path': 'data/generated/docs_python/four_is_magic/test_gpt_4o_2024_08_06_four_is_magic.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_four_is_magic', 'obj': 'TestMagicFunction.test_zero', 'line': 6, 'column': 25, 'endLine': 6, 'endColumn': 30, 'path': 'data/generated/docs_python/four_is_magic/test_gpt_4o_2024_08_06_four_is_magic.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'magic'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_four_is_magic', 'obj': 'TestMagicFunction.test_one', 'line': 8, 'column': 4, 'endLine': 8, 'endColumn': 16, 'path': 'data/generated/docs_python/four_is_magic/test_gpt_4o_2024_08_06_four_is_magic.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_four_is_magic', 'obj': 'TestMagicFunction.test_one', 'line': 9, 'column': 25, 'endLine': 9, 'endColumn': 30, 'path': 'data/generated/docs_python/four_is_magic/test_gpt_4o_2024_08_06_four_is_magic.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'magic'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_four_is_magic', 'obj': 'TestMagicFunction.test_two', 'line': 11, 'column': 4, 'endLine': 11, 'endColumn': 16, 'path': 'data/generated/docs_python/four_is_magic/test_gpt_4o_2024_08_06_four_is_magic.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_four_is_magic', 'obj': 'TestMagicFunction.test_two', 'line': 12, 'column': 25, 'endLine': 12, 'endColumn': 30, 'path': 'data/generated/docs_python/four_is_magic/test_gpt_4o_2024_08_06_four_is_magic.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'magic'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_four_is_magic', 'obj': 'TestMagicFunction.test_three', 'line': 14, 'column': 4, 'endLine': 14, 'endColumn': 18, 'path': 'data/generated/docs_python/four_is_magic/test_gpt_4o_2024_08_06_four_is_magic.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_four_is_magic', 'obj': 'TestMagicFunction.test_three', 'line': 15, 'column': 25, 'endLine': 15, 'endColumn': 30, 'path': 'data/generated/docs_python/four_is_magic/test_gpt_4o_2024_08_06_four_is_magic.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'magic'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_four_is_magic', 'obj': 'TestMagicFunction.test_four', 'line': 17, 'column': 4, 'endLine': 17, 'endColumn': 17, 'path': 'data/generated/docs_python/four_is_magic/test_gpt_4o_2024_08_06_four_is_magic.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_four_is_magic', 'obj': 'TestMagicFunction.test_four', 'line': 18, 'column': 25, 'endLine': 18, 'endColumn': 30, 'path': 'data/generated/docs_python/four_is_magic/test_gpt_4o_2024_08_06_four_is_magic.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'magic'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_four_is_magic', 'obj': 'TestMagicFunction.test_five', 'line': 20, 'column': 4, 'endLine': 20, 'endColumn': 17, 'path': 'data/generated/docs_python/four_is_magic/test_gpt_4o_2024_08_06_four_is_magic.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_four_is_magic', 'obj': 'TestMagicFunction.test_five', 'line': 21, 'column': 25, 'endLine': 21, 'endColumn': 30, 'path': 'data/generated/docs_python/four_is_magic/test_gpt_4o_2024_08_06_four_is_magic.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'magic'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_four_is_magic', 'obj': 'TestMagicFunction.test_six', 'line': 23, 'column': 4, 'endLine': 23, 'endColumn': 16, 'path': 'data/generated/docs_python/four_is_magic/test_gpt_4o_2024_08_06_four_is_magic.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_four_is_magic', 'obj': 'TestMagicFunction.test_six', 'line': 24, 'column': 25, 'endLine': 24, 'endColumn': 30, 'path': 'data/generated/docs_python/four_is_magic/test_gpt_4o_2024_08_06_four_is_magic.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'magic'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_four_is_magic', 'obj': 'TestMagicFunction.test_seven', 'line': 26, 'column': 4, 'endLine': 26, 'endColumn': 18, 'path': 'data/generated/docs_python/four_is_magic/test_gpt_4o_2024_08_06_four_is_magic.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_four_is_magic', 'obj': 'TestMagicFunction.test_seven', 'line': 27, 'column': 25, 'endLine': 27, 'endColumn': 30, 'path': 'data/generated/docs_python/four_is_magic/test_gpt_4o_2024_08_06_four_is_magic.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'magic'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_four_is_magic', 'obj': 'TestMagicFunction.test_eight', 'line': 29, 'column': 4, 'endLine': 29, 'endColumn': 18, 'path': 'data/generated/docs_python/four_is_magic/test_gpt_4o_2024_08_06_four_is_magic.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_four_is_magic', 'obj': 'TestMagicFunction.test_eight', 'line': 30, 'column': 25, 'endLine': 30, 'endColumn': 30, 'path': 'data/generated/docs_python/four_is_magic/test_gpt_4o_2024_08_06_four_is_magic.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'magic'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_four_is_magic', 'obj': 'TestMagicFunction.test_nine', 'line': 32, 'column': 4, 'endLine': 32, 'endColumn': 17, 'path': 'data/generated/docs_python/four_is_magic/test_gpt_4o_2024_08_06_four_is_magic.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_four_is_magic', 'obj': 'TestMagicFunction.test_nine', 'line': 33, 'column': 25, 'endLine': 33, 'endColumn': 30, 'path': 'data/generated/docs_python/four_is_magic/test_gpt_4o_2024_08_06_four_is_magic.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'magic'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_four_is_magic', 'obj': 'TestMagicFunction.test_ten', 'line': 35, 'column': 4, 'endLine': 35, 'endColumn': 16, 'path': 'data/generated/docs_python/four_is_magic/test_gpt_4o_2024_08_06_four_is_magic.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_four_is_magic', 'obj': 'TestMagicFunction.test_ten', 'line': 36, 'column': 25, 'endLine': 36, 'endColumn': 30, 'path': 'data/generated/docs_python/four_is_magic/test_gpt_4o_2024_08_06_four_is_magic.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'magic'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_four_is_magic', 'obj': 'TestMagicFunction.test_large_number', 'line': 38, 'column': 4, 'endLine': 38, 'endColumn': 25, 'path': 'data/generated/docs_python/four_is_magic/test_gpt_4o_2024_08_06_four_is_magic.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_four_is_magic', 'obj': 'TestMagicFunction.test_large_number', 'line': 39, 'column': 25, 'endLine': 39, 'endColumn': 30, 'path': 'data/generated/docs_python/four_is_magic/test_gpt_4o_2024_08_06_four_is_magic.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'magic'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_four_is_magic', 'obj': 'TestMagicFunction.test_negative_number', 'line': 41, 'column': 4, 'endLine': 41, 'endColumn': 28, 'path': 'data/generated/docs_python/four_is_magic/test_gpt_4o_2024_08_06_four_is_magic.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_four_is_magic', 'obj': 'TestMagicFunction.test_negative_number', 'line': 42, 'column': 25, 'endLine': 42, 'endColumn': 30, 'path': 'data/generated/docs_python/four_is_magic/test_gpt_4o_2024_08_06_four_is_magic.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'magic'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_four_is_magic', 'obj': 'TestMagicFunction.test_large_negative_number', 'line': 44, 'column': 4, 'endLine': 44, 'endColumn': 34, 'path': 'data/generated/docs_python/four_is_magic/test_gpt_4o_2024_08_06_four_is_magic.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_four_is_magic', 'obj': 'TestMagicFunction.test_large_negative_number', 'line': 45, 'column': 25, 'endLine': 45, 'endColumn': 30, 'path': 'data/generated/docs_python/four_is_magic/test_gpt_4o_2024_08_06_four_is_magic.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'magic'"", 'message-id': 'E0602'}]",False
Fractran,"FRACTRAN is a Turing-complete esoteric programming language invented by the mathematician John Horton Conway.

A FRACTRAN program is an ordered list of positive fractions



P
=
(

f

1


,

f

2


,
…
,

f

m


)


{\displaystyle P=(f_{1},f_{2},\ldots ,f_{m})}

, together with an initial positive integer input



n


{\displaystyle n}

.



The program is run by updating the integer



n


{\displaystyle n}

 as follows:

 for the first fraction,




f

i




{\displaystyle f_{i}}

, in the list for which



n

f

i




{\displaystyle nf_{i}}

 is an integer, replace



n


{\displaystyle n}

 with



n

f

i




{\displaystyle nf_{i}}

 ;
 repeat this rule until no fraction in the list produces an integer when multiplied by



n


{\displaystyle n}

, then halt.


Conway gave a program for primes in FRACTRAN:





17

/

91


{\displaystyle 17/91}

,



78

/

85


{\displaystyle 78/85}

,



19

/

51


{\displaystyle 19/51}

,



23

/

38


{\displaystyle 23/38}

,



29

/

33


{\displaystyle 29/33}

,



77

/

29


{\displaystyle 77/29}

,



95

/

23


{\displaystyle 95/23}

,



77

/

19


{\displaystyle 77/19}

,



1

/

17


{\displaystyle 1/17}

,



11

/

13


{\displaystyle 11/13}

,



13

/

11


{\displaystyle 13/11}

,



15

/

14


{\displaystyle 15/14}

,



15

/

2


{\displaystyle 15/2}

,



55

/

1


{\displaystyle 55/1}


Starting with



n
=
2


{\displaystyle n=2}

, this FRACTRAN program will change



n


{\displaystyle n}

 to



15
=
2
×
(
15

/

2
)


{\displaystyle 15=2\times (15/2)}

, then



825
=
15
×
(
55

/

1
)


{\displaystyle 825=15\times (55/1)}

, generating the following sequence of integers:





2


{\displaystyle 2}

,



15


{\displaystyle 15}

,



825


{\displaystyle 825}

,



725


{\displaystyle 725}

,



1925


{\displaystyle 1925}

,



2275


{\displaystyle 2275}

,



425


{\displaystyle 425}

,



390


{\displaystyle 390}

,



330


{\displaystyle 330}

,



290


{\displaystyle 290}

,



770


{\displaystyle 770}

,



…


{\displaystyle \ldots }


After 2, this sequence contains the following powers of 2:






2

2


=
4


{\displaystyle 2^{2}=4}

,




2

3


=
8


{\displaystyle 2^{3}=8}

,




2

5


=
32


{\displaystyle 2^{5}=32}

,




2

7


=
128


{\displaystyle 2^{7}=128}

,




2

11


=
2048


{\displaystyle 2^{11}=2048}

,




2

13


=
8192


{\displaystyle 2^{13}=8192}

,




2

17


=
131072


{\displaystyle 2^{17}=131072}

,




2

19


=
524288


{\displaystyle 2^{19}=524288}

,



…


{\displaystyle \ldots }


which are the prime powers of 2.



Task

Write a program that reads a list of fractions in a natural format from the keyboard or from a string,
to parse it into a sequence of fractions (i.e. two integers),
and runs the FRACTRAN starting from a provided integer, writing the result at each step.
It is also required that the number of steps is limited (by a parameter easy to find).



Extra credit

Use this program to derive the first 20 or so prime numbers.



See also

For more on how to program FRACTRAN as a universal programming language, see:

 J. H. Conway (1987). Fractran: A Simple Universal Programming Language for Arithmetic. In: Open Problems in Communication and Computation, pages 4–26. Springer.
 J. H. Conway (2010). ""FRACTRAN: A simple universal programming language for arithmetic"". In Jeffrey C. Lagarias. The Ultimate Challenge: the 3x+1 problem. American Mathematical Society. pp. 249–264. ISBN 978-0-8218-4940-8. Zbl 1216.68068.
 Number Pathology: Fractran by Mark C. Chu-Carroll; October 27, 2006.

",Python,"from fractions import Fraction
 
def fractran(n, fstring='17 / 91, 78 / 85, 19 / 51, 23 / 38, 29 / 33,'
                        '77 / 29, 95 / 23, 77 / 19, 1 / 17, 11 / 13,'
                        '13 / 11, 15 / 14, 15 / 2, 55 / 1'):
    flist = [Fraction(f) for f in fstring.replace(' ', '').split(',')]
 
    n = Fraction(n)
    while True:
        yield n.numerator
        for f in flist:
            if (n * f).denominator == 1:
                break
        else:
            break
        n *= f
 
if __name__ == '__main__':
    n, m = 2, 15
    print('First %i members of fractran(%i):\n  ' % (m, n) +
          ', '.join(str(f) for f,i in zip(fractran(n), range(m))))",677,21,"import unittest
from fractions import Fraction
from fractran import fractran

class TestFractran(unittest.TestCase):

    def test_initial_sequence(self):
        # Test the initial sequence with n=2
        expected_sequence = [2, 15, 825, 725, 1925, 2275, 425, 390, 330, 290, 770]
        result_sequence = list(f for f, _ in zip(fractran(2), range(len(expected_sequence))))
        self.assertEqual(result_sequence, expected_sequence)

    def test_custom_fractions(self):
        # Test with a custom fraction list
        custom_fractions = '3 / 2, 5 / 3, 7 / 5'
        expected_sequence = [2, 3, 5, 7]
        result_sequence = list(f for f, _ in zip(fractran(2, custom_fractions), range(len(expected_sequence))))
        self.assertEqual(result_sequence, expected_sequence)

    def test_no_fraction_applies(self):
        # Test when no fraction applies, should return the initial number
        custom_fractions = '3 / 4, 5 / 6'
        expected_sequence = [2]
        result_sequence = list(f for f, _ in zip(fractran(2, custom_fractions), range(len(expected_sequence))))
        self.assertEqual(result_sequence, expected_sequence)

    def test_large_number_of_steps(self):
        # Test with a large number of steps
        m = 20
        result_sequence = list(f for f, _ in zip(fractran(2), range(m)))
        self.assertEqual(len(result_sequence), m)

    def test_fraction_parsing(self):
        # Test if fractions are parsed correctly
        fstring = '3 / 2, 5 / 3, 7 / 5'
        flist = [Fraction(f) for f in fstring.replace(' ', '').split(',')]
        expected_fractions = [Fraction(3, 2), Fraction(5, 3), Fraction(7, 5)]
        self.assertEqual(flist, expected_fractions)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/fractran/test_gpt_4o_2024_08_06_fractran.py,CompileStatus.OK,0.0,93.02,89.23,0.17,1.0,100.0,0.4964818954467773,9.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fractran', 'obj': '', 'line': 17, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/fractran/test_gpt_4o_2024_08_06_fractran.py', 'symbol': 'line-too-long', 'message': 'Line too long (111/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fractran', 'obj': '', 'line': 24, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/fractran/test_gpt_4o_2024_08_06_fractran.py', 'symbol': 'line-too-long', 'message': 'Line too long (111/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fractran', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/fractran/test_gpt_4o_2024_08_06_fractran.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fractran', 'obj': 'TestFractran', 'line': 5, 'column': 0, 'endLine': 5, 'endColumn': 18, 'path': 'data/generated/docs_python/fractran/test_gpt_4o_2024_08_06_fractran.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fractran', 'obj': 'TestFractran.test_initial_sequence', 'line': 7, 'column': 4, 'endLine': 7, 'endColumn': 29, 'path': 'data/generated/docs_python/fractran/test_gpt_4o_2024_08_06_fractran.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fractran', 'obj': 'TestFractran.test_custom_fractions', 'line': 13, 'column': 4, 'endLine': 13, 'endColumn': 29, 'path': 'data/generated/docs_python/fractran/test_gpt_4o_2024_08_06_fractran.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fractran', 'obj': 'TestFractran.test_no_fraction_applies', 'line': 20, 'column': 4, 'endLine': 20, 'endColumn': 32, 'path': 'data/generated/docs_python/fractran/test_gpt_4o_2024_08_06_fractran.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fractran', 'obj': 'TestFractran.test_large_number_of_steps', 'line': 27, 'column': 4, 'endLine': 27, 'endColumn': 34, 'path': 'data/generated/docs_python/fractran/test_gpt_4o_2024_08_06_fractran.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fractran', 'obj': 'TestFractran.test_fraction_parsing', 'line': 33, 'column': 4, 'endLine': 33, 'endColumn': 29, 'path': 'data/generated/docs_python/fractran/test_gpt_4o_2024_08_06_fractran.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Fusc sequence,"

Definitions

The   fusc   integer sequence is defined as:

   fusc(0) = 0
   fusc(1) = 1
   for n>1,   the   nth   term is defined as:
   if   n   is even;     fusc(n) = fusc(n/2)
   if   n   is   odd;     fusc(n) = fusc((n-1)/2)   +   fusc((n+1)/2)


Note that MathWorld's definition starts with unity, not zero.   This task will be using the OEIS' version   (above).



An observation

   fusc(A) = fusc(B)
where   A   is some non-negative integer expressed in binary,   and
where   B   is the binary value of   A   reversed.



Fusc numbers are also known as:

   fusc function   (named by Dijkstra, 1982)
   Stern's Diatomic series   (although it starts with unity, not zero)
   Stern-Brocot sequence   (although it starts with unity, not zero)


Task

   show the first   61   fusc numbers (starting at zero) in a horizontal format.
   show the fusc number (and its index) whose length is greater than any previous fusc number length.
   (the length is the number of decimal digits when the fusc number is expressed in base ten.)
   show all numbers with commas   (if appropriate).
   show all output here.


Related task

   RosettaCode Stern-Brocot sequence


Also see

   the MathWorld entry:   Stern's Diatomic Series.
   the OEIS entry:   A2487.

",Python,"from collections import deque
from itertools import islice, count
 
 
def fusc():
    q = deque([1])
    yield 0
    yield 1
 
    while True:
        x = q.popleft()
        q.append(x)
        yield x
 
        x += q[0]
        q.append(x)
        yield x
 
 
def longest_fusc():
    sofar = 0
    for i, f in zip(count(), fusc()):
        if f >= sofar:
            yield(i, f)
            sofar = 10 * sofar or 10
 
 
print('First 61:')
print(list(islice(fusc(), 61)))
 
print('\nLength records:')
for i, f in islice(longest_fusc(), 6):
    print(f'fusc({i}) = {f}')
 ",573,34,"import unittest
from collections import deque
from itertools import islice, count

# Assuming the functions `fusc` and `longest_fusc` are defined in fusc_sequence.py
# from fusc_sequence import fusc, longest_fusc

def fusc():
    q = deque([1])
    yield 0
    yield 1

    while True:
        x = q.popleft()
        q.append(x)
        yield x

        x += q[0]
        q.append(x)
        yield x


def longest_fusc():
    sofar = 0
    for i, f in zip(count(), fusc()):
        if f >= sofar:
            yield(i, f)
            sofar = 10 * sofar or 10


class TestFuscSequence(unittest.TestCase):

    def test_first_61_fusc_numbers(self):
        expected_sequence = [
            0, 1, 1, 2, 1, 3, 2, 3, 1, 4, 3, 5, 2, 5, 3, 4, 1, 5, 4, 7, 3, 8, 5, 7, 2, 7, 5, 8, 3, 7, 4, 5,
            1, 6, 5, 9, 4, 11, 7, 10, 3, 10, 7, 11, 4, 9, 5, 6, 1, 7, 6, 11, 5, 13, 8, 11, 3, 11, 8, 13, 5
        ]
        result_sequence = list(islice(fusc(), 61))
        self.assertEqual(result_sequence, expected_sequence)

    def test_longest_fusc(self):
        expected_longest = [
            (0, 0),
            (1, 1),
            (3, 2),
            (5, 3),
            (9, 4),
            (11, 5)
        ]
        result_longest = list(islice(longest_fusc(), 6))
        self.assertEqual(result_longest, expected_longest)


if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/fusc_sequence/test_gpt_4o_2024_08_06_fusc_sequence.py,CompileStatus.OK,0.0,54.55,50.75,0.05,0.33,,4.198139905929565,8.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fusc_sequence', 'obj': '', 'line': 35, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/fusc_sequence/test_gpt_4o_2024_08_06_fusc_sequence.py', 'symbol': 'line-too-long', 'message': 'Line too long (107/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fusc_sequence', 'obj': '', 'line': 36, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/fusc_sequence/test_gpt_4o_2024_08_06_fusc_sequence.py', 'symbol': 'line-too-long', 'message': 'Line too long (106/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fusc_sequence', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/fusc_sequence/test_gpt_4o_2024_08_06_fusc_sequence.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fusc_sequence', 'obj': 'fusc', 'line': 8, 'column': 0, 'endLine': 8, 'endColumn': 8, 'path': 'data/generated/docs_python/fusc_sequence/test_gpt_4o_2024_08_06_fusc_sequence.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fusc_sequence', 'obj': 'longest_fusc', 'line': 23, 'column': 0, 'endLine': 23, 'endColumn': 16, 'path': 'data/generated/docs_python/fusc_sequence/test_gpt_4o_2024_08_06_fusc_sequence.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fusc_sequence', 'obj': 'TestFuscSequence', 'line': 31, 'column': 0, 'endLine': 31, 'endColumn': 22, 'path': 'data/generated/docs_python/fusc_sequence/test_gpt_4o_2024_08_06_fusc_sequence.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fusc_sequence', 'obj': 'TestFuscSequence.test_first_61_fusc_numbers', 'line': 33, 'column': 4, 'endLine': 33, 'endColumn': 34, 'path': 'data/generated/docs_python/fusc_sequence/test_gpt_4o_2024_08_06_fusc_sequence.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_fusc_sequence', 'obj': 'TestFuscSequence.test_longest_fusc', 'line': 41, 'column': 4, 'endLine': 41, 'endColumn': 25, 'path': 'data/generated/docs_python/fusc_sequence/test_gpt_4o_2024_08_06_fusc_sequence.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Galton box animation," Example of a Galton Box at the end of animation.


A   Galton device   Sir Francis Galton's device   is also known as a   bean machine,   a   Galton Board,   or a   quincunx.



Description of operation

In a Galton box, there are a set of pins arranged in a triangular pattern.   A number of balls are dropped so that they fall in line with the top pin, deflecting to the left or the right of the pin.   The ball continues to fall to the left or right of lower pins before arriving at one of the collection points between and to the sides of the bottom row of pins.

Eventually the balls are collected into bins at the bottom   (as shown in the image),   the ball column heights in the bins approximate a   bell curve.   Overlaying   Pascal's triangle   onto the pins shows the number of different paths that can be taken to get to each bin.



Task

Generate an animated simulation of a Galton device.



Task requirements

   The box should have at least 5 pins on the bottom row.
   A solution can use graphics or ASCII animation.
   Provide a sample of the output/display such as a screenshot.
   There can be one or more balls in flight at the same time.
   If multiple balls are in flight, ensure they don't interfere with each other.
   A solution should allow users to specify the number of balls, or it should run until full or a preset limit.
   Optionally,   display the number of balls.

",Python,"#!/usr/bin/python
 
import sys, os
import random
import time
 
def print_there(x, y, text):
     sys.stdout.write(""\x1b7\x1b[%d;%df%s\x1b8"" % (x, y, text))
     sys.stdout.flush()
 
 
class Ball():
    def __init__(self):
        self.x = 0
        self.y = 0
 
    def update(self):
        self.x += random.randint(0,1)
        self.y += 1
 
    def fall(self):
        self.y +=1
 
 
class Board():
    def __init__(self, width, well_depth, N):
        self.balls = []
        self.fallen = [0] * (width + 1)
        self.width = width
        self.well_depth = well_depth
        self.N = N
        self.shift = 4
 
    def update(self):
        for ball in self.balls:
            if ball.y < self.width:
                ball.update()
            elif ball.y < self.width + self.well_depth - self.fallen[ball.x]:
                ball.fall()
            elif ball.y == self.width + self.well_depth - self.fallen[ball.x]:
                self.fallen[ball.x] += 1
            else:
                pass
 
    def balls_on_board(self):
        return len(self.balls) - sum(self.fallen)
 
    def add_ball(self):
        if(len(self.balls) <= self.N):
            self.balls.append(Ball())
 
    def print_board(self):
        for y in range(self.width + 1):
            for x in range(y):
                print_there( y + 1 ,self.width - y + 2*x + self.shift + 1, ""#"")
    def print_ball(self, ball):
        if ball.y <= self.width:
            x = self.width - ball.y + 2*ball.x + self.shift
        else:
            x = 2*ball.x + self.shift
        y = ball.y + 1
        print_there(y, x, ""*"")
 
    def print_all(self):
        print(chr(27) + ""[2J"")
        self.print_board();
        for ball in self.balls:
            self.print_ball(ball)
 
 
def main():
    board = Board(width = 15, well_depth = 5, N = 10)
    board.add_ball() #initialization
    while(board.balls_on_board() > 0):
         board.print_all()
         time.sleep(0.25)
         board.update()
         board.print_all()
         time.sleep(0.25)
         board.update()
         board.add_ball()
 
 
if __name__==""__main__"":
    main()",2118,85,"import unittest
from unittest.mock import patch
from galton_box_animation import Ball, Board

class TestBall(unittest.TestCase):
    def test_initial_position(self):
        ball = Ball()
        self.assertEqual(ball.x, 0)
        self.assertEqual(ball.y, 0)

    def test_update_position(self):
        ball = Ball()
        with patch('random.randint', return_value=1):
            ball.update()
            self.assertEqual(ball.x, 1)
            self.assertEqual(ball.y, 1)

        with patch('random.randint', return_value=0):
            ball.update()
            self.assertEqual(ball.x, 1)
            self.assertEqual(ball.y, 2)

    def test_fall(self):
        ball = Ball()
        ball.fall()
        self.assertEqual(ball.y, 1)

class TestBoard(unittest.TestCase):
    def setUp(self):
        self.board = Board(width=5, well_depth=5, N=10)

    def test_initial_fallen(self):
        self.assertEqual(self.board.fallen, [0] * 6)

    def test_add_ball(self):
        self.board.add_ball()
        self.assertEqual(len(self.board.balls), 1)

    def test_balls_on_board(self):
        self.board.add_ball()
        self.assertEqual(self.board.balls_on_board(), 1)

        # Simulate a ball falling into a bin
        self.board.balls[0].y = 10
        self.board.update()
        self.assertEqual(self.board.balls_on_board(), 0)

    def test_update(self):
        self.board.add_ball()
        ball = self.board.balls[0]

        # Simulate ball movement
        ball.y = 4
        ball.x = 2
        self.board.update()
        self.assertEqual(ball.y, 5)
        self.assertEqual(ball.x, 2)  # Assuming random.randint returns 0

    def test_print_board(self):
        # Test that print_board does not raise any exceptions
        try:
            self.board.print_board()
        except Exception as e:
            self.fail(f""print_board raised an exception {e}"")

    def test_print_ball(self):
        ball = Ball()
        ball.x = 2
        ball.y = 3
        # Test that print_ball does not raise any exceptions
        try:
            self.board.print_ball(ball)
        except Exception as e:
            self.fail(f""print_ball raised an exception {e}"")

    def test_print_all(self):
        self.board.add_ball()
        # Test that print_all does not raise any exceptions
        try:
            self.board.print_all()
        except Exception as e:
            self.fail(f""print_all raised an exception {e}"")

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/galton_box_animation/test_gpt_4o_2024_08_06_galton_box_animation.py,CompileStatus.OK,0.0,83.85,81.65,0.2,0.59,100.0,1.432844161987305,16.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_galton_box_animation', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/galton_box_animation/test_gpt_4o_2024_08_06_galton_box_animation.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_galton_box_animation', 'obj': 'TestBall', 'line': 5, 'column': 0, 'endLine': 5, 'endColumn': 14, 'path': 'data/generated/docs_python/galton_box_animation/test_gpt_4o_2024_08_06_galton_box_animation.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_galton_box_animation', 'obj': 'TestBall.test_initial_position', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 29, 'path': 'data/generated/docs_python/galton_box_animation/test_gpt_4o_2024_08_06_galton_box_animation.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_galton_box_animation', 'obj': 'TestBall.test_update_position', 'line': 11, 'column': 4, 'endLine': 11, 'endColumn': 28, 'path': 'data/generated/docs_python/galton_box_animation/test_gpt_4o_2024_08_06_galton_box_animation.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_galton_box_animation', 'obj': 'TestBall.test_fall', 'line': 23, 'column': 4, 'endLine': 23, 'endColumn': 17, 'path': 'data/generated/docs_python/galton_box_animation/test_gpt_4o_2024_08_06_galton_box_animation.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_galton_box_animation', 'obj': 'TestBoard', 'line': 28, 'column': 0, 'endLine': 28, 'endColumn': 15, 'path': 'data/generated/docs_python/galton_box_animation/test_gpt_4o_2024_08_06_galton_box_animation.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_galton_box_animation', 'obj': 'TestBoard.test_initial_fallen', 'line': 32, 'column': 4, 'endLine': 32, 'endColumn': 27, 'path': 'data/generated/docs_python/galton_box_animation/test_gpt_4o_2024_08_06_galton_box_animation.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_galton_box_animation', 'obj': 'TestBoard.test_add_ball', 'line': 35, 'column': 4, 'endLine': 35, 'endColumn': 21, 'path': 'data/generated/docs_python/galton_box_animation/test_gpt_4o_2024_08_06_galton_box_animation.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_galton_box_animation', 'obj': 'TestBoard.test_balls_on_board', 'line': 39, 'column': 4, 'endLine': 39, 'endColumn': 27, 'path': 'data/generated/docs_python/galton_box_animation/test_gpt_4o_2024_08_06_galton_box_animation.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_galton_box_animation', 'obj': 'TestBoard.test_update', 'line': 48, 'column': 4, 'endLine': 48, 'endColumn': 19, 'path': 'data/generated/docs_python/galton_box_animation/test_gpt_4o_2024_08_06_galton_box_animation.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_galton_box_animation', 'obj': 'TestBoard.test_print_board', 'line': 59, 'column': 4, 'endLine': 59, 'endColumn': 24, 'path': 'data/generated/docs_python/galton_box_animation/test_gpt_4o_2024_08_06_galton_box_animation.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_galton_box_animation', 'obj': 'TestBoard.test_print_board', 'line': 63, 'column': 15, 'endLine': 63, 'endColumn': 24, 'path': 'data/generated/docs_python/galton_box_animation/test_gpt_4o_2024_08_06_galton_box_animation.py', 'symbol': 'broad-exception-caught', 'message': 'Catching too general exception Exception', 'message-id': 'W0718'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_galton_box_animation', 'obj': 'TestBoard.test_print_ball', 'line': 66, 'column': 4, 'endLine': 66, 'endColumn': 23, 'path': 'data/generated/docs_python/galton_box_animation/test_gpt_4o_2024_08_06_galton_box_animation.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_galton_box_animation', 'obj': 'TestBoard.test_print_ball', 'line': 73, 'column': 15, 'endLine': 73, 'endColumn': 24, 'path': 'data/generated/docs_python/galton_box_animation/test_gpt_4o_2024_08_06_galton_box_animation.py', 'symbol': 'broad-exception-caught', 'message': 'Catching too general exception Exception', 'message-id': 'W0718'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_galton_box_animation', 'obj': 'TestBoard.test_print_all', 'line': 76, 'column': 4, 'endLine': 76, 'endColumn': 22, 'path': 'data/generated/docs_python/galton_box_animation/test_gpt_4o_2024_08_06_galton_box_animation.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_galton_box_animation', 'obj': 'TestBoard.test_print_all', 'line': 81, 'column': 15, 'endLine': 81, 'endColumn': 24, 'path': 'data/generated/docs_python/galton_box_animation/test_gpt_4o_2024_08_06_galton_box_animation.py', 'symbol': 'broad-exception-caught', 'message': 'Catching too general exception Exception', 'message-id': 'W0718'}]",False
Gaussian elimination,"Task

Solve   Ax=b   using Gaussian elimination then backwards substitution.

A   being an   n by n   matrix.

Also,   x and b   are   n by 1   vectors.

To improve accuracy, please use partial pivoting and scaling.



See also

   the Wikipedia entry:   Gaussian elimination

",Python,"# The 'gauss' function takes two matrices, 'a' and 'b', with 'a' square, and it return the determinant of 'a' and a matrix 'x' such that a*x = b.
# If 'b' is the identity, then 'x' is the inverse of 'a'.
 
import copy
from fractions import Fraction
 
def gauss(a, b):
    a = copy.deepcopy(a)
    b = copy.deepcopy(b)
    n = len(a)
    p = len(b[0])
    det = 1
    for i in range(n - 1):
        k = i
        for j in range(i + 1, n):
            if abs(a[j][i]) > abs(a[k][i]):
                k = j
        if k != i:
            a[i], a[k] = a[k], a[i]
            b[i], b[k] = b[k], b[i]
            det = -det
 
        for j in range(i + 1, n):
            t = a[j][i]/a[i][i]
            for k in range(i + 1, n):
                a[j][k] -= t*a[i][k]
            for k in range(p):
                b[j][k] -= t*b[i][k]
 
    for i in range(n - 1, -1, -1):
        for j in range(i + 1, n):
            t = a[i][j]
            for k in range(p):
                b[i][k] -= t*b[j][k]
        t = 1/a[i][i]
        det *= a[i][i]
        for j in range(p):
            b[i][j] *= t
    return det, b
 
def zeromat(p, q):
    return [[0]*q for i in range(p)]
 
def matmul(a, b):
    n, p = len(a), len(a[0])
    p1, q = len(b), len(b[0])
    if p != p1:
        raise ValueError(""Incompatible dimensions"")
    c = zeromat(n, q)
    for i in range(n):
        for j in range(q):
                c[i][j] = sum(a[i][k]*b[k][j] for k in range(p))
    return c
 
 
def mapmat(f, a):
    return [list(map(f, v)) for v in a]
 
def ratmat(a):
    return mapmat(Fraction, a)
 
# As an example, compute the determinant and inverse of 3x3 magic square
 
a = [[2, 9, 4], [7, 5, 3], [6, 1, 8]]
b = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
det, c = gauss(a, b)
 
det
-360.0
 
c
[[-0.10277777777777776, 0.18888888888888888, -0.019444444444444438],
[0.10555555555555554, 0.02222222222222223, -0.061111111111111116],
[0.0638888888888889, -0.14444444444444446, 0.14722222222222223]]
 
# Check product
matmul(a, c)
[[1.0, 0.0, 0.0], [5.551115123125783e-17, 1.0, 0.0],
[1.1102230246251565e-16, -2.220446049250313e-16, 1.0]]
 
# Same with fractions, so the result is exact
 
det, c = gauss(ratmat(a), ratmat(b))
 
det
Fraction(-360, 1)
 
c
[[Fraction(-37, 360), Fraction(17, 90), Fraction(-7, 360)],
[Fraction(19, 180), Fraction(1, 45), Fraction(-11, 180)],
[Fraction(23, 360), Fraction(-13, 90), Fraction(53, 360)]]
 
matmul(a, c)
[[Fraction(1, 1), Fraction(0, 1), Fraction(0, 1)],
[Fraction(0, 1), Fraction(1, 1), Fraction(0, 1)],
[Fraction(0, 1), Fraction(0, 1), Fraction(1, 1)]]",2560,96,"import unittest
from fractions import Fraction
from gaussian_elimination import gauss, matmul, ratmat

class TestGaussianElimination(unittest.TestCase):

    def test_determinant_and_inverse(self):
        a = [[2, 9, 4], [7, 5, 3], [6, 1, 8]]
        b = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
        det, inv = gauss(a, b)

        expected_det = -360.0
        expected_inv = [
            [-0.10277777777777776, 0.18888888888888888, -0.019444444444444438],
            [0.10555555555555554, 0.02222222222222223, -0.061111111111111116],
            [0.0638888888888889, -0.14444444444444446, 0.14722222222222223]
        ]

        self.assertAlmostEqual(det, expected_det)
        for row, expected_row in zip(inv, expected_inv):
            for value, expected_value in zip(row, expected_row):
                self.assertAlmostEqual(value, expected_value)

    def test_product_with_inverse(self):
        a = [[2, 9, 4], [7, 5, 3], [6, 1, 8]]
        b = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
        _, inv = gauss(a, b)

        product = matmul(a, inv)
        expected_product = [
            [1.0, 0.0, 0.0],
            [5.551115123125783e-17, 1.0, 0.0],
            [1.1102230246251565e-16, -2.220446049250313e-16, 1.0]
        ]

        for row, expected_row in zip(product, expected_product):
            for value, expected_value in zip(row, expected_row):
                self.assertAlmostEqual(value, expected_value)

    def test_determinant_and_inverse_with_fractions(self):
        a = [[2, 9, 4], [7, 5, 3], [6, 1, 8]]
        b = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
        det, inv = gauss(ratmat(a), ratmat(b))

        expected_det = Fraction(-360, 1)
        expected_inv = [
            [Fraction(-37, 360), Fraction(17, 90), Fraction(-7, 360)],
            [Fraction(19, 180), Fraction(1, 45), Fraction(-11, 180)],
            [Fraction(23, 360), Fraction(-13, 90), Fraction(53, 360)]
        ]

        self.assertEqual(det, expected_det)
        self.assertEqual(inv, expected_inv)

    def test_product_with_inverse_fractions(self):
        a = [[2, 9, 4], [7, 5, 3], [6, 1, 8]]
        b = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
        _, inv = gauss(ratmat(a), ratmat(b))

        product = matmul(a, inv)
        expected_product = [
            [Fraction(1, 1), Fraction(0, 1), Fraction(0, 1)],
            [Fraction(0, 1), Fraction(1, 1), Fraction(0, 1)],
            [Fraction(0, 1), Fraction(0, 1), Fraction(1, 1)]
        ]

        self.assertEqual(product, expected_product)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/gaussian_elimination/test_gpt_4o_2024_08_06_gaussian_elimination.py,CompileStatus.OK,0.0,98.1,97.32,0.12,0.27,100.0,0.5740668773651123,14.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_gaussian_elimination', 'obj': '', 'line': 11, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/gaussian_elimination/test_gpt_4o_2024_08_06_gaussian_elimination.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_gaussian_elimination', 'obj': '', 'line': 18, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/gaussian_elimination/test_gpt_4o_2024_08_06_gaussian_elimination.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_gaussian_elimination', 'obj': '', 'line': 28, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/gaussian_elimination/test_gpt_4o_2024_08_06_gaussian_elimination.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_gaussian_elimination', 'obj': '', 'line': 35, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/gaussian_elimination/test_gpt_4o_2024_08_06_gaussian_elimination.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_gaussian_elimination', 'obj': '', 'line': 44, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/gaussian_elimination/test_gpt_4o_2024_08_06_gaussian_elimination.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_gaussian_elimination', 'obj': '', 'line': 51, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/gaussian_elimination/test_gpt_4o_2024_08_06_gaussian_elimination.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_gaussian_elimination', 'obj': '', 'line': 59, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/gaussian_elimination/test_gpt_4o_2024_08_06_gaussian_elimination.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_gaussian_elimination', 'obj': '', 'line': 66, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/gaussian_elimination/test_gpt_4o_2024_08_06_gaussian_elimination.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_gaussian_elimination', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/gaussian_elimination/test_gpt_4o_2024_08_06_gaussian_elimination.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_gaussian_elimination', 'obj': 'TestGaussianElimination', 'line': 5, 'column': 0, 'endLine': 5, 'endColumn': 29, 'path': 'data/generated/docs_python/gaussian_elimination/test_gpt_4o_2024_08_06_gaussian_elimination.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_gaussian_elimination', 'obj': 'TestGaussianElimination.test_determinant_and_inverse', 'line': 7, 'column': 4, 'endLine': 7, 'endColumn': 36, 'path': 'data/generated/docs_python/gaussian_elimination/test_gpt_4o_2024_08_06_gaussian_elimination.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_gaussian_elimination', 'obj': 'TestGaussianElimination.test_product_with_inverse', 'line': 24, 'column': 4, 'endLine': 24, 'endColumn': 33, 'path': 'data/generated/docs_python/gaussian_elimination/test_gpt_4o_2024_08_06_gaussian_elimination.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_gaussian_elimination', 'obj': 'TestGaussianElimination.test_determinant_and_inverse_with_fractions', 'line': 40, 'column': 4, 'endLine': 40, 'endColumn': 51, 'path': 'data/generated/docs_python/gaussian_elimination/test_gpt_4o_2024_08_06_gaussian_elimination.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_gaussian_elimination', 'obj': 'TestGaussianElimination.test_product_with_inverse_fractions', 'line': 55, 'column': 4, 'endLine': 55, 'endColumn': 43, 'path': 'data/generated/docs_python/gaussian_elimination/test_gpt_4o_2024_08_06_gaussian_elimination.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
General FizzBuzz,"Task

Write a generalized version of FizzBuzz that works for any list of factors, along with their words.

This is basically a ""fizzbuzz"" implementation where the user supplies the parameters.

The user will enter the max number, then they will enter the factors to be calculated along with the corresponding word to be printed.

For simplicity's sake, assume the user will input an integer as the max number and 3 factors, each with a word associated with them.



For example, given:

>20      #This is the maximum number, supplied by the user
>3 Fizz  #The user now enters the starting factor (3) and the word they want associated with it (Fizz)
>5 Buzz  #The user now enters the next factor (5) and the word they want associated with it (Buzz)
>7 Baxx  #The user now enters the next factor (7) and the word they want associated with it (Baxx)

In other words: For this example, print the numbers 1 through 20, replacing every multiple of 3 with ""Fizz"", every multiple of 5 with ""Buzz"", and every multiple of 7 with ""Baxx"".

In the case where a number is a multiple of at least two factors, print each of the words associated with those factors in the order of least to greatest factor.

For instance, the number 15 is a multiple of both 3 and 5; print ""FizzBuzz"".

If the max number was 105 instead of 20, you would print ""FizzBuzzBaxx"" because it's a multiple of 3, 5, and 7.


Output:
1
2
Fizz
4
Buzz
Fizz
Baxx
8
Fizz
Buzz
11
Fizz
13
Baxx
FizzBuzz
16
17
Fizz
19
Buzz


",Python,"def genfizzbuzz(factorwords, numbers):
    # sort entries by factor
    factorwords.sort(key=lambda factor_and_word: factor_and_word[0])
    lines = []
    for num in numbers:
        words = ''.join(word for factor, word in factorwords if (num % factor) == 0)
        lines.append(words if words else str(num))
    return '\n'.join(lines)
 
if __name__ == '__main__':
    print(genfizzbuzz([(5, 'Buzz'), (3, 'Fizz'), (7, 'Baxx')], range(1, 21)))",446,11,"import unittest
from general_fizzbuzz import genfizzbuzz

class TestGenFizzBuzz(unittest.TestCase):

    def test_standard_case(self):
        factors = [(3, 'Fizz'), (5, 'Buzz'), (7, 'Baxx')]
        numbers = range(1, 21)
        expected_output = (
            ""1\n2\nFizz\n4\nBuzz\nFizz\nBaxx\n8\nFizz\nBuzz\n11\nFizz\n13\nBaxx\nFizzBuzz\n""
            ""16\n17\nFizz\n19\nBuzz""
        )
        self.assertEqual(genfizzbuzz(factors, numbers), expected_output)

    def test_no_factors(self):
        factors = []
        numbers = range(1, 11)
        expected_output = ""1\n2\n3\n4\n5\n6\n7\n8\n9\n10""
        self.assertEqual(genfizzbuzz(factors, numbers), expected_output)

    def test_single_factor(self):
        factors = [(2, 'Even')]
        numbers = range(1, 6)
        expected_output = ""1\nEven\n3\nEven\n5""
        self.assertEqual(genfizzbuzz(factors, numbers), expected_output)

    def test_multiple_factors_same_number(self):
        factors = [(2, 'Two'), (3, 'Three')]
        numbers = range(1, 7)
        expected_output = ""1\nTwo\nThree\nTwo\n5\nTwoThree""
        self.assertEqual(genfizzbuzz(factors, numbers), expected_output)

    def test_large_range(self):
        factors = [(3, 'Fizz'), (5, 'Buzz')]
        numbers = range(1, 101)
        # Check only the first and last few elements to ensure performance
        expected_start = ""1\n2\nFizz\n4\nBuzz\nFizz\n7\n8\nFizz\nBuzz""
        expected_end = ""91\n92\nFizz\n94\nBuzz\nFizz\n97\n98\nFizz\nBuzz""
        result = genfizzbuzz(factors, numbers)
        self.assertTrue(result.startswith(expected_start))
        self.assertTrue(result.endswith(expected_end))

    def test_non_divisible_numbers(self):
        factors = [(10, 'Ten')]
        numbers = range(1, 10)
        expected_output = ""1\n2\n3\n4\n5\n6\n7\n8\n9""
        self.assertEqual(genfizzbuzz(factors, numbers), expected_output)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/general_fizzbuzz/test_gpt_4o_2024_08_06_general_fizzbuzz.py,CompileStatus.OK,0.0,95.74,92.98,0.18,1.4,100.0,0.6714639663696289,8.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_general_fizzbuzz', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/general_fizzbuzz/test_gpt_4o_2024_08_06_general_fizzbuzz.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_general_fizzbuzz', 'obj': 'TestGenFizzBuzz', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 21, 'path': 'data/generated/docs_python/general_fizzbuzz/test_gpt_4o_2024_08_06_general_fizzbuzz.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_general_fizzbuzz', 'obj': 'TestGenFizzBuzz.test_standard_case', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 26, 'path': 'data/generated/docs_python/general_fizzbuzz/test_gpt_4o_2024_08_06_general_fizzbuzz.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_general_fizzbuzz', 'obj': 'TestGenFizzBuzz.test_no_factors', 'line': 15, 'column': 4, 'endLine': 15, 'endColumn': 23, 'path': 'data/generated/docs_python/general_fizzbuzz/test_gpt_4o_2024_08_06_general_fizzbuzz.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_general_fizzbuzz', 'obj': 'TestGenFizzBuzz.test_single_factor', 'line': 21, 'column': 4, 'endLine': 21, 'endColumn': 26, 'path': 'data/generated/docs_python/general_fizzbuzz/test_gpt_4o_2024_08_06_general_fizzbuzz.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_general_fizzbuzz', 'obj': 'TestGenFizzBuzz.test_multiple_factors_same_number', 'line': 27, 'column': 4, 'endLine': 27, 'endColumn': 41, 'path': 'data/generated/docs_python/general_fizzbuzz/test_gpt_4o_2024_08_06_general_fizzbuzz.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_general_fizzbuzz', 'obj': 'TestGenFizzBuzz.test_large_range', 'line': 33, 'column': 4, 'endLine': 33, 'endColumn': 24, 'path': 'data/generated/docs_python/general_fizzbuzz/test_gpt_4o_2024_08_06_general_fizzbuzz.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_general_fizzbuzz', 'obj': 'TestGenFizzBuzz.test_non_divisible_numbers', 'line': 43, 'column': 4, 'endLine': 43, 'endColumn': 34, 'path': 'data/generated/docs_python/general_fizzbuzz/test_gpt_4o_2024_08_06_general_fizzbuzz.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Generate random chess position,"Task

Generate a random chess position in FEN format.

The position does not have to be realistic or even balanced,  but it must comply to the following rules:

 there is one and only one king of each color  (one black king and one white king);
 the kings must not be placed on adjacent squares;
 there can not be any pawn in the promotion square  (no white pawn in the eighth rank, and no black pawn in the first rank);
 including the kings, up to 32 pieces of either color can be placed.
 There is no requirement for material balance between sides.
 The picking of pieces does not have to comply to a regular chess set --- there can be five knights, twenty rooks, whatever ... as long as the total number of pieces do not exceed thirty-two.
 it is white's turn.
 It's assumed that both sides have lost castling rights and that there is no possibility for   en passant   (the FEN should thus end in w - - 0 1).


No requirement is made regarding the probability distribution of your method, but your program should be able to span a reasonably representative sample of all possible positions. For instance, programs that would always generate positions with say five pieces on the board, or with kings on a corner, would not be considered truly random.



",Python," 
import random
 
board = [["" "" for x in range(8)] for y in range(8)]
piece_list = [""R"", ""N"", ""B"", ""Q"", ""P""]
 
 
def place_kings(brd):
	while True:
		rank_white, file_white, rank_black, file_black = random.randint(0,7), random.randint(0,7), random.randint(0,7), random.randint(0,7)
		diff_list = [abs(rank_white - rank_black),  abs(file_white - file_black)]
		if sum(diff_list) > 2 or set(diff_list) == set([0, 2]):
			brd[rank_white][file_white], brd[rank_black][file_black] = ""K"", ""k""
			break
 
def populate_board(brd, wp, bp):
	for x in range(2):
		if x == 0:
			piece_amount = wp
			pieces = piece_list
		else:
			piece_amount = bp
			pieces = [s.lower() for s in piece_list]
		while piece_amount != 0:
			piece_rank, piece_file = random.randint(0, 7), random.randint(0, 7)
			piece = random.choice(pieces)
			if brd[piece_rank][piece_file] == "" "" and pawn_on_promotion_square(piece, piece_rank) == False:
				brd[piece_rank][piece_file] = piece
				piece_amount -= 1
 
def fen_from_board(brd):
	fen = """"
	for x in brd:
		n = 0
		for y in x:
			if y == "" "":
				n += 1
			else:
				if n != 0:
					fen += str(n)
				fen += y
				n = 0
		if n != 0:
			fen += str(n)
		fen += ""/"" if fen.count(""/"") < 7 else """"
	fen += "" w - - 0 1\n""
	return fen
 
def pawn_on_promotion_square(pc, pr):
	if pc == ""P"" and pr == 0:
		return True
	elif pc == ""p"" and pr == 7:
		return True
	return False
 
 
def start():
	piece_amount_white, piece_amount_black = random.randint(0, 15), random.randint(0, 15)
	place_kings(board)
	populate_board(board, piece_amount_white, piece_amount_black)
	print(fen_from_board(board))
	for x in board:
		print(x)
 
#entry point
start()
 ",1655,67,"import unittest
from generate_random_chess_position import place_kings, populate_board, fen_from_board, pawn_on_promotion_square

class TestGenerateRandomChessPosition(unittest.TestCase):

    def setUp(self):
        self.board = [["" "" for _ in range(8)] for _ in range(8)]

    def test_place_kings(self):
        place_kings(self.board)
        white_king_position = None
        black_king_position = None

        for rank in range(8):
            for file in range(8):
                if self.board[rank][file] == ""K"":
                    white_king_position = (rank, file)
                elif self.board[rank][file] == ""k"":
                    black_king_position = (rank, file)

        self.assertIsNotNone(white_king_position, ""White king not placed on the board"")
        self.assertIsNotNone(black_king_position, ""Black king not placed on the board"")

        # Ensure kings are not adjacent
        self.assertTrue(
            abs(white_king_position[0] - black_king_position[0]) > 1 or
            abs(white_king_position[1] - black_king_position[1]) > 1,
            ""Kings are placed on adjacent squares""
        )

    def test_populate_board(self):
        place_kings(self.board)
        populate_board(self.board, 15, 15)  # Max pieces for both sides

        piece_count = sum(row.count(piece) for row in self.board for piece in ""RNBQPrnbqp"")
        self.assertLessEqual(piece_count, 32, ""More than 32 pieces on the board"")

        for rank in range(8):
            self.assertNotIn(""P"", self.board[0], ""White pawn on promotion square"")
            self.assertNotIn(""p"", self.board[7], ""Black pawn on promotion square"")

    def test_fen_from_board(self):
        place_kings(self.board)
        populate_board(self.board, 15, 15)
        fen = fen_from_board(self.board)

        # Check FEN format
        self.assertTrue(fen.endswith("" w - - 0 1\n""), ""FEN does not end with ' w - - 0 1'"")

        # Check that FEN has 8 ranks
        ranks = fen.split(""/"")
        self.assertEqual(len(ranks), 8, ""FEN does not have 8 ranks"")

    def test_pawn_on_promotion_square(self):
        self.assertTrue(pawn_on_promotion_square(""P"", 0), ""White pawn on promotion square not detected"")
        self.assertTrue(pawn_on_promotion_square(""p"", 7), ""Black pawn on promotion square not detected"")
        self.assertFalse(pawn_on_promotion_square(""P"", 1), ""False positive for white pawn on non-promotion square"")
        self.assertFalse(pawn_on_promotion_square(""p"", 6), ""False positive for black pawn on non-promotion square"")

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/generate_random_chess_position/test_gpt_4o_2024_08_06_generate_random_chess_position.py,CompileStatus.OK,0.0,98.92,98.56,0.29,0.48,100.0,0.5974960327148438,12.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_generate_random_chess_position', 'obj': '', 'line': 2, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/generate_random_chess_position/test_gpt_4o_2024_08_06_generate_random_chess_position.py', 'symbol': 'line-too-long', 'message': 'Line too long (112/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_generate_random_chess_position', 'obj': '', 'line': 55, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/generate_random_chess_position/test_gpt_4o_2024_08_06_generate_random_chess_position.py', 'symbol': 'line-too-long', 'message': 'Line too long (104/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_generate_random_chess_position', 'obj': '', 'line': 56, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/generate_random_chess_position/test_gpt_4o_2024_08_06_generate_random_chess_position.py', 'symbol': 'line-too-long', 'message': 'Line too long (104/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_generate_random_chess_position', 'obj': '', 'line': 57, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/generate_random_chess_position/test_gpt_4o_2024_08_06_generate_random_chess_position.py', 'symbol': 'line-too-long', 'message': 'Line too long (115/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_generate_random_chess_position', 'obj': '', 'line': 58, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/generate_random_chess_position/test_gpt_4o_2024_08_06_generate_random_chess_position.py', 'symbol': 'line-too-long', 'message': 'Line too long (115/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_generate_random_chess_position', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/generate_random_chess_position/test_gpt_4o_2024_08_06_generate_random_chess_position.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_generate_random_chess_position', 'obj': 'TestGenerateRandomChessPosition', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 37, 'path': 'data/generated/docs_python/generate_random_chess_position/test_gpt_4o_2024_08_06_generate_random_chess_position.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_generate_random_chess_position', 'obj': 'TestGenerateRandomChessPosition.test_place_kings', 'line': 9, 'column': 4, 'endLine': 9, 'endColumn': 24, 'path': 'data/generated/docs_python/generate_random_chess_position/test_gpt_4o_2024_08_06_generate_random_chess_position.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_generate_random_chess_position', 'obj': 'TestGenerateRandomChessPosition.test_populate_board', 'line': 31, 'column': 4, 'endLine': 31, 'endColumn': 27, 'path': 'data/generated/docs_python/generate_random_chess_position/test_gpt_4o_2024_08_06_generate_random_chess_position.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_generate_random_chess_position', 'obj': 'TestGenerateRandomChessPosition.test_populate_board', 'line': 38, 'column': 12, 'endLine': 38, 'endColumn': 16, 'path': 'data/generated/docs_python/generate_random_chess_position/test_gpt_4o_2024_08_06_generate_random_chess_position.py', 'symbol': 'unused-variable', 'message': ""Unused variable 'rank'"", 'message-id': 'W0612'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_generate_random_chess_position', 'obj': 'TestGenerateRandomChessPosition.test_fen_from_board', 'line': 42, 'column': 4, 'endLine': 42, 'endColumn': 27, 'path': 'data/generated/docs_python/generate_random_chess_position/test_gpt_4o_2024_08_06_generate_random_chess_position.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_generate_random_chess_position', 'obj': 'TestGenerateRandomChessPosition.test_pawn_on_promotion_square', 'line': 54, 'column': 4, 'endLine': 54, 'endColumn': 37, 'path': 'data/generated/docs_python/generate_random_chess_position/test_gpt_4o_2024_08_06_generate_random_chess_position.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Globally replace text in several files,"Task

Replace every occurring instance of a piece of text in a group of text files with another one.



For this task we want to replace the text   ""Goodbye London!""   with   ""Hello New York!""   for a list of files.



",Python,"import fileinput
 
for line in fileinput.input(inplace=True):
    print(line.replace('Goodbye London!', 'Hello New York!'), end='')
 ",133,5,"import os
import unittest

class TestGloballyReplaceText(unittest.TestCase):

    def setUp(self):
        # Create a temporary directory and files for testing
        self.test_files = ['test_file1.txt', 'test_file2.txt', 'test_file3.txt']
        self.original_text = ""Goodbye London!""
        self.replacement_text = ""Hello New York!""
        self.file_contents = [
            ""This is a test. Goodbye London! This should change."",
            ""Goodbye London! Goodbye London! Multiple occurrences."",
            ""No occurrence here.""
        ]

        for i, file_name in enumerate(self.test_files):
            with open(file_name, 'w') as f:
                f.write(self.file_contents[i])

    def tearDown(self):
        # Remove the test files after tests are done
        for file_name in self.test_files:
            if os.path.exists(file_name):
                os.remove(file_name)

    def test_replacement_in_files(self):
        # Import the script to test
        import globally_replace_text_in_several_files

        # Check each file to ensure the text has been replaced
        expected_contents = [
            ""This is a test. Hello New York! This should change."",
            ""Hello New York! Hello New York! Multiple occurrences."",
            ""No occurrence here.""
        ]

        for i, file_name in enumerate(self.test_files):
            with open(file_name, 'r') as f:
                content = f.read()
                self.assertEqual(content, expected_contents[i])

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/globally_replace_text_in_several_files/test_gpt_4o_2024_08_06_globally_replace_text_in_several_files.py,CompileStatus.EXCEPTION_OCCURRED,,,,,,,,1.0,"[{'type': 'fatal', 'module': './data/generated/docs_python/globally_replace_text_in_several_files/test_gpt_4o_2024_08_06_globally_replace_text_in_several_files.py', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': './data/generated/docs_python/globally_replace_text_in_several_files/test_gpt_4o_2024_08_06_globally_replace_text_in_several_files.py', 'symbol': 'fatal', 'message': 'No module named ./data/generated/docs_python/globally_replace_text_in_several_files/test_gpt_4o_2024_08_06_globally_replace_text_in_several_files.py', 'message-id': 'F0001'}]",
Gray code,"Gray code
Karnaugh maps
Create functions to encode a number to and decode a number from Gray code.

Display the normal binary representations, Gray code representations, and decoded Gray code values for all 5-bit binary numbers (0-31 inclusive, leading 0's not necessary).

There are many possible Gray codes. The following encodes what is called ""binary reflected Gray code.""

Encoding (MSB is bit 0, b is binary, g is Gray code):

if b[i-1] = 1
   g[i] = not b[i]
else
   g[i] = b[i]
Or:

g = b xor (b logically right shifted 1 time)
Decoding (MSB is bit 0, b is binary, g is Gray code):

b[0] = g[0]

for other bits:
b[i] = g[i] xor b[i-1]
Reference
 Converting Between Gray and Binary Codes. It includes step-by-step animations.",Python,"def gray_encode(n):
    return n ^ n >> 1
 
def gray_decode(n):
    m = n >> 1
    while m:
        n ^= m
        m >>= 1
    return n
 
 
if __name__ == '__main__':
    print(""DEC,   BIN =>  GRAY => DEC"")
    for i in range(32):
        gray = gray_encode(i)
        dec = gray_decode(gray)
        print(f"" {i:>2d}, {i:>05b} => {gray:>05b} => {dec:>2d}"")",357,17,"import unittest

def gray_encode(n):
    return n ^ n >> 1

def gray_decode(n):
    m = n >> 1
    while m:
        n ^= m
        m >>= 1
    return n

class TestGrayCode(unittest.TestCase):

    def test_gray_encode(self):
        # Test encoding for all 5-bit numbers (0-31)
        expected_gray_codes = [
            0b00000, 0b00001, 0b00011, 0b00010, 0b00110, 0b00111, 0b00101, 0b00100,
            0b01100, 0b01101, 0b01111, 0b01110, 0b01010, 0b01011, 0b01001, 0b01000,
            0b11000, 0b11001, 0b11011, 0b11010, 0b11110, 0b11111, 0b11101, 0b11100,
            0b10100, 0b10101, 0b10111, 0b10110, 0b10010, 0b10011, 0b10001, 0b10000
        ]
        for i in range(32):
            with self.subTest(i=i):
                self.assertEqual(gray_encode(i), expected_gray_codes[i])

    def test_gray_decode(self):
        # Test decoding for all 5-bit Gray codes (0-31)
        expected_gray_codes = [
            0b00000, 0b00001, 0b00011, 0b00010, 0b00110, 0b00111, 0b00101, 0b00100,
            0b01100, 0b01101, 0b01111, 0b01110, 0b01010, 0b01011, 0b01001, 0b01000,
            0b11000, 0b11001, 0b11011, 0b11010, 0b11110, 0b11111, 0b11101, 0b11100,
            0b10100, 0b10101, 0b10111, 0b10110, 0b10010, 0b10011, 0b10001, 0b10000
        ]
        for i in range(32):
            with self.subTest(i=i):
                self.assertEqual(gray_decode(expected_gray_codes[i]), i)

    def test_encode_decode_consistency(self):
        # Test that encoding and then decoding returns the original number
        for i in range(32):
            with self.subTest(i=i):
                gray = gray_encode(i)
                decoded = gray_decode(gray)
                self.assertEqual(decoded, i)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/gray_code/test_gpt_4o_2024_08_06_gray_code.py,CompileStatus.OK,0.0,64.29,65.62,0.08,1.0,100.0,0.8913593292236328,7.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_gray_code', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/gray_code/test_gpt_4o_2024_08_06_gray_code.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_gray_code', 'obj': 'gray_encode', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 15, 'path': 'data/generated/docs_python/gray_code/test_gpt_4o_2024_08_06_gray_code.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_gray_code', 'obj': 'gray_decode', 'line': 6, 'column': 0, 'endLine': 6, 'endColumn': 15, 'path': 'data/generated/docs_python/gray_code/test_gpt_4o_2024_08_06_gray_code.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_gray_code', 'obj': 'TestGrayCode', 'line': 13, 'column': 0, 'endLine': 13, 'endColumn': 18, 'path': 'data/generated/docs_python/gray_code/test_gpt_4o_2024_08_06_gray_code.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_gray_code', 'obj': 'TestGrayCode.test_gray_encode', 'line': 15, 'column': 4, 'endLine': 15, 'endColumn': 24, 'path': 'data/generated/docs_python/gray_code/test_gpt_4o_2024_08_06_gray_code.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_gray_code', 'obj': 'TestGrayCode.test_gray_decode', 'line': 27, 'column': 4, 'endLine': 27, 'endColumn': 24, 'path': 'data/generated/docs_python/gray_code/test_gpt_4o_2024_08_06_gray_code.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_gray_code', 'obj': 'TestGrayCode.test_encode_decode_consistency', 'line': 39, 'column': 4, 'endLine': 39, 'endColumn': 38, 'path': 'data/generated/docs_python/gray_code/test_gpt_4o_2024_08_06_gray_code.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Greyscale bars/Display,"The task is to display a series of vertical greyscale bars (contrast bars) with a sufficient number of bars to span the entire width of the display.

For the top quarter of the display, the left hand bar should be black, and we then incrementally step through six shades of grey until we have a white bar on the right hand side of the display. (This gives a total of 8 bars)

For the second quarter down, we start with white and step down through 14 shades of gray, getting darker until we have black on the right hand side of the display. (This gives a total of 16 bars).

Halfway down the display, we start with black, and produce 32 bars, ending in white, and for the last quarter, we start with white and step through 62 shades of grey, before finally arriving at black in the bottom right hand corner, producing a total of 64 bars for the bottom quarter.
",Python,"#!/usr/bin/env python
#four gray scaled stripes 8:16:32:64 in Python 2.7.1
 
from livewires import *
 
horiz=640; vert=480; pruh=vert/4; dpp=255.0
begin_graphics(width=horiz,height=vert,title=""Gray stripes"",background=Colour.black)
 
def ty_pruhy(each):
	hiy=each[0]*pruh; loy=hiy-pruh
	krok=horiz/each[1]; piecol=255.0/(each[1]-1)
	for x in xrange(0,each[1]):
		barva=Colour(piecol*x/dpp,piecol*x/dpp,piecol*x/dpp ); set_colour(barva)
		if each[2]:
			box(x*krok,hiy,x*krok+krok,loy,filled=1)
		else:
			box(horiz-x*krok,hiy,horiz-((x+1)*krok),loy,filled=1)
 
# main
source=[[4,8,True],[3,16,False],[2,32,True],[1,64,False]]
for each in source:
	ty_pruhy(each)
 
while keys_pressed() != [' ']: # press spacebar to close window
	pass
 ",735,26,"import unittest
from unittest.mock import patch, MagicMock
from greyscale_bars_display import ty_pruhy, begin_graphics, set_colour, box, keys_pressed, Colour

class TestGreyscaleBarsDisplay(unittest.TestCase):

    @patch('greyscale_bars_display.begin_graphics')
    def test_begin_graphics_called_with_correct_parameters(self, mock_begin_graphics):
        begin_graphics(width=640, height=480, title=""Gray stripes"", background=Colour.black)
        mock_begin_graphics.assert_called_once_with(width=640, height=480, title=""Gray stripes"", background=Colour.black)

    @patch('greyscale_bars_display.set_colour')
    @patch('greyscale_bars_display.box')
    def test_ty_pruhy_creates_correct_bars(self, mock_box, mock_set_colour):
        # Test for the first quarter (8 bars, black to white)
        ty_pruhy([4, 8, True])
        self.assertEqual(mock_set_colour.call_count, 8)
        self.assertEqual(mock_box.call_count, 8)

        # Test for the second quarter (16 bars, white to black)
        mock_set_colour.reset_mock()
        mock_box.reset_mock()
        ty_pruhy([3, 16, False])
        self.assertEqual(mock_set_colour.call_count, 16)
        self.assertEqual(mock_box.call_count, 16)

        # Test for the third quarter (32 bars, black to white)
        mock_set_colour.reset_mock()
        mock_box.reset_mock()
        ty_pruhy([2, 32, True])
        self.assertEqual(mock_set_colour.call_count, 32)
        self.assertEqual(mock_box.call_count, 32)

        # Test for the fourth quarter (64 bars, white to black)
        mock_set_colour.reset_mock()
        mock_box.reset_mock()
        ty_pruhy([1, 64, False])
        self.assertEqual(mock_set_colour.call_count, 64)
        self.assertEqual(mock_box.call_count, 64)

    @patch('greyscale_bars_display.keys_pressed', return_value=[' '])
    def test_exit_on_spacebar_press(self, mock_keys_pressed):
        self.assertEqual(keys_pressed(), [' '])

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/greyscale_bars_display/test_gpt_4o_2024_08_06_greyscale_bars_display.py,CompileStatus.OK,0.0,8.0,6.67,0.29,3.33,,0.793144702911377,15.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_greyscale_bars_display', 'obj': '', 'line': 10, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/greyscale_bars_display/test_gpt_4o_2024_08_06_greyscale_bars_display.py', 'symbol': 'line-too-long', 'message': 'Line too long (121/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_greyscale_bars_display', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/greyscale_bars_display/test_gpt_4o_2024_08_06_greyscale_bars_display.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_greyscale_bars_display', 'obj': '', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 98, 'path': 'data/generated/docs_python/greyscale_bars_display/test_gpt_4o_2024_08_06_greyscale_bars_display.py', 'symbol': 'no-name-in-module', 'message': ""No name 'begin_graphics' in module 'greyscale_bars_display'"", 'message-id': 'E0611'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_greyscale_bars_display', 'obj': '', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 98, 'path': 'data/generated/docs_python/greyscale_bars_display/test_gpt_4o_2024_08_06_greyscale_bars_display.py', 'symbol': 'no-name-in-module', 'message': ""No name 'set_colour' in module 'greyscale_bars_display'"", 'message-id': 'E0611'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_greyscale_bars_display', 'obj': '', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 98, 'path': 'data/generated/docs_python/greyscale_bars_display/test_gpt_4o_2024_08_06_greyscale_bars_display.py', 'symbol': 'no-name-in-module', 'message': ""No name 'box' in module 'greyscale_bars_display'"", 'message-id': 'E0611'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_greyscale_bars_display', 'obj': '', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 98, 'path': 'data/generated/docs_python/greyscale_bars_display/test_gpt_4o_2024_08_06_greyscale_bars_display.py', 'symbol': 'no-name-in-module', 'message': ""No name 'keys_pressed' in module 'greyscale_bars_display'"", 'message-id': 'E0611'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_greyscale_bars_display', 'obj': '', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 98, 'path': 'data/generated/docs_python/greyscale_bars_display/test_gpt_4o_2024_08_06_greyscale_bars_display.py', 'symbol': 'no-name-in-module', 'message': ""No name 'Colour' in module 'greyscale_bars_display'"", 'message-id': 'E0611'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_greyscale_bars_display', 'obj': 'TestGreyscaleBarsDisplay', 'line': 5, 'column': 0, 'endLine': 5, 'endColumn': 30, 'path': 'data/generated/docs_python/greyscale_bars_display/test_gpt_4o_2024_08_06_greyscale_bars_display.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_greyscale_bars_display', 'obj': 'TestGreyscaleBarsDisplay.test_begin_graphics_called_with_correct_parameters', 'line': 8, 'column': 4, 'endLine': 8, 'endColumn': 58, 'path': 'data/generated/docs_python/greyscale_bars_display/test_gpt_4o_2024_08_06_greyscale_bars_display.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_greyscale_bars_display', 'obj': 'TestGreyscaleBarsDisplay.test_ty_pruhy_creates_correct_bars', 'line': 14, 'column': 4, 'endLine': 14, 'endColumn': 42, 'path': 'data/generated/docs_python/greyscale_bars_display/test_gpt_4o_2024_08_06_greyscale_bars_display.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_greyscale_bars_display', 'obj': 'TestGreyscaleBarsDisplay.test_exit_on_spacebar_press', 'line': 42, 'column': 4, 'endLine': 42, 'endColumn': 35, 'path': 'data/generated/docs_python/greyscale_bars_display/test_gpt_4o_2024_08_06_greyscale_bars_display.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_greyscale_bars_display', 'obj': 'TestGreyscaleBarsDisplay.test_exit_on_spacebar_press', 'line': 42, 'column': 42, 'endLine': 42, 'endColumn': 59, 'path': 'data/generated/docs_python/greyscale_bars_display/test_gpt_4o_2024_08_06_greyscale_bars_display.py', 'symbol': 'unused-argument', 'message': ""Unused argument 'mock_keys_pressed'"", 'message-id': 'W0613'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_greyscale_bars_display', 'obj': '', 'line': 2, 'column': 0, 'endLine': 2, 'endColumn': 42, 'path': 'data/generated/docs_python/greyscale_bars_display/test_gpt_4o_2024_08_06_greyscale_bars_display.py', 'symbol': 'unused-import', 'message': 'Unused MagicMock imported from unittest.mock', 'message-id': 'W0611'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_greyscale_bars_display', 'obj': '', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 98, 'path': 'data/generated/docs_python/greyscale_bars_display/test_gpt_4o_2024_08_06_greyscale_bars_display.py', 'symbol': 'unused-import', 'message': 'Unused set_colour imported from greyscale_bars_display', 'message-id': 'W0611'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_greyscale_bars_display', 'obj': '', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 98, 'path': 'data/generated/docs_python/greyscale_bars_display/test_gpt_4o_2024_08_06_greyscale_bars_display.py', 'symbol': 'unused-import', 'message': 'Unused box imported from greyscale_bars_display', 'message-id': 'W0611'}]",False
Guess the number,"Task

Write a program where the program chooses a number between   1   and   10.

A player is then prompted to enter a guess.   If the player guesses wrong,   then the prompt appears again until the guess is correct.

When the player has made a successful guess the computer will issue a   ""Well guessed!""   message,   and the program exits.

A   conditional loop   may be used to repeat the guessing until the user is correct.



Related tasks

   Bulls and cows
   Bulls and cows/Player
   Guess the number/With Feedback
   Mastermind

",Python,"import random
t,g=random.randint(1,10),0
g=int(input(""Guess a number that's between 1 and 10: ""))
while t!=g:g=int(input(""Guess again! ""))
print(""That's right!"")",161,5,"import unittest
from unittest.mock import patch
import random
import io
import sys

class TestGuessTheNumber(unittest.TestCase):

    @patch('random.randint', return_value=5)
    @patch('builtins.input', side_effect=['3', '7', '5'])
    def test_correct_guess_after_multiple_attempts(self, mock_input, mock_randint):
        captured_output = io.StringIO()
        sys.stdout = captured_output
        import guess_the_number
        sys.stdout = sys.__stdout__
        self.assertIn(""That's right!"", captured_output.getvalue())

    @patch('random.randint', return_value=8)
    @patch('builtins.input', side_effect=['8'])
    def test_correct_guess_first_attempt(self, mock_input, mock_randint):
        captured_output = io.StringIO()
        sys.stdout = captured_output
        import guess_the_number
        sys.stdout = sys.__stdout__
        self.assertIn(""That's right!"", captured_output.getvalue())

    @patch('random.randint', return_value=2)
    @patch('builtins.input', side_effect=['1', '3', '4', '2'])
    def test_correct_guess_after_several_attempts(self, mock_input, mock_randint):
        captured_output = io.StringIO()
        sys.stdout = captured_output
        import guess_the_number
        sys.stdout = sys.__stdout__
        self.assertIn(""That's right!"", captured_output.getvalue())

    @patch('random.randint', return_value=10)
    @patch('builtins.input', side_effect=['9', '10'])
    def test_correct_guess_after_one_wrong_attempt(self, mock_input, mock_randint):
        captured_output = io.StringIO()
        sys.stdout = captured_output
        import guess_the_number
        sys.stdout = sys.__stdout__
        self.assertIn(""That's right!"", captured_output.getvalue())

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/guess_the_number/test_gpt_4o_2024_08_06_guess_the_number.py,CompileStatus.OK,0.0,97.78,95.74,0.1,,25.0,0.7142317295074463,24.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_guess_the_number', 'obj': '', 'line': 8, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/guess_the_number/test_gpt_4o_2024_08_06_guess_the_number.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_guess_the_number', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/guess_the_number/test_gpt_4o_2024_08_06_guess_the_number.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_guess_the_number', 'obj': 'TestGuessTheNumber', 'line': 7, 'column': 0, 'endLine': 7, 'endColumn': 24, 'path': 'data/generated/docs_python/guess_the_number/test_gpt_4o_2024_08_06_guess_the_number.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_guess_the_number', 'obj': 'TestGuessTheNumber.test_correct_guess_after_multiple_attempts', 'line': 11, 'column': 4, 'endLine': 11, 'endColumn': 50, 'path': 'data/generated/docs_python/guess_the_number/test_gpt_4o_2024_08_06_guess_the_number.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_guess_the_number', 'obj': 'TestGuessTheNumber.test_correct_guess_after_multiple_attempts', 'line': 14, 'column': 8, 'endLine': 14, 'endColumn': 31, 'path': 'data/generated/docs_python/guess_the_number/test_gpt_4o_2024_08_06_guess_the_number.py', 'symbol': 'import-outside-toplevel', 'message': 'Import outside toplevel (guess_the_number)', 'message-id': 'C0415'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_guess_the_number', 'obj': 'TestGuessTheNumber.test_correct_guess_after_multiple_attempts', 'line': 11, 'column': 57, 'endLine': 11, 'endColumn': 67, 'path': 'data/generated/docs_python/guess_the_number/test_gpt_4o_2024_08_06_guess_the_number.py', 'symbol': 'unused-argument', 'message': ""Unused argument 'mock_input'"", 'message-id': 'W0613'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_guess_the_number', 'obj': 'TestGuessTheNumber.test_correct_guess_after_multiple_attempts', 'line': 11, 'column': 69, 'endLine': 11, 'endColumn': 81, 'path': 'data/generated/docs_python/guess_the_number/test_gpt_4o_2024_08_06_guess_the_number.py', 'symbol': 'unused-argument', 'message': ""Unused argument 'mock_randint'"", 'message-id': 'W0613'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_guess_the_number', 'obj': 'TestGuessTheNumber.test_correct_guess_after_multiple_attempts', 'line': 14, 'column': 8, 'endLine': 14, 'endColumn': 31, 'path': 'data/generated/docs_python/guess_the_number/test_gpt_4o_2024_08_06_guess_the_number.py', 'symbol': 'unused-import', 'message': 'Unused import guess_the_number', 'message-id': 'W0611'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_guess_the_number', 'obj': 'TestGuessTheNumber.test_correct_guess_first_attempt', 'line': 20, 'column': 4, 'endLine': 20, 'endColumn': 40, 'path': 'data/generated/docs_python/guess_the_number/test_gpt_4o_2024_08_06_guess_the_number.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_guess_the_number', 'obj': 'TestGuessTheNumber.test_correct_guess_first_attempt', 'line': 23, 'column': 8, 'endLine': 23, 'endColumn': 31, 'path': 'data/generated/docs_python/guess_the_number/test_gpt_4o_2024_08_06_guess_the_number.py', 'symbol': 'import-outside-toplevel', 'message': 'Import outside toplevel (guess_the_number)', 'message-id': 'C0415'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_guess_the_number', 'obj': 'TestGuessTheNumber.test_correct_guess_first_attempt', 'line': 20, 'column': 47, 'endLine': 20, 'endColumn': 57, 'path': 'data/generated/docs_python/guess_the_number/test_gpt_4o_2024_08_06_guess_the_number.py', 'symbol': 'unused-argument', 'message': ""Unused argument 'mock_input'"", 'message-id': 'W0613'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_guess_the_number', 'obj': 'TestGuessTheNumber.test_correct_guess_first_attempt', 'line': 20, 'column': 59, 'endLine': 20, 'endColumn': 71, 'path': 'data/generated/docs_python/guess_the_number/test_gpt_4o_2024_08_06_guess_the_number.py', 'symbol': 'unused-argument', 'message': ""Unused argument 'mock_randint'"", 'message-id': 'W0613'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_guess_the_number', 'obj': 'TestGuessTheNumber.test_correct_guess_first_attempt', 'line': 23, 'column': 8, 'endLine': 23, 'endColumn': 31, 'path': 'data/generated/docs_python/guess_the_number/test_gpt_4o_2024_08_06_guess_the_number.py', 'symbol': 'unused-import', 'message': 'Unused import guess_the_number', 'message-id': 'W0611'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_guess_the_number', 'obj': 'TestGuessTheNumber.test_correct_guess_after_several_attempts', 'line': 29, 'column': 4, 'endLine': 29, 'endColumn': 49, 'path': 'data/generated/docs_python/guess_the_number/test_gpt_4o_2024_08_06_guess_the_number.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_guess_the_number', 'obj': 'TestGuessTheNumber.test_correct_guess_after_several_attempts', 'line': 32, 'column': 8, 'endLine': 32, 'endColumn': 31, 'path': 'data/generated/docs_python/guess_the_number/test_gpt_4o_2024_08_06_guess_the_number.py', 'symbol': 'import-outside-toplevel', 'message': 'Import outside toplevel (guess_the_number)', 'message-id': 'C0415'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_guess_the_number', 'obj': 'TestGuessTheNumber.test_correct_guess_after_several_attempts', 'line': 29, 'column': 56, 'endLine': 29, 'endColumn': 66, 'path': 'data/generated/docs_python/guess_the_number/test_gpt_4o_2024_08_06_guess_the_number.py', 'symbol': 'unused-argument', 'message': ""Unused argument 'mock_input'"", 'message-id': 'W0613'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_guess_the_number', 'obj': 'TestGuessTheNumber.test_correct_guess_after_several_attempts', 'line': 29, 'column': 68, 'endLine': 29, 'endColumn': 80, 'path': 'data/generated/docs_python/guess_the_number/test_gpt_4o_2024_08_06_guess_the_number.py', 'symbol': 'unused-argument', 'message': ""Unused argument 'mock_randint'"", 'message-id': 'W0613'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_guess_the_number', 'obj': 'TestGuessTheNumber.test_correct_guess_after_several_attempts', 'line': 32, 'column': 8, 'endLine': 32, 'endColumn': 31, 'path': 'data/generated/docs_python/guess_the_number/test_gpt_4o_2024_08_06_guess_the_number.py', 'symbol': 'unused-import', 'message': 'Unused import guess_the_number', 'message-id': 'W0611'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_guess_the_number', 'obj': 'TestGuessTheNumber.test_correct_guess_after_one_wrong_attempt', 'line': 38, 'column': 4, 'endLine': 38, 'endColumn': 50, 'path': 'data/generated/docs_python/guess_the_number/test_gpt_4o_2024_08_06_guess_the_number.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_guess_the_number', 'obj': 'TestGuessTheNumber.test_correct_guess_after_one_wrong_attempt', 'line': 41, 'column': 8, 'endLine': 41, 'endColumn': 31, 'path': 'data/generated/docs_python/guess_the_number/test_gpt_4o_2024_08_06_guess_the_number.py', 'symbol': 'import-outside-toplevel', 'message': 'Import outside toplevel (guess_the_number)', 'message-id': 'C0415'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_guess_the_number', 'obj': 'TestGuessTheNumber.test_correct_guess_after_one_wrong_attempt', 'line': 38, 'column': 57, 'endLine': 38, 'endColumn': 67, 'path': 'data/generated/docs_python/guess_the_number/test_gpt_4o_2024_08_06_guess_the_number.py', 'symbol': 'unused-argument', 'message': ""Unused argument 'mock_input'"", 'message-id': 'W0613'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_guess_the_number', 'obj': 'TestGuessTheNumber.test_correct_guess_after_one_wrong_attempt', 'line': 38, 'column': 69, 'endLine': 38, 'endColumn': 81, 'path': 'data/generated/docs_python/guess_the_number/test_gpt_4o_2024_08_06_guess_the_number.py', 'symbol': 'unused-argument', 'message': ""Unused argument 'mock_randint'"", 'message-id': 'W0613'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_guess_the_number', 'obj': 'TestGuessTheNumber.test_correct_guess_after_one_wrong_attempt', 'line': 41, 'column': 8, 'endLine': 41, 'endColumn': 31, 'path': 'data/generated/docs_python/guess_the_number/test_gpt_4o_2024_08_06_guess_the_number.py', 'symbol': 'unused-import', 'message': 'Unused import guess_the_number', 'message-id': 'W0611'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_guess_the_number', 'obj': '', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 13, 'path': 'data/generated/docs_python/guess_the_number/test_gpt_4o_2024_08_06_guess_the_number.py', 'symbol': 'unused-import', 'message': 'Unused import random', 'message-id': 'W0611'}]",False
Guess the number/With feedback (player),"Task

Write a player for the game that follows the following rules:

The scorer will choose a number between set limits. The computer player will print a guess of the target number. The computer asks for a score of whether its guess is higher than, lower than, or equal to the target. The computer guesses, and the scorer scores, in turn, until the computer correctly guesses the target number.
The computer should guess intelligently based on the accumulated scores given. One way is to use a Binary search based algorithm.



Related tasks

   Guess the number/With Feedback
   Bulls and cows/Player

",Python,"inclusive_range = mn, mx = (1, 10)
 
print('''\
Think of a number between %i and %i and wait for me to guess it.
On every guess of mine you should state whether the guess was
too high, too low, or equal to your number by typing h, l, or =
''' % inclusive_range)
 
i = 0
while True:
    i += 1
    guess = (mn+mx)//2
    txt = input(""Guess %2i is: %2i. The score for which is (h,l,=): ""
                % (i, guess)).strip().lower()[0]
    if txt not in 'hl=':
        print(""  I don't understand your input of '%s' ?"" % txt)
        continue
    if txt == 'h':
        mx = guess-1
    if txt == 'l':
        mn = guess+1
    if txt == '=':
        print(""  Ye-Haw!!"")
        break
    if (mn > mx) or (mn < inclusive_range[0]) or (mx > inclusive_range[1]):
        print(""Please check your scoring as I cannot find the value"")
        break
 
print(""\nThanks for keeping score."")",881,29,"import unittest
from unittest.mock import patch

class TestGuessTheNumberWithFeedbackPlayer(unittest.TestCase):

    @patch('builtins.input', side_effect=['l', 'l', 'h', '=', 'h'])
    def test_correct_guess(self, mock_input):
        with patch('builtins.print') as mock_print:
            mn, mx = 1, 10
            inclusive_range = mn, mx
            i = 0
            while True:
                i += 1
                guess = (mn + mx) // 2
                txt = mock_input(""Guess %2i is: %2i. The score for which is (h,l,=): ""
                                 % (i, guess)).strip().lower()[0]
                if txt not in 'hl=':
                    mock_print(""  I don't understand your input of '%s' ?"" % txt)
                    continue
                if txt == 'h':
                    mx = guess - 1
                if txt == 'l':
                    mn = guess + 1
                if txt == '=':
                    mock_print(""  Ye-Haw!!"")
                    break
                if (mn > mx) or (mn < inclusive_range[0]) or (mx > inclusive_range[1]):
                    mock_print(""Please check your scoring as I cannot find the value"")
                    break

            mock_print.assert_any_call(""  Ye-Haw!!"")

    @patch('builtins.input', side_effect=['h', 'h', 'h'])
    def test_invalid_score(self, mock_input):
        with patch('builtins.print') as mock_print:
            mn, mx = 1, 10
            inclusive_range = mn, mx
            i = 0
            while True:
                i += 1
                guess = (mn + mx) // 2
                txt = mock_input(""Guess %2i is: %2i. The score for which is (h,l,=): ""
                                 % (i, guess)).strip().lower()[0]
                if txt not in 'hl=':
                    mock_print(""  I don't understand your input of '%s' ?"" % txt)
                    continue
                if txt == 'h':
                    mx = guess - 1
                if txt == 'l':
                    mn = guess + 1
                if txt == '=':
                    mock_print(""  Ye-Haw!!"")
                    break
                if (mn > mx) or (mn < inclusive_range[0]) or (mx > inclusive_range[1]):
                    mock_print(""Please check your scoring as I cannot find the value"")
                    break

            mock_print.assert_any_call(""Please check your scoring as I cannot find the value"")

    @patch('builtins.input', side_effect=['x', 'l', 'h', '='])
    def test_invalid_input(self, mock_input):
        with patch('builtins.print') as mock_print:
            mn, mx = 1, 10
            inclusive_range = mn, mx
            i = 0
            while True:
                i += 1
                guess = (mn + mx) // 2
                txt = mock_input(""Guess %2i is: %2i. The score for which is (h,l,=): ""
                                 % (i, guess)).strip().lower()[0]
                if txt not in 'hl=':
                    mock_print(""  I don't understand your input of '%s' ?"" % txt)
                    continue
                if txt == 'h':
                    mx = guess - 1
                if txt == 'l':
                    mn = guess + 1
                if txt == '=':
                    mock_print(""  Ye-Haw!!"")
                    break
                if (mn > mx) or (mn < inclusive_range[0]) or (mx > inclusive_range[1]):
                    mock_print(""Please check your scoring as I cannot find the value"")
                    break

            mock_print.assert_any_call(""  I don't understand your input of 'x' ?"")

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/guess_the_number_with_feedback_player/test_gpt_4o_2024_08_06_guess_the_number_with_feedback_player.py,CompileStatus.OK,0.0,66.33,65.07,0.04,,66.67,0.6528768539428711,11.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_guess_the_number_with_feedback_player', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/guess_the_number_with_feedback_player/test_gpt_4o_2024_08_06_guess_the_number_with_feedback_player.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_guess_the_number_with_feedback_player', 'obj': 'TestGuessTheNumberWithFeedbackPlayer', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 42, 'path': 'data/generated/docs_python/guess_the_number_with_feedback_player/test_gpt_4o_2024_08_06_guess_the_number_with_feedback_player.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_guess_the_number_with_feedback_player', 'obj': 'TestGuessTheNumberWithFeedbackPlayer.test_correct_guess', 'line': 7, 'column': 4, 'endLine': 7, 'endColumn': 26, 'path': 'data/generated/docs_python/guess_the_number_with_feedback_player/test_gpt_4o_2024_08_06_guess_the_number_with_feedback_player.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_guess_the_number_with_feedback_player', 'obj': 'TestGuessTheNumberWithFeedbackPlayer.test_correct_guess', 'line': 15, 'column': 33, 'endLine': 15, 'endColumn': 86, 'path': 'data/generated/docs_python/guess_the_number_with_feedback_player/test_gpt_4o_2024_08_06_guess_the_number_with_feedback_player.py', 'symbol': 'consider-using-f-string', 'message': 'Formatting a regular string which could be an f-string', 'message-id': 'C0209'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_guess_the_number_with_feedback_player', 'obj': 'TestGuessTheNumberWithFeedbackPlayer.test_correct_guess', 'line': 18, 'column': 31, 'endLine': 18, 'endColumn': 74, 'path': 'data/generated/docs_python/guess_the_number_with_feedback_player/test_gpt_4o_2024_08_06_guess_the_number_with_feedback_player.py', 'symbol': 'consider-using-f-string', 'message': 'Formatting a regular string which could be an f-string', 'message-id': 'C0209'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_guess_the_number_with_feedback_player', 'obj': 'TestGuessTheNumberWithFeedbackPlayer.test_invalid_score', 'line': 34, 'column': 4, 'endLine': 34, 'endColumn': 26, 'path': 'data/generated/docs_python/guess_the_number_with_feedback_player/test_gpt_4o_2024_08_06_guess_the_number_with_feedback_player.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_guess_the_number_with_feedback_player', 'obj': 'TestGuessTheNumberWithFeedbackPlayer.test_invalid_score', 'line': 42, 'column': 33, 'endLine': 42, 'endColumn': 86, 'path': 'data/generated/docs_python/guess_the_number_with_feedback_player/test_gpt_4o_2024_08_06_guess_the_number_with_feedback_player.py', 'symbol': 'consider-using-f-string', 'message': 'Formatting a regular string which could be an f-string', 'message-id': 'C0209'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_guess_the_number_with_feedback_player', 'obj': 'TestGuessTheNumberWithFeedbackPlayer.test_invalid_score', 'line': 45, 'column': 31, 'endLine': 45, 'endColumn': 74, 'path': 'data/generated/docs_python/guess_the_number_with_feedback_player/test_gpt_4o_2024_08_06_guess_the_number_with_feedback_player.py', 'symbol': 'consider-using-f-string', 'message': 'Formatting a regular string which could be an f-string', 'message-id': 'C0209'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_guess_the_number_with_feedback_player', 'obj': 'TestGuessTheNumberWithFeedbackPlayer.test_invalid_input', 'line': 61, 'column': 4, 'endLine': 61, 'endColumn': 26, 'path': 'data/generated/docs_python/guess_the_number_with_feedback_player/test_gpt_4o_2024_08_06_guess_the_number_with_feedback_player.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_guess_the_number_with_feedback_player', 'obj': 'TestGuessTheNumberWithFeedbackPlayer.test_invalid_input', 'line': 69, 'column': 33, 'endLine': 69, 'endColumn': 86, 'path': 'data/generated/docs_python/guess_the_number_with_feedback_player/test_gpt_4o_2024_08_06_guess_the_number_with_feedback_player.py', 'symbol': 'consider-using-f-string', 'message': 'Formatting a regular string which could be an f-string', 'message-id': 'C0209'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_guess_the_number_with_feedback_player', 'obj': 'TestGuessTheNumberWithFeedbackPlayer.test_invalid_input', 'line': 72, 'column': 31, 'endLine': 72, 'endColumn': 74, 'path': 'data/generated/docs_python/guess_the_number_with_feedback_player/test_gpt_4o_2024_08_06_guess_the_number_with_feedback_player.py', 'symbol': 'consider-using-f-string', 'message': 'Formatting a regular string which could be an f-string', 'message-id': 'C0209'}]",False
HTTP,"Task

Access and print a URL's content (the located resource) to the console.

There is a separate task for HTTPS Requests.



",Python," 
import urllib.request
print(urllib.request.urlopen(""http://rosettacode.org"").read())
 ",88,4,"import unittest
from unittest.mock import patch, MagicMock
import urllib.request

class TestHttpRequest(unittest.TestCase):

    @patch('urllib.request.urlopen')
    def test_urlopen_success(self, mock_urlopen):
        # Mock the response to simulate a successful HTTP request
        mock_response = MagicMock()
        mock_response.read.return_value = b'This is a test response'
        mock_urlopen.return_value = mock_response

        # Call the function that uses urlopen
        response = urllib.request.urlopen(""http://rosettacode.org"").read()

        # Assert that urlopen was called with the correct URL
        mock_urlopen.assert_called_with(""http://rosettacode.org"")

        # Assert that the response is as expected
        self.assertEqual(response, b'This is a test response')

    @patch('urllib.request.urlopen')
    def test_urlopen_failure(self, mock_urlopen):
        # Simulate an HTTP error
        mock_urlopen.side_effect = urllib.error.URLError('Failed to reach server')

        # Call the function and handle the exception
        with self.assertRaises(urllib.error.URLError):
            urllib.request.urlopen(""http://rosettacode.org"").read()

# Run the tests
if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/http/test_gpt_4o_2024_08_06_http.py,CompileStatus.OK,0.0,23.81,20.0,0.16,,,0.7042341232299805,6.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_http', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/http/test_gpt_4o_2024_08_06_http.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_http', 'obj': 'TestHttpRequest', 'line': 5, 'column': 0, 'endLine': 5, 'endColumn': 21, 'path': 'data/generated/docs_python/http/test_gpt_4o_2024_08_06_http.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_http', 'obj': 'TestHttpRequest.test_urlopen_success', 'line': 8, 'column': 4, 'endLine': 8, 'endColumn': 28, 'path': 'data/generated/docs_python/http/test_gpt_4o_2024_08_06_http.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'refactor', 'module': 'test_gpt_4o_2024_08_06_http', 'obj': 'TestHttpRequest.test_urlopen_success', 'line': 15, 'column': 19, 'endLine': 15, 'endColumn': 67, 'path': 'data/generated/docs_python/http/test_gpt_4o_2024_08_06_http.py', 'symbol': 'consider-using-with', 'message': ""Consider using 'with' for resource-allocating operations"", 'message-id': 'R1732'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_http', 'obj': 'TestHttpRequest.test_urlopen_failure', 'line': 24, 'column': 4, 'endLine': 24, 'endColumn': 28, 'path': 'data/generated/docs_python/http/test_gpt_4o_2024_08_06_http.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'refactor', 'module': 'test_gpt_4o_2024_08_06_http', 'obj': 'TestHttpRequest.test_urlopen_failure', 'line': 30, 'column': 12, 'endLine': 30, 'endColumn': 60, 'path': 'data/generated/docs_python/http/test_gpt_4o_2024_08_06_http.py', 'symbol': 'consider-using-with', 'message': ""Consider using 'with' for resource-allocating operations"", 'message-id': 'R1732'}]",False
Hailstone sequence,"The Hailstone sequence of numbers can be generated from a starting positive integer,   n   by:

   If   n   is     1     then the sequence ends.
   If   n   is   even then the next   n   of the sequence    = n/2
   If   n   is   odd   then the next   n   of the sequence    = (3 * n) + 1


The (unproven) Collatz conjecture is that the hailstone sequence for any starting number always terminates.



This sequence was named by Lothar Collatz in 1937   (or possibly in 1939),   and is also known as (the):

   hailstone sequence,   hailstone numbers
   3x + 2 mapping,   3n + 1 problem
   Collatz sequence
   Hasse's algorithm
   Kakutani's problem
   Syracuse algorithm,   Syracuse problem
   Thwaites conjecture
   Ulam's problem


The hailstone sequence is also known as   hailstone numbers   (because the values are usually subject to multiple descents and ascents like hailstones in a cloud).



Task

 Create a routine to generate the hailstone sequence for a number.
 Use the routine to show that the hailstone sequence for the number 27 has 112 elements starting with 27, 82, 41, 124 and ending with 8, 4, 2, 1
 Show the number less than 100,000 which has the longest hailstone sequence together with that sequence's length.
   (But don't show the actual sequence!)


See also

   xkcd (humourous).
   The Notorious Collatz conjecture Terence Tao, UCLA (Presentation, pdf).
   The Simplest Math Problem No One Can Solve Veritasium (video, sponsored).

",Python,"def hailstone(n):
    seq = [n]
    while n>1:
        n = 3*n + 1 if n & 1 else n//2
        seq.append(n)
    return seq
 
if __name__ == '__main__':
    h = hailstone(27)
    assert len(h)==112 and h[:4]==[27, 82, 41, 124] and h[-4:]==[8, 4, 2, 1]
    print(""Maximum length %i was found for hailstone(%i) for numbers <100,000"" %
          max((len(hailstone(i)), i) for i in range(1,100000)))",395,12,"import unittest
from hailstone_sequence import hailstone

class TestHailstoneSequence(unittest.TestCase):

    def test_hailstone_sequence_27(self):
        # Test the hailstone sequence for the number 27
        sequence = hailstone(27)
        self.assertEqual(len(sequence), 112)
        self.assertEqual(sequence[:4], [27, 82, 41, 124])
        self.assertEqual(sequence[-4:], [8, 4, 2, 1])

    def test_hailstone_sequence_1(self):
        # Test the hailstone sequence for the number 1
        sequence = hailstone(1)
        self.assertEqual(sequence, [1])

    def test_hailstone_sequence_even(self):
        # Test the hailstone sequence for an even number
        sequence = hailstone(16)
        self.assertEqual(sequence, [16, 8, 4, 2, 1])

    def test_hailstone_sequence_odd(self):
        # Test the hailstone sequence for an odd number
        sequence = hailstone(7)
        self.assertEqual(sequence, [7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1])

    def test_longest_hailstone_sequence_under_100000(self):
        # Test to find the number less than 100,000 with the longest hailstone sequence
        max_length = 0
        number_with_max_length = 0
        for i in range(1, 100000):
            length = len(hailstone(i))
            if length > max_length:
                max_length = length
                number_with_max_length = i
        self.assertEqual(number_with_max_length, 77031)  # Known result
        self.assertEqual(max_length, 351)  # Known result

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/hailstone_sequence/test_gpt_4o_2024_08_06_hailstone_sequence.py,CompileStatus.OK,0.0,89.74,84.31,0.28,2.67,100.0,1.9928092956542969,7.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hailstone_sequence', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/hailstone_sequence/test_gpt_4o_2024_08_06_hailstone_sequence.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hailstone_sequence', 'obj': 'TestHailstoneSequence', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 27, 'path': 'data/generated/docs_python/hailstone_sequence/test_gpt_4o_2024_08_06_hailstone_sequence.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hailstone_sequence', 'obj': 'TestHailstoneSequence.test_hailstone_sequence_27', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 34, 'path': 'data/generated/docs_python/hailstone_sequence/test_gpt_4o_2024_08_06_hailstone_sequence.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hailstone_sequence', 'obj': 'TestHailstoneSequence.test_hailstone_sequence_1', 'line': 13, 'column': 4, 'endLine': 13, 'endColumn': 33, 'path': 'data/generated/docs_python/hailstone_sequence/test_gpt_4o_2024_08_06_hailstone_sequence.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hailstone_sequence', 'obj': 'TestHailstoneSequence.test_hailstone_sequence_even', 'line': 18, 'column': 4, 'endLine': 18, 'endColumn': 36, 'path': 'data/generated/docs_python/hailstone_sequence/test_gpt_4o_2024_08_06_hailstone_sequence.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hailstone_sequence', 'obj': 'TestHailstoneSequence.test_hailstone_sequence_odd', 'line': 23, 'column': 4, 'endLine': 23, 'endColumn': 35, 'path': 'data/generated/docs_python/hailstone_sequence/test_gpt_4o_2024_08_06_hailstone_sequence.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hailstone_sequence', 'obj': 'TestHailstoneSequence.test_longest_hailstone_sequence_under_100000', 'line': 28, 'column': 4, 'endLine': 28, 'endColumn': 52, 'path': 'data/generated/docs_python/hailstone_sequence/test_gpt_4o_2024_08_06_hailstone_sequence.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Hamming numbers,"Hamming numbers are numbers of the form  

    H = 2i × 3j × 5k
           where
     i,  j,  k  ≥  0

Hamming numbers   are also known as   ugly numbers   and also   5-smooth numbers   (numbers whose prime divisors are less or equal to 5).



Task

Generate the sequence of Hamming numbers, in increasing order.   In particular:

 Show the   first twenty   Hamming numbers.
 Show the   1691st   Hamming number (the last one below   231).
 Show the   one millionth   Hamming number (if the language – or a convenient library – supports arbitrary-precision integers).


Related tasks

 Humble numbers
 N-smooth numbers


References

 Wikipedia entry:   Hamming numbers     (this link is re-directed to   Regular number).
 Wikipedia entry:   Smooth number
 OEIS entry:   A051037   5-smooth   or   Hamming numbers
 Hamming problem from Dr. Dobb's CodeTalk (dead link as of Sep 2011; parts of the thread here and here).

",Python,"from itertools import islice
 
def hamming2():
    '''\
    This version is based on a snippet from:
        https://web.archive.org/web/20081219014725/http://dobbscodetalk.com:80
                         /index.php?option=com_content&task=view&id=913&Itemid=85
        http://www.drdobbs.com/architecture-and-design/hamming-problem/228700538
        Hamming problem
        Written by Will Ness
        December 07, 2008
 
        When expressed in some imaginary pseudo-C with automatic
        unlimited storage allocation and BIGNUM arithmetics, it can be
        expressed as:
            hamming = h where
              array h;
              n=0; h[0]=1; i=0; j=0; k=0;
              x2=2*h[ i ]; x3=3*h[j]; x5=5*h[k];
              repeat:
                h[++n] = min(x2,x3,x5);
                if (x2==h[n]) { x2=2*h[++i]; }
                if (x3==h[n]) { x3=3*h[++j]; }
                if (x5==h[n]) { x5=5*h[++k]; }
    '''
    h = 1
    _h=[h]    # memoized
    multipliers  = (2, 3, 5)
    multindeces  = [0 for i in multipliers] # index into _h for multipliers
    multvalues   = [x * _h[i] for x,i in zip(multipliers, multindeces)]
    yield h
    while True:
        h = min(multvalues)
        _h.append(h)
        for (n,(v,x,i)) in enumerate(zip(multvalues, multipliers, multindeces)):
            if v == h:
                i += 1
                multindeces[n] = i
                multvalues[n]  = x * _h[i]
        # cap the memoization
        mini = min(multindeces)
        if mini >= 1000:
            del _h[:mini]
            multindeces = [i - mini for i in multindeces]
        #
        yield h",1628,46,"import unittest
from itertools import islice

# Assuming the hamming2 function is defined in a module named hamming_numbers
from hamming_numbers import hamming2

class TestHammingNumbers(unittest.TestCase):

    def test_first_twenty_hamming_numbers(self):
        expected_first_twenty = [
            1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15, 16, 18, 20, 24, 25, 27, 30, 32, 36
        ]
        generated_first_twenty = list(islice(hamming2(), 20))
        self.assertEqual(generated_first_twenty, expected_first_twenty)

    def test_1691st_hamming_number(self):
        # The 1691st Hamming number is known to be 2125764000
        hamming_1691st = next(islice(hamming2(), 1690, 1691))
        self.assertEqual(hamming_1691st, 2125764000)

    def test_one_millionth_hamming_number(self):
        # This test assumes the environment supports arbitrary-precision integers
        # The one millionth Hamming number is known to be 519312780448000
        hamming_one_millionth = next(islice(hamming2(), 999999, 1000000))
        self.assertEqual(hamming_one_millionth, 519312780448000)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/hamming_numbers/test_gpt_4o_2024_08_06_hamming_numbers.py,CompileStatus.OK,0.0,97.3,96.08,0.18,0.38,66.67,1.7946202754974363,5.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hamming_numbers', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/hamming_numbers/test_gpt_4o_2024_08_06_hamming_numbers.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hamming_numbers', 'obj': 'TestHammingNumbers', 'line': 7, 'column': 0, 'endLine': 7, 'endColumn': 24, 'path': 'data/generated/docs_python/hamming_numbers/test_gpt_4o_2024_08_06_hamming_numbers.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hamming_numbers', 'obj': 'TestHammingNumbers.test_first_twenty_hamming_numbers', 'line': 9, 'column': 4, 'endLine': 9, 'endColumn': 41, 'path': 'data/generated/docs_python/hamming_numbers/test_gpt_4o_2024_08_06_hamming_numbers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hamming_numbers', 'obj': 'TestHammingNumbers.test_1691st_hamming_number', 'line': 16, 'column': 4, 'endLine': 16, 'endColumn': 34, 'path': 'data/generated/docs_python/hamming_numbers/test_gpt_4o_2024_08_06_hamming_numbers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hamming_numbers', 'obj': 'TestHammingNumbers.test_one_millionth_hamming_number', 'line': 21, 'column': 4, 'endLine': 21, 'endColumn': 41, 'path': 'data/generated/docs_python/hamming_numbers/test_gpt_4o_2024_08_06_hamming_numbers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Hash join,"An inner join is an operation that combines two data tables into one table, based on matching column values. The simplest way of implementing this operation is the nested loop join algorithm, but a more scalable alternative is the hash join algorithm.

Task[edit]
Implement the ""hash join"" algorithm, and demonstrate that it passes the test-case listed below.

You should represent the tables as data structures that feel natural in your programming language.

Guidance
The ""hash join"" algorithm consists of two steps:

 Hash phase: Create a multimap from one of the two tables, mapping from each join column value to all the rows that contain it.

 The multimap must support hash-based lookup which scales better than a simple linear search, because that's the whole point of this algorithm.
 Ideally we should create the multimap for the smaller table, thus minimizing its creation time and memory size.
 Join phase: Scan the other table, and find matching rows by looking in the multimap created before.


In pseudo-code, the algorithm could be expressed as follows:

let A = the first input table (or ideally, the larger one)
let B = the second input table (or ideally, the smaller one)
let jA = the join column ID of table A
let jB = the join column ID of table B
let MB = a multimap for mapping from single values to multiple rows of table B (starts out empty)
let C = the output table (starts out empty)

for each row b in table B:
   place b in multimap MB under key b(jB)

for each row a in table A:
   for each row b in multimap MB under key a(jA):
      let c = the concatenation of row a and row b
      place row c in table C

Test-case


 Input

 Output





 A =




 Age
 Name


 27
 Jonah


 18
 Alan


 28
 Glory


 18
 Popeye


 28
 Alan




 B =




 Character
 Nemesis


 Jonah
 Whales


 Jonah
 Spiders


 Alan
 Ghosts


 Alan
 Zombies


 Glory
 Buffy



 jA =

 Name (i.e. column 1)

 jB =

 Character (i.e. column 0)





 A.Age
 A.Name
 B.Character
 B.Nemesis


 27
 Jonah
 Jonah
 Whales


 27
 Jonah
 Jonah
 Spiders


 18
 Alan
 Alan
 Ghosts


 18
 Alan
 Alan
 Zombies


 28
 Glory
 Glory
 Buffy


 28
 Alan
 Alan
 Ghosts


 28
 Alan
 Alan
 Zombies


The order of the rows in the output table is not significant.

If you're using numerically indexed arrays to represent table rows (rather than referring to columns by name), you could represent the output rows in the form [[27, ""Jonah""], [""Jonah"", ""Whales""]].



",Python,"from collections import defaultdict
 
def hashJoin(table1, index1, table2, index2):
    h = defaultdict(list)
    # hash phase
    for s in table1:
        h[s[index1]].append(s)
    # join phase
    return [(s, r) for r in table2 for s in h[r[index2]]]
 
table1 = [(27, ""Jonah""),
          (18, ""Alan""),
          (28, ""Glory""),
          (18, ""Popeye""),
          (28, ""Alan"")]
table2 = [(""Jonah"", ""Whales""),
          (""Jonah"", ""Spiders""),
          (""Alan"", ""Ghosts""),
          (""Alan"", ""Zombies""),
          (""Glory"", ""Buffy"")]
 
for row in hashJoin(table1, 1, table2, 0):
    print(row)",593,23,"import unittest
from collections import defaultdict

def hashJoin(table1, index1, table2, index2):
    h = defaultdict(list)
    # hash phase
    for s in table1:
        h[s[index1]].append(s)
    # join phase
    return [(s, r) for r in table2 for s in h[r[index2]]]

class TestHashJoin(unittest.TestCase):
    def setUp(self):
        self.table1 = [
            (27, ""Jonah""),
            (18, ""Alan""),
            (28, ""Glory""),
            (18, ""Popeye""),
            (28, ""Alan"")
        ]
        self.table2 = [
            (""Jonah"", ""Whales""),
            (""Jonah"", ""Spiders""),
            (""Alan"", ""Ghosts""),
            (""Alan"", ""Zombies""),
            (""Glory"", ""Buffy"")
        ]
        self.expected_output = [
            ((27, ""Jonah""), (""Jonah"", ""Whales"")),
            ((27, ""Jonah""), (""Jonah"", ""Spiders"")),
            ((18, ""Alan""), (""Alan"", ""Ghosts"")),
            ((18, ""Alan""), (""Alan"", ""Zombies"")),
            ((28, ""Glory""), (""Glory"", ""Buffy"")),
            ((28, ""Alan""), (""Alan"", ""Ghosts"")),
            ((28, ""Alan""), (""Alan"", ""Zombies""))
        ]

    def test_hash_join(self):
        result = hashJoin(self.table1, 1, self.table2, 0)
        self.assertEqual(sorted(result), sorted(self.expected_output))

    def test_empty_tables(self):
        result = hashJoin([], 1, [], 0)
        self.assertEqual(result, [])

    def test_no_matches(self):
        table1 = [(1, ""A""), (2, ""B"")]
        table2 = [(""C"", ""X""), (""D"", ""Y"")]
        result = hashJoin(table1, 1, table2, 0)
        self.assertEqual(result, [])

    def test_single_match(self):
        table1 = [(1, ""A"")]
        table2 = [(""A"", ""X"")]
        expected_output = [((1, ""A""), (""A"", ""X""))]
        result = hashJoin(table1, 1, table2, 0)
        self.assertEqual(result, expected_output)

    def test_multiple_matches(self):
        table1 = [(1, ""A""), (2, ""A"")]
        table2 = [(""A"", ""X""), (""A"", ""Y"")]
        expected_output = [
            ((1, ""A""), (""A"", ""X"")),
            ((1, ""A""), (""A"", ""Y"")),
            ((2, ""A""), (""A"", ""X"")),
            ((2, ""A""), (""A"", ""Y""))
        ]
        result = hashJoin(table1, 1, table2, 0)
        self.assertEqual(sorted(result), sorted(expected_output))

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/hash_join/test_gpt_4o_2024_08_06_hash_join.py,CompileStatus.OK,0.0,76.6,69.49,0.09,1.25,100.0,0.5461220741271973,9.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hash_join', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/hash_join/test_gpt_4o_2024_08_06_hash_join.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hash_join', 'obj': 'hashJoin', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 12, 'path': 'data/generated/docs_python/hash_join/test_gpt_4o_2024_08_06_hash_join.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hash_join', 'obj': 'hashJoin', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 12, 'path': 'data/generated/docs_python/hash_join/test_gpt_4o_2024_08_06_hash_join.py', 'symbol': 'invalid-name', 'message': 'Function name ""hashJoin"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hash_join', 'obj': 'TestHashJoin', 'line': 12, 'column': 0, 'endLine': 12, 'endColumn': 18, 'path': 'data/generated/docs_python/hash_join/test_gpt_4o_2024_08_06_hash_join.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hash_join', 'obj': 'TestHashJoin.test_hash_join', 'line': 38, 'column': 4, 'endLine': 38, 'endColumn': 22, 'path': 'data/generated/docs_python/hash_join/test_gpt_4o_2024_08_06_hash_join.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hash_join', 'obj': 'TestHashJoin.test_empty_tables', 'line': 42, 'column': 4, 'endLine': 42, 'endColumn': 25, 'path': 'data/generated/docs_python/hash_join/test_gpt_4o_2024_08_06_hash_join.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hash_join', 'obj': 'TestHashJoin.test_no_matches', 'line': 46, 'column': 4, 'endLine': 46, 'endColumn': 23, 'path': 'data/generated/docs_python/hash_join/test_gpt_4o_2024_08_06_hash_join.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hash_join', 'obj': 'TestHashJoin.test_single_match', 'line': 52, 'column': 4, 'endLine': 52, 'endColumn': 25, 'path': 'data/generated/docs_python/hash_join/test_gpt_4o_2024_08_06_hash_join.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hash_join', 'obj': 'TestHashJoin.test_multiple_matches', 'line': 59, 'column': 4, 'endLine': 59, 'endColumn': 29, 'path': 'data/generated/docs_python/hash_join/test_gpt_4o_2024_08_06_hash_join.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Hello world/Line printer,"Task

Cause a line printer attached to the computer to print a line containing the message:    Hello World!



Note

A line printer is not the same as standard output.

A   line printer   was an older-style printer which prints one line at a time to a continuous ream of paper.

With some systems, a line printer can be any device attached to an appropriate port (such as a parallel port).



",Python,"lp = open(""/dev/lp0"")
lp.write(""Hello World!\n"")
lp.close()",59,3,"import unittest
from unittest.mock import mock_open, patch

class TestHelloWorldLinePrinter(unittest.TestCase):
    @patch(""builtins.open"", new_callable=mock_open)
    def test_line_printer_output(self, mock_open):
        # Import the module which contains the code to be tested
        import hello_world_line_printer

        # Check if the file was opened correctly
        mock_open.assert_called_once_with(""/dev/lp0"")

        # Check if the correct message was written to the file
        mock_open().write.assert_called_once_with(""Hello World!\n"")

        # Check if the file was closed
        mock_open().close.assert_called_once()

if __name__ == ""__main__"":
    unittest.main()
",./data/generated/docs_python/hello_world_line_printer/test_gpt_4o_2024_08_06_hello_world_line_printer.py,CompileStatus.OK,0.0,92.86,87.5,0.27,,100.0,0.543637752532959,9.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hello_world_line_printer', 'obj': '', 'line': 9, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/hello_world_line_printer/test_gpt_4o_2024_08_06_hello_world_line_printer.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hello_world_line_printer', 'obj': '', 'line': 12, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/hello_world_line_printer/test_gpt_4o_2024_08_06_hello_world_line_printer.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hello_world_line_printer', 'obj': '', 'line': 15, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/hello_world_line_printer/test_gpt_4o_2024_08_06_hello_world_line_printer.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hello_world_line_printer', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/hello_world_line_printer/test_gpt_4o_2024_08_06_hello_world_line_printer.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hello_world_line_printer', 'obj': 'TestHelloWorldLinePrinter', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 31, 'path': 'data/generated/docs_python/hello_world_line_printer/test_gpt_4o_2024_08_06_hello_world_line_printer.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hello_world_line_printer', 'obj': 'TestHelloWorldLinePrinter.test_line_printer_output', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 32, 'path': 'data/generated/docs_python/hello_world_line_printer/test_gpt_4o_2024_08_06_hello_world_line_printer.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_hello_world_line_printer', 'obj': 'TestHelloWorldLinePrinter.test_line_printer_output', 'line': 6, 'column': 39, 'endLine': 6, 'endColumn': 48, 'path': 'data/generated/docs_python/hello_world_line_printer/test_gpt_4o_2024_08_06_hello_world_line_printer.py', 'symbol': 'redefined-outer-name', 'message': ""Redefining name 'mock_open' from outer scope (line 2)"", 'message-id': 'W0621'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hello_world_line_printer', 'obj': 'TestHelloWorldLinePrinter.test_line_printer_output', 'line': 8, 'column': 8, 'endLine': 8, 'endColumn': 39, 'path': 'data/generated/docs_python/hello_world_line_printer/test_gpt_4o_2024_08_06_hello_world_line_printer.py', 'symbol': 'import-outside-toplevel', 'message': 'Import outside toplevel (hello_world_line_printer)', 'message-id': 'C0415'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_hello_world_line_printer', 'obj': 'TestHelloWorldLinePrinter.test_line_printer_output', 'line': 8, 'column': 8, 'endLine': 8, 'endColumn': 39, 'path': 'data/generated/docs_python/hello_world_line_printer/test_gpt_4o_2024_08_06_hello_world_line_printer.py', 'symbol': 'unused-import', 'message': 'Unused import hello_world_line_printer', 'message-id': 'W0611'}]",False
Hello world/Newline omission,"Some languages automatically insert a newline after outputting a string, unless measures are taken to prevent its output.



Task

Display the string   Goodbye, World!   without a trailing newline.



Related tasks

   Hello world/Graphical
   Hello world/Line Printer
   Hello world/Standard error
   Hello world/Text

",Python,"import sys
sys.stdout.write(""Goodbye, World!"")",46,2,"import unittest
import io
import sys

class TestGoodbyeWorldOutput(unittest.TestCase):
    def test_goodbye_world_no_newline(self):
        # Redirect stdout to capture the output
        captured_output = io.StringIO()
        sys.stdout = captured_output

        # Import the module to execute the code
        import hello_world_newline_omission

        # Reset redirect.
        sys.stdout = sys.__stdout__

        # Check the output
        self.assertEqual(captured_output.getvalue(), ""Goodbye, World!"")

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/hello_world_newline_omission/test_gpt_4o_2024_08_06_hello_world_newline_omission.py,CompileStatus.OK,0.0,92.86,87.5,0.08,,100.0,0.9082467555999756,5.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hello_world_newline_omission', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/hello_world_newline_omission/test_gpt_4o_2024_08_06_hello_world_newline_omission.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hello_world_newline_omission', 'obj': 'TestGoodbyeWorldOutput', 'line': 5, 'column': 0, 'endLine': 5, 'endColumn': 28, 'path': 'data/generated/docs_python/hello_world_newline_omission/test_gpt_4o_2024_08_06_hello_world_newline_omission.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hello_world_newline_omission', 'obj': 'TestGoodbyeWorldOutput.test_goodbye_world_no_newline', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 37, 'path': 'data/generated/docs_python/hello_world_newline_omission/test_gpt_4o_2024_08_06_hello_world_newline_omission.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hello_world_newline_omission', 'obj': 'TestGoodbyeWorldOutput.test_goodbye_world_no_newline', 'line': 12, 'column': 8, 'endLine': 12, 'endColumn': 43, 'path': 'data/generated/docs_python/hello_world_newline_omission/test_gpt_4o_2024_08_06_hello_world_newline_omission.py', 'symbol': 'import-outside-toplevel', 'message': 'Import outside toplevel (hello_world_newline_omission)', 'message-id': 'C0415'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_hello_world_newline_omission', 'obj': 'TestGoodbyeWorldOutput.test_goodbye_world_no_newline', 'line': 12, 'column': 8, 'endLine': 12, 'endColumn': 43, 'path': 'data/generated/docs_python/hello_world_newline_omission/test_gpt_4o_2024_08_06_hello_world_newline_omission.py', 'symbol': 'unused-import', 'message': 'Unused import hello_world_newline_omission', 'message-id': 'W0611'}]",False
Hello world/Standard error,"Hello world/Standard error is part of Short Circuit's Console Program Basics selection.
A common practice in computing is to send error messages
to a different output stream than normal text console messages.

The normal messages print to what is called ""standard output"" or ""standard out"".

The error messages print to ""standard error"".

This separation can be used to redirect error messages to a different place than normal messages.



Task

Show how to print a message to standard error by printing     Goodbye, World!     on that stream.



",Python,"import sys
 
print >> sys.stderr, ""Goodbye, World!""",51,3,"import unittest
from unittest.mock import patch
import sys
import io

class TestHelloWorldStandardError(unittest.TestCase):
    @patch('sys.stderr', new_callable=io.StringIO)
    def test_goodbye_world_standard_error(self, mock_stderr):
        # Import the module which contains the code to be tested
        import hello_world_standard_error

        # Check if ""Goodbye, World!"" was printed to standard error
        self.assertEqual(mock_stderr.getvalue().strip(), ""Goodbye, World!"")

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/hello_world_standard_error/test_gpt_4o_2024_08_06_hello_world_standard_error.py,CompileStatus.OK,0.0,84.62,80.0,0.09,,,0.6293790340423584,6.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hello_world_standard_error', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/hello_world_standard_error/test_gpt_4o_2024_08_06_hello_world_standard_error.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hello_world_standard_error', 'obj': 'TestHelloWorldStandardError', 'line': 6, 'column': 0, 'endLine': 6, 'endColumn': 33, 'path': 'data/generated/docs_python/hello_world_standard_error/test_gpt_4o_2024_08_06_hello_world_standard_error.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hello_world_standard_error', 'obj': 'TestHelloWorldStandardError.test_goodbye_world_standard_error', 'line': 8, 'column': 4, 'endLine': 8, 'endColumn': 41, 'path': 'data/generated/docs_python/hello_world_standard_error/test_gpt_4o_2024_08_06_hello_world_standard_error.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hello_world_standard_error', 'obj': 'TestHelloWorldStandardError.test_goodbye_world_standard_error', 'line': 10, 'column': 8, 'endLine': 10, 'endColumn': 41, 'path': 'data/generated/docs_python/hello_world_standard_error/test_gpt_4o_2024_08_06_hello_world_standard_error.py', 'symbol': 'import-outside-toplevel', 'message': 'Import outside toplevel (hello_world_standard_error)', 'message-id': 'C0415'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_hello_world_standard_error', 'obj': 'TestHelloWorldStandardError.test_goodbye_world_standard_error', 'line': 10, 'column': 8, 'endLine': 10, 'endColumn': 41, 'path': 'data/generated/docs_python/hello_world_standard_error/test_gpt_4o_2024_08_06_hello_world_standard_error.py', 'symbol': 'unused-import', 'message': 'Unused import hello_world_standard_error', 'message-id': 'W0611'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_hello_world_standard_error', 'obj': '', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 10, 'path': 'data/generated/docs_python/hello_world_standard_error/test_gpt_4o_2024_08_06_hello_world_standard_error.py', 'symbol': 'unused-import', 'message': 'Unused import sys', 'message-id': 'W0611'}]",False
Hello world/Web server,"The browser is the new GUI !



Task

Serve our standard text   Goodbye, World!   to   http://localhost:8080/   so that it can be viewed with a web browser.

The provided solution must start or implement a server that accepts multiple client connections and serves text as requested.

Note that starting a web browser or opening a new window with this URL
is not part of the task.

Additionally, it is permissible to serve the provided page as a plain text file (there is no requirement to serve properly formatted HTML here).

The browser will generally do the right thing with simple text like this.



",Python,"from wsgiref.simple_server import make_server
 
def app(environ, start_response):
    start_response('200 OK', [('Content-Type','text/html')])
    yield b""<h1>Goodbye, World!</h1>""
 
server = make_server('127.0.0.1', 8080, app)
server.serve_forever()",250,8,"import unittest
import threading
import requests
from wsgiref.simple_server import make_server

# Import the app function from the provided code
from hello_world_web_server import app

class TestHelloWorldWebServer(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        # Start the server in a separate thread
        cls.server = make_server('127.0.0.1', 8080, app)
        cls.server_thread = threading.Thread(target=cls.server.serve_forever)
        cls.server_thread.setDaemon(True)
        cls.server_thread.start()

    @classmethod
    def tearDownClass(cls):
        # Shutdown the server
        cls.server.shutdown()
        cls.server.server_close()
        cls.server_thread.join()

    def test_server_response(self):
        # Send a request to the server
        response = requests.get('http://127.0.0.1:8080/')

        # Check that the response status code is 200
        self.assertEqual(response.status_code, 200)

        # Check that the response content is as expected
        self.assertEqual(response.text, ""<h1>Goodbye, World!</h1>"")

    def test_content_type(self):
        # Send a request to the server
        response = requests.get('http://127.0.0.1:8080/')

        # Check that the Content-Type header is text/html
        self.assertEqual(response.headers['Content-Type'], 'text/html')

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/hello_world_web_server/test_gpt_4o_2024_08_06_hello_world_web_server.py,CompileStatus.OK,,,,0.12,3.0,,,11.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hello_world_web_server', 'obj': '', 'line': 29, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/hello_world_web_server/test_gpt_4o_2024_08_06_hello_world_web_server.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hello_world_web_server', 'obj': '', 'line': 32, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/hello_world_web_server/test_gpt_4o_2024_08_06_hello_world_web_server.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hello_world_web_server', 'obj': '', 'line': 39, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/hello_world_web_server/test_gpt_4o_2024_08_06_hello_world_web_server.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hello_world_web_server', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/hello_world_web_server/test_gpt_4o_2024_08_06_hello_world_web_server.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hello_world_web_server', 'obj': 'TestHelloWorldWebServer', 'line': 9, 'column': 0, 'endLine': 9, 'endColumn': 29, 'path': 'data/generated/docs_python/hello_world_web_server/test_gpt_4o_2024_08_06_hello_world_web_server.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_hello_world_web_server', 'obj': 'TestHelloWorldWebServer.setUpClass', 'line': 16, 'column': 8, 'endLine': 16, 'endColumn': 41, 'path': 'data/generated/docs_python/hello_world_web_server/test_gpt_4o_2024_08_06_hello_world_web_server.py', 'symbol': 'deprecated-method', 'message': 'Using deprecated method setDaemon()', 'message-id': 'W4902'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hello_world_web_server', 'obj': 'TestHelloWorldWebServer.test_server_response', 'line': 26, 'column': 4, 'endLine': 26, 'endColumn': 28, 'path': 'data/generated/docs_python/hello_world_web_server/test_gpt_4o_2024_08_06_hello_world_web_server.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_hello_world_web_server', 'obj': 'TestHelloWorldWebServer.test_server_response', 'line': 28, 'column': 19, 'endLine': 28, 'endColumn': 57, 'path': 'data/generated/docs_python/hello_world_web_server/test_gpt_4o_2024_08_06_hello_world_web_server.py', 'symbol': 'missing-timeout', 'message': ""Missing timeout argument for method 'requests.get' can cause your program to hang indefinitely"", 'message-id': 'W3101'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hello_world_web_server', 'obj': 'TestHelloWorldWebServer.test_content_type', 'line': 36, 'column': 4, 'endLine': 36, 'endColumn': 25, 'path': 'data/generated/docs_python/hello_world_web_server/test_gpt_4o_2024_08_06_hello_world_web_server.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_hello_world_web_server', 'obj': 'TestHelloWorldWebServer.test_content_type', 'line': 38, 'column': 19, 'endLine': 38, 'endColumn': 57, 'path': 'data/generated/docs_python/hello_world_web_server/test_gpt_4o_2024_08_06_hello_world_web_server.py', 'symbol': 'missing-timeout', 'message': ""Missing timeout argument for method 'requests.get' can cause your program to hang indefinitely"", 'message-id': 'W3101'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hello_world_web_server', 'obj': '', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 45, 'path': 'data/generated/docs_python/hello_world_web_server/test_gpt_4o_2024_08_06_hello_world_web_server.py', 'symbol': 'wrong-import-order', 'message': 'standard import ""wsgiref.simple_server.make_server"" should be placed before third party import ""requests""', 'message-id': 'C0411'}]",True
Heronian triangles,"Hero's formula for the area of a triangle given the length of its three sides    a,   b,   and   c   is given by:





A
=


s
(
s
−
a
)
(
s
−
b
)
(
s
−
c
)


,


{\displaystyle A={\sqrt {s(s-a)(s-b)(s-c)}},}


where   s   is half the perimeter of the triangle; that is,





s
=



a
+
b
+
c

2


.


{\displaystyle s={\frac {a+b+c}{2}}.}



Heronian triangles
are triangles whose sides and area are all integers.

 An example is the triangle with sides   3, 4, 5   whose area is   6   (and whose perimeter is   12).


Note that any triangle whose sides are all an integer multiple of   3, 4, 5;   such as   6, 8, 10,   will also be a Heronian triangle.

Define a Primitive Heronian triangle as a Heronian triangle where the greatest common divisor
of all three sides is   1   (unity).

This will exclude, for example, triangle   6, 8, 10.



Task

 Create a named function/method/procedure/... that implements Hero's formula.
 Use the function to generate all the primitive Heronian triangles with sides <= 200.
 Show the count of how many triangles are found.
 Order the triangles by first increasing area, then by increasing perimeter, then by increasing maximum side lengths
 Show the first ten ordered triangles in a table of sides, perimeter, and area.
 Show a similar ordered table for those triangles with area = 210


Show all output here.

Note: when generating triangles it may help to restrict



a
<=
b
<=
c


{\displaystyle a<=b<=c}


",Python,"from __future__ import division, print_function
from math import gcd, sqrt
 
 
def hero(a, b, c):
    s = (a + b + c) / 2
    a2 = s * (s - a) * (s - b) * (s - c)
    return sqrt(a2) if a2 > 0 else 0
 
 
def is_heronian(a, b, c):
    a = hero(a, b, c)
    return a > 0 and a.is_integer()
 
 
def gcd3(x, y, z):
    return gcd(gcd(x, y), z)
 
 
if __name__ == '__main__':
    MAXSIDE = 200
 
    N = 1 + MAXSIDE
    h = [(x, y, z)
         for x in range(1, N)
         for y in range(x, N)
         for z in range(y, N) if (x + y > z) and
         1 == gcd3(x, y, z) and
         is_heronian(x, y, z)]
 
    # By increasing area, perimeter, then sides
    h.sort(key=lambda x: (hero(*x), sum(x), x[::-1]))
 
    print(
        'Primitive Heronian triangles with sides up to %i:' % MAXSIDE, len(h)
    )
    print('\nFirst ten when ordered by increasing area, then perimeter,',
          'then maximum sides:')
    print('\n'.join('  %14r perim: %3i area: %i'
                    % (sides, sum(sides), hero(*sides)) for sides in h[:10]))
    print('\nAll with area 210 subject to the previous ordering:')
    print('\n'.join('  %14r perim: %3i area: %i'
                    % (sides, sum(sides), hero(*sides)) for sides in h
                    if hero(*sides) == 210))
 ",1270,45,"import unittest
from heronian_triangles import hero, is_heronian, gcd3

class TestHeronianTriangles(unittest.TestCase):

    def test_hero(self):
        # Test Hero's formula with known values
        self.assertAlmostEqual(hero(3, 4, 5), 6)
        self.assertAlmostEqual(hero(6, 8, 10), 24)
        self.assertAlmostEqual(hero(5, 12, 13), 30)
        self.assertEqual(hero(1, 1, 2), 0)  # Not a valid triangle

    def test_is_heronian(self):
        # Test if a triangle is Heronian
        self.assertTrue(is_heronian(3, 4, 5))
        self.assertTrue(is_heronian(5, 12, 13))
        self.assertFalse(is_heronian(1, 1, 2))  # Not a valid triangle
        self.assertFalse(is_heronian(2, 2, 3))  # Area is not an integer

    def test_gcd3(self):
        # Test gcd3 function
        self.assertEqual(gcd3(3, 4, 5), 1)
        self.assertEqual(gcd3(6, 8, 10), 2)
        self.assertEqual(gcd3(5, 12, 13), 1)
        self.assertEqual(gcd3(9, 12, 15), 3)

    def test_primitive_heronian_triangles(self):
        # Test the generation of primitive Heronian triangles
        MAXSIDE = 200
        N = 1 + MAXSIDE
        h = [(x, y, z)
             for x in range(1, N)
             for y in range(x, N)
             for z in range(y, N) if (x + y > z) and
             1 == gcd3(x, y, z) and
             is_heronian(x, y, z)]

        # Check the count of triangles
        self.assertEqual(len(h), 92)  # Expected number of primitive Heronian triangles

        # Check the first triangle
        self.assertEqual(h[0], (3, 4, 5))

        # Check if all triangles have integer area
        for sides in h:
            self.assertTrue(hero(*sides).is_integer())

        # Check if all triangles are primitive
        for sides in h:
            self.assertEqual(gcd3(*sides), 1)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/heronian_triangles/test_gpt_4o_2024_08_06_heronian_triangles.py,CompileStatus.OK,0.0,70.59,57.97,0.46,3.2,75.0,1.1112010478973389,8.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_heronian_triangles', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/heronian_triangles/test_gpt_4o_2024_08_06_heronian_triangles.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_heronian_triangles', 'obj': 'TestHeronianTriangles', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 27, 'path': 'data/generated/docs_python/heronian_triangles/test_gpt_4o_2024_08_06_heronian_triangles.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_heronian_triangles', 'obj': 'TestHeronianTriangles.test_hero', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 17, 'path': 'data/generated/docs_python/heronian_triangles/test_gpt_4o_2024_08_06_heronian_triangles.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_heronian_triangles', 'obj': 'TestHeronianTriangles.test_is_heronian', 'line': 13, 'column': 4, 'endLine': 13, 'endColumn': 24, 'path': 'data/generated/docs_python/heronian_triangles/test_gpt_4o_2024_08_06_heronian_triangles.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_heronian_triangles', 'obj': 'TestHeronianTriangles.test_gcd3', 'line': 20, 'column': 4, 'endLine': 20, 'endColumn': 17, 'path': 'data/generated/docs_python/heronian_triangles/test_gpt_4o_2024_08_06_heronian_triangles.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_heronian_triangles', 'obj': 'TestHeronianTriangles.test_primitive_heronian_triangles', 'line': 27, 'column': 4, 'endLine': 27, 'endColumn': 41, 'path': 'data/generated/docs_python/heronian_triangles/test_gpt_4o_2024_08_06_heronian_triangles.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_heronian_triangles', 'obj': 'TestHeronianTriangles.test_primitive_heronian_triangles', 'line': 29, 'column': 8, 'endLine': 29, 'endColumn': 15, 'path': 'data/generated/docs_python/heronian_triangles/test_gpt_4o_2024_08_06_heronian_triangles.py', 'symbol': 'invalid-name', 'message': 'Variable name ""MAXSIDE"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_heronian_triangles', 'obj': 'TestHeronianTriangles.test_primitive_heronian_triangles', 'line': 30, 'column': 8, 'endLine': 30, 'endColumn': 9, 'path': 'data/generated/docs_python/heronian_triangles/test_gpt_4o_2024_08_06_heronian_triangles.py', 'symbol': 'invalid-name', 'message': 'Variable name ""N"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}]",False
Hickerson series of almost integers,"The following function,   due to D. Hickerson,   is said to generate ""Almost integers"" by the

""Almost Integer"" page of Wolfram MathWorld,   (December 31 2013).   (See formula numbered   51.)



The function is:          



h
(
n
)
=



n
!


2
(
ln
⁡

2


)

n
+
1







{\displaystyle h(n)={\operatorname {n} ! \over 2(\ln {2})^{n+1}}}





It is said to produce ""almost integers"" for   n   between   1   and   17.
The purpose of the task is to verify this assertion.

Assume that an ""almost integer"" has either a nine or a zero as its first digit after the decimal point of its decimal string representation



Task

Calculate all values of the function checking and stating which are ""almost integers"".

Note: Use extended/arbitrary precision numbers in your calculation if necessary to ensure you have adequate precision of results as for example:

               h(18) = 3385534663256845326.39...


",Python,"from decimal import Decimal
import math
 
def h(n):
    'Simple, reduced precision calculation'
    return math.factorial(n) / (2 * math.log(2) ** (n + 1))
 
def h2(n):
    'Extended precision Hickerson function'
    return Decimal(math.factorial(n)) / (2 * Decimal(2).ln() ** (n + 1))
 
for n in range(18):
    x = h2(n)
    norm = str(x.normalize())
    almostinteger = (' Nearly integer'
                     if 'E' not in norm and ('.0' in norm or '.9' in norm)
                     else ' NOT nearly integer!')
    print('n:%2i h:%s%s' % (n, norm, almostinteger))",570,18,"import unittest
from decimal import Decimal
import math
from hickerson_series_of_almost_integers import h, h2

class TestHickersonSeries(unittest.TestCase):

    def test_h_function(self):
        # Test the simple precision h function for known values
        expected_results = [
            0.7213475204444817,  # h(0)
            0.36067376022224085, # h(1)
            0.18033688011112042, # h(2)
            0.09016844005556021, # h(3)
            0.045084220027780104, # h(4)
            0.022542110013890052, # h(5)
            0.011271055006945026, # h(6)
            0.005635527503472513, # h(7)
            0.0028177637517362564, # h(8)
            0.0014088818758681282, # h(9)
            0.0007044409379340641, # h(10)
            0.00035222046896703206, # h(11)
            0.00017611023448351603, # h(12)
            8.805511724175801e-05, # h(13)
            4.4027558620879005e-05, # h(14)
            2.2013779310439503e-05, # h(15)
            1.1006889655219751e-05, # h(16)
            5.503444827609876e-06  # h(17)
        ]

        for n, expected in enumerate(expected_results):
            with self.subTest(n=n):
                self.assertAlmostEqual(h(n), expected, places=15)

    def test_h2_function(self):
        # Test the extended precision h2 function for ""almost integers""
        for n in range(18):
            result = h2(n)
            norm = str(result.normalize())
            if 'E' not in norm and ('.0' in norm or '.9' in norm):
                self.assertTrue(True, f""h2({n}) is nearly integer"")
            else:
                self.assertTrue(False, f""h2({n}) is NOT nearly integer"")

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/hickerson_series_of_almost_integers/test_gpt_4o_2024_08_06_hickerson_series_of_almost_integers.py,CompileStatus.OK,0.0,93.33,85.71,0.08,1.5,,0.8084309101104736,10.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hickerson_series_of_almost_integers', 'obj': '', 'line': 7, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/hickerson_series_of_almost_integers/test_gpt_4o_2024_08_06_hickerson_series_of_almost_integers.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hickerson_series_of_almost_integers', 'obj': '', 'line': 30, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/hickerson_series_of_almost_integers/test_gpt_4o_2024_08_06_hickerson_series_of_almost_integers.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hickerson_series_of_almost_integers', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/hickerson_series_of_almost_integers/test_gpt_4o_2024_08_06_hickerson_series_of_almost_integers.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hickerson_series_of_almost_integers', 'obj': 'TestHickersonSeries', 'line': 6, 'column': 0, 'endLine': 6, 'endColumn': 25, 'path': 'data/generated/docs_python/hickerson_series_of_almost_integers/test_gpt_4o_2024_08_06_hickerson_series_of_almost_integers.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hickerson_series_of_almost_integers', 'obj': 'TestHickersonSeries.test_h_function', 'line': 8, 'column': 4, 'endLine': 8, 'endColumn': 23, 'path': 'data/generated/docs_python/hickerson_series_of_almost_integers/test_gpt_4o_2024_08_06_hickerson_series_of_almost_integers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hickerson_series_of_almost_integers', 'obj': 'TestHickersonSeries.test_h2_function', 'line': 35, 'column': 4, 'endLine': 35, 'endColumn': 24, 'path': 'data/generated/docs_python/hickerson_series_of_almost_integers/test_gpt_4o_2024_08_06_hickerson_series_of_almost_integers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_hickerson_series_of_almost_integers', 'obj': 'TestHickersonSeries.test_h2_function', 'line': 41, 'column': 16, 'endLine': 41, 'endColumn': 67, 'path': 'data/generated/docs_python/hickerson_series_of_almost_integers/test_gpt_4o_2024_08_06_hickerson_series_of_almost_integers.py', 'symbol': 'redundant-unittest-assert', 'message': 'Redundant use of assertTrue with constant value True', 'message-id': 'W1503'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_hickerson_series_of_almost_integers', 'obj': 'TestHickersonSeries.test_h2_function', 'line': 43, 'column': 16, 'endLine': 43, 'endColumn': 72, 'path': 'data/generated/docs_python/hickerson_series_of_almost_integers/test_gpt_4o_2024_08_06_hickerson_series_of_almost_integers.py', 'symbol': 'redundant-unittest-assert', 'message': 'Redundant use of assertTrue with constant value False', 'message-id': 'W1503'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_hickerson_series_of_almost_integers', 'obj': '', 'line': 2, 'column': 0, 'endLine': 2, 'endColumn': 27, 'path': 'data/generated/docs_python/hickerson_series_of_almost_integers/test_gpt_4o_2024_08_06_hickerson_series_of_almost_integers.py', 'symbol': 'unused-import', 'message': 'Unused Decimal imported from decimal', 'message-id': 'W0611'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_hickerson_series_of_almost_integers', 'obj': '', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 11, 'path': 'data/generated/docs_python/hickerson_series_of_almost_integers/test_gpt_4o_2024_08_06_hickerson_series_of_almost_integers.py', 'symbol': 'unused-import', 'message': 'Unused import math', 'message-id': 'W0611'}]",False
Higher-order functions,"Task

Pass a function     as an argument     to another function.



Related task

   First-class functions

",Python,"def first(function):
    return function()
 
def second():
    return ""second""
 
result = first(second)",103,7,"import unittest
from higher_order_functions import first, second

class TestHigherOrderFunctions(unittest.TestCase):

    def test_first_with_second(self):
        # Test if the first function correctly calls the second function
        self.assertEqual(first(second), ""second"")

    def test_first_with_lambda(self):
        # Test if the first function can handle a lambda function
        self.assertEqual(first(lambda: ""lambda""), ""lambda"")

    def test_first_with_different_function(self):
        # Test if the first function can handle a different function
        def another_function():
            return ""another""

        self.assertEqual(first(another_function), ""another"")

    def test_first_with_no_return_function(self):
        # Test if the first function can handle a function with no return value
        def no_return_function():
            pass

        self.assertIsNone(first(no_return_function))

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/higher_order_functions/test_gpt_4o_2024_08_06_higher_order_functions.py,CompileStatus.OK,0.0,95.45,92.31,0.25,2.0,100.0,0.9185419082641602,8.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_higher_order_functions', 'obj': '', 'line': 18, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/higher_order_functions/test_gpt_4o_2024_08_06_higher_order_functions.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_higher_order_functions', 'obj': '', 'line': 25, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/higher_order_functions/test_gpt_4o_2024_08_06_higher_order_functions.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_higher_order_functions', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/higher_order_functions/test_gpt_4o_2024_08_06_higher_order_functions.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_higher_order_functions', 'obj': 'TestHigherOrderFunctions', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 30, 'path': 'data/generated/docs_python/higher_order_functions/test_gpt_4o_2024_08_06_higher_order_functions.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_higher_order_functions', 'obj': 'TestHigherOrderFunctions.test_first_with_second', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 30, 'path': 'data/generated/docs_python/higher_order_functions/test_gpt_4o_2024_08_06_higher_order_functions.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_higher_order_functions', 'obj': 'TestHigherOrderFunctions.test_first_with_lambda', 'line': 10, 'column': 4, 'endLine': 10, 'endColumn': 30, 'path': 'data/generated/docs_python/higher_order_functions/test_gpt_4o_2024_08_06_higher_order_functions.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_higher_order_functions', 'obj': 'TestHigherOrderFunctions.test_first_with_different_function', 'line': 14, 'column': 4, 'endLine': 14, 'endColumn': 42, 'path': 'data/generated/docs_python/higher_order_functions/test_gpt_4o_2024_08_06_higher_order_functions.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_higher_order_functions', 'obj': 'TestHigherOrderFunctions.test_first_with_no_return_function', 'line': 21, 'column': 4, 'endLine': 21, 'endColumn': 42, 'path': 'data/generated/docs_python/higher_order_functions/test_gpt_4o_2024_08_06_higher_order_functions.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Hofstadter Figure-Figure sequences,"These two sequences of positive integers are defined as:









R
(
1
)



=
1
 
;
 
S
(
1
)
=
2




R
(
n
)



=
R
(
n
−
1
)
+
S
(
n
−
1
)
,

n
>
1.






{\displaystyle {\begin{aligned}R(1)&=1\ ;\ S(1)=2\\R(n)&=R(n-1)+S(n-1),\quad n>1.\end{aligned}}}




The sequence



S
(
n
)


{\displaystyle S(n)}

 is further defined as the sequence of positive integers not present in



R
(
n
)


{\displaystyle R(n)}

.

Sequence



R


{\displaystyle R}

 starts:

   1, 3, 7, 12, 18, ...

Sequence



S


{\displaystyle S}

 starts:

   2, 4, 5, 6, 8, ...



Task

 Create two functions named ffr and ffs that when given n return R(n) or S(n) respectively.
(Note that R(1) = 1 and S(1) = 2 to avoid off-by-one errors).
 No maximum value for n should be assumed.
 Calculate and show that the first ten values of R are:
 1, 3, 7, 12, 18, 26, 35, 45, 56, and 69
 Calculate and show that the first 40 values of ffr plus the first 960 values of ffs include all the integers from 1 to 1000 exactly once.


References

 Sloane's A005228 and A030124.
 Wolfram MathWorld
 Wikipedia: Hofstadter Figure-Figure sequences.

",Python,"def ffr(n):
    if n < 1 or type(n) != int: raise ValueError(""n must be an int >= 1"")
    try:
        return ffr.r[n]
    except IndexError:
        r, s = ffr.r, ffs.s
        ffr_n_1 = ffr(n-1)
        lastr = r[-1]
        # extend s up to, and one past, last r
        s += list(range(s[-1] + 1, lastr))
        if s[-1] < lastr: s += [lastr + 1]
        # access s[n-1] temporarily extending s if necessary
        len_s = len(s)
        ffs_n_1 = s[n-1] if len_s > n else (n - len_s) + s[-1]
        ans = ffr_n_1 + ffs_n_1
        r.append(ans)
        return ans
ffr.r = [None, 1]
 
def ffs(n):
    if n < 1 or type(n) != int: raise ValueError(""n must be an int >= 1"")
    try:
        return ffs.s[n]
    except IndexError:
        r, s = ffr.r, ffs.s
        for i in range(len(r), n+2):
            ffr(i)
            if len(s) > n:
                return s[n]
        raise Exception(""Whoops!"")
ffs.s = [None, 2]
 
if __name__ == '__main__':
    first10 = [ffr(i) for i in range(1,11)]
    assert first10 == [1, 3, 7, 12, 18, 26, 35, 45, 56, 69], ""ffr() value error(s)""
    print(""ffr(n) for n = [1..10] is"", first10)
    #
    bin = [None] + [0]*1000
    for i in range(40, 0, -1):
        bin[ffr(i)] += 1
    for i in range(960, 0, -1):
        bin[ffs(i)] += 1
    if all(b == 1 for b in bin[1:1000]):
        print(""All Integers 1..1000 found OK"")
    else:
        print(""All Integers 1..1000 NOT found only once: ERROR"")",1441,46,"import unittest

class TestHofstadterFigureFigureSequences(unittest.TestCase):

    def test_ffr_first_ten(self):
        expected_r = [1, 3, 7, 12, 18, 26, 35, 45, 56, 69]
        actual_r = [ffr(i) for i in range(1, 11)]
        self.assertEqual(actual_r, expected_r, ""ffr() value error(s)"")

    def test_ffs_first_ten(self):
        expected_s = [2, 4, 5, 6, 8, 9, 10, 11, 13, 14]
        actual_s = [ffs(i) for i in range(1, 11)]
        self.assertEqual(actual_s, expected_s, ""ffs() value error(s)"")

    def test_ffr_invalid_input(self):
        with self.assertRaises(ValueError):
            ffr(0)
        with self.assertRaises(ValueError):
            ffr(-1)
        with self.assertRaises(ValueError):
            ffr(1.5)
        with self.assertRaises(ValueError):
            ffr(""a"")

    def test_ffs_invalid_input(self):
        with self.assertRaises(ValueError):
            ffs(0)
        with self.assertRaises(ValueError):
            ffs(-1)
        with self.assertRaises(ValueError):
            ffs(1.5)
        with self.assertRaises(ValueError):
            ffs(""a"")

    def test_all_integers_1_to_1000(self):
        bin = [None] + [0] * 1000
        for i in range(40, 0, -1):
            bin[ffr(i)] += 1
        for i in range(960, 0, -1):
            bin[ffs(i)] += 1
        self.assertTrue(all(b == 1 for b in bin[1:1001]), ""All Integers 1..1000 NOT found only once: ERROR"")

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/hofstadter_figure_figure_sequences/test_gpt_4o_2024_08_06_hofstadter_figure_figure_sequences.py,CompileStatus.OK,0.0,24.68,20.16,0.3,0.92,,0.7738478183746338,21.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hofstadter_figure_figure_sequences', 'obj': '', 'line': 41, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/hofstadter_figure_figure_sequences/test_gpt_4o_2024_08_06_hofstadter_figure_figure_sequences.py', 'symbol': 'line-too-long', 'message': 'Line too long (108/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hofstadter_figure_figure_sequences', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/hofstadter_figure_figure_sequences/test_gpt_4o_2024_08_06_hofstadter_figure_figure_sequences.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hofstadter_figure_figure_sequences', 'obj': 'TestHofstadterFigureFigureSequences', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 41, 'path': 'data/generated/docs_python/hofstadter_figure_figure_sequences/test_gpt_4o_2024_08_06_hofstadter_figure_figure_sequences.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hofstadter_figure_figure_sequences', 'obj': 'TestHofstadterFigureFigureSequences.test_ffr_first_ten', 'line': 5, 'column': 4, 'endLine': 5, 'endColumn': 26, 'path': 'data/generated/docs_python/hofstadter_figure_figure_sequences/test_gpt_4o_2024_08_06_hofstadter_figure_figure_sequences.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_hofstadter_figure_figure_sequences', 'obj': 'TestHofstadterFigureFigureSequences.test_ffr_first_ten', 'line': 7, 'column': 20, 'endLine': 7, 'endColumn': 23, 'path': 'data/generated/docs_python/hofstadter_figure_figure_sequences/test_gpt_4o_2024_08_06_hofstadter_figure_figure_sequences.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'ffr'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hofstadter_figure_figure_sequences', 'obj': 'TestHofstadterFigureFigureSequences.test_ffs_first_ten', 'line': 10, 'column': 4, 'endLine': 10, 'endColumn': 26, 'path': 'data/generated/docs_python/hofstadter_figure_figure_sequences/test_gpt_4o_2024_08_06_hofstadter_figure_figure_sequences.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_hofstadter_figure_figure_sequences', 'obj': 'TestHofstadterFigureFigureSequences.test_ffs_first_ten', 'line': 12, 'column': 20, 'endLine': 12, 'endColumn': 23, 'path': 'data/generated/docs_python/hofstadter_figure_figure_sequences/test_gpt_4o_2024_08_06_hofstadter_figure_figure_sequences.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'ffs'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hofstadter_figure_figure_sequences', 'obj': 'TestHofstadterFigureFigureSequences.test_ffr_invalid_input', 'line': 15, 'column': 4, 'endLine': 15, 'endColumn': 30, 'path': 'data/generated/docs_python/hofstadter_figure_figure_sequences/test_gpt_4o_2024_08_06_hofstadter_figure_figure_sequences.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_hofstadter_figure_figure_sequences', 'obj': 'TestHofstadterFigureFigureSequences.test_ffr_invalid_input', 'line': 17, 'column': 12, 'endLine': 17, 'endColumn': 15, 'path': 'data/generated/docs_python/hofstadter_figure_figure_sequences/test_gpt_4o_2024_08_06_hofstadter_figure_figure_sequences.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'ffr'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_hofstadter_figure_figure_sequences', 'obj': 'TestHofstadterFigureFigureSequences.test_ffr_invalid_input', 'line': 19, 'column': 12, 'endLine': 19, 'endColumn': 15, 'path': 'data/generated/docs_python/hofstadter_figure_figure_sequences/test_gpt_4o_2024_08_06_hofstadter_figure_figure_sequences.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'ffr'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_hofstadter_figure_figure_sequences', 'obj': 'TestHofstadterFigureFigureSequences.test_ffr_invalid_input', 'line': 21, 'column': 12, 'endLine': 21, 'endColumn': 15, 'path': 'data/generated/docs_python/hofstadter_figure_figure_sequences/test_gpt_4o_2024_08_06_hofstadter_figure_figure_sequences.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'ffr'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_hofstadter_figure_figure_sequences', 'obj': 'TestHofstadterFigureFigureSequences.test_ffr_invalid_input', 'line': 23, 'column': 12, 'endLine': 23, 'endColumn': 15, 'path': 'data/generated/docs_python/hofstadter_figure_figure_sequences/test_gpt_4o_2024_08_06_hofstadter_figure_figure_sequences.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'ffr'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hofstadter_figure_figure_sequences', 'obj': 'TestHofstadterFigureFigureSequences.test_ffs_invalid_input', 'line': 25, 'column': 4, 'endLine': 25, 'endColumn': 30, 'path': 'data/generated/docs_python/hofstadter_figure_figure_sequences/test_gpt_4o_2024_08_06_hofstadter_figure_figure_sequences.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_hofstadter_figure_figure_sequences', 'obj': 'TestHofstadterFigureFigureSequences.test_ffs_invalid_input', 'line': 27, 'column': 12, 'endLine': 27, 'endColumn': 15, 'path': 'data/generated/docs_python/hofstadter_figure_figure_sequences/test_gpt_4o_2024_08_06_hofstadter_figure_figure_sequences.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'ffs'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_hofstadter_figure_figure_sequences', 'obj': 'TestHofstadterFigureFigureSequences.test_ffs_invalid_input', 'line': 29, 'column': 12, 'endLine': 29, 'endColumn': 15, 'path': 'data/generated/docs_python/hofstadter_figure_figure_sequences/test_gpt_4o_2024_08_06_hofstadter_figure_figure_sequences.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'ffs'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_hofstadter_figure_figure_sequences', 'obj': 'TestHofstadterFigureFigureSequences.test_ffs_invalid_input', 'line': 31, 'column': 12, 'endLine': 31, 'endColumn': 15, 'path': 'data/generated/docs_python/hofstadter_figure_figure_sequences/test_gpt_4o_2024_08_06_hofstadter_figure_figure_sequences.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'ffs'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_hofstadter_figure_figure_sequences', 'obj': 'TestHofstadterFigureFigureSequences.test_ffs_invalid_input', 'line': 33, 'column': 12, 'endLine': 33, 'endColumn': 15, 'path': 'data/generated/docs_python/hofstadter_figure_figure_sequences/test_gpt_4o_2024_08_06_hofstadter_figure_figure_sequences.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'ffs'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hofstadter_figure_figure_sequences', 'obj': 'TestHofstadterFigureFigureSequences.test_all_integers_1_to_1000', 'line': 35, 'column': 4, 'endLine': 35, 'endColumn': 35, 'path': 'data/generated/docs_python/hofstadter_figure_figure_sequences/test_gpt_4o_2024_08_06_hofstadter_figure_figure_sequences.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_hofstadter_figure_figure_sequences', 'obj': 'TestHofstadterFigureFigureSequences.test_all_integers_1_to_1000', 'line': 36, 'column': 8, 'endLine': 36, 'endColumn': 11, 'path': 'data/generated/docs_python/hofstadter_figure_figure_sequences/test_gpt_4o_2024_08_06_hofstadter_figure_figure_sequences.py', 'symbol': 'redefined-builtin', 'message': ""Redefining built-in 'bin'"", 'message-id': 'W0622'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_hofstadter_figure_figure_sequences', 'obj': 'TestHofstadterFigureFigureSequences.test_all_integers_1_to_1000', 'line': 38, 'column': 16, 'endLine': 38, 'endColumn': 19, 'path': 'data/generated/docs_python/hofstadter_figure_figure_sequences/test_gpt_4o_2024_08_06_hofstadter_figure_figure_sequences.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'ffr'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_hofstadter_figure_figure_sequences', 'obj': 'TestHofstadterFigureFigureSequences.test_all_integers_1_to_1000', 'line': 40, 'column': 16, 'endLine': 40, 'endColumn': 19, 'path': 'data/generated/docs_python/hofstadter_figure_figure_sequences/test_gpt_4o_2024_08_06_hofstadter_figure_figure_sequences.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'ffs'"", 'message-id': 'E0602'}]",False
Hofstadter Q sequence,"Hofstadter Q sequence










Q
(
1
)



=
Q
(
2
)
=
1
,




Q
(
n
)



=
Q


(


n
−
Q
(
n
−
1
)


)


+
Q


(


n
−
Q
(
n
−
2
)


)


,

n
>
2.






{\displaystyle {\begin{aligned}Q(1)&=Q(2)=1,\\Q(n)&=Q{\big (}n-Q(n-1){\big )}+Q{\big (}n-Q(n-2){\big )},\quad n>2.\end{aligned}}}




It is defined like the Fibonacci sequence, but whereas the next term in the Fibonacci sequence is the sum of the previous two terms, in the Q sequence the previous two terms tell you how far to go back in the Q sequence to find the two numbers to sum to make the next term of the sequence.



Task

 Confirm and display that the first ten terms of the sequence are: 1, 1, 2, 3, 3, 4, 5, 5, 6, and 6
 Confirm and display that the 1000th term is:   502


Optional extra credit
 Count and display how many times a member of the sequence is less than its preceding term for terms up to and including the 100,000th term.
 Ensure that the extra credit solution   safely   handles being initially asked for an nth term where   n   is large.

(This point is to ensure that caching and/or recursion limits, if it is a concern, is correctly handled).



",Python,"def q(n):
    if n < 1 or type(n) != int: raise ValueError(""n must be an int >= 1"")
    try:
        return q.seq[n]
    except IndexError:
        ans = q(n - q(n - 1)) + q(n - q(n - 2))
        q.seq.append(ans)
        return ans
q.seq = [None, 1, 1]
 
if __name__ == '__main__':
    first10 = [q(i) for i in range(1,11)]
    assert first10 == [1, 1, 2, 3, 3, 4, 5, 5, 6, 6], ""Q() value error(s)""
    print(""Q(n) for n = [1..10] is:"", ', '.join(str(i) for i in first10))
    assert q(1000) == 502, ""Q(1000) value error""
    print(""Q(1000) ="", q(1000))",554,16,"import unittest
from hofstadter_q_sequence import q

class TestHofstadterQSequence(unittest.TestCase):

    def test_first_ten_terms(self):
        expected_first_ten = [1, 1, 2, 3, 3, 4, 5, 5, 6, 6]
        calculated_first_ten = [q(i) for i in range(1, 11)]
        self.assertEqual(calculated_first_ten, expected_first_ten, ""First ten terms do not match expected values."")

    def test_1000th_term(self):
        expected_1000th_term = 502
        calculated_1000th_term = q(1000)
        self.assertEqual(calculated_1000th_term, expected_1000th_term, ""1000th term does not match expected value."")

    def test_count_decreasing_terms_up_to_100000(self):
        # Optional extra credit
        decreasing_count = 0
        previous_term = q(1)
        for i in range(2, 100001):
            current_term = q(i)
            if current_term < previous_term:
                decreasing_count += 1
            previous_term = current_term
        print(""Number of times a member of the sequence is less than its preceding term up to 100,000th term:"", decreasing_count)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/hofstadter_q_sequence/test_gpt_4o_2024_08_06_hofstadter_q_sequence.py,CompileStatus.OK,,,,0.09,0.5,,,8.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hofstadter_q_sequence', 'obj': '', 'line': 9, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/hofstadter_q_sequence/test_gpt_4o_2024_08_06_hofstadter_q_sequence.py', 'symbol': 'line-too-long', 'message': 'Line too long (115/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hofstadter_q_sequence', 'obj': '', 'line': 14, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/hofstadter_q_sequence/test_gpt_4o_2024_08_06_hofstadter_q_sequence.py', 'symbol': 'line-too-long', 'message': 'Line too long (116/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hofstadter_q_sequence', 'obj': '', 'line': 25, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/hofstadter_q_sequence/test_gpt_4o_2024_08_06_hofstadter_q_sequence.py', 'symbol': 'line-too-long', 'message': 'Line too long (129/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hofstadter_q_sequence', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/hofstadter_q_sequence/test_gpt_4o_2024_08_06_hofstadter_q_sequence.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hofstadter_q_sequence', 'obj': 'TestHofstadterQSequence', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 29, 'path': 'data/generated/docs_python/hofstadter_q_sequence/test_gpt_4o_2024_08_06_hofstadter_q_sequence.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hofstadter_q_sequence', 'obj': 'TestHofstadterQSequence.test_first_ten_terms', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 28, 'path': 'data/generated/docs_python/hofstadter_q_sequence/test_gpt_4o_2024_08_06_hofstadter_q_sequence.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hofstadter_q_sequence', 'obj': 'TestHofstadterQSequence.test_1000th_term', 'line': 11, 'column': 4, 'endLine': 11, 'endColumn': 24, 'path': 'data/generated/docs_python/hofstadter_q_sequence/test_gpt_4o_2024_08_06_hofstadter_q_sequence.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hofstadter_q_sequence', 'obj': 'TestHofstadterQSequence.test_count_decreasing_terms_up_to_100000', 'line': 16, 'column': 4, 'endLine': 16, 'endColumn': 48, 'path': 'data/generated/docs_python/hofstadter_q_sequence/test_gpt_4o_2024_08_06_hofstadter_q_sequence.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",True
"Hofstadter-Conway $10,000 sequence","The definition of the sequence is colloquially described as:

   Starting with the list [1,1],
   Take the last number in the list so far: 1, I'll call it x.
   Count forward x places from the beginning of the list to find the first number to add (1)
   Count backward x places from the end of the list to find the second number to add (1)
   Add the two indexed numbers from the list and the result becomes the next number in the list (1+1)
   This would then produce [1,1,2] where 2 is the third element of the sequence.

Note that indexing for the description above starts from alternately the left and right ends of the list and starts from an index of one.

A less wordy description of the sequence is:

   a(1)=a(2)=1
   a(n)=a(a(n-1))+a(n-a(n-1))

The sequence begins:

   1, 1, 2, 2, 3, 4, 4, 4, 5, ...

Interesting features of the sequence are that:

   a(n)/n   tends to   0.5   as   n   grows towards infinity.
   a(n)/n   where   n   is a power of   2   is   0.5
   For   n>4   the maximal value of   a(n)/n   between successive powers of 2 decreases.



The sequence is so named because John Conway offered a prize of $10,000 to the first person who could
find the first position,   p   in the sequence where

   │a(n)/n│ < 0.55  for all  n > p

It was later found that Hofstadter had also done prior work on the sequence.

The 'prize' was won quite quickly by Dr. Colin L. Mallows who proved the properties of the sequence and allowed him to find the value of   n   (which is much smaller than the 3,173,375,556 quoted in the NYT article).



Task

   Create a routine to generate members of the Hofstadter-Conway $10,000 sequence.
   Use it to show the maxima of   a(n)/n   between successive powers of two up to   2**20
   As a stretch goal:   compute the value of   n   that would have won the prize and confirm it is true for   n   up to 2**20


Also see

   Conways Challenge Sequence, Mallows' own account.
   Mathworld Article.

",Python,"from __future__ import division
 
def maxandmallows(nmaxpower2):
    nmax = 2**nmaxpower2
    mx = (0.5, 2)
    mxpow2 = []
    mallows = None
 
    # Hofstadter-Conway sequence starts at hc[1],
    # hc[0] is not part of the series.
    hc = [None, 1, 1]
 
    for n in range(2, nmax + 1):
        ratio = hc[n] / n
        if ratio > mx[0]:
            mx = (ratio, n)
        if ratio >= 0.55:
            mallows = n
        if ratio == 0.5:
            print(""In the region %7i < n <= %7i: max a(n)/n = %6.4f at  n = %i"" %
		  (n//2, n, mx[0], mx[1]))
            mxpow2.append(mx[0])
            mx = (ratio, n)
        hc.append(hc[hc[n]] + hc[-hc[n]])
 
    return hc, mallows if mxpow2 and mxpow2[-1] < 0.55 and n > 4 else None
 
if __name__ == '__main__':
    hc, mallows = maxandmallows(20)
    if mallows:
        print(""\nYou too might have won $1000 with the mallows number of %i"" % mallows)
 ",907,32,"import unittest
from hofstadter_conway_10_000_sequence import maxandmallows

class TestHofstadterConwaySequence(unittest.TestCase):

    def test_sequence_initial_values(self):
        hc, _ = maxandmallows(1)
        self.assertEqual(hc[1], 1)
        self.assertEqual(hc[2], 1)

    def test_sequence_generation(self):
        hc, _ = maxandmallows(3)
        expected_sequence = [None, 1, 1, 2, 2, 3, 4, 4, 4, 5]
        self.assertEqual(hc[:10], expected_sequence)

    def test_max_ratio(self):
        _, mallows = maxandmallows(10)
        self.assertIsNotNone(mallows)

    def test_mallows_number(self):
        hc, mallows = maxandmallows(20)
        self.assertIsNotNone(mallows)
        self.assertTrue(all(hc[n] / n < 0.55 for n in range(mallows + 1, 2**20 + 1)))

    def test_max_ratio_between_powers_of_two(self):
        hc, _ = maxandmallows(5)
        max_ratios = []
        for power in range(1, 6):
            start = 2**(power-1)
            end = 2**power
            max_ratio = max(hc[n] / n for n in range(start, end + 1))
            max_ratios.append(max_ratio)
        self.assertTrue(all(ratio <= 0.55 for ratio in max_ratios))

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/hofstadter_conway_10_000_sequence/test_gpt_4o_2024_08_06_hofstadter_conway_10_000_sequence.py,CompileStatus.OK,0.0,92.31,87.84,0.24,0.88,60.0,0.9218480587005616,7.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hofstadter_conway_10_000_sequence', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/hofstadter_conway_10_000_sequence/test_gpt_4o_2024_08_06_hofstadter_conway_10_000_sequence.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hofstadter_conway_10_000_sequence', 'obj': 'TestHofstadterConwaySequence', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 34, 'path': 'data/generated/docs_python/hofstadter_conway_10_000_sequence/test_gpt_4o_2024_08_06_hofstadter_conway_10_000_sequence.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hofstadter_conway_10_000_sequence', 'obj': 'TestHofstadterConwaySequence.test_sequence_initial_values', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 36, 'path': 'data/generated/docs_python/hofstadter_conway_10_000_sequence/test_gpt_4o_2024_08_06_hofstadter_conway_10_000_sequence.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hofstadter_conway_10_000_sequence', 'obj': 'TestHofstadterConwaySequence.test_sequence_generation', 'line': 11, 'column': 4, 'endLine': 11, 'endColumn': 32, 'path': 'data/generated/docs_python/hofstadter_conway_10_000_sequence/test_gpt_4o_2024_08_06_hofstadter_conway_10_000_sequence.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hofstadter_conway_10_000_sequence', 'obj': 'TestHofstadterConwaySequence.test_max_ratio', 'line': 16, 'column': 4, 'endLine': 16, 'endColumn': 22, 'path': 'data/generated/docs_python/hofstadter_conway_10_000_sequence/test_gpt_4o_2024_08_06_hofstadter_conway_10_000_sequence.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hofstadter_conway_10_000_sequence', 'obj': 'TestHofstadterConwaySequence.test_mallows_number', 'line': 20, 'column': 4, 'endLine': 20, 'endColumn': 27, 'path': 'data/generated/docs_python/hofstadter_conway_10_000_sequence/test_gpt_4o_2024_08_06_hofstadter_conway_10_000_sequence.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hofstadter_conway_10_000_sequence', 'obj': 'TestHofstadterConwaySequence.test_max_ratio_between_powers_of_two', 'line': 25, 'column': 4, 'endLine': 25, 'endColumn': 44, 'path': 'data/generated/docs_python/hofstadter_conway_10_000_sequence/test_gpt_4o_2024_08_06_hofstadter_conway_10_000_sequence.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Horizontal sundial calculations,"Task

Create a program that calculates the hour, sun hour angle, dial hour line angle from 6am to 6pm for an operator entered location.



For example, the user is prompted for a location and inputs the latitude and longitude 4°57′S 150°30′W (4.95°S 150.5°W of Jules Verne's Lincoln Island, aka Ernest Legouve Reef), with a legal meridian of 150°W.

(Note: the ""meridian"" is approximately the same concept as the ""longitude"" - the distinction is that the meridian is used to determine when it is ""noon"" for official purposes. This will typically be slightly different from when the sun appears at its highest location, because of the structure of time zones. For most, but not all, time zones (hour wide zones with hour zero centred on Greenwich), the legal meridian will be an even multiple of 15 degrees.)

Wikipedia: A sundial is a device that measures time by the position of the Sun. In common designs such as the horizontal sundial, the sun casts a shadow from its style (also called its Gnomon, a thin rod or a sharp, straight edge) onto a flat surface marked with lines indicating the hours of the day (also called the dial face or dial plate). As the sun moves across the sky, the shadow-edge progressively aligns with different hour-lines on the plate. Such designs rely on the style being aligned with the axis of the Earth's rotation. Hence, if such a sundial is to tell the correct time, the style must point towards true north (not the north or south magnetic pole) and the style's angle with horizontal must equal the sundial's geographical latitude.



",Python,"from __future__ import print_function
import math
try: raw_input
except: raw_input = input
 
lat = float(raw_input(""Enter latitude       => ""))
lng = float(raw_input(""Enter longitude      => ""))
ref = float(raw_input(""Enter legal meridian => ""))
print()
 
slat = math.sin(math.radians(lat))
print(""    sine of latitude:   %.3f"" % slat)
print(""    diff longitude:     %.3f"" % (lng-ref))
print()
print(""Hour, sun hour angle, dial hour line angle from 6am to 6pm"")
 
for h in range(-6, 7):
  hra = 15 * h
  hra -= lng - ref
  hla = math.degrees(math.atan(slat * math.tan(math.radians(hra))))
  print(""HR=%3d; HRA=%7.3f; HLA=%7.3f"" % (h, hra, hla))",644,21,"import unittest
from unittest.mock import patch
import math

class TestHorizontalSundialCalculations(unittest.TestCase):

    @patch('builtins.input', side_effect=['-4.95', '-150.5', '-150'])
    def test_sundial_calculations(self, mock_input):
        # Expected values based on the input
        expected_slat = math.sin(math.radians(-4.95))
        expected_diff_longitude = -150.5 - (-150)

        # Expected results for each hour from 6am to 6pm
        expected_results = []
        for h in range(-6, 7):
            hra = 15 * h
            hra -= (-150.5) - (-150)
            hla = math.degrees(math.atan(expected_slat * math.tan(math.radians(hra))))
            expected_results.append((h, hra, hla))

        # Capture the printed output
        with patch('sys.stdout') as mock_stdout:
            import horizontal_sundial_calculations
            output = mock_stdout.getvalue().strip().split('\n')

        # Check sine of latitude
        self.assertIn(f""sine of latitude:   {expected_slat:.3f}"", output[0])

        # Check difference in longitude
        self.assertIn(f""diff longitude:     {expected_diff_longitude:.3f}"", output[1])

        # Check hour, sun hour angle, and dial hour line angle
        for i, (h, hra, hla) in enumerate(expected_results):
            self.assertIn(f""HR={h:3d}; HRA={hra:7.3f}; HLA={hla:7.3f}"", output[i+3])

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/horizontal_sundial_calculations/test_gpt_4o_2024_08_06_horizontal_sundial_calculations.py,CompileStatus.OK,0.0,90.24,86.27,0.13,,,0.5489177703857422,11.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_horizontal_sundial_calculations', 'obj': '', 'line': 12, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/horizontal_sundial_calculations/test_gpt_4o_2024_08_06_horizontal_sundial_calculations.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_horizontal_sundial_calculations', 'obj': '', 'line': 20, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/horizontal_sundial_calculations/test_gpt_4o_2024_08_06_horizontal_sundial_calculations.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_horizontal_sundial_calculations', 'obj': '', 'line': 25, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/horizontal_sundial_calculations/test_gpt_4o_2024_08_06_horizontal_sundial_calculations.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_horizontal_sundial_calculations', 'obj': '', 'line': 28, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/horizontal_sundial_calculations/test_gpt_4o_2024_08_06_horizontal_sundial_calculations.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_horizontal_sundial_calculations', 'obj': '', 'line': 31, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/horizontal_sundial_calculations/test_gpt_4o_2024_08_06_horizontal_sundial_calculations.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_horizontal_sundial_calculations', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/horizontal_sundial_calculations/test_gpt_4o_2024_08_06_horizontal_sundial_calculations.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_horizontal_sundial_calculations', 'obj': 'TestHorizontalSundialCalculations', 'line': 5, 'column': 0, 'endLine': 5, 'endColumn': 39, 'path': 'data/generated/docs_python/horizontal_sundial_calculations/test_gpt_4o_2024_08_06_horizontal_sundial_calculations.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_horizontal_sundial_calculations', 'obj': 'TestHorizontalSundialCalculations.test_sundial_calculations', 'line': 8, 'column': 4, 'endLine': 8, 'endColumn': 33, 'path': 'data/generated/docs_python/horizontal_sundial_calculations/test_gpt_4o_2024_08_06_horizontal_sundial_calculations.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_horizontal_sundial_calculations', 'obj': 'TestHorizontalSundialCalculations.test_sundial_calculations', 'line': 23, 'column': 12, 'endLine': 23, 'endColumn': 50, 'path': 'data/generated/docs_python/horizontal_sundial_calculations/test_gpt_4o_2024_08_06_horizontal_sundial_calculations.py', 'symbol': 'import-outside-toplevel', 'message': 'Import outside toplevel (horizontal_sundial_calculations)', 'message-id': 'C0415'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_horizontal_sundial_calculations', 'obj': 'TestHorizontalSundialCalculations.test_sundial_calculations', 'line': 8, 'column': 40, 'endLine': 8, 'endColumn': 50, 'path': 'data/generated/docs_python/horizontal_sundial_calculations/test_gpt_4o_2024_08_06_horizontal_sundial_calculations.py', 'symbol': 'unused-argument', 'message': ""Unused argument 'mock_input'"", 'message-id': 'W0613'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_horizontal_sundial_calculations', 'obj': 'TestHorizontalSundialCalculations.test_sundial_calculations', 'line': 23, 'column': 12, 'endLine': 23, 'endColumn': 50, 'path': 'data/generated/docs_python/horizontal_sundial_calculations/test_gpt_4o_2024_08_06_horizontal_sundial_calculations.py', 'symbol': 'unused-import', 'message': 'Unused import horizontal_sundial_calculations', 'message-id': 'W0611'}]",False
Hostname,"Task

Find the name of the host on which the routine is running.



",Python,"import socket
host = socket.gethostname()",41,2,"import unittest
import socket
from unittest.mock import patch

class TestHostname(unittest.TestCase):

    @patch('socket.gethostname')
    def test_hostname(self, mock_gethostname):
        # Mock the return value of socket.gethostname
        mock_gethostname.return_value = 'test-hostname'

        # Import the module after mocking
        import hostname

        # Check if the host variable is set correctly
        self.assertEqual(hostname.host, 'test-hostname')

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/hostname/test_gpt_4o_2024_08_06_hostname.py,CompileStatus.OK,0.0,92.31,86.67,0.09,,100.0,0.4860470294952392,8.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hostname', 'obj': '', 'line': 6, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/hostname/test_gpt_4o_2024_08_06_hostname.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hostname', 'obj': '', 'line': 11, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/hostname/test_gpt_4o_2024_08_06_hostname.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hostname', 'obj': '', 'line': 14, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/hostname/test_gpt_4o_2024_08_06_hostname.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hostname', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/hostname/test_gpt_4o_2024_08_06_hostname.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hostname', 'obj': 'TestHostname', 'line': 5, 'column': 0, 'endLine': 5, 'endColumn': 18, 'path': 'data/generated/docs_python/hostname/test_gpt_4o_2024_08_06_hostname.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hostname', 'obj': 'TestHostname.test_hostname', 'line': 8, 'column': 4, 'endLine': 8, 'endColumn': 21, 'path': 'data/generated/docs_python/hostname/test_gpt_4o_2024_08_06_hostname.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hostname', 'obj': 'TestHostname.test_hostname', 'line': 13, 'column': 8, 'endLine': 13, 'endColumn': 23, 'path': 'data/generated/docs_python/hostname/test_gpt_4o_2024_08_06_hostname.py', 'symbol': 'import-outside-toplevel', 'message': 'Import outside toplevel (hostname)', 'message-id': 'C0415'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_hostname', 'obj': '', 'line': 2, 'column': 0, 'endLine': 2, 'endColumn': 13, 'path': 'data/generated/docs_python/hostname/test_gpt_4o_2024_08_06_hostname.py', 'symbol': 'unused-import', 'message': 'Unused import socket', 'message-id': 'W0611'}]",False
Hough transform,"Task

Implement the Hough transform, which is used as part of feature extraction with digital images.

It is a tool that makes it far easier to identify straight lines in the source image, whatever their orientation.

The transform maps each point in the target image,



(
ρ
,
θ
)


{\displaystyle (\rho ,\theta )}

, to the average color of the pixels on the corresponding line of the source image (in



(
x
,
y
)


{\displaystyle (x,y)}

-space, where the line corresponds to points of the form



x
cos
⁡
θ
+
y
sin
⁡
θ
=
ρ


{\displaystyle x\cos \theta +y\sin \theta =\rho }

). The idea is that where there is a straight line in the original image, it corresponds to a bright (or dark, depending on the color of the background field) spot; by applying a suitable filter to the results of the transform, it is possible to extract the locations of the lines in the original image.

 Sample PNG image to use for the Hough transform.
The target space actually uses polar coordinates, but is conventionally plotted on rectangular coordinates for display. There's no specification of exactly how to map polar coordinates to a flat surface for display, but a convenient method is to use one axis for



θ


{\displaystyle \theta }

 and the other for



ρ


{\displaystyle \rho }

, with the center of the source image being the origin.

There is also a spherical Hough transform, which is more suited to identifying planes in 3D data.



",Python," 
from math import hypot, pi, cos, sin
from PIL import Image
 
 
def hough(im, ntx=460, mry=360):
    ""Calculate Hough transform.""
    pim = im.load()
    nimx, mimy = im.size
    mry = int(mry/2)*2          #Make sure that this is even
    him = Image.new(""L"", (ntx, mry), 255)
    phim = him.load()
 
    rmax = hypot(nimx, mimy)
    dr = rmax / (mry/2)
    dth = pi / ntx
 
    for jx in xrange(nimx):
        for iy in xrange(mimy):
            col = pim[jx, iy]
            if col == 255: continue
            for jtx in xrange(ntx):
                th = dth * jtx
                r = jx*cos(th) + iy*sin(th)
                iry = mry/2 + int(r/dr+0.5)
                phim[jtx, iry] -= 1
    return him
 
 
def test():
    ""Test Hough transform with pentagon.""
    im = Image.open(""pentagon.png"").convert(""L"")
    him = hough(im)
    him.save(""ho5.bmp"")
 
 
if __name__ == ""__main__"": test()
 
 ",901,39,"import unittest
from PIL import Image
from hough_transform import hough

class TestHoughTransform(unittest.TestCase):

    def setUp(self):
        # Create a simple black and white image for testing
        self.test_image = Image.new(""L"", (100, 100), 255)
        pixels = self.test_image.load()
        for i in range(100):
            pixels[i, i] = 0  # Draw a diagonal line

    def test_hough_transform_output_type(self):
        # Test if the output is an instance of PIL Image
        result = hough(self.test_image)
        self.assertIsInstance(result, Image.Image)

    def test_hough_transform_output_size(self):
        # Test if the output image has the expected size
        ntx, mry = 460, 360
        result = hough(self.test_image, ntx, mry)
        self.assertEqual(result.size, (ntx, mry))

    def test_hough_transform_line_detection(self):
        # Test if the Hough transform detects the line correctly
        result = hough(self.test_image)
        pixels = result.load()
        # Check if there is a significant change in pixel values indicating a line
        line_detected = any(pixels[x, y] < 255 for x in range(result.size[0]) for y in range(result.size[1]))
        self.assertTrue(line_detected)

    def test_hough_transform_no_line(self):
        # Test with an image with no lines
        blank_image = Image.new(""L"", (100, 100), 255)
        result = hough(blank_image)
        pixels = result.load()
        # Check if all pixel values are 255 indicating no lines
        no_line_detected = all(pixels[x, y] == 255 for x in range(result.size[0]) for y in range(result.size[1]))
        self.assertTrue(no_line_detected)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/hough_transform/test_gpt_4o_2024_08_06_hough_transform.py,CompileStatus.OK,0.0,61.82,52.11,0.14,0.67,,0.5110299587249756,8.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hough_transform', 'obj': '', 'line': 30, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/hough_transform/test_gpt_4o_2024_08_06_hough_transform.py', 'symbol': 'line-too-long', 'message': 'Line too long (109/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hough_transform', 'obj': '', 'line': 39, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/hough_transform/test_gpt_4o_2024_08_06_hough_transform.py', 'symbol': 'line-too-long', 'message': 'Line too long (113/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hough_transform', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/hough_transform/test_gpt_4o_2024_08_06_hough_transform.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hough_transform', 'obj': 'TestHoughTransform', 'line': 5, 'column': 0, 'endLine': 5, 'endColumn': 24, 'path': 'data/generated/docs_python/hough_transform/test_gpt_4o_2024_08_06_hough_transform.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hough_transform', 'obj': 'TestHoughTransform.test_hough_transform_output_type', 'line': 14, 'column': 4, 'endLine': 14, 'endColumn': 40, 'path': 'data/generated/docs_python/hough_transform/test_gpt_4o_2024_08_06_hough_transform.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hough_transform', 'obj': 'TestHoughTransform.test_hough_transform_output_size', 'line': 19, 'column': 4, 'endLine': 19, 'endColumn': 40, 'path': 'data/generated/docs_python/hough_transform/test_gpt_4o_2024_08_06_hough_transform.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hough_transform', 'obj': 'TestHoughTransform.test_hough_transform_line_detection', 'line': 25, 'column': 4, 'endLine': 25, 'endColumn': 43, 'path': 'data/generated/docs_python/hough_transform/test_gpt_4o_2024_08_06_hough_transform.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_hough_transform', 'obj': 'TestHoughTransform.test_hough_transform_no_line', 'line': 33, 'column': 4, 'endLine': 33, 'endColumn': 36, 'path': 'data/generated/docs_python/hough_transform/test_gpt_4o_2024_08_06_hough_transform.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Humble numbers,"Humble numbers are positive integers which have   no   prime factors    >    7.



Humble numbers are also called   7-smooth numbers,   and sometimes called   highly composite,

although this conflicts with another meaning of   highly composite numbers.



Another way to express the above is:

  humble  =  2i × 3j × 5k × 7m

           where     i, j, k, m ≥ 0



Task

   show the first   50   humble numbers   (in a horizontal list)
   show the number of humble numbers that have   x   decimal digits for all   x's   up to   n   (inclusive).
   show   (as many as feasible or reasonable for above)   on separate lines
   show all output here on this page


Related tasks

   Hamming numbers


References

   Wikipedia: Smooth numbers, see the 2nd paragraph.
   OEIS A002473: humble numbers
   University of Ulm, The first 5842 terms of humble numbers

",Python,"'''Humble numbers'''
 
from itertools import groupby, islice
from functools import reduce
 
 
# humbles :: () -> [Int]
def humbles():
    '''A non-finite stream of Humble numbers.
       OEIS A002473
    '''
    hs = set([1])
    while True:
        nxt = min(hs)
        yield nxt
        hs.remove(nxt)
        hs.update(nxt * x for x in [2, 3, 5, 7])
 
 
# TEST ----------------------------------------------------
# main :: IO ()
def main():
    '''First 50, and counts with N digits'''
 
    print('First 50 Humble numbers:\n')
    for row in chunksOf(10)(
            take(50)(humbles())
    ):
        print(' '.join(map(
            lambda x: str(x).rjust(3),
            row
        )))
 
    print('\nCounts of Humble numbers with n digits:\n')
    for tpl in take(10)(
            (k, len(list(g))) for k, g in
            groupby(len(str(x)) for x in humbles())
    ):
        print(tpl)
 
 
# GENERIC -------------------------------------------------
 
# chunksOf :: Int -> [a] -> [[a]]
def chunksOf(n):
    '''A series of lists of length n, subdividing the
       contents of xs. Where the length of xs is not evenly
       divible, the final list will be shorter than n.
    '''
    return lambda xs: reduce(
        lambda a, i: a + [xs[i:n + i]],
        range(0, len(xs), n), []
    ) if 0 < n else []
 
 
# take :: Int -> [a] -> [a]
# take :: Int -> String -> String
def take(n):
    '''The prefix of xs of length n,
       or xs itself if n > length xs.
    '''
    return lambda xs: (
        list(islice(xs, n))
    )
 
 
# MAIN ---
if __name__ == '__main__':
    main()",1592,69,"import unittest
from itertools import islice
from humble_numbers import humbles, chunksOf, take

class TestHumbleNumbers(unittest.TestCase):

    def test_first_50_humble_numbers(self):
        expected_first_50 = [
            1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
            12, 14, 15, 16, 18, 20, 21, 24, 25, 27,
            28, 30, 32, 35, 36, 40, 42, 45, 48, 49,
            50, 54, 56, 60, 63, 64, 70, 72, 75, 80,
            81, 84, 90, 96, 98, 100, 105, 108, 112, 120
        ]
        self.assertEqual(list(islice(humbles(), 50)), expected_first_50)

    def test_chunks_of(self):
        data = list(range(1, 11))
        expected_chunks = [
            [1, 2, 3],
            [4, 5, 6],
            [7, 8, 9],
            [10]
        ]
        self.assertEqual(chunksOf(3)(data), expected_chunks)

    def test_take(self):
        data = list(range(1, 11))
        self.assertEqual(take(5)(data), [1, 2, 3, 4, 5])
        self.assertEqual(take(0)(data), [])
        self.assertEqual(take(15)(data), data)

    def test_humble_numbers_with_n_digits(self):
        expected_counts = [
            (1, 9),  # 1 to 9
            (2, 25), # 10 to 99
            (3, 16)  # 100 to 999
        ]
        actual_counts = []
        for k, g in islice(groupby(len(str(x)) for x in humbles()), 3):
            actual_counts.append((k, len(list(g))))
        self.assertEqual(actual_counts, expected_counts)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/humble_numbers/test_gpt_4o_2024_08_06_humble_numbers.py,CompileStatus.OK,0.0,78.26,66.67,0.17,0.55,75.0,0.5002598762512207,7.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_humble_numbers', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/humble_numbers/test_gpt_4o_2024_08_06_humble_numbers.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_humble_numbers', 'obj': 'TestHumbleNumbers', 'line': 5, 'column': 0, 'endLine': 5, 'endColumn': 23, 'path': 'data/generated/docs_python/humble_numbers/test_gpt_4o_2024_08_06_humble_numbers.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_humble_numbers', 'obj': 'TestHumbleNumbers.test_first_50_humble_numbers', 'line': 7, 'column': 4, 'endLine': 7, 'endColumn': 36, 'path': 'data/generated/docs_python/humble_numbers/test_gpt_4o_2024_08_06_humble_numbers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_humble_numbers', 'obj': 'TestHumbleNumbers.test_chunks_of', 'line': 17, 'column': 4, 'endLine': 17, 'endColumn': 22, 'path': 'data/generated/docs_python/humble_numbers/test_gpt_4o_2024_08_06_humble_numbers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_humble_numbers', 'obj': 'TestHumbleNumbers.test_take', 'line': 27, 'column': 4, 'endLine': 27, 'endColumn': 17, 'path': 'data/generated/docs_python/humble_numbers/test_gpt_4o_2024_08_06_humble_numbers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_humble_numbers', 'obj': 'TestHumbleNumbers.test_humble_numbers_with_n_digits', 'line': 33, 'column': 4, 'endLine': 33, 'endColumn': 41, 'path': 'data/generated/docs_python/humble_numbers/test_gpt_4o_2024_08_06_humble_numbers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_humble_numbers', 'obj': 'TestHumbleNumbers.test_humble_numbers_with_n_digits', 'line': 40, 'column': 27, 'endLine': 40, 'endColumn': 34, 'path': 'data/generated/docs_python/humble_numbers/test_gpt_4o_2024_08_06_humble_numbers.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'groupby'"", 'message-id': 'E0602'}]",False
I before E except after C,"The phrase      ""I before E, except after C""     is a
widely known mnemonic which is supposed to help when spelling English words.



Task

Using the word list from   http://wiki.puzzlers.org/pub/wordlists/unixdict.txt,

check if the two sub-clauses of the phrase are plausible individually:

   ""I before E when not preceded by C""
   ""E before I when preceded by C""


If both sub-phrases are plausible then the original phrase can be said to be plausible.

Something is plausible if the number of words having the feature is more than two times the number of words having the opposite feature (where feature is 'ie' or 'ei' preceded or not by 'c' as appropriate).



Stretch goal

As a stretch goal use the entries from the table of Word Frequencies in Written and Spoken English: based on the British National Corpus, (selecting those rows with three space or tab separated words only), to see if the phrase is plausible when word frequencies are taken into account.


Show your output here as well as your program.




Other tasks related to string operations:

Metrics
 Array length
 String length
 Copy a string
 Empty string  (assignment)
Counting
 Word frequency
 Letter frequency
 Jewels and stones
 I before E except after C
 Bioinformatics/base count
 Count occurrences of a substring
 Count how many vowels and consonants occur in a string
Remove/replace
 XXXX redacted
 Conjugate a Latin verb
 Remove vowels from a string
 String interpolation (included)
 Strip block comments
 Strip comments from a string
 Strip a set of characters from a string
 Strip whitespace from a string -- top and tail
 Strip control codes and extended characters from a string
Anagrams/Derangements/shuffling
 Word wheel
 ABC problem
 Sattolo cycle
 Knuth shuffle
 Ordered words
 Superpermutation minimisation
 Textonyms (using a phone text pad)
 Anagrams
 Anagrams/Deranged anagrams
 Permutations/Derangements
Find/Search/Determine
 ABC words
 Odd words
 Word ladder
 Semordnilap
 Word search
 Wordiff  (game)
 String matching
 Tea cup rim text
 Alternade words
 Changeable words
 State name puzzle
 String comparison
 Unique characters
 Unique characters in each string
 Extract file extension
 Levenshtein distance
 Palindrome detection
 Common list elements
 Longest common suffix
 Longest common prefix
 Compare a list of strings
 Longest common substring
 Find common directory path
 Words from neighbour ones
 Change e letters to i in words
 Non-continuous subsequences
 Longest common subsequence
 Longest palindromic substrings
 Longest increasing subsequence
 Words containing ""the"" substring
 Sum of the digits of n is substring of n
 Determine if a string is numeric
 Determine if a string is collapsible
 Determine if a string is squeezable
 Determine if a string has all unique characters
 Determine if a string has all the same characters
 Longest substrings without repeating characters
 Find words which contains all the vowels
 Find words which contains most consonants
 Find words which contains more than 3 vowels
 Find words which first and last three letters are equals
 Find words which odd letters are consonants and even letters are vowels or vice_versa
Formatting
 Substring
 Rep-string
 Word wrap
 String case
 Align columns
 Literals/String
 Repeat a string
 Brace expansion
 Brace expansion using ranges
 Reverse a string
 Phrase reversals
 Comma quibbling
 Special characters
 String concatenation
 Substring/Top and tail
 Commatizing numbers
 Reverse words in a string
 Suffixation of decimal numbers
 Long literals, with continuations
 Numerical and alphabetical suffixes
 Abbreviations, easy
 Abbreviations, simple
 Abbreviations, automatic
Song lyrics/poems/Mad Libs/phrases
 Mad Libs
 Magic 8-ball
 99 Bottles of Beer
 The Name Game (a song)
 The Old lady swallowed a fly
 The Twelve Days of Christmas
Tokenize
 Text between
 Tokenize a string
 Word break problem
 Tokenize a string with escaping
 Split a character string based on change of character
Sequences
 Show ASCII table
 De Bruijn sequences
 Self-referential sequences
 Generate lower case ASCII alphabet




cf.

 Schools to rethink 'i before e' - BBC news, 20 June 2009
 I Before E Except After C - QI Series 8 Ep 14, (humorous)
 Companion website for the book: ""Word Frequencies in Written and Spoken English: based on the British National Corpus"".

",Python,"import urllib.request
import re
 
PLAUSIBILITY_RATIO = 2
 
def plausibility_check(comment, x, y):
    print('\n  Checking plausibility of: %s' % comment)
    if x > PLAUSIBILITY_RATIO * y:
        print('    PLAUSIBLE. As we have counts of %i vs %i, a ratio of %4.1f times'
              % (x, y, x / y))
    else:
        if x > y:
            print('    IMPLAUSIBLE. As although we have counts of %i vs %i, a ratio of %4.1f times does not make it plausible'
                  % (x, y, x / y))
        else:
            print('    IMPLAUSIBLE, probably contra-indicated. As we have counts of %i vs %i, a ratio of %4.1f times'
                  % (x, y, x / y))
    return x > PLAUSIBILITY_RATIO * y
 
def simple_stats(url='http://wiki.puzzlers.org/pub/wordlists/unixdict.txt'):
    words = urllib.request.urlopen(url).read().decode().lower().split()
    cie = len({word for word in words if 'cie' in word})
    cei = len({word for word in words if 'cei' in word})
    not_c_ie = len({word for word in words if re.search(r'(^ie|[^c]ie)', word)})
    not_c_ei = len({word for word in words if re.search(r'(^ei|[^c]ei)', word)})
    return cei, cie, not_c_ie, not_c_ei
 
def print_result(cei, cie, not_c_ie, not_c_ei):
    if ( plausibility_check('I before E when not preceded by C', not_c_ie, not_c_ei)
         & plausibility_check('E before I when preceded by C', cei, cie) ):
        print('\nOVERALL IT IS PLAUSIBLE!')
    else:
        print('\nOVERALL IT IS IMPLAUSIBLE!')
    print('(To be plausible, one count must exceed another by %i times)' % PLAUSIBILITY_RATIO)
 
print('Checking plausibility of ""I before E except after C"":')
print_result(*simple_stats())",1667,37,"import unittest
from unittest.mock import patch
import urllib.request

class TestIbeforeE(unittest.TestCase):

    def setUp(self):
        self.mock_wordlist = (
            ""receive\n""
            ""ceiling\n""
            ""deceive\n""
            ""perceive\n""
            ""receipt\n""
            ""ceiling\n""
            ""science\n""
            ""species\n""
            ""society\n""
            ""ancient\n""
            ""efficient\n""
            ""sufficient\n""
            ""weird\n""
            ""foreign\n""
            ""seize\n""
            ""leisure\n""
            ""neighbor\n""
            ""height\n""
            ""weight\n""
            ""veil\n""
            ""rein\n""
            ""deceit\n""
            ""conceit\n""
            ""receipt\n""
            ""ceiling\n""
            ""science\n""
            ""species\n""
            ""society\n""
            ""ancient\n""
            ""efficient\n""
            ""sufficient\n""
            ""weird\n""
            ""foreign\n""
            ""seize\n""
            ""leisure\n""
            ""neighbor\n""
            ""height\n""
            ""weight\n""
            ""veil\n""
            ""rein\n""
            ""deceit\n""
            ""conceit\n""
        )

    def test_plausibility_check(self):
        from i_before_e_except_after_c import plausibility_check

        self.assertTrue(plausibility_check(""Test plausible"", 10, 4))
        self.assertFalse(plausibility_check(""Test implausible"", 5, 3))
        self.assertFalse(plausibility_check(""Test contra-indicated"", 2, 5))

    @patch('urllib.request.urlopen')
    def test_simple_stats(self, mock_urlopen):
        from i_before_e_except_after_c import simple_stats

        mock_urlopen.return_value.read.return_value = self.mock_wordlist.encode()

        cei, cie, not_c_ie, not_c_ei = simple_stats()

        self.assertEqual(cei, 6)  # 'cei' words
        self.assertEqual(cie, 0)  # 'cie' words
        self.assertEqual(not_c_ie, 8)  # 'ie' not preceded by 'c'
        self.assertEqual(not_c_ei, 4)  # 'ei' not preceded by 'c'

    @patch('urllib.request.urlopen')
    def test_print_result(self, mock_urlopen):
        from i_before_e_except_after_c import print_result

        mock_urlopen.return_value.read.return_value = self.mock_wordlist.encode()

        with patch('builtins.print') as mock_print:
            print_result(6, 0, 8, 4)
            mock_print.assert_any_call('\nOVERALL IT IS PLAUSIBLE!')

        with patch('builtins.print') as mock_print:
            print_result(3, 2, 4, 3)
            mock_print.assert_any_call('\nOVERALL IT IS IMPLAUSIBLE!')

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/i_before_e_except_after_c/test_gpt_4o_2024_08_06_i_before_e_except_after_c.py,CompileStatus.OK,0.0,84.21,81.82,0.28,0.64,33.33,1.9335920810699463,17.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_i_before_e_except_after_c', 'obj': '', 'line': 6, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/i_before_e_except_after_c/test_gpt_4o_2024_08_06_i_before_e_except_after_c.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_i_before_e_except_after_c', 'obj': '', 'line': 55, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/i_before_e_except_after_c/test_gpt_4o_2024_08_06_i_before_e_except_after_c.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_i_before_e_except_after_c', 'obj': '', 'line': 63, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/i_before_e_except_after_c/test_gpt_4o_2024_08_06_i_before_e_except_after_c.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_i_before_e_except_after_c', 'obj': '', 'line': 65, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/i_before_e_except_after_c/test_gpt_4o_2024_08_06_i_before_e_except_after_c.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_i_before_e_except_after_c', 'obj': '', 'line': 67, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/i_before_e_except_after_c/test_gpt_4o_2024_08_06_i_before_e_except_after_c.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_i_before_e_except_after_c', 'obj': '', 'line': 76, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/i_before_e_except_after_c/test_gpt_4o_2024_08_06_i_before_e_except_after_c.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_i_before_e_except_after_c', 'obj': '', 'line': 78, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/i_before_e_except_after_c/test_gpt_4o_2024_08_06_i_before_e_except_after_c.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_i_before_e_except_after_c', 'obj': '', 'line': 82, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/i_before_e_except_after_c/test_gpt_4o_2024_08_06_i_before_e_except_after_c.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_i_before_e_except_after_c', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/i_before_e_except_after_c/test_gpt_4o_2024_08_06_i_before_e_except_after_c.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_i_before_e_except_after_c', 'obj': 'TestIbeforeE', 'line': 5, 'column': 0, 'endLine': 5, 'endColumn': 18, 'path': 'data/generated/docs_python/i_before_e_except_after_c/test_gpt_4o_2024_08_06_i_before_e_except_after_c.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_i_before_e_except_after_c', 'obj': 'TestIbeforeE.test_plausibility_check', 'line': 53, 'column': 4, 'endLine': 53, 'endColumn': 31, 'path': 'data/generated/docs_python/i_before_e_except_after_c/test_gpt_4o_2024_08_06_i_before_e_except_after_c.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_i_before_e_except_after_c', 'obj': 'TestIbeforeE.test_plausibility_check', 'line': 54, 'column': 8, 'endLine': 54, 'endColumn': 64, 'path': 'data/generated/docs_python/i_before_e_except_after_c/test_gpt_4o_2024_08_06_i_before_e_except_after_c.py', 'symbol': 'import-outside-toplevel', 'message': 'Import outside toplevel (i_before_e_except_after_c.plausibility_check)', 'message-id': 'C0415'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_i_before_e_except_after_c', 'obj': 'TestIbeforeE.test_simple_stats', 'line': 61, 'column': 4, 'endLine': 61, 'endColumn': 25, 'path': 'data/generated/docs_python/i_before_e_except_after_c/test_gpt_4o_2024_08_06_i_before_e_except_after_c.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_i_before_e_except_after_c', 'obj': 'TestIbeforeE.test_simple_stats', 'line': 62, 'column': 8, 'endLine': 62, 'endColumn': 58, 'path': 'data/generated/docs_python/i_before_e_except_after_c/test_gpt_4o_2024_08_06_i_before_e_except_after_c.py', 'symbol': 'import-outside-toplevel', 'message': 'Import outside toplevel (i_before_e_except_after_c.simple_stats)', 'message-id': 'C0415'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_i_before_e_except_after_c', 'obj': 'TestIbeforeE.test_print_result', 'line': 74, 'column': 4, 'endLine': 74, 'endColumn': 25, 'path': 'data/generated/docs_python/i_before_e_except_after_c/test_gpt_4o_2024_08_06_i_before_e_except_after_c.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_i_before_e_except_after_c', 'obj': 'TestIbeforeE.test_print_result', 'line': 75, 'column': 8, 'endLine': 75, 'endColumn': 58, 'path': 'data/generated/docs_python/i_before_e_except_after_c/test_gpt_4o_2024_08_06_i_before_e_except_after_c.py', 'symbol': 'import-outside-toplevel', 'message': 'Import outside toplevel (i_before_e_except_after_c.print_result)', 'message-id': 'C0415'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_i_before_e_except_after_c', 'obj': '', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 21, 'path': 'data/generated/docs_python/i_before_e_except_after_c/test_gpt_4o_2024_08_06_i_before_e_except_after_c.py', 'symbol': 'unused-import', 'message': 'Unused import urllib.request', 'message-id': 'W0611'}]",False
Idiomatically determine all the lowercase and uppercase letters,"
Idiomatically determine all the lowercase and uppercase letters   (of the Latin [English] alphabet)   being used currently by a computer programming language.
The method should find the letters regardless of the hardware architecture that is being used (ASCII, EBCDIC, or other).



Task requirements
Display the set of all:

   lowercase letters
   uppercase letters

that can be used (allowed) by the computer program,


where   letter   is a member of the Latin (English) alphabet:     a ──► z     and     A ──► Z.



You may want to mention what hardware architecture is being used, and if applicable, the operating system.



See also
 Idiomatically determine all the characters that can be used for symbols.

",Python,"classes = (str.isupper, str.islower, str.isalnum, str.isalpha, str.isdecimal,
           str.isdigit, str.isidentifier, str.isnumeric, str.isprintable,
           str.isspace, str.istitle)
 
for stringclass in classes:
    chars = ''.join(chr(i) for i in range(0x10FFFF+1) if stringclass(chr(i)))
    print('\nString class %s has %i characters the first of which are:\n  %r'
          % (stringclass.__name__, len(chars), chars[:100]))",435,8,"import unittest

class TestCharacterClasses(unittest.TestCase):
    def setUp(self):
        self.classes = (str.isupper, str.islower, str.isalnum, str.isalpha, str.isdecimal,
                        str.isdigit, str.isidentifier, str.isnumeric, str.isprintable,
                        str.isspace, str.istitle)

    def test_isupper(self):
        # Test that isupper identifies uppercase letters
        uppercase_letters = ''.join(chr(i) for i in range(0x10FFFF+1) if str.isupper(chr(i)))
        expected_uppercase = ''.join(chr(i) for i in range(ord('A'), ord('Z')+1))
        self.assertTrue(all(char in uppercase_letters for char in expected_uppercase))
        self.assertTrue(all(char.isupper() for char in uppercase_letters))

    def test_islower(self):
        # Test that islower identifies lowercase letters
        lowercase_letters = ''.join(chr(i) for i in range(0x10FFFF+1) if str.islower(chr(i)))
        expected_lowercase = ''.join(chr(i) for i in range(ord('a'), ord('z')+1))
        self.assertTrue(all(char in lowercase_letters for char in expected_lowercase))
        self.assertTrue(all(char.islower() for char in lowercase_letters))

    def test_isalnum(self):
        # Test that isalnum identifies alphanumeric characters
        alnum_chars = ''.join(chr(i) for i in range(0x10FFFF+1) if str.isalnum(chr(i)))
        self.assertTrue(all(char.isalnum() for char in alnum_chars))

    def test_isalpha(self):
        # Test that isalpha identifies alphabetic characters
        alpha_chars = ''.join(chr(i) for i in range(0x10FFFF+1) if str.isalpha(chr(i)))
        self.assertTrue(all(char.isalpha() for char in alpha_chars))

    def test_isdecimal(self):
        # Test that isdecimal identifies decimal characters
        decimal_chars = ''.join(chr(i) for i in range(0x10FFFF+1) if str.isdecimal(chr(i)))
        self.assertTrue(all(char.isdecimal() for char in decimal_chars))

    def test_isdigit(self):
        # Test that isdigit identifies digit characters
        digit_chars = ''.join(chr(i) for i in range(0x10FFFF+1) if str.isdigit(chr(i)))
        self.assertTrue(all(char.isdigit() for char in digit_chars))

    def test_isidentifier(self):
        # Test that isidentifier identifies valid identifier characters
        identifier_chars = ''.join(chr(i) for i in range(0x10FFFF+1) if str.isidentifier(chr(i)))
        self.assertTrue(all(char.isidentifier() for char in identifier_chars))

    def test_isnumeric(self):
        # Test that isnumeric identifies numeric characters
        numeric_chars = ''.join(chr(i) for i in range(0x10FFFF+1) if str.isnumeric(chr(i)))
        self.assertTrue(all(char.isnumeric() for char in numeric_chars))

    def test_isprintable(self):
        # Test that isprintable identifies printable characters
        printable_chars = ''.join(chr(i) for i in range(0x10FFFF+1) if str.isprintable(chr(i)))
        self.assertTrue(all(char.isprintable() for char in printable_chars))

    def test_isspace(self):
        # Test that isspace identifies whitespace characters
        space_chars = ''.join(chr(i) for i in range(0x10FFFF+1) if str.isspace(chr(i)))
        self.assertTrue(all(char.isspace() for char in space_chars))

    def test_istitle(self):
        # Test that istitle identifies titlecase characters
        title_chars = ''.join(chr(i) for i in range(0x10FFFF+1) if str.istitle(chr(i)))
        self.assertTrue(all(char.istitle() for char in title_chars))

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/idiomatically_determine_all_the_lowercase_and_uppercase_letters/test_gpt_4o_2024_08_06_idiomatically_determine_all_the_lowercase_and_uppercase_letters.py,CompileStatus.OK,0.0,89.36,90.48,0.29,,100.0,1.599740982055664,13.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_idiomatically_determine_all_the_lowercase_and_uppercase_letters', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/idiomatically_determine_all_the_lowercase_and_uppercase_letters/test_gpt_4o_2024_08_06_idiomatically_determine_all_the_lowercase_and_uppercase_letters.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_idiomatically_determine_all_the_lowercase_and_uppercase_letters', 'obj': 'TestCharacterClasses', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 26, 'path': 'data/generated/docs_python/idiomatically_determine_all_the_lowercase_and_uppercase_letters/test_gpt_4o_2024_08_06_idiomatically_determine_all_the_lowercase_and_uppercase_letters.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_idiomatically_determine_all_the_lowercase_and_uppercase_letters', 'obj': 'TestCharacterClasses.test_isupper', 'line': 9, 'column': 4, 'endLine': 9, 'endColumn': 20, 'path': 'data/generated/docs_python/idiomatically_determine_all_the_lowercase_and_uppercase_letters/test_gpt_4o_2024_08_06_idiomatically_determine_all_the_lowercase_and_uppercase_letters.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_idiomatically_determine_all_the_lowercase_and_uppercase_letters', 'obj': 'TestCharacterClasses.test_islower', 'line': 16, 'column': 4, 'endLine': 16, 'endColumn': 20, 'path': 'data/generated/docs_python/idiomatically_determine_all_the_lowercase_and_uppercase_letters/test_gpt_4o_2024_08_06_idiomatically_determine_all_the_lowercase_and_uppercase_letters.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_idiomatically_determine_all_the_lowercase_and_uppercase_letters', 'obj': 'TestCharacterClasses.test_isalnum', 'line': 23, 'column': 4, 'endLine': 23, 'endColumn': 20, 'path': 'data/generated/docs_python/idiomatically_determine_all_the_lowercase_and_uppercase_letters/test_gpt_4o_2024_08_06_idiomatically_determine_all_the_lowercase_and_uppercase_letters.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_idiomatically_determine_all_the_lowercase_and_uppercase_letters', 'obj': 'TestCharacterClasses.test_isalpha', 'line': 28, 'column': 4, 'endLine': 28, 'endColumn': 20, 'path': 'data/generated/docs_python/idiomatically_determine_all_the_lowercase_and_uppercase_letters/test_gpt_4o_2024_08_06_idiomatically_determine_all_the_lowercase_and_uppercase_letters.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_idiomatically_determine_all_the_lowercase_and_uppercase_letters', 'obj': 'TestCharacterClasses.test_isdecimal', 'line': 33, 'column': 4, 'endLine': 33, 'endColumn': 22, 'path': 'data/generated/docs_python/idiomatically_determine_all_the_lowercase_and_uppercase_letters/test_gpt_4o_2024_08_06_idiomatically_determine_all_the_lowercase_and_uppercase_letters.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_idiomatically_determine_all_the_lowercase_and_uppercase_letters', 'obj': 'TestCharacterClasses.test_isdigit', 'line': 38, 'column': 4, 'endLine': 38, 'endColumn': 20, 'path': 'data/generated/docs_python/idiomatically_determine_all_the_lowercase_and_uppercase_letters/test_gpt_4o_2024_08_06_idiomatically_determine_all_the_lowercase_and_uppercase_letters.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_idiomatically_determine_all_the_lowercase_and_uppercase_letters', 'obj': 'TestCharacterClasses.test_isidentifier', 'line': 43, 'column': 4, 'endLine': 43, 'endColumn': 25, 'path': 'data/generated/docs_python/idiomatically_determine_all_the_lowercase_and_uppercase_letters/test_gpt_4o_2024_08_06_idiomatically_determine_all_the_lowercase_and_uppercase_letters.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_idiomatically_determine_all_the_lowercase_and_uppercase_letters', 'obj': 'TestCharacterClasses.test_isnumeric', 'line': 48, 'column': 4, 'endLine': 48, 'endColumn': 22, 'path': 'data/generated/docs_python/idiomatically_determine_all_the_lowercase_and_uppercase_letters/test_gpt_4o_2024_08_06_idiomatically_determine_all_the_lowercase_and_uppercase_letters.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_idiomatically_determine_all_the_lowercase_and_uppercase_letters', 'obj': 'TestCharacterClasses.test_isprintable', 'line': 53, 'column': 4, 'endLine': 53, 'endColumn': 24, 'path': 'data/generated/docs_python/idiomatically_determine_all_the_lowercase_and_uppercase_letters/test_gpt_4o_2024_08_06_idiomatically_determine_all_the_lowercase_and_uppercase_letters.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_idiomatically_determine_all_the_lowercase_and_uppercase_letters', 'obj': 'TestCharacterClasses.test_isspace', 'line': 58, 'column': 4, 'endLine': 58, 'endColumn': 20, 'path': 'data/generated/docs_python/idiomatically_determine_all_the_lowercase_and_uppercase_letters/test_gpt_4o_2024_08_06_idiomatically_determine_all_the_lowercase_and_uppercase_letters.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_idiomatically_determine_all_the_lowercase_and_uppercase_letters', 'obj': 'TestCharacterClasses.test_istitle', 'line': 63, 'column': 4, 'endLine': 63, 'endColumn': 20, 'path': 'data/generated/docs_python/idiomatically_determine_all_the_lowercase_and_uppercase_letters/test_gpt_4o_2024_08_06_idiomatically_determine_all_the_lowercase_and_uppercase_letters.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Inheritance/Single," This task is about derived types;   for implementation inheritance, see Polymorphism.


Inheritance is an operation of type algebra that creates a new type from one or several parent types.

The obtained type is called derived type.

It inherits some of the properties of its parent types.

Usually inherited properties are:

   methods
   components
   parts of the representation


The  class of the new type is a   subclass   of the classes rooted in the parent types.

When all (in certain sense) properties of the parents are preserved by the derived type,   it is said to be a Liskov subtype.

When properties are preserved then the derived type is substitutable for its parents in all contexts.   Usually full substitutability is achievable only in some contexts.



Inheritance is

   single, when only one parent is allowed
    multiple, otherwise


Some single inheritance languages usually allow multiple inheritance for certain abstract types, interfaces in particular.

Inheritance can be considered as a relation parent-child.

Parent types are sometimes called supertype, the derived ones are subtype.   This relation is transitive and reflexive.

Types bound by the relation form a wp:Directed_acyclic_graph directed acyclic graph (ignoring reflexivity).

With single inheritance it becomes a tree.



Task

Show a tree of types which inherit from each other.

   At the top of the tree should be a class called   Animal.
   The second level should have Dog and Cat.
   Under   Dog   should be   Lab   and   Collie.
   None of the classes need to have any functions,   the only thing they need to do is inherit from the specified superclasses
   (overriding functions should be shown in Polymorphism).


The tree should look like this:

                        Animal
                          /\
                         /  \
                        /    \
                      Dog    Cat
                      /\
                     /  \
                    /    \
                  Lab  Collie


",Python,"class Animal:
  pass #functions go here...
 
class Dog(Animal):
  pass #functions go here...
 
class Cat(Animal):
  pass #functions go here...
 
class Lab(Dog):
  pass #functions go here...
 
class Collie(Dog):
  pass #functions go here...",239,14,"import unittest
from inheritance_single import Animal, Dog, Cat, Lab, Collie

class TestInheritance(unittest.TestCase):

    def test_animal_instance(self):
        animal = Animal()
        self.assertIsInstance(animal, Animal)

    def test_dog_instance(self):
        dog = Dog()
        self.assertIsInstance(dog, Dog)
        self.assertIsInstance(dog, Animal)

    def test_cat_instance(self):
        cat = Cat()
        self.assertIsInstance(cat, Cat)
        self.assertIsInstance(cat, Animal)

    def test_lab_instance(self):
        lab = Lab()
        self.assertIsInstance(lab, Lab)
        self.assertIsInstance(lab, Dog)
        self.assertIsInstance(lab, Animal)

    def test_collie_instance(self):
        collie = Collie()
        self.assertIsInstance(collie, Collie)
        self.assertIsInstance(collie, Dog)
        self.assertIsInstance(collie, Animal)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/inheritance_single/test_gpt_4o_2024_08_06_inheritance_single.py,CompileStatus.OK,0.0,97.22,94.74,0.42,,100.0,0.4807248115539551,7.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_inheritance_single', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/inheritance_single/test_gpt_4o_2024_08_06_inheritance_single.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_inheritance_single', 'obj': 'TestInheritance', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 21, 'path': 'data/generated/docs_python/inheritance_single/test_gpt_4o_2024_08_06_inheritance_single.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_inheritance_single', 'obj': 'TestInheritance.test_animal_instance', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 28, 'path': 'data/generated/docs_python/inheritance_single/test_gpt_4o_2024_08_06_inheritance_single.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_inheritance_single', 'obj': 'TestInheritance.test_dog_instance', 'line': 10, 'column': 4, 'endLine': 10, 'endColumn': 25, 'path': 'data/generated/docs_python/inheritance_single/test_gpt_4o_2024_08_06_inheritance_single.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_inheritance_single', 'obj': 'TestInheritance.test_cat_instance', 'line': 15, 'column': 4, 'endLine': 15, 'endColumn': 25, 'path': 'data/generated/docs_python/inheritance_single/test_gpt_4o_2024_08_06_inheritance_single.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_inheritance_single', 'obj': 'TestInheritance.test_lab_instance', 'line': 20, 'column': 4, 'endLine': 20, 'endColumn': 25, 'path': 'data/generated/docs_python/inheritance_single/test_gpt_4o_2024_08_06_inheritance_single.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_inheritance_single', 'obj': 'TestInheritance.test_collie_instance', 'line': 26, 'column': 4, 'endLine': 26, 'endColumn': 28, 'path': 'data/generated/docs_python/inheritance_single/test_gpt_4o_2024_08_06_inheritance_single.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Input loop,"Input loop is part of Short Circuit's Console Program Basics selection.
Task

Read from a text stream either word-by-word or line-by-line until the stream runs out of data.

The stream will have an unknown amount of data on it.



",Python,"while(True):
      x = input(""What is your age? "")
      print(x)",65,3,"import unittest
from unittest.mock import patch
from io import StringIO
import sys

class TestInputLoop(unittest.TestCase):

    @patch('builtins.input', side_effect=['25', '30', 'exit'])
    def test_input_loop(self, mock_input):
        # Redirect stdout to capture print statements
        captured_output = StringIO()
        sys.stdout = captured_output

        # Import the module containing the input loop
        import input_loop

        # Reset stdout
        sys.stdout = sys.__stdout__

        # Check the captured output
        output = captured_output.getvalue().strip().split('\n')
        expected_output = ['25', '30', 'exit']
        self.assertEqual(output, expected_output)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/input_loop/test_gpt_4o_2024_08_06_input_loop.py,CompileStatus.OK,0.0,73.68,71.43,0.06,,,0.567206859588623,6.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_input_loop', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/input_loop/test_gpt_4o_2024_08_06_input_loop.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_input_loop', 'obj': 'TestInputLoop', 'line': 6, 'column': 0, 'endLine': 6, 'endColumn': 19, 'path': 'data/generated/docs_python/input_loop/test_gpt_4o_2024_08_06_input_loop.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_input_loop', 'obj': 'TestInputLoop.test_input_loop', 'line': 9, 'column': 4, 'endLine': 9, 'endColumn': 23, 'path': 'data/generated/docs_python/input_loop/test_gpt_4o_2024_08_06_input_loop.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_input_loop', 'obj': 'TestInputLoop.test_input_loop', 'line': 15, 'column': 8, 'endLine': 15, 'endColumn': 25, 'path': 'data/generated/docs_python/input_loop/test_gpt_4o_2024_08_06_input_loop.py', 'symbol': 'import-outside-toplevel', 'message': 'Import outside toplevel (input_loop)', 'message-id': 'C0415'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_input_loop', 'obj': 'TestInputLoop.test_input_loop', 'line': 9, 'column': 30, 'endLine': 9, 'endColumn': 40, 'path': 'data/generated/docs_python/input_loop/test_gpt_4o_2024_08_06_input_loop.py', 'symbol': 'unused-argument', 'message': ""Unused argument 'mock_input'"", 'message-id': 'W0613'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_input_loop', 'obj': 'TestInputLoop.test_input_loop', 'line': 15, 'column': 8, 'endLine': 15, 'endColumn': 25, 'path': 'data/generated/docs_python/input_loop/test_gpt_4o_2024_08_06_input_loop.py', 'symbol': 'unused-import', 'message': 'Unused import input_loop', 'message-id': 'W0611'}]",False
Integer sequence,"Task

Create a program that, when run, would display all integers from   1   to      ∞      (or any relevant implementation limit),   in sequence   (i.e.   1, 2, 3, 4, etc)   if given enough time.



An example may not be able to reach arbitrarily-large numbers based on implementations limits.   For example, if integers are represented as a 32-bit unsigned value with 0 as the smallest representable value, the largest representable value would be 4,294,967,295.   Some languages support arbitrarily-large numbers as a built-in feature, while others make use of a module or library.

If appropriate, provide an example which reflect the language implementation's common built-in limits as well as an example which supports arbitrarily large numbers, and describe the nature of such limitations—or lack thereof.



",Python,"i=1
while i:
    print(i)
    i += 1",36,4,"import unittest
from unittest.mock import patch
import sys
from io import StringIO

class TestIntegerSequence(unittest.TestCase):

    @patch('builtins.print')
    def test_sequence_start(self, mock_print):
        # Test that the sequence starts at 1
        i = 1
        self.assertEqual(i, 1)
        i += 1
        self.assertEqual(i, 2)

    @patch('builtins.print')
    def test_sequence_continuation(self, mock_print):
        # Test that the sequence continues correctly
        i = 1
        for _ in range(5):
            print(i)
            i += 1
        expected_calls = [((n,),) for n in range(1, 6)]
        mock_print.assert_has_calls(expected_calls, any_order=False)

    @patch('builtins.print')
    def test_large_number_limit(self, mock_print):
        # Test the sequence up to a large number limit
        # This is a practical test to simulate reaching a large number
        i = 1
        limit = 1000  # Example limit for testing purposes
        for _ in range(limit):
            print(i)
            i += 1
        self.assertEqual(i, limit + 1)

    @patch('builtins.print')
    def test_arbitrarily_large_numbers(self, mock_print):
        # Test the ability to handle arbitrarily large numbers
        # Python's int can handle arbitrarily large numbers, so this is more of a performance test
        i = 1
        limit = 10**6  # A large number for testing purposes
        for _ in range(limit):
            i += 1
        self.assertEqual(i, limit + 1)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/integer_sequence/test_gpt_4o_2024_08_06_integer_sequence.py,CompileStatus.OK,0.0,87.5,84.62,0.14,,100.0,0.5012481212615967,11.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_integer_sequence', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/integer_sequence/test_gpt_4o_2024_08_06_integer_sequence.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_integer_sequence', 'obj': 'TestIntegerSequence', 'line': 6, 'column': 0, 'endLine': 6, 'endColumn': 25, 'path': 'data/generated/docs_python/integer_sequence/test_gpt_4o_2024_08_06_integer_sequence.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_integer_sequence', 'obj': 'TestIntegerSequence.test_sequence_start', 'line': 9, 'column': 4, 'endLine': 9, 'endColumn': 27, 'path': 'data/generated/docs_python/integer_sequence/test_gpt_4o_2024_08_06_integer_sequence.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_integer_sequence', 'obj': 'TestIntegerSequence.test_sequence_start', 'line': 9, 'column': 34, 'endLine': 9, 'endColumn': 44, 'path': 'data/generated/docs_python/integer_sequence/test_gpt_4o_2024_08_06_integer_sequence.py', 'symbol': 'unused-argument', 'message': ""Unused argument 'mock_print'"", 'message-id': 'W0613'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_integer_sequence', 'obj': 'TestIntegerSequence.test_sequence_continuation', 'line': 17, 'column': 4, 'endLine': 17, 'endColumn': 34, 'path': 'data/generated/docs_python/integer_sequence/test_gpt_4o_2024_08_06_integer_sequence.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_integer_sequence', 'obj': 'TestIntegerSequence.test_large_number_limit', 'line': 27, 'column': 4, 'endLine': 27, 'endColumn': 31, 'path': 'data/generated/docs_python/integer_sequence/test_gpt_4o_2024_08_06_integer_sequence.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_integer_sequence', 'obj': 'TestIntegerSequence.test_large_number_limit', 'line': 27, 'column': 38, 'endLine': 27, 'endColumn': 48, 'path': 'data/generated/docs_python/integer_sequence/test_gpt_4o_2024_08_06_integer_sequence.py', 'symbol': 'unused-argument', 'message': ""Unused argument 'mock_print'"", 'message-id': 'W0613'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_integer_sequence', 'obj': 'TestIntegerSequence.test_arbitrarily_large_numbers', 'line': 38, 'column': 4, 'endLine': 38, 'endColumn': 38, 'path': 'data/generated/docs_python/integer_sequence/test_gpt_4o_2024_08_06_integer_sequence.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_integer_sequence', 'obj': 'TestIntegerSequence.test_arbitrarily_large_numbers', 'line': 38, 'column': 45, 'endLine': 38, 'endColumn': 55, 'path': 'data/generated/docs_python/integer_sequence/test_gpt_4o_2024_08_06_integer_sequence.py', 'symbol': 'unused-argument', 'message': ""Unused argument 'mock_print'"", 'message-id': 'W0613'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_integer_sequence', 'obj': '', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 10, 'path': 'data/generated/docs_python/integer_sequence/test_gpt_4o_2024_08_06_integer_sequence.py', 'symbol': 'unused-import', 'message': 'Unused import sys', 'message-id': 'W0611'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_integer_sequence', 'obj': '', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 23, 'path': 'data/generated/docs_python/integer_sequence/test_gpt_4o_2024_08_06_integer_sequence.py', 'symbol': 'unused-import', 'message': 'Unused StringIO imported from io', 'message-id': 'W0611'}]",False
Jacobi symbol,"The Jacobi symbol is a multiplicative function that generalizes the Legendre symbol. Specifically, the Jacobi symbol (a | n) equals the product of the Legendre symbols (a | p_i)^(k_i), where n = p_1^(k_1)*p_2^(k_2)*...*p_i^(k_i) and the Legendre symbol (a | p) denotes the value of a ^ ((p-1)/2) (mod p)

 (a | p) ≡   1     if a is a square (mod p)
 (a | p) ≡ -1     if a is not a square (mod p)
 (a | p) ≡   0     if a ≡ 0
If n is prime, then the Jacobi symbol (a | n) equals the Legendre symbol (a | n).

Task

Calculate the Jacobi symbol (a | n).

Reference

 Wikipedia article on Jacobi symbol.",Python,"def jacobi(a, n):
    if n <= 0:
        raise ValueError(""'n' must be a positive integer."")
    if n % 2 == 0:
        raise ValueError(""'n' must be odd."")
    a %= n
    result = 1
    while a != 0:
        while a % 2 == 0:
            a /= 2
            n_mod_8 = n % 8
            if n_mod_8 in (3, 5):
                result = -result
        a, n = n, a
        if a % 4 == 3 and n % 4 == 3:
            result = -result
        a %= n
    if n == 1:
        return result
    else:
        return 0",506,21,"import unittest

class TestJacobiSymbol(unittest.TestCase):
    def test_jacobi_symbol_basic_cases(self):
        # Basic cases
        self.assertEqual(jacobi(1, 3), 1)
        self.assertEqual(jacobi(2, 3), -1)
        self.assertEqual(jacobi(3, 3), 0)
        self.assertEqual(jacobi(4, 3), 1)
        self.assertEqual(jacobi(5, 3), -1)

    def test_jacobi_symbol_with_prime_n(self):
        # n is prime, should match Legendre symbol
        self.assertEqual(jacobi(2, 7), 1)
        self.assertEqual(jacobi(3, 7), -1)
        self.assertEqual(jacobi(4, 7), 1)
        self.assertEqual(jacobi(5, 7), -1)
        self.assertEqual(jacobi(6, 7), -1)

    def test_jacobi_symbol_with_composite_n(self):
        # n is composite
        self.assertEqual(jacobi(2, 9), -1)
        self.assertEqual(jacobi(3, 9), 0)
        self.assertEqual(jacobi(5, 9), -1)
        self.assertEqual(jacobi(7, 9), -1)

    def test_jacobi_symbol_edge_cases(self):
        # Edge cases
        self.assertEqual(jacobi(0, 1), 0)
        self.assertEqual(jacobi(0, 3), 0)
        self.assertEqual(jacobi(1, 1), 1)
        self.assertEqual(jacobi(1, 9), 1)

    def test_jacobi_symbol_invalid_inputs(self):
        # Invalid inputs
        with self.assertRaises(ValueError):
            jacobi(1, 0)
        with self.assertRaises(ValueError):
            jacobi(1, -3)
        with self.assertRaises(ValueError):
            jacobi(1, 2)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/jacobi_symbol/test_gpt_4o_2024_08_06_jacobi_symbol.py,CompileStatus.OK,0.0,26.42,21.33,0.64,2.33,,0.4856109619140625,28.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_jacobi_symbol', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/jacobi_symbol/test_gpt_4o_2024_08_06_jacobi_symbol.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_jacobi_symbol', 'obj': 'TestJacobiSymbol', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 22, 'path': 'data/generated/docs_python/jacobi_symbol/test_gpt_4o_2024_08_06_jacobi_symbol.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_jacobi_symbol', 'obj': 'TestJacobiSymbol.test_jacobi_symbol_basic_cases', 'line': 4, 'column': 4, 'endLine': 4, 'endColumn': 38, 'path': 'data/generated/docs_python/jacobi_symbol/test_gpt_4o_2024_08_06_jacobi_symbol.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_jacobi_symbol', 'obj': 'TestJacobiSymbol.test_jacobi_symbol_basic_cases', 'line': 6, 'column': 25, 'endLine': 6, 'endColumn': 31, 'path': 'data/generated/docs_python/jacobi_symbol/test_gpt_4o_2024_08_06_jacobi_symbol.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'jacobi'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_jacobi_symbol', 'obj': 'TestJacobiSymbol.test_jacobi_symbol_basic_cases', 'line': 7, 'column': 25, 'endLine': 7, 'endColumn': 31, 'path': 'data/generated/docs_python/jacobi_symbol/test_gpt_4o_2024_08_06_jacobi_symbol.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'jacobi'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_jacobi_symbol', 'obj': 'TestJacobiSymbol.test_jacobi_symbol_basic_cases', 'line': 8, 'column': 25, 'endLine': 8, 'endColumn': 31, 'path': 'data/generated/docs_python/jacobi_symbol/test_gpt_4o_2024_08_06_jacobi_symbol.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'jacobi'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_jacobi_symbol', 'obj': 'TestJacobiSymbol.test_jacobi_symbol_basic_cases', 'line': 9, 'column': 25, 'endLine': 9, 'endColumn': 31, 'path': 'data/generated/docs_python/jacobi_symbol/test_gpt_4o_2024_08_06_jacobi_symbol.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'jacobi'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_jacobi_symbol', 'obj': 'TestJacobiSymbol.test_jacobi_symbol_basic_cases', 'line': 10, 'column': 25, 'endLine': 10, 'endColumn': 31, 'path': 'data/generated/docs_python/jacobi_symbol/test_gpt_4o_2024_08_06_jacobi_symbol.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'jacobi'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_jacobi_symbol', 'obj': 'TestJacobiSymbol.test_jacobi_symbol_with_prime_n', 'line': 12, 'column': 4, 'endLine': 12, 'endColumn': 39, 'path': 'data/generated/docs_python/jacobi_symbol/test_gpt_4o_2024_08_06_jacobi_symbol.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_jacobi_symbol', 'obj': 'TestJacobiSymbol.test_jacobi_symbol_with_prime_n', 'line': 14, 'column': 25, 'endLine': 14, 'endColumn': 31, 'path': 'data/generated/docs_python/jacobi_symbol/test_gpt_4o_2024_08_06_jacobi_symbol.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'jacobi'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_jacobi_symbol', 'obj': 'TestJacobiSymbol.test_jacobi_symbol_with_prime_n', 'line': 15, 'column': 25, 'endLine': 15, 'endColumn': 31, 'path': 'data/generated/docs_python/jacobi_symbol/test_gpt_4o_2024_08_06_jacobi_symbol.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'jacobi'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_jacobi_symbol', 'obj': 'TestJacobiSymbol.test_jacobi_symbol_with_prime_n', 'line': 16, 'column': 25, 'endLine': 16, 'endColumn': 31, 'path': 'data/generated/docs_python/jacobi_symbol/test_gpt_4o_2024_08_06_jacobi_symbol.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'jacobi'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_jacobi_symbol', 'obj': 'TestJacobiSymbol.test_jacobi_symbol_with_prime_n', 'line': 17, 'column': 25, 'endLine': 17, 'endColumn': 31, 'path': 'data/generated/docs_python/jacobi_symbol/test_gpt_4o_2024_08_06_jacobi_symbol.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'jacobi'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_jacobi_symbol', 'obj': 'TestJacobiSymbol.test_jacobi_symbol_with_prime_n', 'line': 18, 'column': 25, 'endLine': 18, 'endColumn': 31, 'path': 'data/generated/docs_python/jacobi_symbol/test_gpt_4o_2024_08_06_jacobi_symbol.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'jacobi'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_jacobi_symbol', 'obj': 'TestJacobiSymbol.test_jacobi_symbol_with_composite_n', 'line': 20, 'column': 4, 'endLine': 20, 'endColumn': 43, 'path': 'data/generated/docs_python/jacobi_symbol/test_gpt_4o_2024_08_06_jacobi_symbol.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_jacobi_symbol', 'obj': 'TestJacobiSymbol.test_jacobi_symbol_with_composite_n', 'line': 22, 'column': 25, 'endLine': 22, 'endColumn': 31, 'path': 'data/generated/docs_python/jacobi_symbol/test_gpt_4o_2024_08_06_jacobi_symbol.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'jacobi'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_jacobi_symbol', 'obj': 'TestJacobiSymbol.test_jacobi_symbol_with_composite_n', 'line': 23, 'column': 25, 'endLine': 23, 'endColumn': 31, 'path': 'data/generated/docs_python/jacobi_symbol/test_gpt_4o_2024_08_06_jacobi_symbol.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'jacobi'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_jacobi_symbol', 'obj': 'TestJacobiSymbol.test_jacobi_symbol_with_composite_n', 'line': 24, 'column': 25, 'endLine': 24, 'endColumn': 31, 'path': 'data/generated/docs_python/jacobi_symbol/test_gpt_4o_2024_08_06_jacobi_symbol.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'jacobi'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_jacobi_symbol', 'obj': 'TestJacobiSymbol.test_jacobi_symbol_with_composite_n', 'line': 25, 'column': 25, 'endLine': 25, 'endColumn': 31, 'path': 'data/generated/docs_python/jacobi_symbol/test_gpt_4o_2024_08_06_jacobi_symbol.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'jacobi'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_jacobi_symbol', 'obj': 'TestJacobiSymbol.test_jacobi_symbol_edge_cases', 'line': 27, 'column': 4, 'endLine': 27, 'endColumn': 37, 'path': 'data/generated/docs_python/jacobi_symbol/test_gpt_4o_2024_08_06_jacobi_symbol.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_jacobi_symbol', 'obj': 'TestJacobiSymbol.test_jacobi_symbol_edge_cases', 'line': 29, 'column': 25, 'endLine': 29, 'endColumn': 31, 'path': 'data/generated/docs_python/jacobi_symbol/test_gpt_4o_2024_08_06_jacobi_symbol.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'jacobi'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_jacobi_symbol', 'obj': 'TestJacobiSymbol.test_jacobi_symbol_edge_cases', 'line': 30, 'column': 25, 'endLine': 30, 'endColumn': 31, 'path': 'data/generated/docs_python/jacobi_symbol/test_gpt_4o_2024_08_06_jacobi_symbol.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'jacobi'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_jacobi_symbol', 'obj': 'TestJacobiSymbol.test_jacobi_symbol_edge_cases', 'line': 31, 'column': 25, 'endLine': 31, 'endColumn': 31, 'path': 'data/generated/docs_python/jacobi_symbol/test_gpt_4o_2024_08_06_jacobi_symbol.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'jacobi'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_jacobi_symbol', 'obj': 'TestJacobiSymbol.test_jacobi_symbol_edge_cases', 'line': 32, 'column': 25, 'endLine': 32, 'endColumn': 31, 'path': 'data/generated/docs_python/jacobi_symbol/test_gpt_4o_2024_08_06_jacobi_symbol.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'jacobi'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_jacobi_symbol', 'obj': 'TestJacobiSymbol.test_jacobi_symbol_invalid_inputs', 'line': 34, 'column': 4, 'endLine': 34, 'endColumn': 41, 'path': 'data/generated/docs_python/jacobi_symbol/test_gpt_4o_2024_08_06_jacobi_symbol.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_jacobi_symbol', 'obj': 'TestJacobiSymbol.test_jacobi_symbol_invalid_inputs', 'line': 37, 'column': 12, 'endLine': 37, 'endColumn': 18, 'path': 'data/generated/docs_python/jacobi_symbol/test_gpt_4o_2024_08_06_jacobi_symbol.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'jacobi'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_jacobi_symbol', 'obj': 'TestJacobiSymbol.test_jacobi_symbol_invalid_inputs', 'line': 39, 'column': 12, 'endLine': 39, 'endColumn': 18, 'path': 'data/generated/docs_python/jacobi_symbol/test_gpt_4o_2024_08_06_jacobi_symbol.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'jacobi'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_jacobi_symbol', 'obj': 'TestJacobiSymbol.test_jacobi_symbol_invalid_inputs', 'line': 41, 'column': 12, 'endLine': 41, 'endColumn': 18, 'path': 'data/generated/docs_python/jacobi_symbol/test_gpt_4o_2024_08_06_jacobi_symbol.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 'jacobi'"", 'message-id': 'E0602'}]",False
Jaro similarity,"The Jaro distance is a measure of edit distance between two strings; its inverse, called the Jaro similarity, is a measure of two strings' similarity: the higher the value, the more similar the strings are. The score is normalized such that   0   equates to no similarities and   1   is an exact match.



Definition
The Jaro similarity  




d

j




{\displaystyle d_{j}}

   of two given strings  




s

1




{\displaystyle s_{1}}

   and  




s

2




{\displaystyle s_{2}}

   is






d

j


=

{




0



if 

m
=
0






1
3



(


m


|


s

1



|




+


m


|


s

2



|




+



m
−
t

m


)




otherwise









{\displaystyle d_{j}=\left\{{\begin{array}{l l}0&{\text{if }}m=0\\{\frac {1}{3}}\left({\frac {m}{|s_{1}|}}+{\frac {m}{|s_{2}|}}+{\frac {m-t}{m}}\right)&{\text{otherwise}}\end{array}}\right.}


Where:





m


{\displaystyle m}

   is the number of matching characters;




t


{\displaystyle t}

   is half the number of transpositions.


Two characters from  




s

1




{\displaystyle s_{1}}

   and  




s

2




{\displaystyle s_{2}}

   respectively, are considered matching only if they are the same and not farther apart than  




⌊



max
(

|


s

1



|

,

|


s

2



|

)

2


⌋

−
1


{\displaystyle \left\lfloor {\frac {\max(|s_{1}|,|s_{2}|)}{2}}\right\rfloor -1}

 characters.

Each character of  




s

1




{\displaystyle s_{1}}

   is compared with all its matching characters in  




s

2




{\displaystyle s_{2}}

. Each difference in position is half a transposition; that is, the number of transpositions is half the number of characters which are common to the two strings but occupy different positions in each one.



Example
Given the strings  




s

1




{\displaystyle s_{1}}

   DWAYNE   and  




s

2




{\displaystyle s_{2}}

   DUANE   we find:





m
=
4


{\displaystyle m=4}







|


s

1



|

=
6


{\displaystyle |s_{1}|=6}







|


s

2



|

=
5


{\displaystyle |s_{2}|=5}






t
=
0


{\displaystyle t=0}




We find a Jaro score of:






d

j


=


1
3



(


4
6


+


4
5


+



4
−
0

4


)

=
0.822


{\displaystyle d_{j}={\frac {1}{3}}\left({\frac {4}{6}}+{\frac {4}{5}}+{\frac {4-0}{4}}\right)=0.822}




Task
Implement the Jaro algorithm and show the similarity scores for each of the following pairs:

 (""MARTHA"", ""MARHTA"")
 (""DIXON"", ""DICKSONX"")
 (""JELLYFISH"", ""SMELLYFISH"")


 See also
 Jaro–Winkler distance on Wikipedia.

",Python,"'''Jaro distance'''
 
from __future__ import division
 
 
def jaro(s, t):
    '''Jaro distance between two strings.'''
    s_len = len(s)
    t_len = len(t)
 
    if s_len == 0 and t_len == 0:
        return 1
 
    match_distance = (max(s_len, t_len) // 2) - 1
 
    s_matches = [False] * s_len
    t_matches = [False] * t_len
 
    matches = 0
    transpositions = 0
 
    for i in range(s_len):
        start = max(0, i - match_distance)
        end = min(i + match_distance + 1, t_len)
 
        for j in range(start, end):
            if t_matches[j]:
                continue
            if s[i] != t[j]:
                continue
            s_matches[i] = True
            t_matches[j] = True
            matches += 1
            break
 
    if matches == 0:
        return 0
 
    k = 0
    for i in range(s_len):
        if not s_matches[i]:
            continue
        while not t_matches[k]:
            k += 1
        if s[i] != t[k]:
            transpositions += 1
        k += 1
 
    return ((matches / s_len) +
            (matches / t_len) +
            ((matches - transpositions / 2) / matches)) / 3
 
 
def main():
    '''Tests'''
 
    for s, t in [('MARTHA', 'MARHTA'),
                 ('DIXON', 'DICKSONX'),
                 ('JELLYFISH', 'SMELLYFISH')]:
        print(""jaro(%r, %r) = %.10f"" % (s, t, jaro(s, t)))
 
 
if __name__ == '__main__':
    main()",1381,64,"import unittest
from jaro_similarity import jaro

class TestJaroSimilarity(unittest.TestCase):

    def test_exact_match(self):
        self.assertAlmostEqual(jaro(""IDENTICAL"", ""IDENTICAL""), 1.0, places=10)

    def test_no_match(self):
        self.assertAlmostEqual(jaro(""ABC"", ""XYZ""), 0.0, places=10)

    def test_partial_match(self):
        self.assertAlmostEqual(jaro(""MARTHA"", ""MARHTA""), 0.9444444444, places=10)
        self.assertAlmostEqual(jaro(""DIXON"", ""DICKSONX""), 0.7666666667, places=10)
        self.assertAlmostEqual(jaro(""JELLYFISH"", ""SMELLYFISH""), 0.8962962963, places=10)

    def test_empty_strings(self):
        self.assertAlmostEqual(jaro("""", """"), 1.0, places=10)
        self.assertAlmostEqual(jaro(""NONEMPTY"", """"), 0.0, places=10)
        self.assertAlmostEqual(jaro("""", ""NONEMPTY""), 0.0, places=10)

    def test_single_character(self):
        self.assertAlmostEqual(jaro(""A"", ""A""), 1.0, places=10)
        self.assertAlmostEqual(jaro(""A"", ""B""), 0.0, places=10)

    def test_different_lengths(self):
        self.assertAlmostEqual(jaro(""ABC"", ""ABCD""), 0.9166666667, places=10)
        self.assertAlmostEqual(jaro(""ABCD"", ""ABC""), 0.9166666667, places=10)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/jaro_similarity/test_gpt_4o_2024_08_06_jaro_similarity.py,CompileStatus.OK,0.0,92.06,89.89,0.52,0.86,83.33,0.5230071544647217,8.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_jaro_similarity', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/jaro_similarity/test_gpt_4o_2024_08_06_jaro_similarity.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_jaro_similarity', 'obj': 'TestJaroSimilarity', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 24, 'path': 'data/generated/docs_python/jaro_similarity/test_gpt_4o_2024_08_06_jaro_similarity.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_jaro_similarity', 'obj': 'TestJaroSimilarity.test_exact_match', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 24, 'path': 'data/generated/docs_python/jaro_similarity/test_gpt_4o_2024_08_06_jaro_similarity.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_jaro_similarity', 'obj': 'TestJaroSimilarity.test_no_match', 'line': 9, 'column': 4, 'endLine': 9, 'endColumn': 21, 'path': 'data/generated/docs_python/jaro_similarity/test_gpt_4o_2024_08_06_jaro_similarity.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_jaro_similarity', 'obj': 'TestJaroSimilarity.test_partial_match', 'line': 12, 'column': 4, 'endLine': 12, 'endColumn': 26, 'path': 'data/generated/docs_python/jaro_similarity/test_gpt_4o_2024_08_06_jaro_similarity.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_jaro_similarity', 'obj': 'TestJaroSimilarity.test_empty_strings', 'line': 17, 'column': 4, 'endLine': 17, 'endColumn': 26, 'path': 'data/generated/docs_python/jaro_similarity/test_gpt_4o_2024_08_06_jaro_similarity.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_jaro_similarity', 'obj': 'TestJaroSimilarity.test_single_character', 'line': 22, 'column': 4, 'endLine': 22, 'endColumn': 29, 'path': 'data/generated/docs_python/jaro_similarity/test_gpt_4o_2024_08_06_jaro_similarity.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_jaro_similarity', 'obj': 'TestJaroSimilarity.test_different_lengths', 'line': 26, 'column': 4, 'endLine': 26, 'endColumn': 30, 'path': 'data/generated/docs_python/jaro_similarity/test_gpt_4o_2024_08_06_jaro_similarity.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Julia set,"
Task
Generate and draw a Julia set.




Related tasks
   Mandelbrot Set

",Python,"from PIL import Image
 
if __name__ == ""__main__"":
	w, h, zoom = 800,600,1
	bitmap = Image.new(""RGB"", (w, h), ""white"")
	pix = bitmap.load()
 
	cX, cY = -0.7, 0.27015
	moveX, moveY = 0.0, 0.0
	maxIter = 255
 
	for x in range(w):
		for y in range(h):
			zx = 1.5*(x - w/2)/(0.5*zoom*w) + moveX
			zy = 1.0*(y - h/2)/(0.5*zoom*h) + moveY
			i = maxIter
			while zx*zx + zy*zy < 4 and i > 1:
				tmp = zx*zx - zy*zy + cX
				zy,zx = 2.0*zx*zy + cY, tmp
				i -= 1
			# convert byte to RGB (3 bytes), kinda magic to get nice colors
			pix[x][y] = (i << 21) + (i << 10) + i*8
 
	bitmap.show()",586,24,"import unittest
from PIL import Image
from julia_set import generate_julia_set

class TestJuliaSet(unittest.TestCase):

    def setUp(self):
        self.width = 800
        self.height = 600
        self.zoom = 1
        self.cX = -0.7
        self.cY = 0.27015
        self.moveX = 0.0
        self.moveY = 0.0
        self.maxIter = 255

    def test_image_creation(self):
        """"""Test if the image is created with the correct dimensions.""""""
        bitmap = Image.new(""RGB"", (self.width, self.height), ""white"")
        self.assertEqual(bitmap.size, (self.width, self.height))

    def test_pixel_color_range(self):
        """"""Test if the pixel colors are within the valid range.""""""
        bitmap = Image.new(""RGB"", (self.width, self.height), ""white"")
        pix = bitmap.load()

        for x in range(self.width):
            for y in range(self.height):
                zx = 1.5 * (x - self.width / 2) / (0.5 * self.zoom * self.width) + self.moveX
                zy = 1.0 * (y - self.height / 2) / (0.5 * self.zoom * self.height) + self.moveY
                i = self.maxIter
                while zx * zx + zy * zy < 4 and i > 1:
                    tmp = zx * zx - zy * zy + self.cX
                    zy, zx = 2.0 * zx * zy + self.cY, tmp
                    i -= 1
                color = (i << 21) + (i << 10) + i * 8
                pix[x, y] = color
                self.assertTrue(0 <= pix[x, y][0] <= 255)
                self.assertTrue(0 <= pix[x, y][1] <= 255)
                self.assertTrue(0 <= pix[x, y][2] <= 255)

    def test_julia_set_generation(self):
        """"""Test the generation of the Julia set.""""""
        bitmap = generate_julia_set(self.width, self.height, self.zoom, self.cX, self.cY, self.moveX, self.moveY, self.maxIter)
        self.assertIsInstance(bitmap, Image.Image)
        self.assertEqual(bitmap.size, (self.width, self.height))

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/julia_set/test_gpt_4o_2024_08_06_julia_set.py,CompileStatus.OK,0.0,8.62,8.11,0.15,,,0.5435349941253662,10.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_julia_set', 'obj': '', 'line': 44, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/julia_set/test_gpt_4o_2024_08_06_julia_set.py', 'symbol': 'line-too-long', 'message': 'Line too long (127/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_julia_set', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/julia_set/test_gpt_4o_2024_08_06_julia_set.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_julia_set', 'obj': '', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 40, 'path': 'data/generated/docs_python/julia_set/test_gpt_4o_2024_08_06_julia_set.py', 'symbol': 'no-name-in-module', 'message': ""No name 'generate_julia_set' in module 'julia_set'"", 'message-id': 'E0611'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_julia_set', 'obj': 'TestJuliaSet', 'line': 5, 'column': 0, 'endLine': 5, 'endColumn': 18, 'path': 'data/generated/docs_python/julia_set/test_gpt_4o_2024_08_06_julia_set.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_julia_set', 'obj': 'TestJuliaSet.setUp', 'line': 11, 'column': 8, 'endLine': 11, 'endColumn': 15, 'path': 'data/generated/docs_python/julia_set/test_gpt_4o_2024_08_06_julia_set.py', 'symbol': 'invalid-name', 'message': 'Attribute name ""cX"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_julia_set', 'obj': 'TestJuliaSet.setUp', 'line': 12, 'column': 8, 'endLine': 12, 'endColumn': 15, 'path': 'data/generated/docs_python/julia_set/test_gpt_4o_2024_08_06_julia_set.py', 'symbol': 'invalid-name', 'message': 'Attribute name ""cY"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_julia_set', 'obj': 'TestJuliaSet.setUp', 'line': 13, 'column': 8, 'endLine': 13, 'endColumn': 18, 'path': 'data/generated/docs_python/julia_set/test_gpt_4o_2024_08_06_julia_set.py', 'symbol': 'invalid-name', 'message': 'Attribute name ""moveX"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_julia_set', 'obj': 'TestJuliaSet.setUp', 'line': 14, 'column': 8, 'endLine': 14, 'endColumn': 18, 'path': 'data/generated/docs_python/julia_set/test_gpt_4o_2024_08_06_julia_set.py', 'symbol': 'invalid-name', 'message': 'Attribute name ""moveY"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_julia_set', 'obj': 'TestJuliaSet.setUp', 'line': 15, 'column': 8, 'endLine': 15, 'endColumn': 20, 'path': 'data/generated/docs_python/julia_set/test_gpt_4o_2024_08_06_julia_set.py', 'symbol': 'invalid-name', 'message': 'Attribute name ""maxIter"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'refactor', 'module': 'test_gpt_4o_2024_08_06_julia_set', 'obj': 'TestJuliaSet', 'line': 5, 'column': 0, 'endLine': 5, 'endColumn': 18, 'path': 'data/generated/docs_python/julia_set/test_gpt_4o_2024_08_06_julia_set.py', 'symbol': 'too-many-instance-attributes', 'message': 'Too many instance attributes (8/7)', 'message-id': 'R0902'}]",False
Knight's tour,"
Task
Problem: you have a standard 8x8 chessboard, empty but for a single knight on some square. Your task is to emit a series of legal knight moves that result in the knight visiting every square on the chessboard exactly once. Note that it is not a requirement that the tour be ""closed""; that is, the knight need not end within a single move of its start position.

Input and output may be textual or graphical, according to the conventions of the programming environment. If textual, squares should be indicated in algebraic notation. The output should indicate the order in which the knight visits the squares, starting with the initial position. The form of the output may be a diagram of the board with the squares numbered according to visitation sequence, or a textual list of algebraic coordinates in order, or even an actual animation of the knight moving around the chessboard.

Input: starting square

Output: move sequence



Related tasks
 A* search algorithm
 N-queens problem
 Solve a Hidato puzzle
 Solve a Holy Knight's tour
 Solve a Hopido puzzle
 Solve a Numbrix puzzle
 Solve the no connection puzzle

",Python,"import copy
 
boardsize=6
_kmoves = ((2,1), (1,2), (-1,2), (-2,1), (-2,-1), (-1,-2), (1,-2), (2,-1))
 
 
def chess2index(chess, boardsize=boardsize):
    'Convert Algebraic chess notation to internal index format'
    chess = chess.strip().lower()
    x = ord(chess[0]) - ord('a')
    y = boardsize - int(chess[1:])
    return (x, y)
 
def boardstring(board, boardsize=boardsize):
    r = range(boardsize)
    lines = ''
    for y in r:
        lines += '\n' + ','.join('%2i' % board[(x,y)] if board[(x,y)] else '  '
                                 for x in r)
    return lines
 
def knightmoves(board, P, boardsize=boardsize):
    Px, Py = P
    kmoves = set((Px+x, Py+y) for x,y in _kmoves)
    kmoves = set( (x,y)
                  for x,y in kmoves
                  if 0 <= x < boardsize
                     and 0 <= y < boardsize
                     and not board[(x,y)] )
    return kmoves
 
def accessibility(board, P, boardsize=boardsize):
    access = []
    brd = copy.deepcopy(board)
    for pos in knightmoves(board, P, boardsize=boardsize):
        brd[pos] = -1
        access.append( (len(knightmoves(brd, pos, boardsize=boardsize)), pos) )
        brd[pos] = 0
    return access
 
def knights_tour(start, boardsize=boardsize, _debug=False):
    board = {(x,y):0 for x in range(boardsize) for y in range(boardsize)}
    move = 1
    P = chess2index(start, boardsize)
    board[P] = move
    move += 1
    if _debug:
        print(boardstring(board, boardsize=boardsize))
    while move <= len(board):
        P = min(accessibility(board, P, boardsize))[1]
        board[P] = move
        move += 1
        if _debug:
            print(boardstring(board, boardsize=boardsize))
            input('\n%2i next: ' % move)
    return board
 
if __name__ == '__main__':
    while 1:
        boardsize = int(input('\nboardsize: '))
        if boardsize < 5:
            continue
        start = input('Start position: ')
        board = knights_tour(start, boardsize)
        print(boardstring(board, boardsize=boardsize))",2034,65,"import unittest
from knight_s_tour import chess2index, boardstring, knightmoves, accessibility, knights_tour

class TestKnightsTour(unittest.TestCase):

    def test_chess2index(self):
        self.assertEqual(chess2index('a1'), (0, 5))
        self.assertEqual(chess2index('b2'), (1, 4))
        self.assertEqual(chess2index('h6'), (7, 0))
        self.assertEqual(chess2index('d4'), (3, 2))

    def test_boardstring(self):
        board = {(x, y): 0 for x in range(6) for y in range(6)}
        board[(0, 0)] = 1
        board[(5, 5)] = 2
        expected_output = (
            ""\n  ,  ,  ,  ,  , 2""
            ""\n  ,  ,  ,  ,  ,  ""
            ""\n  ,  ,  ,  ,  ,  ""
            ""\n  ,  ,  ,  ,  ,  ""
            ""\n  ,  ,  ,  ,  ,  ""
            ""\n 1,  ,  ,  ,  ,  ""
        )
        self.assertEqual(boardstring(board), expected_output)

    def test_knightmoves(self):
        board = {(x, y): 0 for x in range(6) for y in range(6)}
        board[(2, 2)] = 1
        expected_moves = {(0, 1), (0, 3), (1, 0), (1, 4), (3, 0), (3, 4), (4, 1), (4, 3)}
        self.assertEqual(knightmoves(board, (2, 2)), expected_moves)

    def test_accessibility(self):
        board = {(x, y): 0 for x in range(6) for y in range(6)}
        board[(2, 2)] = 1
        access = accessibility(board, (2, 2))
        expected_access = [
            (4, (0, 1)), (4, (0, 3)), (4, (1, 0)), (4, (1, 4)),
            (4, (3, 0)), (4, (3, 4)), (4, (4, 1)), (4, (4, 3))
        ]
        self.assertEqual(sorted(access), sorted(expected_access))

    def test_knights_tour(self):
        board = knights_tour('a1', 6)
        visited_squares = [pos for pos, move in board.items() if move > 0]
        self.assertEqual(len(visited_squares), 36)  # All squares should be visited
        self.assertEqual(len(set(visited_squares)), 36)  # All visits should be unique

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/knight_s_tour/test_gpt_4o_2024_08_06_knight_s_tour.py,CompileStatus.OK,0.0,86.75,85.22,0.26,0.47,60.0,0.4842050075531006,7.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_knight_s_tour', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/knight_s_tour/test_gpt_4o_2024_08_06_knight_s_tour.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_knight_s_tour', 'obj': 'TestKnightsTour', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 21, 'path': 'data/generated/docs_python/knight_s_tour/test_gpt_4o_2024_08_06_knight_s_tour.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_knight_s_tour', 'obj': 'TestKnightsTour.test_chess2index', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 24, 'path': 'data/generated/docs_python/knight_s_tour/test_gpt_4o_2024_08_06_knight_s_tour.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_knight_s_tour', 'obj': 'TestKnightsTour.test_boardstring', 'line': 12, 'column': 4, 'endLine': 12, 'endColumn': 24, 'path': 'data/generated/docs_python/knight_s_tour/test_gpt_4o_2024_08_06_knight_s_tour.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_knight_s_tour', 'obj': 'TestKnightsTour.test_knightmoves', 'line': 26, 'column': 4, 'endLine': 26, 'endColumn': 24, 'path': 'data/generated/docs_python/knight_s_tour/test_gpt_4o_2024_08_06_knight_s_tour.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_knight_s_tour', 'obj': 'TestKnightsTour.test_accessibility', 'line': 32, 'column': 4, 'endLine': 32, 'endColumn': 26, 'path': 'data/generated/docs_python/knight_s_tour/test_gpt_4o_2024_08_06_knight_s_tour.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_knight_s_tour', 'obj': 'TestKnightsTour.test_knights_tour', 'line': 42, 'column': 4, 'endLine': 42, 'endColumn': 25, 'path': 'data/generated/docs_python/knight_s_tour/test_gpt_4o_2024_08_06_knight_s_tour.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Knuth's algorithm S,"This is a method of randomly sampling n items from a set of M items, with equal probability; where M >= n and M, the number of items is unknown until the end.
This means that the equal probability sampling should be maintained for all successive items > n as they become available (although the content of successive samples can change).



The algorithm

 Select the first n items as the sample as they become available;
 For the i-th item where i > n, have a random chance of n/i of keeping it. If failing this chance, the sample remains the same. If not, have it randomly (1/n) replace one of the previously selected n items of the sample.
 Repeat   2nd step   for any subsequent items.


The Task

 Create a function s_of_n_creator that given



n


{\displaystyle n}

 the maximum sample size, returns a function s_of_n that takes one parameter, item.
 Function s_of_n when called with successive items returns an equi-weighted random sample of up to n of its items so far, each time it is called, calculated using Knuths Algorithm S.
 Test your functions by printing and showing the frequency of occurrences of the selected digits from 100,000 repetitions of:
 Use the s_of_n_creator with n == 3 to generate an s_of_n.
 call s_of_n with each of the digits 0 to 9 in order, keeping the returned three digits of its random sampling from its last call with argument item=9.


Note: A class taking n and generating a callable instance/function might also be used.



Reference

 The Art of Computer Programming, Vol 2, 3.4.2 p.142


Related tasks

 One of n lines in a file
 Accumulator factory

",Python,"from random import randrange
 
def s_of_n_creator(n):
    sample, i = [], 0
    def s_of_n(item):
        nonlocal i
 
        i += 1
        if i <= n:
            # Keep first n items
            sample.append(item)
        elif randrange(i) < n:
            # Keep item
            sample[randrange(n)] = item
        return sample
    return s_of_n
 
if __name__ == '__main__':
    bin = [0]* 10
    items = range(10)
    print(""Single run samples for n = 3:"")
    s_of_n = s_of_n_creator(3)
    for item in items:
        sample = s_of_n(item)
        print(""  Item: %i -> sample: %s"" % (item, sample))
    #
    for trial in range(100000):
        s_of_n = s_of_n_creator(3)
        for item in items:
            sample = s_of_n(item)
        for s in sample:
            bin[s] += 1
    print(""\nTest item frequencies for 100000 runs:\n "",
          '\n  '.join(""%i:%i"" % x for x in enumerate(bin)))",907,34,"import unittest
from collections import Counter
from random import seed

# Assuming the function s_of_n_creator is imported from knuth_s_algorithm_s.py

class TestKnuthsAlgorithmS(unittest.TestCase):

    def test_single_run_sample(self):
        # Test a single run of the algorithm
        s_of_n = s_of_n_creator(3)
        items = range(10)
        sample = None
        for item in items:
            sample = s_of_n(item)
        self.assertEqual(len(sample), 3)
        self.assertTrue(all(isinstance(x, int) and 0 <= x <= 9 for x in sample))

    def test_sample_distribution(self):
        # Test the distribution of the samples over many runs
        seed(0)  # Set seed for reproducibility
        bin = [0] * 10
        items = range(10)
        trials = 100000
        for trial in range(trials):
            s_of_n = s_of_n_creator(3)
            for item in items:
                sample = s_of_n(item)
            for s in sample:
                bin[s] += 1

        # Check that each item has been sampled approximately equally
        expected_frequency = trials * 3 / 10
        tolerance = expected_frequency * 0.05  # 5% tolerance
        for count in bin:
            self.assertTrue(abs(count - expected_frequency) < tolerance)

    def test_sample_uniqueness(self):
        # Test that the sample contains unique items
        s_of_n = s_of_n_creator(3)
        items = range(10)
        sample = None
        for item in items:
            sample = s_of_n(item)
        self.assertEqual(len(sample), len(set(sample)))

    def test_sample_size(self):
        # Test that the sample size does not exceed n
        n = 3
        s_of_n = s_of_n_creator(n)
        items = range(10)
        for item in items:
            sample = s_of_n(item)
            self.assertLessEqual(len(sample), n)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/knuth_s_algorithm_s/test_gpt_4o_2024_08_06_knuth_s_algorithm_s.py,CompileStatus.OK,0.0,27.54,20.39,0.12,1.25,,0.4940531253814697,15.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_knuth_s_algorithm_s', 'obj': '', 'line': 8, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/knuth_s_algorithm_s/test_gpt_4o_2024_08_06_knuth_s_algorithm_s.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_knuth_s_algorithm_s', 'obj': '', 'line': 31, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/knuth_s_algorithm_s/test_gpt_4o_2024_08_06_knuth_s_algorithm_s.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_knuth_s_algorithm_s', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/knuth_s_algorithm_s/test_gpt_4o_2024_08_06_knuth_s_algorithm_s.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_knuth_s_algorithm_s', 'obj': 'TestKnuthsAlgorithmS', 'line': 7, 'column': 0, 'endLine': 7, 'endColumn': 26, 'path': 'data/generated/docs_python/knuth_s_algorithm_s/test_gpt_4o_2024_08_06_knuth_s_algorithm_s.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_knuth_s_algorithm_s', 'obj': 'TestKnuthsAlgorithmS.test_single_run_sample', 'line': 9, 'column': 4, 'endLine': 9, 'endColumn': 30, 'path': 'data/generated/docs_python/knuth_s_algorithm_s/test_gpt_4o_2024_08_06_knuth_s_algorithm_s.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_knuth_s_algorithm_s', 'obj': 'TestKnuthsAlgorithmS.test_single_run_sample', 'line': 11, 'column': 17, 'endLine': 11, 'endColumn': 31, 'path': 'data/generated/docs_python/knuth_s_algorithm_s/test_gpt_4o_2024_08_06_knuth_s_algorithm_s.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 's_of_n_creator'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_knuth_s_algorithm_s', 'obj': 'TestKnuthsAlgorithmS.test_sample_distribution', 'line': 19, 'column': 4, 'endLine': 19, 'endColumn': 32, 'path': 'data/generated/docs_python/knuth_s_algorithm_s/test_gpt_4o_2024_08_06_knuth_s_algorithm_s.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_knuth_s_algorithm_s', 'obj': 'TestKnuthsAlgorithmS.test_sample_distribution', 'line': 22, 'column': 8, 'endLine': 22, 'endColumn': 11, 'path': 'data/generated/docs_python/knuth_s_algorithm_s/test_gpt_4o_2024_08_06_knuth_s_algorithm_s.py', 'symbol': 'redefined-builtin', 'message': ""Redefining built-in 'bin'"", 'message-id': 'W0622'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_knuth_s_algorithm_s', 'obj': 'TestKnuthsAlgorithmS.test_sample_distribution', 'line': 26, 'column': 21, 'endLine': 26, 'endColumn': 35, 'path': 'data/generated/docs_python/knuth_s_algorithm_s/test_gpt_4o_2024_08_06_knuth_s_algorithm_s.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 's_of_n_creator'"", 'message-id': 'E0602'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_knuth_s_algorithm_s', 'obj': 'TestKnuthsAlgorithmS.test_sample_distribution', 'line': 25, 'column': 12, 'endLine': 25, 'endColumn': 17, 'path': 'data/generated/docs_python/knuth_s_algorithm_s/test_gpt_4o_2024_08_06_knuth_s_algorithm_s.py', 'symbol': 'unused-variable', 'message': ""Unused variable 'trial'"", 'message-id': 'W0612'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_knuth_s_algorithm_s', 'obj': 'TestKnuthsAlgorithmS.test_sample_uniqueness', 'line': 38, 'column': 4, 'endLine': 38, 'endColumn': 30, 'path': 'data/generated/docs_python/knuth_s_algorithm_s/test_gpt_4o_2024_08_06_knuth_s_algorithm_s.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_knuth_s_algorithm_s', 'obj': 'TestKnuthsAlgorithmS.test_sample_uniqueness', 'line': 40, 'column': 17, 'endLine': 40, 'endColumn': 31, 'path': 'data/generated/docs_python/knuth_s_algorithm_s/test_gpt_4o_2024_08_06_knuth_s_algorithm_s.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 's_of_n_creator'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_knuth_s_algorithm_s', 'obj': 'TestKnuthsAlgorithmS.test_sample_size', 'line': 47, 'column': 4, 'endLine': 47, 'endColumn': 24, 'path': 'data/generated/docs_python/knuth_s_algorithm_s/test_gpt_4o_2024_08_06_knuth_s_algorithm_s.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_knuth_s_algorithm_s', 'obj': 'TestKnuthsAlgorithmS.test_sample_size', 'line': 50, 'column': 17, 'endLine': 50, 'endColumn': 31, 'path': 'data/generated/docs_python/knuth_s_algorithm_s/test_gpt_4o_2024_08_06_knuth_s_algorithm_s.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable 's_of_n_creator'"", 'message-id': 'E0602'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_knuth_s_algorithm_s', 'obj': '', 'line': 2, 'column': 0, 'endLine': 2, 'endColumn': 31, 'path': 'data/generated/docs_python/knuth_s_algorithm_s/test_gpt_4o_2024_08_06_knuth_s_algorithm_s.py', 'symbol': 'unused-import', 'message': 'Unused Counter imported from collections', 'message-id': 'W0611'}]",False
Knuth's power tree,"(Knuth's power tree is used for computing   xn   efficiently.)




Task

Compute and show the list of Knuth's power tree integers necessary for the computation of:

   xn   for any real   x   and any non-negative integer   n.


Then, using those integers, calculate and show the exact values of (at least) the integer powers below:

   2n     where   n   ranges from   0 ──► 17   (inclusive)

   3191
   1.181


A  zero  power is often handled separately as a special case.

Optionally, support negative integer powers.



Example

An example of a small power tree for some low integers:

                                                                    1
                                                                     \
                                                                      2
                          ___________________________________________/ \
                         /                                              \
                        3                                                4
                       / \____________________________________            \
                      /                                       \            \
                     5                                         6            8
                    / \____________                           / \            \
                   /               \                         /   \            \
                  7                 10                      9     12           16
                 /                 //\\                     │      │           /\
                /            _____//  \\________            │      │          /  \
              14            /     /    \        \           │      │         /    \
             /│ \         11    13      15       20        18     24        17    32
            / │  \         │    /\      /\        │        /\      │        /\     │
           /  │   \        │   /  \    /  \       │       /  \     │       /  \    │
         19  21    28     22 23   26  25   30    40     27   36    48     33 34   64
         │   /\    /│\     │  │   /\   │   /\    /│\     │   /\    /│\     │  │   /\
         │  /  \  / │ \    │  │  /  \  │  /  \  / │ \    │  /  \  / │ \    │  │  /  \
        38 35 42 29 31 56 44 46 39 52 50 45 60 41 43 80 54 37 72 49 51 96 66 68 65 128

Where, for the power   43,   following the tree ""downwards"" from   1:

   (for   2)   compute square of   X,   store X2
   (for   3)   compute   X * X2,   store X3
   (for   5)   compute   X3 * X2,   store X5
   (for 10)   compute square of   X5,   store X10
   (for 20)   compute square of   X10,   store X20
   (for 40)   compute square of   X20,   store X40
   (for 43)   compute   X40 * X3   (result).
Note that for every even integer (in the power tree),   one just squares the previous value.

For an odd integer, multiply the previous value with an appropriate odd power of   X   (which was previously calculated).
  For the last multiplication in the above example, it would be   (43-40),   or   3.


According to Dr. Knuth (see below),   computer tests have shown that this power tree gives optimum results for all of the   n
  listed above in the graph.

For   n   ≤ 100,000,   the power tree method:

   bests the factor method   88,803   times,
   ties   11,191   times,
   loses   6   times.


References

   Donald E. Knuth's book:   The Art of Computer Programming, Vol. 2, Second Edition, Seminumerical Algorithms, section 4.6.3: Evaluation of Powers.
   link   codegolf.stackexchange.com/questions/3177/knuths-power-tree     It shows a   Haskell,   Python,   and a   Ruby   computer program example   (but they are mostly   code golf).
   link   comeoncodeon.wordpress.com/tag/knuth/     (See the section on Knuth's Power Tree.)     It shows a   C++   computer program example.
   link to Rosetta Code   addition-chain exponentiation.

",Python,"from __future__ import print_function
 
# remember the tree generation state and expand on demand
def path(n, p = {1:0}, lvl=[[1]]):
	if not n: return []
	while n not in p:
		q = []
		for x,y in ((x, x+y) for x in lvl[0] for y in path(x) if not x+y in p):
			p[y] = x
			q.append(y)
		lvl[0] = q
 
	return path(p[n]) + [n]
 
def tree_pow(x, n):
    r, p = {0:1, 1:x}, 0
    for i in path(n):
        r[i] = r[i-p] * r[p]
        p = i
    return r[n]
 
def show_pow(x, n):
    fmt = ""%d: %s\n"" + [""%g^%d = %f"", ""%d^%d = %d""][x==int(x)] + ""\n""
    print(fmt % (n, repr(path(n)), x, n, tree_pow(x, n)))
 
for x in range(18): show_pow(2, x)
show_pow(3, 191)
show_pow(1.1, 81)",672,28,"import unittest
from knuth_s_power_tree import path, tree_pow, show_pow

class TestKnuthsPowerTree(unittest.TestCase):

    def test_path(self):
        # Test path generation for various powers
        self.assertEqual(path(0), [])
        self.assertEqual(path(1), [1])
        self.assertEqual(path(2), [1, 2])
        self.assertEqual(path(3), [1, 2, 3])
        self.assertEqual(path(4), [1, 2, 4])
        self.assertEqual(path(5), [1, 2, 3, 5])
        self.assertEqual(path(6), [1, 2, 3, 6])
        self.assertEqual(path(7), [1, 2, 3, 5, 7])
        self.assertEqual(path(8), [1, 2, 4, 8])
        self.assertEqual(path(9), [1, 2, 3, 6, 9])
        self.assertEqual(path(10), [1, 2, 3, 5, 10])

    def test_tree_pow(self):
        # Test power calculation for various bases and exponents
        self.assertEqual(tree_pow(2, 0), 1)
        self.assertEqual(tree_pow(2, 1), 2)
        self.assertEqual(tree_pow(2, 2), 4)
        self.assertEqual(tree_pow(2, 3), 8)
        self.assertEqual(tree_pow(2, 4), 16)
        self.assertEqual(tree_pow(2, 5), 32)
        self.assertEqual(tree_pow(2, 6), 64)
        self.assertEqual(tree_pow(2, 7), 128)
        self.assertEqual(tree_pow(2, 8), 256)
        self.assertEqual(tree_pow(2, 9), 512)
        self.assertEqual(tree_pow(2, 10), 1024)
        self.assertEqual(tree_pow(2, 11), 2048)
        self.assertEqual(tree_pow(2, 12), 4096)
        self.assertEqual(tree_pow(2, 13), 8192)
        self.assertEqual(tree_pow(2, 14), 16384)
        self.assertEqual(tree_pow(2, 15), 32768)
        self.assertEqual(tree_pow(2, 16), 65536)
        self.assertEqual(tree_pow(2, 17), 131072)

        self.assertEqual(tree_pow(3, 191), 3**191)
        self.assertAlmostEqual(tree_pow(1.1, 81), 1.1**81, places=6)

    def test_show_pow(self):
        # Test the output format of show_pow function
        # This test will capture the printed output and check if it matches expected format
        import io
        import sys

        captured_output = io.StringIO()
        sys.stdout = captured_output
        show_pow(2, 5)
        sys.stdout = sys.__stdout__
        expected_output = ""5: [1, 2, 3, 5]\n2^5 = 32\n""
        self.assertEqual(captured_output.getvalue(), expected_output)

        captured_output = io.StringIO()
        sys.stdout = captured_output
        show_pow(3, 191)
        sys.stdout = sys.__stdout__
        expected_output = ""191: [1, 2, 3, 5, 10, 20, 40, 80, 160, 191]\n3^191 = {}\n"".format(3**191)
        self.assertEqual(captured_output.getvalue(), expected_output)

        captured_output = io.StringIO()
        sys.stdout = captured_output
        show_pow(1.1, 81)
        sys.stdout = sys.__stdout__
        expected_output = ""81: [1, 2, 3, 5, 10, 20, 40, 80, 81]\n1.1^81 = {}\n"".format(1.1**81)
        self.assertEqual(captured_output.getvalue(), expected_output)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/knuth_s_power_tree/test_gpt_4o_2024_08_06_knuth_s_power_tree.py,CompileStatus.OK,0.0,83.95,84.78,0.58,3.4,66.67,0.4759988784790039,10.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_knuth_s_power_tree', 'obj': '', 'line': 40, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/knuth_s_power_tree/test_gpt_4o_2024_08_06_knuth_s_power_tree.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_knuth_s_power_tree', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/knuth_s_power_tree/test_gpt_4o_2024_08_06_knuth_s_power_tree.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_knuth_s_power_tree', 'obj': 'TestKnuthsPowerTree', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 25, 'path': 'data/generated/docs_python/knuth_s_power_tree/test_gpt_4o_2024_08_06_knuth_s_power_tree.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_knuth_s_power_tree', 'obj': 'TestKnuthsPowerTree.test_path', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 17, 'path': 'data/generated/docs_python/knuth_s_power_tree/test_gpt_4o_2024_08_06_knuth_s_power_tree.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_knuth_s_power_tree', 'obj': 'TestKnuthsPowerTree.test_tree_pow', 'line': 20, 'column': 4, 'endLine': 20, 'endColumn': 21, 'path': 'data/generated/docs_python/knuth_s_power_tree/test_gpt_4o_2024_08_06_knuth_s_power_tree.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_knuth_s_power_tree', 'obj': 'TestKnuthsPowerTree.test_show_pow', 'line': 44, 'column': 4, 'endLine': 44, 'endColumn': 21, 'path': 'data/generated/docs_python/knuth_s_power_tree/test_gpt_4o_2024_08_06_knuth_s_power_tree.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_knuth_s_power_tree', 'obj': 'TestKnuthsPowerTree.test_show_pow', 'line': 47, 'column': 8, 'endLine': 47, 'endColumn': 17, 'path': 'data/generated/docs_python/knuth_s_power_tree/test_gpt_4o_2024_08_06_knuth_s_power_tree.py', 'symbol': 'import-outside-toplevel', 'message': 'Import outside toplevel (io)', 'message-id': 'C0415'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_knuth_s_power_tree', 'obj': 'TestKnuthsPowerTree.test_show_pow', 'line': 48, 'column': 8, 'endLine': 48, 'endColumn': 18, 'path': 'data/generated/docs_python/knuth_s_power_tree/test_gpt_4o_2024_08_06_knuth_s_power_tree.py', 'symbol': 'import-outside-toplevel', 'message': 'Import outside toplevel (sys)', 'message-id': 'C0415'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_knuth_s_power_tree', 'obj': 'TestKnuthsPowerTree.test_show_pow', 'line': 61, 'column': 26, 'endLine': 61, 'endColumn': 85, 'path': 'data/generated/docs_python/knuth_s_power_tree/test_gpt_4o_2024_08_06_knuth_s_power_tree.py', 'symbol': 'consider-using-f-string', 'message': 'Formatting a regular string which could be an f-string', 'message-id': 'C0209'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_knuth_s_power_tree', 'obj': 'TestKnuthsPowerTree.test_show_pow', 'line': 68, 'column': 26, 'endLine': 68, 'endColumn': 79, 'path': 'data/generated/docs_python/knuth_s_power_tree/test_gpt_4o_2024_08_06_knuth_s_power_tree.py', 'symbol': 'consider-using-f-string', 'message': 'Formatting a regular string which could be an f-string', 'message-id': 'C0209'}]",False
Kronecker product,"Kronecker product

You are encouraged to solve this task according to the task description, using any language you may know.


Task

Implement the   Kronecker product   of two matrices (arbitrary sized) resulting in a block matrix.




Test cases

Show results for each of the following two samples:




Sample 1 (from Wikipedia):



          ┌   ┐     ┌   ┐     ┌           ┐
          │1 2│     │0 5│     │ 0  5  0 10│
          │3 4│  x  │6 7│  =  │ 6  7 12 14│
	  └   ┘     └   ┘     │ 0 15  0 20│
	                      │18 21 24 28│
                              └           ┘

Sample 2:

          ┌     ┐     ┌       ┐     ┌                       ┐
          │0 1 0│     │1 1 1 1│     │0 0 0 0 1 1 1 1 0 0 0 0│
          │1 1 1│  x  │1 0 0 1│  =  │0 0 0 0 1 0 0 1 0 0 0 0│
          │0 1 0│     │1 1 1 1│     │0 0 0 0 1 1 1 1 0 0 0 0│
	  └     ┘     └       ┘     │1 1 1 1 1 1 1 1 1 1 1 1│
                                    │1 0 0 1 1 0 0 1 1 0 0 1│
                                    │1 1 1 1 1 1 1 1 1 1 1 1│
                                    │0 0 0 0 1 1 1 1 0 0 0 0│
                                    │0 0 0 0 1 0 0 1 0 0 0 0│
                                    │0 0 0 0 1 1 1 1 0 0 0 0│
                                    └                       ┘



See implementations and results below in JavaScript and PARI/GP languages.



Related task

  Kronecker product based fractals.

",Python,"#!/usr/bin/env python3
 
# Sample 1
a1 = [[1, 2], [3, 4]]
b1 = [[0, 5], [6, 7]]
 
# Sample 2
a2 = [[0, 1, 0], [1, 1, 1], [0, 1, 0]]
b2 = [[1, 1, 1, 1], [1, 0, 0, 1], [1, 1, 1, 1]]
 
def kronecker(matrix1, matrix2):
    final_list = []
    sub_list = []
 
    count = len(matrix2)
 
    for elem1 in matrix1:
        counter = 0
        check = 0
        while check < count:
            for num1 in elem1:
                for num2 in matrix2[counter]:
                    sub_list.append(num1 * num2)
            counter += 1
            final_list.append(sub_list)
            sub_list = []
            check +=1
 
    return final_list
 
# Result 1
result1 = kronecker(a1, b1)
for elem in result1:
    print(elem)
 
print("""")
 
# Result 2
result2 = kronecker(a2, b2)
for elem in result2:
    print(elem)",805,41,"import unittest

def kronecker(matrix1, matrix2):
    final_list = []
    sub_list = []
    count = len(matrix2)
    for elem1 in matrix1:
        counter = 0
        check = 0
        while check < count:
            for num1 in elem1:
                for num2 in matrix2[counter]:
                    sub_list.append(num1 * num2)
            counter += 1
            final_list.append(sub_list)
            sub_list = []
            check += 1
    return final_list

class TestKroneckerProduct(unittest.TestCase):

    def test_sample1(self):
        a1 = [[1, 2], [3, 4]]
        b1 = [[0, 5], [6, 7]]
        expected_result1 = [
            [0, 5, 0, 10],
            [6, 7, 12, 14],
            [0, 15, 0, 20],
            [18, 21, 24, 28]
        ]
        result1 = kronecker(a1, b1)
        self.assertEqual(result1, expected_result1)

    def test_sample2(self):
        a2 = [[0, 1, 0], [1, 1, 1], [0, 1, 0]]
        b2 = [[1, 1, 1, 1], [1, 0, 0, 1], [1, 1, 1, 1]]
        expected_result2 = [
            [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
            [1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
            [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0]
        ]
        result2 = kronecker(a2, b2)
        self.assertEqual(result2, expected_result2)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/kronecker_product/test_gpt_4o_2024_08_06_kronecker_product.py,CompileStatus.OK,0.0,52.54,49.38,0.04,0.4,100.0,0.4361097812652588,5.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_kronecker_product', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/kronecker_product/test_gpt_4o_2024_08_06_kronecker_product.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_kronecker_product', 'obj': 'kronecker', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 13, 'path': 'data/generated/docs_python/kronecker_product/test_gpt_4o_2024_08_06_kronecker_product.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_kronecker_product', 'obj': 'TestKroneckerProduct', 'line': 20, 'column': 0, 'endLine': 20, 'endColumn': 26, 'path': 'data/generated/docs_python/kronecker_product/test_gpt_4o_2024_08_06_kronecker_product.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_kronecker_product', 'obj': 'TestKroneckerProduct.test_sample1', 'line': 22, 'column': 4, 'endLine': 22, 'endColumn': 20, 'path': 'data/generated/docs_python/kronecker_product/test_gpt_4o_2024_08_06_kronecker_product.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_kronecker_product', 'obj': 'TestKroneckerProduct.test_sample2', 'line': 34, 'column': 4, 'endLine': 34, 'endColumn': 20, 'path': 'data/generated/docs_python/kronecker_product/test_gpt_4o_2024_08_06_kronecker_product.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
LU decomposition,"Every square matrix



A


{\displaystyle A}

 can be decomposed into a product of a lower triangular matrix



L


{\displaystyle L}

 and a upper triangular matrix



U


{\displaystyle U}

,
as described in LU decomposition.





A
=
L
U


{\displaystyle A=LU}


It is a modified form of Gaussian elimination.
While the Cholesky decomposition only works for symmetric,
positive definite matrices, the more general LU decomposition
works for any square matrix.

There are several algorithms for calculating L and U.
To derive Crout's algorithm for a 3x3 example,
we have to solve the following system:





A
=


(




a

11





a

12





a

13







a

21





a

22





a

23







a

31





a

32





a

33





)


=


(




l

11




0


0





l

21





l

22




0





l

31





l

32





l

33





)




(




u

11





u

12





u

13






0



u

22





u

23






0


0



u

33





)


=
L
U


{\displaystyle A={\begin{pmatrix}a_{11}&a_{12}&a_{13}\\a_{21}&a_{22}&a_{23}\\a_{31}&a_{32}&a_{33}\\\end{pmatrix}}={\begin{pmatrix}l_{11}&0&0\\l_{21}&l_{22}&0\\l_{31}&l_{32}&l_{33}\\\end{pmatrix}}{\begin{pmatrix}u_{11}&u_{12}&u_{13}\\0&u_{22}&u_{23}\\0&0&u_{33}\end{pmatrix}}=LU}


We now would have to solve 9 equations with 12 unknowns. To make the system uniquely solvable, usually the diagonal elements of



L


{\displaystyle L}

 are set to 1






l

11


=
1


{\displaystyle l_{11}=1}







l

22


=
1


{\displaystyle l_{22}=1}







l

33


=
1


{\displaystyle l_{33}=1}


so we get a solvable system of 9 unknowns and 9 equations.





A
=


(




a

11





a

12





a

13







a

21





a

22





a

23







a

31





a

32





a

33





)


=


(



1


0


0





l

21




1


0





l

31





l

32




1



)




(




u

11





u

12





u

13






0



u

22





u

23






0


0



u

33





)


=


(




u

11





u

12





u

13







u

11



l

21





u

12



l

21


+

u

22





u

13



l

21


+

u

23







u

11



l

31





u

12



l

31


+

u

22



l

32





u

13



l

31


+

u

23



l

32


+

u

33





)


=
L
U


{\displaystyle A={\begin{pmatrix}a_{11}&a_{12}&a_{13}\\a_{21}&a_{22}&a_{23}\\a_{31}&a_{32}&a_{33}\\\end{pmatrix}}={\begin{pmatrix}1&0&0\\l_{21}&1&0\\l_{31}&l_{32}&1\\\end{pmatrix}}{\begin{pmatrix}u_{11}&u_{12}&u_{13}\\0&u_{22}&u_{23}\\0&0&u_{33}\end{pmatrix}}={\begin{pmatrix}u_{11}&u_{12}&u_{13}\\u_{11}l_{21}&u_{12}l_{21}+u_{22}&u_{13}l_{21}+u_{23}\\u_{11}l_{31}&u_{12}l_{31}+u_{22}l_{32}&u_{13}l_{31}+u_{23}l_{32}+u_{33}\end{pmatrix}}=LU}


Solving for the other



l


{\displaystyle l}

 and



u


{\displaystyle u}

, we get the following equations:






u

11


=

a

11




{\displaystyle u_{11}=a_{11}}







u

12


=

a

12




{\displaystyle u_{12}=a_{12}}







u

13


=

a

13




{\displaystyle u_{13}=a_{13}}







u

22


=

a

22


−

u

12



l

21




{\displaystyle u_{22}=a_{22}-u_{12}l_{21}}







u

23


=

a

23


−

u

13



l

21




{\displaystyle u_{23}=a_{23}-u_{13}l_{21}}







u

33


=

a

33


−
(

u

13



l

31


+

u

23



l

32


)


{\displaystyle u_{33}=a_{33}-(u_{13}l_{31}+u_{23}l_{32})}


and for



l


{\displaystyle l}

:






l

21


=


1

u

11





a

21




{\displaystyle l_{21}={\frac {1}{u_{11}}}a_{21}}







l

31


=


1

u

11





a

31




{\displaystyle l_{31}={\frac {1}{u_{11}}}a_{31}}







l

32


=


1

u

22




(

a

32


−

u

12



l

31


)


{\displaystyle l_{32}={\frac {1}{u_{22}}}(a_{32}-u_{12}l_{31})}


We see that there is a calculation pattern, which can be expressed as the following formulas, first for



U


{\displaystyle U}








u

i
j


=

a

i
j


−

∑

k
=
1


i
−
1



u

k
j



l

i
k




{\displaystyle u_{ij}=a_{ij}-\sum _{k=1}^{i-1}u_{kj}l_{ik}}


and then for



L


{\displaystyle L}








l

i
j


=


1

u

j
j




(

a

i
j


−

∑

k
=
1


j
−
1



u

k
j



l

i
k


)


{\displaystyle l_{ij}={\frac {1}{u_{jj}}}(a_{ij}-\sum _{k=1}^{j-1}u_{kj}l_{ik})}


We see in the second formula that to get the




l

i
j




{\displaystyle l_{ij}}

 below the diagonal, we have to divide by the diagonal element (pivot)




u

j
j




{\displaystyle u_{jj}}

, so we get problems when




u

j
j




{\displaystyle u_{jj}}

 is either 0 or very small, which leads to numerical instability.

The solution to this problem is pivoting



A


{\displaystyle A}

, which means rearranging the rows of



A


{\displaystyle A}

, prior to the



L
U


{\displaystyle LU}

 decomposition, in a way that the largest element of each column gets onto the diagonal of



A


{\displaystyle A}

. Rearranging the rows means to multiply



A


{\displaystyle A}

 by a permutation matrix



P


{\displaystyle P}

:





P
A
⇒

A
′



{\displaystyle PA\Rightarrow A'}


Example:







(



0


1




1


0



)




(



1


4




2


3



)


⇒


(



2


3




1


4



)




{\displaystyle {\begin{pmatrix}0&1\\1&0\end{pmatrix}}{\begin{pmatrix}1&4\\2&3\end{pmatrix}}\Rightarrow {\begin{pmatrix}2&3\\1&4\end{pmatrix}}}


The decomposition algorithm is then applied on the rearranged matrix so that





P
A
=
L
U


{\displaystyle PA=LU}




Task description

The task is to implement a routine which will take a square nxn matrix



A


{\displaystyle A}

 and return a lower triangular matrix



L


{\displaystyle L}

, a upper triangular matrix



U


{\displaystyle U}

 and a permutation matrix



P


{\displaystyle P}

,
so that the above equation is fulfilled.

You should then test it on the following two examples and include your output.



Example 1

A

1   3   5
2   4   7
1   1   0

L

1.00000   0.00000   0.00000
0.50000   1.00000   0.00000
0.50000  -1.00000   1.00000

U

2.00000   4.00000   7.00000
0.00000   1.00000   1.50000
0.00000   0.00000  -2.00000

P

0   1   0
1   0   0
0   0   1

Example 2

A

11    9   24    2
 1    5    2    6
 3   17   18    1
 2    5    7    1

L

1.00000   0.00000   0.00000   0.00000
0.27273   1.00000   0.00000   0.00000
0.09091   0.28750   1.00000   0.00000
0.18182   0.23125   0.00360   1.00000

U

11.00000    9.00000   24.00000    2.00000
 0.00000   14.54545   11.45455    0.45455
 0.00000    0.00000   -3.47500    5.68750
 0.00000    0.00000    0.00000    0.51079

P

1   0   0   0
0   0   1   0
0   1   0   0
0   0   0   1


",Python,"from pprint import pprint
 
def matrixMul(A, B):
    TB = zip(*B)
    return [[sum(ea*eb for ea,eb in zip(a,b)) for b in TB] for a in A]
 
def pivotize(m):
    """"""Creates the pivoting matrix for m.""""""
    n = len(m)
    ID = [[float(i == j) for i in xrange(n)] for j in xrange(n)]
    for j in xrange(n):
        row = max(xrange(j, n), key=lambda i: abs(m[i][j]))
        if j != row:
            ID[j], ID[row] = ID[row], ID[j]
    return ID
 
def lu(A):
    """"""Decomposes a nxn matrix A by PA=LU and returns L, U and P.""""""
    n = len(A)
    L = [[0.0] * n for i in xrange(n)]
    U = [[0.0] * n for i in xrange(n)]
    P = pivotize(A)
    A2 = matrixMul(P, A)
    for j in xrange(n):
        L[j][j] = 1.0
        for i in xrange(j+1):
            s1 = sum(U[k][j] * L[i][k] for k in xrange(i))
            U[i][j] = A2[i][j] - s1
        for i in xrange(j, n):
            s2 = sum(U[k][j] * L[i][k] for k in xrange(j))
            L[i][j] = (A2[i][j] - s2) / U[j][j]
    return (L, U, P)
 
a = [[1, 3, 5], [2, 4, 7], [1, 1, 0]]
for part in lu(a):
    pprint(part, width=19)
    print
print
b = [[11,9,24,2],[1,5,2,6],[3,17,18,1],[2,5,7,1]]
for part in lu(b):
    pprint(part)
    print",1191,42,"import unittest
from lu_decomposition import lu

class TestLUDecomposition(unittest.TestCase):

    def assertMatrixAlmostEqual(self, A, B, places=5):
        """"""Helper method to compare two matrices with a given precision.""""""
        for rowA, rowB in zip(A, B):
            for valA, valB in zip(rowA, rowB):
                self.assertAlmostEqual(valA, valB, places=places)

    def test_example_1(self):
        A = [
            [1, 3, 5],
            [2, 4, 7],
            [1, 1, 0]
        ]
        expected_L = [
            [1.00000, 0.00000, 0.00000],
            [0.50000, 1.00000, 0.00000],
            [0.50000, -1.00000, 1.00000]
        ]
        expected_U = [
            [2.00000, 4.00000, 7.00000],
            [0.00000, 1.00000, 1.50000],
            [0.00000, 0.00000, -2.00000]
        ]
        expected_P = [
            [0, 1, 0],
            [1, 0, 0],
            [0, 0, 1]
        ]

        L, U, P = lu(A)
        self.assertMatrixAlmostEqual(L, expected_L)
        self.assertMatrixAlmostEqual(U, expected_U)
        self.assertMatrixAlmostEqual(P, expected_P)

    def test_example_2(self):
        A = [
            [11, 9, 24, 2],
            [1, 5, 2, 6],
            [3, 17, 18, 1],
            [2, 5, 7, 1]
        ]
        expected_L = [
            [1.00000, 0.00000, 0.00000, 0.00000],
            [0.27273, 1.00000, 0.00000, 0.00000],
            [0.09091, 0.28750, 1.00000, 0.00000],
            [0.18182, 0.23125, 0.00360, 1.00000]
        ]
        expected_U = [
            [11.00000, 9.00000, 24.00000, 2.00000],
            [0.00000, 14.54545, 11.45455, 0.45455],
            [0.00000, 0.00000, -3.47500, 5.68750],
            [0.00000, 0.00000, 0.00000, 0.51079]
        ]
        expected_P = [
            [1, 0, 0, 0],
            [0, 0, 1, 0],
            [0, 1, 0, 0],
            [0, 0, 0, 1]
        ]

        L, U, P = lu(A)
        self.assertMatrixAlmostEqual(L, expected_L)
        self.assertMatrixAlmostEqual(U, expected_U)
        self.assertMatrixAlmostEqual(P, expected_P)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/lu_decomposition/test_gpt_4o_2024_08_06_lu_decomposition.py,CompileStatus.OK,0.0,15.87,10.31,0.13,0.41,,0.5396158695220947,25.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lu_decomposition', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/lu_decomposition/test_gpt_4o_2024_08_06_lu_decomposition.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lu_decomposition', 'obj': 'TestLUDecomposition', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 25, 'path': 'data/generated/docs_python/lu_decomposition/test_gpt_4o_2024_08_06_lu_decomposition.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lu_decomposition', 'obj': 'TestLUDecomposition.assertMatrixAlmostEqual', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 31, 'path': 'data/generated/docs_python/lu_decomposition/test_gpt_4o_2024_08_06_lu_decomposition.py', 'symbol': 'invalid-name', 'message': 'Method name ""assertMatrixAlmostEqual"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lu_decomposition', 'obj': 'TestLUDecomposition.assertMatrixAlmostEqual', 'line': 6, 'column': 38, 'endLine': 6, 'endColumn': 39, 'path': 'data/generated/docs_python/lu_decomposition/test_gpt_4o_2024_08_06_lu_decomposition.py', 'symbol': 'invalid-name', 'message': 'Argument name ""A"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lu_decomposition', 'obj': 'TestLUDecomposition.assertMatrixAlmostEqual', 'line': 6, 'column': 41, 'endLine': 6, 'endColumn': 42, 'path': 'data/generated/docs_python/lu_decomposition/test_gpt_4o_2024_08_06_lu_decomposition.py', 'symbol': 'invalid-name', 'message': 'Argument name ""B"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lu_decomposition', 'obj': 'TestLUDecomposition.assertMatrixAlmostEqual', 'line': 8, 'column': 12, 'endLine': 8, 'endColumn': 16, 'path': 'data/generated/docs_python/lu_decomposition/test_gpt_4o_2024_08_06_lu_decomposition.py', 'symbol': 'invalid-name', 'message': 'Variable name ""rowA"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lu_decomposition', 'obj': 'TestLUDecomposition.assertMatrixAlmostEqual', 'line': 8, 'column': 18, 'endLine': 8, 'endColumn': 22, 'path': 'data/generated/docs_python/lu_decomposition/test_gpt_4o_2024_08_06_lu_decomposition.py', 'symbol': 'invalid-name', 'message': 'Variable name ""rowB"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lu_decomposition', 'obj': 'TestLUDecomposition.assertMatrixAlmostEqual', 'line': 9, 'column': 16, 'endLine': 9, 'endColumn': 20, 'path': 'data/generated/docs_python/lu_decomposition/test_gpt_4o_2024_08_06_lu_decomposition.py', 'symbol': 'invalid-name', 'message': 'Variable name ""valA"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lu_decomposition', 'obj': 'TestLUDecomposition.assertMatrixAlmostEqual', 'line': 9, 'column': 22, 'endLine': 9, 'endColumn': 26, 'path': 'data/generated/docs_python/lu_decomposition/test_gpt_4o_2024_08_06_lu_decomposition.py', 'symbol': 'invalid-name', 'message': 'Variable name ""valB"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lu_decomposition', 'obj': 'TestLUDecomposition.test_example_1', 'line': 12, 'column': 4, 'endLine': 12, 'endColumn': 22, 'path': 'data/generated/docs_python/lu_decomposition/test_gpt_4o_2024_08_06_lu_decomposition.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lu_decomposition', 'obj': 'TestLUDecomposition.test_example_1', 'line': 13, 'column': 8, 'endLine': 13, 'endColumn': 9, 'path': 'data/generated/docs_python/lu_decomposition/test_gpt_4o_2024_08_06_lu_decomposition.py', 'symbol': 'invalid-name', 'message': 'Variable name ""A"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lu_decomposition', 'obj': 'TestLUDecomposition.test_example_1', 'line': 18, 'column': 8, 'endLine': 18, 'endColumn': 18, 'path': 'data/generated/docs_python/lu_decomposition/test_gpt_4o_2024_08_06_lu_decomposition.py', 'symbol': 'invalid-name', 'message': 'Variable name ""expected_L"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lu_decomposition', 'obj': 'TestLUDecomposition.test_example_1', 'line': 23, 'column': 8, 'endLine': 23, 'endColumn': 18, 'path': 'data/generated/docs_python/lu_decomposition/test_gpt_4o_2024_08_06_lu_decomposition.py', 'symbol': 'invalid-name', 'message': 'Variable name ""expected_U"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lu_decomposition', 'obj': 'TestLUDecomposition.test_example_1', 'line': 28, 'column': 8, 'endLine': 28, 'endColumn': 18, 'path': 'data/generated/docs_python/lu_decomposition/test_gpt_4o_2024_08_06_lu_decomposition.py', 'symbol': 'invalid-name', 'message': 'Variable name ""expected_P"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lu_decomposition', 'obj': 'TestLUDecomposition.test_example_1', 'line': 34, 'column': 8, 'endLine': 34, 'endColumn': 9, 'path': 'data/generated/docs_python/lu_decomposition/test_gpt_4o_2024_08_06_lu_decomposition.py', 'symbol': 'invalid-name', 'message': 'Variable name ""L"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lu_decomposition', 'obj': 'TestLUDecomposition.test_example_1', 'line': 34, 'column': 11, 'endLine': 34, 'endColumn': 12, 'path': 'data/generated/docs_python/lu_decomposition/test_gpt_4o_2024_08_06_lu_decomposition.py', 'symbol': 'invalid-name', 'message': 'Variable name ""U"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lu_decomposition', 'obj': 'TestLUDecomposition.test_example_1', 'line': 34, 'column': 14, 'endLine': 34, 'endColumn': 15, 'path': 'data/generated/docs_python/lu_decomposition/test_gpt_4o_2024_08_06_lu_decomposition.py', 'symbol': 'invalid-name', 'message': 'Variable name ""P"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lu_decomposition', 'obj': 'TestLUDecomposition.test_example_2', 'line': 39, 'column': 4, 'endLine': 39, 'endColumn': 22, 'path': 'data/generated/docs_python/lu_decomposition/test_gpt_4o_2024_08_06_lu_decomposition.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lu_decomposition', 'obj': 'TestLUDecomposition.test_example_2', 'line': 40, 'column': 8, 'endLine': 40, 'endColumn': 9, 'path': 'data/generated/docs_python/lu_decomposition/test_gpt_4o_2024_08_06_lu_decomposition.py', 'symbol': 'invalid-name', 'message': 'Variable name ""A"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lu_decomposition', 'obj': 'TestLUDecomposition.test_example_2', 'line': 46, 'column': 8, 'endLine': 46, 'endColumn': 18, 'path': 'data/generated/docs_python/lu_decomposition/test_gpt_4o_2024_08_06_lu_decomposition.py', 'symbol': 'invalid-name', 'message': 'Variable name ""expected_L"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lu_decomposition', 'obj': 'TestLUDecomposition.test_example_2', 'line': 52, 'column': 8, 'endLine': 52, 'endColumn': 18, 'path': 'data/generated/docs_python/lu_decomposition/test_gpt_4o_2024_08_06_lu_decomposition.py', 'symbol': 'invalid-name', 'message': 'Variable name ""expected_U"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lu_decomposition', 'obj': 'TestLUDecomposition.test_example_2', 'line': 58, 'column': 8, 'endLine': 58, 'endColumn': 18, 'path': 'data/generated/docs_python/lu_decomposition/test_gpt_4o_2024_08_06_lu_decomposition.py', 'symbol': 'invalid-name', 'message': 'Variable name ""expected_P"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lu_decomposition', 'obj': 'TestLUDecomposition.test_example_2', 'line': 65, 'column': 8, 'endLine': 65, 'endColumn': 9, 'path': 'data/generated/docs_python/lu_decomposition/test_gpt_4o_2024_08_06_lu_decomposition.py', 'symbol': 'invalid-name', 'message': 'Variable name ""L"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lu_decomposition', 'obj': 'TestLUDecomposition.test_example_2', 'line': 65, 'column': 11, 'endLine': 65, 'endColumn': 12, 'path': 'data/generated/docs_python/lu_decomposition/test_gpt_4o_2024_08_06_lu_decomposition.py', 'symbol': 'invalid-name', 'message': 'Variable name ""U"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lu_decomposition', 'obj': 'TestLUDecomposition.test_example_2', 'line': 65, 'column': 14, 'endLine': 65, 'endColumn': 15, 'path': 'data/generated/docs_python/lu_decomposition/test_gpt_4o_2024_08_06_lu_decomposition.py', 'symbol': 'invalid-name', 'message': 'Variable name ""P"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}]",False
LZW compression,"The Lempel-Ziv-Welch (LZW) algorithm provides loss-less data compression.

You can read a complete description of it in the   Wikipedia article   on the subject.   It was patented, but it entered the public domain in 2004.



",Python,"def compress(uncompressed):
    """"""Compress a string to a list of output symbols.""""""
 
    # Build the dictionary.
    dict_size = 256
    dictionary = dict((chr(i), i) for i in range(dict_size))
    # in Python 3: dictionary = {chr(i): i for i in range(dict_size)}
 
    w = """"
    result = []
    for c in uncompressed:
        wc = w + c
        if wc in dictionary:
            w = wc
        else:
            result.append(dictionary[w])
            # Add wc to the dictionary.
            dictionary[wc] = dict_size
            dict_size += 1
            w = c
 
    # Output the code for w.
    if w:
        result.append(dictionary[w])
    return result
 
 
def decompress(compressed):
    """"""Decompress a list of output ks to a string.""""""
    from io import StringIO
 
    # Build the dictionary.
    dict_size = 256
    dictionary = dict((i, chr(i)) for i in range(dict_size))
    # in Python 3: dictionary = {i: chr(i) for i in range(dict_size)}
 
    # use StringIO, otherwise this becomes O(N^2)
    # due to string concatenation in a loop
    result = StringIO()
    w = chr(compressed.pop(0))
    result.write(w)
    for k in compressed:
        if k in dictionary:
            entry = dictionary[k]
        elif k == dict_size:
            entry = w + w[0]
        else:
            raise ValueError('Bad compressed k: %s' % k)
        result.write(entry)
 
        # Add w+entry[0] to the dictionary.
        dictionary[dict_size] = w + entry[0]
        dict_size += 1
 
        w = entry
    return result.getvalue()
 
 
# How to use:
compressed = compress('TOBEORNOTTOBEORTOBEORNOT')
print (compressed)
decompressed = decompress(compressed)
print (decompressed)",1682,63,"import unittest
from lzw_compression import compress, decompress

class TestLZWCompression(unittest.TestCase):

    def test_compress_basic(self):
        input_data = ""TOBEORNOTTOBEORTOBEORNOT""
        expected_output = [84, 79, 66, 69, 79, 82, 78, 79, 84, 256, 258, 260, 265, 259, 261, 263]
        self.assertEqual(compress(input_data), expected_output)

    def test_decompress_basic(self):
        input_data = [84, 79, 66, 69, 79, 82, 78, 79, 84, 256, 258, 260, 265, 259, 261, 263]
        expected_output = ""TOBEORNOTTOBEORTOBEORNOT""
        self.assertEqual(decompress(input_data), expected_output)

    def test_compress_empty_string(self):
        input_data = """"
        expected_output = []
        self.assertEqual(compress(input_data), expected_output)

    def test_decompress_empty_list(self):
        input_data = []
        expected_output = """"
        self.assertEqual(decompress(input_data), expected_output)

    def test_compress_single_character(self):
        input_data = ""A""
        expected_output = [65]
        self.assertEqual(compress(input_data), expected_output)

    def test_decompress_single_character(self):
        input_data = [65]
        expected_output = ""A""
        self.assertEqual(decompress(input_data), expected_output)

    def test_compress_repeated_characters(self):
        input_data = ""AAAAAA""
        expected_output = [65, 256, 257, 258, 259]
        self.assertEqual(compress(input_data), expected_output)

    def test_decompress_repeated_characters(self):
        input_data = [65, 256, 257, 258, 259]
        expected_output = ""AAAAAA""
        self.assertEqual(decompress(input_data), expected_output)

    def test_decompress_invalid_input(self):
        input_data = [300]
        with self.assertRaises(ValueError):
            decompress(input_data)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/lzw_compression/test_gpt_4o_2024_08_06_lzw_compression.py,CompileStatus.OK,0.0,97.47,95.96,0.22,0.9,55.56,0.4827010631561279,11.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lzw_compression', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/lzw_compression/test_gpt_4o_2024_08_06_lzw_compression.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lzw_compression', 'obj': 'TestLZWCompression', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 24, 'path': 'data/generated/docs_python/lzw_compression/test_gpt_4o_2024_08_06_lzw_compression.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lzw_compression', 'obj': 'TestLZWCompression.test_compress_basic', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 27, 'path': 'data/generated/docs_python/lzw_compression/test_gpt_4o_2024_08_06_lzw_compression.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lzw_compression', 'obj': 'TestLZWCompression.test_decompress_basic', 'line': 11, 'column': 4, 'endLine': 11, 'endColumn': 29, 'path': 'data/generated/docs_python/lzw_compression/test_gpt_4o_2024_08_06_lzw_compression.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lzw_compression', 'obj': 'TestLZWCompression.test_compress_empty_string', 'line': 16, 'column': 4, 'endLine': 16, 'endColumn': 34, 'path': 'data/generated/docs_python/lzw_compression/test_gpt_4o_2024_08_06_lzw_compression.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lzw_compression', 'obj': 'TestLZWCompression.test_decompress_empty_list', 'line': 21, 'column': 4, 'endLine': 21, 'endColumn': 34, 'path': 'data/generated/docs_python/lzw_compression/test_gpt_4o_2024_08_06_lzw_compression.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lzw_compression', 'obj': 'TestLZWCompression.test_compress_single_character', 'line': 26, 'column': 4, 'endLine': 26, 'endColumn': 38, 'path': 'data/generated/docs_python/lzw_compression/test_gpt_4o_2024_08_06_lzw_compression.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lzw_compression', 'obj': 'TestLZWCompression.test_decompress_single_character', 'line': 31, 'column': 4, 'endLine': 31, 'endColumn': 40, 'path': 'data/generated/docs_python/lzw_compression/test_gpt_4o_2024_08_06_lzw_compression.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lzw_compression', 'obj': 'TestLZWCompression.test_compress_repeated_characters', 'line': 36, 'column': 4, 'endLine': 36, 'endColumn': 41, 'path': 'data/generated/docs_python/lzw_compression/test_gpt_4o_2024_08_06_lzw_compression.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lzw_compression', 'obj': 'TestLZWCompression.test_decompress_repeated_characters', 'line': 41, 'column': 4, 'endLine': 41, 'endColumn': 43, 'path': 'data/generated/docs_python/lzw_compression/test_gpt_4o_2024_08_06_lzw_compression.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lzw_compression', 'obj': 'TestLZWCompression.test_decompress_invalid_input', 'line': 46, 'column': 4, 'endLine': 46, 'endColumn': 37, 'path': 'data/generated/docs_python/lzw_compression/test_gpt_4o_2024_08_06_lzw_compression.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Langton's ant,"Langton's ant is a cellular automaton that models an ant sitting on a plane of cells, all of which are white initially, the ant facing in one of four directions.

Each cell can either be black or white.

The ant moves according to the color of the cell it is currently sitting in, with the following rules:

   If the cell is black, it changes to white and the ant turns left;
   If the cell is white, it changes to black and the ant turns right;
   The ant then moves forward to the next cell, and repeat from step 1.

This rather simple ruleset leads to an initially chaotic movement pattern, and after about 10000 steps, a cycle appears where the ant moves steadily away from the starting location in a diagonal corridor about 10 cells wide.
Conceptually the ant can then walk infinitely far away.



Task

Start the ant near the center of a 100x100 field of cells, which is about big enough to contain the initial chaotic part of the movement.

Follow the movement rules for the ant, terminate when it moves out of the region, and show the cell colors it leaves behind.



The problem has received some analysis; for more details, please take a look at the Wikipedia article   (a link is below)..



See also

   Wikipedia:   Langton's ant.


Related task

   Rosetta Code:   Conway's Game of Life.

",Python," 
""""""Langton's ant implementation.""""""
from enum import Enum, IntEnum
 
 
class Dir(IntEnum):
    """"""Possible directions.""""""
 
    UP = 0
    RIGHT = 1
    DOWN = 2
    LEFT = 3
 
 
class Color(Enum):
    """"""Possible colors.""""""
 
    WHITE = "" ""
    BLACK = ""#""
 
 
def invert_color(grid, x, y):
    """"""Invert the color of grid at x, y coordinate.""""""
    if grid[y][x] == Color.BLACK:
        grid[y][x] = Color.WHITE
    else:
        grid[y][x] = Color.BLACK
 
 
def next_direction(grid, x, y, direction):
    """"""Compute next direction according to current position and direction.""""""
    if grid[y][x] == Color.BLACK:
        turn_right = False
    else:
        turn_right = True
    direction_index = direction.value
    if turn_right:
        direction_index = (direction_index + 1) % 4
    else:
        direction_index = (direction_index - 1) % 4
    directions = [Dir.UP, Dir.RIGHT, Dir.DOWN, Dir.LEFT]
    direction = directions[direction_index]
    return direction
 
 
def next_position(x, y, direction):
    """"""Compute next position according to direction.""""""
    if direction == Dir.UP:
        y -= 1
    elif direction == Dir.RIGHT:
        x -= 1
    elif direction == Dir.DOWN:
        y += 1
    elif direction == Dir.LEFT:
        x += 1
    return x, y
 
 
def print_grid(grid):
    """"""Display grid.""""""
    print(80 * ""#"")
    print(""\n"".join("""".join(v.value for v in row) for row in grid))
 
 
def ant(width, height, max_nb_steps):
    """"""Langton's ant.""""""
    grid = [[Color.WHITE] * width for _ in range(height)]
    x = width // 2
    y = height // 2
    direction = Dir.UP
 
    i = 0
    while i < max_nb_steps and 0 <= x < width and 0 <= y < height:
        invert_color(grid, x, y)
        direction = next_direction(grid, x, y, direction)
        x, y = next_position(x, y, direction)
        print_grid(grid)
        i += 1
 
 
if __name__ == ""__main__"":
    ant(width=75, height=52, max_nb_steps=12000)
 ",1934,83,"import unittest
from langton_s_ant import Dir, Color, invert_color, next_direction, next_position, ant

class TestLangtonsAnt(unittest.TestCase):

    def setUp(self):
        self.width = 100
        self.height = 100
        self.grid = [[Color.WHITE] * self.width for _ in range(self.height)]
        self.x = self.width // 2
        self.y = self.height // 2
        self.direction = Dir.UP

    def test_invert_color_white_to_black(self):
        invert_color(self.grid, self.x, self.y)
        self.assertEqual(self.grid[self.y][self.x], Color.BLACK)

    def test_invert_color_black_to_white(self):
        self.grid[self.y][self.x] = Color.BLACK
        invert_color(self.grid, self.x, self.y)
        self.assertEqual(self.grid[self.y][self.x], Color.WHITE)

    def test_next_direction_white_cell(self):
        self.assertEqual(next_direction(self.grid, self.x, self.y, self.direction), Dir.RIGHT)

    def test_next_direction_black_cell(self):
        self.grid[self.y][self.x] = Color.BLACK
        self.assertEqual(next_direction(self.grid, self.x, self.y, self.direction), Dir.LEFT)

    def test_next_position_up(self):
        new_x, new_y = next_position(self.x, self.y, Dir.UP)
        self.assertEqual((new_x, new_y), (self.x, self.y - 1))

    def test_next_position_right(self):
        new_x, new_y = next_position(self.x, self.y, Dir.RIGHT)
        self.assertEqual((new_x, new_y), (self.x - 1, self.y))

    def test_next_position_down(self):
        new_x, new_y = next_position(self.x, self.y, Dir.DOWN)
        self.assertEqual((new_x, new_y), (self.x, self.y + 1))

    def test_next_position_left(self):
        new_x, new_y = next_position(self.x, self.y, Dir.LEFT)
        self.assertEqual((new_x, new_y), (self.x + 1, self.y))

    def test_ant_movement(self):
        # This test will check if the ant moves correctly within the grid
        # and terminates when it moves out of bounds.
        ant(width=10, height=10, max_nb_steps=100)
        # Since the function prints the grid and doesn't return a value,
        # we can't assert on the final state of the grid without modifying the original code.
        # This test will ensure no exceptions are raised during execution.

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/langton_s_ant/test_gpt_4o_2024_08_06_langton_s_ant.py,CompileStatus.OK,0.0,97.75,95.65,0.21,0.44,100.0,0.4765141010284424,11.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_langton_s_ant', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/langton_s_ant/test_gpt_4o_2024_08_06_langton_s_ant.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_langton_s_ant', 'obj': 'TestLangtonsAnt', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 21, 'path': 'data/generated/docs_python/langton_s_ant/test_gpt_4o_2024_08_06_langton_s_ant.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_langton_s_ant', 'obj': 'TestLangtonsAnt.test_invert_color_white_to_black', 'line': 14, 'column': 4, 'endLine': 14, 'endColumn': 40, 'path': 'data/generated/docs_python/langton_s_ant/test_gpt_4o_2024_08_06_langton_s_ant.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_langton_s_ant', 'obj': 'TestLangtonsAnt.test_invert_color_black_to_white', 'line': 18, 'column': 4, 'endLine': 18, 'endColumn': 40, 'path': 'data/generated/docs_python/langton_s_ant/test_gpt_4o_2024_08_06_langton_s_ant.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_langton_s_ant', 'obj': 'TestLangtonsAnt.test_next_direction_white_cell', 'line': 23, 'column': 4, 'endLine': 23, 'endColumn': 38, 'path': 'data/generated/docs_python/langton_s_ant/test_gpt_4o_2024_08_06_langton_s_ant.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_langton_s_ant', 'obj': 'TestLangtonsAnt.test_next_direction_black_cell', 'line': 26, 'column': 4, 'endLine': 26, 'endColumn': 38, 'path': 'data/generated/docs_python/langton_s_ant/test_gpt_4o_2024_08_06_langton_s_ant.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_langton_s_ant', 'obj': 'TestLangtonsAnt.test_next_position_up', 'line': 30, 'column': 4, 'endLine': 30, 'endColumn': 29, 'path': 'data/generated/docs_python/langton_s_ant/test_gpt_4o_2024_08_06_langton_s_ant.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_langton_s_ant', 'obj': 'TestLangtonsAnt.test_next_position_right', 'line': 34, 'column': 4, 'endLine': 34, 'endColumn': 32, 'path': 'data/generated/docs_python/langton_s_ant/test_gpt_4o_2024_08_06_langton_s_ant.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_langton_s_ant', 'obj': 'TestLangtonsAnt.test_next_position_down', 'line': 38, 'column': 4, 'endLine': 38, 'endColumn': 31, 'path': 'data/generated/docs_python/langton_s_ant/test_gpt_4o_2024_08_06_langton_s_ant.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_langton_s_ant', 'obj': 'TestLangtonsAnt.test_next_position_left', 'line': 42, 'column': 4, 'endLine': 42, 'endColumn': 31, 'path': 'data/generated/docs_python/langton_s_ant/test_gpt_4o_2024_08_06_langton_s_ant.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_langton_s_ant', 'obj': 'TestLangtonsAnt.test_ant_movement', 'line': 46, 'column': 4, 'endLine': 46, 'endColumn': 25, 'path': 'data/generated/docs_python/langton_s_ant/test_gpt_4o_2024_08_06_langton_s_ant.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Largest int from concatenated ints,"Task

Given a set of positive integers, write a function to order the integers in such a way that the concatenation of the numbers forms the largest possible integer and return this integer.

Use the following two sets of integers as tests   and   show your program output here.

   {1, 34, 3, 98, 9, 76, 45, 4}
   {54, 546, 548, 60}


Possible algorithms

 A solution could be found by trying all combinations and return the best.
 Another way to solve this is to note that in the best arrangement, for any two adjacent original integers X and Y, the concatenation X followed by Y will be numerically greater than or equal to the concatenation Y followed by X.
 Yet another way to solve this is to pad the integers to the same size by repeating the digits then sort using these repeated integers as a sort key.


See also

   Algorithms: What is the most efficient way to arrange the given numbers to form the biggest number?
   Constructing the largest number possible by rearranging a list

",Python,"try:
    cmp     # Python 2 OK or NameError in Python 3
    def maxnum(x):
        return ''.join(sorted((str(n) for n in x),
                              cmp=lambda x,y:cmp(y+x, x+y)))
except NameError:
    # Python 3
    from functools import cmp_to_key
    def cmp(x, y):
        return -1 if x<y else ( 0 if x==y else 1)
    def maxnum(x):
        return ''.join(sorted((str(n) for n in x),
                              key=cmp_to_key(lambda x,y:cmp(y+x, x+y))))
 
for numbers in [(1, 34, 3, 98, 9, 76, 45, 4), (54, 546, 548, 60)]:
    print('Numbers: %r\n  Largest integer: %15s' % (numbers, maxnum(numbers)))",616,16,"import unittest
from functools import cmp_to_key

def cmp(x, y):
    return -1 if x < y else (0 if x == y else 1)

def maxnum(x):
    return ''.join(sorted((str(n) for n in x),
                          key=cmp_to_key(lambda x, y: cmp(y + x, x + y))))

class TestLargestInteger(unittest.TestCase):

    def test_case_1(self):
        numbers = {1, 34, 3, 98, 9, 76, 45, 4}
        expected_output = '998764543431'
        self.assertEqual(maxnum(numbers), expected_output)

    def test_case_2(self):
        numbers = {54, 546, 548, 60}
        expected_output = '6054854654'
        self.assertEqual(maxnum(numbers), expected_output)

    def test_single_number(self):
        numbers = {5}
        expected_output = '5'
        self.assertEqual(maxnum(numbers), expected_output)

    def test_identical_numbers(self):
        numbers = {11, 11, 11}
        expected_output = '111111'
        self.assertEqual(maxnum(numbers), expected_output)

    def test_large_numbers(self):
        numbers = {121, 12}
        expected_output = '12121'
        self.assertEqual(maxnum(numbers), expected_output)

    def test_empty_set(self):
        numbers = set()
        expected_output = ''
        self.assertEqual(maxnum(numbers), expected_output)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/largest_int_from_concatenated_ints/test_gpt_4o_2024_08_06_largest_int_from_concatenated_ints.py,CompileStatus.OK,0.0,71.11,63.64,0.18,0.86,83.33,0.4885129928588867,12.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_largest_int_from_concatenated_ints', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/largest_int_from_concatenated_ints/test_gpt_4o_2024_08_06_largest_int_from_concatenated_ints.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_largest_int_from_concatenated_ints', 'obj': 'cmp', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 7, 'path': 'data/generated/docs_python/largest_int_from_concatenated_ints/test_gpt_4o_2024_08_06_largest_int_from_concatenated_ints.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_largest_int_from_concatenated_ints', 'obj': 'maxnum', 'line': 7, 'column': 0, 'endLine': 7, 'endColumn': 10, 'path': 'data/generated/docs_python/largest_int_from_concatenated_ints/test_gpt_4o_2024_08_06_largest_int_from_concatenated_ints.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_largest_int_from_concatenated_ints', 'obj': 'TestLargestInteger', 'line': 11, 'column': 0, 'endLine': 11, 'endColumn': 24, 'path': 'data/generated/docs_python/largest_int_from_concatenated_ints/test_gpt_4o_2024_08_06_largest_int_from_concatenated_ints.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_largest_int_from_concatenated_ints', 'obj': 'TestLargestInteger.test_case_1', 'line': 13, 'column': 4, 'endLine': 13, 'endColumn': 19, 'path': 'data/generated/docs_python/largest_int_from_concatenated_ints/test_gpt_4o_2024_08_06_largest_int_from_concatenated_ints.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_largest_int_from_concatenated_ints', 'obj': 'TestLargestInteger.test_case_2', 'line': 18, 'column': 4, 'endLine': 18, 'endColumn': 19, 'path': 'data/generated/docs_python/largest_int_from_concatenated_ints/test_gpt_4o_2024_08_06_largest_int_from_concatenated_ints.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_largest_int_from_concatenated_ints', 'obj': 'TestLargestInteger.test_single_number', 'line': 23, 'column': 4, 'endLine': 23, 'endColumn': 26, 'path': 'data/generated/docs_python/largest_int_from_concatenated_ints/test_gpt_4o_2024_08_06_largest_int_from_concatenated_ints.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_largest_int_from_concatenated_ints', 'obj': 'TestLargestInteger.test_identical_numbers', 'line': 28, 'column': 4, 'endLine': 28, 'endColumn': 30, 'path': 'data/generated/docs_python/largest_int_from_concatenated_ints/test_gpt_4o_2024_08_06_largest_int_from_concatenated_ints.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_largest_int_from_concatenated_ints', 'obj': 'TestLargestInteger.test_identical_numbers', 'line': 29, 'column': 18, 'endLine': 29, 'endColumn': 30, 'path': 'data/generated/docs_python/largest_int_from_concatenated_ints/test_gpt_4o_2024_08_06_largest_int_from_concatenated_ints.py', 'symbol': 'duplicate-value', 'message': 'Duplicate value 11 in set', 'message-id': 'W0130'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_largest_int_from_concatenated_ints', 'obj': 'TestLargestInteger.test_identical_numbers', 'line': 29, 'column': 18, 'endLine': 29, 'endColumn': 30, 'path': 'data/generated/docs_python/largest_int_from_concatenated_ints/test_gpt_4o_2024_08_06_largest_int_from_concatenated_ints.py', 'symbol': 'duplicate-value', 'message': 'Duplicate value 11 in set', 'message-id': 'W0130'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_largest_int_from_concatenated_ints', 'obj': 'TestLargestInteger.test_large_numbers', 'line': 33, 'column': 4, 'endLine': 33, 'endColumn': 26, 'path': 'data/generated/docs_python/largest_int_from_concatenated_ints/test_gpt_4o_2024_08_06_largest_int_from_concatenated_ints.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_largest_int_from_concatenated_ints', 'obj': 'TestLargestInteger.test_empty_set', 'line': 38, 'column': 4, 'endLine': 38, 'endColumn': 22, 'path': 'data/generated/docs_python/largest_int_from_concatenated_ints/test_gpt_4o_2024_08_06_largest_int_from_concatenated_ints.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Largest number divisible by its digits,"Task

Find the largest base 10 integer whose digits are all different,   and   is evenly divisible by each of its individual digits.



These numbers are also known as   Lynch-Bell numbers,   numbers   n   such that the
(base ten) digits are all different (and do not include zero)   and   n   is divisible by each of its individual digits.



Example

135   is evenly divisible by   1,   3,   and   5.



Note that the digit zero (0) can not be in the number as integer division by zero is undefined.

The digits must all be unique so a base ten number will have at most 9 digits.

Feel free to use analytics and clever algorithms to reduce the search space your example needs to visit, but it must do an actual search. (Don't just feed it the answer and verify it is correct.)



Stretch goal

Do the same thing for hexadecimal.



Related tasks

   gapful numbers.
   palindromic gapful numbers.


Also see

   The OEIS sequence:   A115569: Lynch-Bell numbers.

",Python,"'''Largest number divisible by its digits'''
 
from itertools import (chain, permutations)
from functools import (reduce)
from math import (gcd)
 
 
# main :: IO ()
def main():
    '''Tests'''
 
    # (Division by zero is not an option, so 0 and 5 are omitted)
    digits = [1, 2, 3, 4, 6, 7, 8, 9]
 
    # Least common multiple of the digits above
    lcmDigits = reduce(lcm, digits)
 
    # Any 7 items drawn from the digits above,
    # including any two of [1, 4, 7]
    sevenDigits = ((delete)(digits)(x) for x in [1, 4, 7])
 
    print(
        max(
            (
                intFromDigits(x) for x
                in concatMap(permutations)(sevenDigits)
            ),
            key=lambda n: n if 0 == n % lcmDigits else 0
        )
    )
 
 
# intFromDigits :: [Int] -> Int
def intFromDigits(xs):
    '''An integer derived from an
       ordered list of digits.
    '''
    return reduce(lambda a, x: a * 10 + x, xs, 0)
 
 
# ----------------------- GENERIC ------------------------
 
# concatMap :: (a -> [b]) -> [a] -> [b]
def concatMap(f):
    '''A concatenated list over which a function has been
       mapped. The list monad can be derived by using a
       function f which wraps its output in a list,
       (using an empty list to represent computational failure).
    '''
    def go(xs):
        return chain.from_iterable(map(f, xs))
    return go
 
 
# delete :: Eq a => [a] -> a -> [a]
def delete(xs):
    '''xs with the first instance of
       x removed.
    '''
    def go(x):
        ys = xs.copy()
        ys.remove(x)
        return ys
    return go
 
 
# lcm :: Int -> Int -> Int
def lcm(x, y):
    '''The smallest positive integer divisible
       without remainder by both x and y.
    '''
    return 0 if (0 == x or 0 == y) else abs(
        y * (x // gcd(x, y))
    )
 
 
# MAIN ---
if __name__ == '__main__':
    main()",1859,79,"import unittest
from largest_number_divisible_by_its_digits import intFromDigits, concatMap, delete, lcm

class TestLargestNumberDivisibleByItsDigits(unittest.TestCase):

    def test_intFromDigits(self):
        self.assertEqual(intFromDigits([1, 3, 5]), 135)
        self.assertEqual(intFromDigits([9, 8, 7, 6]), 9876)
        self.assertEqual(intFromDigits([]), 0)
        self.assertEqual(intFromDigits([0]), 0)

    def test_concatMap(self):
        f = lambda x: [x, x + 1]
        self.assertEqual(list(concatMap(f)([1, 2, 3])), [1, 2, 2, 3, 3, 4])
        self.assertEqual(list(concatMap(f)([])), [])

    def test_delete(self):
        self.assertEqual(delete([1, 2, 3, 4])(3), [1, 2, 4])
        self.assertEqual(delete([1, 2, 3, 4])(1), [2, 3, 4])
        self.assertEqual(delete([1, 2, 3, 4])(4), [1, 2, 3])
        self.assertEqual(delete([1, 2, 3, 4])(5), [1, 2, 3, 4])  # No change if element not found

    def test_lcm(self):
        self.assertEqual(lcm(3, 5), 15)
        self.assertEqual(lcm(10, 5), 10)
        self.assertEqual(lcm(0, 5), 0)
        self.assertEqual(lcm(7, 0), 0)
        self.assertEqual(lcm(6, 8), 24)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/largest_number_divisible_by_its_digits/test_gpt_4o_2024_08_06_largest_number_divisible_by_its_digits.py,CompileStatus.OK,0.0,87.76,80.33,0.6,1.25,75.0,0.4787280559539795,9.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_largest_number_divisible_by_its_digits', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/largest_number_divisible_by_its_digits/test_gpt_4o_2024_08_06_largest_number_divisible_by_its_digits.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_largest_number_divisible_by_its_digits', 'obj': 'TestLargestNumberDivisibleByItsDigits', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 43, 'path': 'data/generated/docs_python/largest_number_divisible_by_its_digits/test_gpt_4o_2024_08_06_largest_number_divisible_by_its_digits.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_largest_number_divisible_by_its_digits', 'obj': 'TestLargestNumberDivisibleByItsDigits.test_intFromDigits', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 26, 'path': 'data/generated/docs_python/largest_number_divisible_by_its_digits/test_gpt_4o_2024_08_06_largest_number_divisible_by_its_digits.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_largest_number_divisible_by_its_digits', 'obj': 'TestLargestNumberDivisibleByItsDigits.test_intFromDigits', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 26, 'path': 'data/generated/docs_python/largest_number_divisible_by_its_digits/test_gpt_4o_2024_08_06_largest_number_divisible_by_its_digits.py', 'symbol': 'invalid-name', 'message': 'Method name ""test_intFromDigits"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_largest_number_divisible_by_its_digits', 'obj': 'TestLargestNumberDivisibleByItsDigits.test_concatMap', 'line': 12, 'column': 4, 'endLine': 12, 'endColumn': 22, 'path': 'data/generated/docs_python/largest_number_divisible_by_its_digits/test_gpt_4o_2024_08_06_largest_number_divisible_by_its_digits.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_largest_number_divisible_by_its_digits', 'obj': 'TestLargestNumberDivisibleByItsDigits.test_concatMap', 'line': 12, 'column': 4, 'endLine': 12, 'endColumn': 22, 'path': 'data/generated/docs_python/largest_number_divisible_by_its_digits/test_gpt_4o_2024_08_06_largest_number_divisible_by_its_digits.py', 'symbol': 'invalid-name', 'message': 'Method name ""test_concatMap"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_largest_number_divisible_by_its_digits', 'obj': 'TestLargestNumberDivisibleByItsDigits.test_concatMap.<lambda>', 'line': 13, 'column': 12, 'endLine': 13, 'endColumn': 32, 'path': 'data/generated/docs_python/largest_number_divisible_by_its_digits/test_gpt_4o_2024_08_06_largest_number_divisible_by_its_digits.py', 'symbol': 'unnecessary-lambda-assignment', 'message': 'Lambda expression assigned to a variable. Define a function using the ""def"" keyword instead.', 'message-id': 'C3001'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_largest_number_divisible_by_its_digits', 'obj': 'TestLargestNumberDivisibleByItsDigits.test_delete', 'line': 17, 'column': 4, 'endLine': 17, 'endColumn': 19, 'path': 'data/generated/docs_python/largest_number_divisible_by_its_digits/test_gpt_4o_2024_08_06_largest_number_divisible_by_its_digits.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_largest_number_divisible_by_its_digits', 'obj': 'TestLargestNumberDivisibleByItsDigits.test_lcm', 'line': 23, 'column': 4, 'endLine': 23, 'endColumn': 16, 'path': 'data/generated/docs_python/largest_number_divisible_by_its_digits/test_gpt_4o_2024_08_06_largest_number_divisible_by_its_digits.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Last Friday of each month,"Task

Write a program or a script that returns the date of the last Fridays of each month of a given year.

The year may be given through any simple input method in your language (command line, std in, etc).



Example of an expected output:

./last_fridays 2012
2012-01-27
2012-02-24
2012-03-30
2012-04-27
2012-05-25
2012-06-29
2012-07-27
2012-08-31
2012-09-28
2012-10-26
2012-11-30
2012-12-28



Related tasks
 Five weekends
 Day of the week
 Find the last Sunday of each month

",Python,"import calendar
 
def last_fridays(year):
    for month in range(1, 13):
        last_friday = max(week[calendar.FRIDAY]
            for week in calendar.monthcalendar(year, month))
        print('{:4d}-{:02d}-{:02d}'.format(year, month, last_friday))",251,7,"import unittest
from io import StringIO
import sys
import calendar

# Assuming the function to test is named `last_fridays` and is in a module named `last_friday_of_each_month`
from last_friday_of_each_month import last_fridays

class TestLastFridays(unittest.TestCase):

    def test_last_fridays_2012(self):
        expected_output = (
            ""2012-01-27\n""
            ""2012-02-24\n""
            ""2012-03-30\n""
            ""2012-04-27\n""
            ""2012-05-25\n""
            ""2012-06-29\n""
            ""2012-07-27\n""
            ""2012-08-31\n""
            ""2012-09-28\n""
            ""2012-10-26\n""
            ""2012-11-30\n""
            ""2012-12-28\n""
        )
        self._assert_last_fridays_output(2012, expected_output)

    def test_last_fridays_2020(self):
        expected_output = (
            ""2020-01-31\n""
            ""2020-02-28\n""
            ""2020-03-27\n""
            ""2020-04-24\n""
            ""2020-05-29\n""
            ""2020-06-26\n""
            ""2020-07-31\n""
            ""2020-08-28\n""
            ""2020-09-25\n""
            ""2020-10-30\n""
            ""2020-11-27\n""
            ""2020-12-25\n""
        )
        self._assert_last_fridays_output(2020, expected_output)

    def test_last_fridays_2021(self):
        expected_output = (
            ""2021-01-29\n""
            ""2021-02-26\n""
            ""2021-03-26\n""
            ""2021-04-30\n""
            ""2021-05-28\n""
            ""2021-06-25\n""
            ""2021-07-30\n""
            ""2021-08-27\n""
            ""2021-09-24\n""
            ""2021-10-29\n""
            ""2021-11-26\n""
            ""2021-12-31\n""
        )
        self._assert_last_fridays_output(2021, expected_output)

    def _assert_last_fridays_output(self, year, expected_output):
        captured_output = StringIO()
        sys.stdout = captured_output
        last_fridays(year)
        sys.stdout = sys.__stdout__
        self.assertEqual(captured_output.getvalue(), expected_output)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/last_friday_of_each_month/test_gpt_4o_2024_08_06_last_friday_of_each_month.py,CompileStatus.OK,0.0,96.43,94.12,0.04,0.33,100.0,0.4492542743682861,7.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_last_friday_of_each_month', 'obj': '', 'line': 6, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/last_friday_of_each_month/test_gpt_4o_2024_08_06_last_friday_of_each_month.py', 'symbol': 'line-too-long', 'message': 'Line too long (108/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_last_friday_of_each_month', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/last_friday_of_each_month/test_gpt_4o_2024_08_06_last_friday_of_each_month.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_last_friday_of_each_month', 'obj': 'TestLastFridays', 'line': 9, 'column': 0, 'endLine': 9, 'endColumn': 21, 'path': 'data/generated/docs_python/last_friday_of_each_month/test_gpt_4o_2024_08_06_last_friday_of_each_month.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_last_friday_of_each_month', 'obj': 'TestLastFridays.test_last_fridays_2012', 'line': 11, 'column': 4, 'endLine': 11, 'endColumn': 30, 'path': 'data/generated/docs_python/last_friday_of_each_month/test_gpt_4o_2024_08_06_last_friday_of_each_month.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_last_friday_of_each_month', 'obj': 'TestLastFridays.test_last_fridays_2020', 'line': 28, 'column': 4, 'endLine': 28, 'endColumn': 30, 'path': 'data/generated/docs_python/last_friday_of_each_month/test_gpt_4o_2024_08_06_last_friday_of_each_month.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_last_friday_of_each_month', 'obj': 'TestLastFridays.test_last_fridays_2021', 'line': 45, 'column': 4, 'endLine': 45, 'endColumn': 30, 'path': 'data/generated/docs_python/last_friday_of_each_month/test_gpt_4o_2024_08_06_last_friday_of_each_month.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_last_friday_of_each_month', 'obj': '', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 15, 'path': 'data/generated/docs_python/last_friday_of_each_month/test_gpt_4o_2024_08_06_last_friday_of_each_month.py', 'symbol': 'unused-import', 'message': 'Unused import calendar', 'message-id': 'W0611'}]",False
Last letter-first letter,"A certain children's game involves starting with a word in a particular category.   Each participant in turn says a word, but that word must begin with the final letter of the previous word.   Once a word has been given, it cannot be repeated.   If an opponent cannot give a word in the category, they fall out of the game.



For example, with   ""animals""   as the category,

Child 1: dog
Child 2: goldfish
Child 1: hippopotamus
Child 2: snake
...



Task

Take the following selection of 70 English Pokemon names   (extracted from   Wikipedia's list of Pokemon)   and generate the/a sequence with the highest possible number of Pokemon names where the subsequent name starts with the final letter of the preceding name.

No Pokemon name is to be repeated.

audino bagon baltoy banette bidoof braviary bronzor carracosta charmeleon
cresselia croagunk darmanitan deino emboar emolga exeggcute gabite
girafarig gulpin haxorus heatmor heatran ivysaur jellicent jumpluff kangaskhan
kricketune landorus ledyba loudred lumineon lunatone machamp magnezone mamoswine
nosepass petilil pidgeotto pikachu pinsir poliwrath poochyena porygon2
porygonz registeel relicanth remoraid rufflet sableye scolipede scrafty seaking
sealeo silcoon simisear snivy snorlax spoink starly tirtouga trapinch treecko
tyrogue vigoroth vulpix wailord wartortle whismur wingull yamask



Extra brownie points for dealing with the full list of   646   names.



",Python,"from collections import defaultdict
 
def order_words(words):
    byfirst = defaultdict(set)
    for word in words:
        byfirst[word[0]].add( word )
    #byfirst = dict(byfirst)
    return byfirst
 
def linkfirst(byfirst, sofar):
    '''\
    For all words matching last char of last word in sofar as FIRST char and not in sofar,
    return longest chain as sofar + chain
    '''
 
    assert sofar
    chmatch = sofar[-1][-1]
    options = byfirst[chmatch] - set(sofar)
    #print('  linkfirst options: %r %r' % (chmatch, options))
    if not options:
        return sofar
    else:
        alternatives = ( linkfirst(byfirst, list(sofar) + [word])
                         for word in options )
        mx = max( alternatives, key=len )
        #input('linkfirst: %r' % mx)
        return mx
 
def llfl(words):
 
    byfirst = order_words(words)
    return max( (linkfirst(byfirst, [word]) for word in words), key=len )
 
if __name__ == '__main__':
    pokemon = '''audino bagon baltoy banette bidoof braviary bronzor carracosta charmeleon
cresselia croagunk darmanitan deino emboar emolga exeggcute gabite
girafarig gulpin haxorus heatmor heatran ivysaur jellicent jumpluff kangaskhan
kricketune landorus ledyba loudred lumineon lunatone machamp magnezone mamoswine
nosepass petilil pidgeotto pikachu pinsir poliwrath poochyena porygon2
porygonz registeel relicanth remoraid rufflet sableye scolipede scrafty seaking
sealeo silcoon simisear snivy snorlax spoink starly tirtouga trapinch treecko
tyrogue vigoroth vulpix wailord wartortle whismur wingull yamask'''
    pokemon = pokemon.strip().lower().split()
    pokemon = sorted(set(pokemon))
    l = llfl(pokemon)
    for i in range(0, len(l), 8): print(' '.join(l[i:i+8]))
    print(len(l))",1754,47,"import unittest
from last_letter_first_letter import order_words, linkfirst, llfl

class TestLastLetterFirstLetter(unittest.TestCase):

    def setUp(self):
        self.pokemon = '''audino bagon baltoy banette bidoof braviary bronzor carracosta charmeleon
        cresselia croagunk darmanitan deino emboar emolga exeggcute gabite
        girafarig gulpin haxorus heatmor heatran ivysaur jellicent jumpluff kangaskhan
        kricketune landorus ledyba loudred lumineon lunatone machamp magnezone mamoswine
        nosepass petilil pidgeotto pikachu pinsir poliwrath poochyena porygon2
        porygonz registeel relicanth remoraid rufflet sableye scolipede scrafty seaking
        sealeo silcoon simisear snivy snorlax spoink starly tirtouga trapinch treecko
        tyrogue vigoroth vulpix wailord wartortle whismur wingull yamask'''
        self.pokemon = self.pokemon.strip().lower().split()
        self.pokemon = sorted(set(self.pokemon))

    def test_order_words(self):
        byfirst = order_words(self.pokemon)
        self.assertIn('a', byfirst)
        self.assertIn('audino', byfirst['a'])
        self.assertIn('b', byfirst)
        self.assertIn('bagon', byfirst['b'])

    def test_linkfirst(self):
        byfirst = order_words(self.pokemon)
        result = linkfirst(byfirst, ['audino'])
        self.assertTrue(result)
        self.assertEqual(result[0], 'audino')
        self.assertNotIn('audino', result[1:])  # Ensure 'audino' is not repeated

    def test_llfl(self):
        result = llfl(self.pokemon)
        self.assertTrue(result)
        self.assertEqual(result[0], 'audino')  # Starting point can vary
        self.assertEqual(len(result), len(set(result)))  # Ensure no repetitions

    def test_llfl_length(self):
        result = llfl(self.pokemon)
        self.assertGreater(len(result), 0)  # Ensure there's at least one word
        # Check if the sequence is the longest possible (for this test, we assume a known length)
        # This length is hypothetical and should be adjusted based on actual longest sequence found
        self.assertEqual(len(result), 36)  # Example length, adjust based on actual results

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/last_letter_first_letter/test_gpt_4o_2024_08_06_last_letter_first_letter.py,CompileStatus.OK,0.0,85.45,,0.4,1.71,50.0,10.694803953170776,6.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_last_letter_first_letter', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/last_letter_first_letter/test_gpt_4o_2024_08_06_last_letter_first_letter.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_last_letter_first_letter', 'obj': 'TestLastLetterFirstLetter', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 31, 'path': 'data/generated/docs_python/last_letter_first_letter/test_gpt_4o_2024_08_06_last_letter_first_letter.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_last_letter_first_letter', 'obj': 'TestLastLetterFirstLetter.test_order_words', 'line': 18, 'column': 4, 'endLine': 18, 'endColumn': 24, 'path': 'data/generated/docs_python/last_letter_first_letter/test_gpt_4o_2024_08_06_last_letter_first_letter.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_last_letter_first_letter', 'obj': 'TestLastLetterFirstLetter.test_linkfirst', 'line': 25, 'column': 4, 'endLine': 25, 'endColumn': 22, 'path': 'data/generated/docs_python/last_letter_first_letter/test_gpt_4o_2024_08_06_last_letter_first_letter.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_last_letter_first_letter', 'obj': 'TestLastLetterFirstLetter.test_llfl', 'line': 32, 'column': 4, 'endLine': 32, 'endColumn': 17, 'path': 'data/generated/docs_python/last_letter_first_letter/test_gpt_4o_2024_08_06_last_letter_first_letter.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_last_letter_first_letter', 'obj': 'TestLastLetterFirstLetter.test_llfl_length', 'line': 38, 'column': 4, 'endLine': 38, 'endColumn': 24, 'path': 'data/generated/docs_python/last_letter_first_letter/test_gpt_4o_2024_08_06_last_letter_first_letter.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Left factorials,"Left factorials,   !n,   may refer to either   subfactorials   or to   factorial sums;

the same notation can be confusingly seen being used for the two different definitions.

Sometimes,   subfactorials   (also known as derangements)   may use any of the notations:

     !n`
     !n
     n¡


(It may not be visually obvious, but the last example uses an upside-down exclamation mark.)



This Rosetta Code task will be using this formula   (factorial sums)   for   left factorial:


  



!
n
=

∑

k
=
0


n
−
1


k
!


{\displaystyle !n=\sum _{k=0}^{n-1}k!}




 where


  



!
0
=
0


{\displaystyle !0=0}






Task
Display the left factorials for:

   zero through ten     (inclusive)
   20   through   110   (inclusive)   by tens


Display the length (in decimal digits) of the left factorials for:

   1,000   through   10,000   (inclusive), by thousands.


Also see

   The OEIS entry: A003422 left factorials
   The MathWorld entry: left factorial
   The MathWorld entry: factorial sums
   The MathWorld entry: subfactorial


Related task

   permutations/derangements (subfactorials)

",Python,"from itertools import islice
 
def lfact():
    yield 0
    fact, summ, n = 1, 0, 1
    while 1:
        fact, summ, n = fact*n, summ + fact, n + 1
        yield summ
 
print('first 11:\n  %r' % [lf for i, lf in zip(range(11), lfact())])
print('20 through 110 (inclusive) by tens:')
for lf in islice(lfact(), 20, 111, 10):
    print(lf)
print('Digits in 1,000 through 10,000 (inclusive) by thousands:\n  %r'
      % [len(str(lf)) for lf in islice(lfact(), 1000, 10001, 1000)] )",479,15,"import unittest
from itertools import islice
from left_factorials import lfact

class TestLeftFactorials(unittest.TestCase):

    def test_first_11(self):
        expected = [0, 1, 2, 4, 10, 34, 154, 874, 5914, 46234, 409114]
        result = [lf for i, lf in zip(range(11), lfact())]
        self.assertEqual(result, expected)

    def test_20_to_110_by_tens(self):
        expected = [
            2561327494111820313, 138274255621965580161, 8896366906578691755481,
            619220451666590135228993, 47246709767804326591140481,
            3786938976806275519913139343, 322977937386662331478602186481,
            29088885112866645643196526854833, 2772435752542588774987937244647201,
            278981066282806941248839680803092481
        ]
        result = list(islice(lfact(), 20, 111, 10))
        self.assertEqual(result, expected)

    def test_digits_in_1000_to_10000_by_thousands(self):
        expected = [2568, 35660, 456573, 5565730, 65657303, 756573034, 8565730343, 95657303436, 1056573034361, 11565730343616]
        result = [len(str(lf)) for lf in islice(lfact(), 1000, 10001, 1000)]
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/left_factorials/test_gpt_4o_2024_08_06_left_factorials.py,CompileStatus.OK,0.0,50.0,50.0,0.13,1.5,,0.5140278339385986,6.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_left_factorials', 'obj': '', 'line': 24, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/left_factorials/test_gpt_4o_2024_08_06_left_factorials.py', 'symbol': 'line-too-long', 'message': 'Line too long (126/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_left_factorials', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/left_factorials/test_gpt_4o_2024_08_06_left_factorials.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_left_factorials', 'obj': 'TestLeftFactorials', 'line': 5, 'column': 0, 'endLine': 5, 'endColumn': 24, 'path': 'data/generated/docs_python/left_factorials/test_gpt_4o_2024_08_06_left_factorials.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_left_factorials', 'obj': 'TestLeftFactorials.test_first_11', 'line': 7, 'column': 4, 'endLine': 7, 'endColumn': 21, 'path': 'data/generated/docs_python/left_factorials/test_gpt_4o_2024_08_06_left_factorials.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_left_factorials', 'obj': 'TestLeftFactorials.test_20_to_110_by_tens', 'line': 12, 'column': 4, 'endLine': 12, 'endColumn': 30, 'path': 'data/generated/docs_python/left_factorials/test_gpt_4o_2024_08_06_left_factorials.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_left_factorials', 'obj': 'TestLeftFactorials.test_digits_in_1000_to_10000_by_thousands', 'line': 23, 'column': 4, 'endLine': 23, 'endColumn': 49, 'path': 'data/generated/docs_python/left_factorials/test_gpt_4o_2024_08_06_left_factorials.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Letter frequency,"Task

Open a text file and count the occurrences of each letter.

Some of these programs count all characters (including punctuation),
but some only count letters A to Z.




Other tasks related to string operations:

Metrics
 Array length
 String length
 Copy a string
 Empty string  (assignment)
Counting
 Word frequency
 Letter frequency
 Jewels and stones
 I before E except after C
 Bioinformatics/base count
 Count occurrences of a substring
 Count how many vowels and consonants occur in a string
Remove/replace
 XXXX redacted
 Conjugate a Latin verb
 Remove vowels from a string
 String interpolation (included)
 Strip block comments
 Strip comments from a string
 Strip a set of characters from a string
 Strip whitespace from a string -- top and tail
 Strip control codes and extended characters from a string
Anagrams/Derangements/shuffling
 Word wheel
 ABC problem
 Sattolo cycle
 Knuth shuffle
 Ordered words
 Superpermutation minimisation
 Textonyms (using a phone text pad)
 Anagrams
 Anagrams/Deranged anagrams
 Permutations/Derangements
Find/Search/Determine
 ABC words
 Odd words
 Word ladder
 Semordnilap
 Word search
 Wordiff  (game)
 String matching
 Tea cup rim text
 Alternade words
 Changeable words
 State name puzzle
 String comparison
 Unique characters
 Unique characters in each string
 Extract file extension
 Levenshtein distance
 Palindrome detection
 Common list elements
 Longest common suffix
 Longest common prefix
 Compare a list of strings
 Longest common substring
 Find common directory path
 Words from neighbour ones
 Change e letters to i in words
 Non-continuous subsequences
 Longest common subsequence
 Longest palindromic substrings
 Longest increasing subsequence
 Words containing ""the"" substring
 Sum of the digits of n is substring of n
 Determine if a string is numeric
 Determine if a string is collapsible
 Determine if a string is squeezable
 Determine if a string has all unique characters
 Determine if a string has all the same characters
 Longest substrings without repeating characters
 Find words which contains all the vowels
 Find words which contains most consonants
 Find words which contains more than 3 vowels
 Find words which first and last three letters are equals
 Find words which odd letters are consonants and even letters are vowels or vice_versa
Formatting
 Substring
 Rep-string
 Word wrap
 String case
 Align columns
 Literals/String
 Repeat a string
 Brace expansion
 Brace expansion using ranges
 Reverse a string
 Phrase reversals
 Comma quibbling
 Special characters
 String concatenation
 Substring/Top and tail
 Commatizing numbers
 Reverse words in a string
 Suffixation of decimal numbers
 Long literals, with continuations
 Numerical and alphabetical suffixes
 Abbreviations, easy
 Abbreviations, simple
 Abbreviations, automatic
Song lyrics/poems/Mad Libs/phrases
 Mad Libs
 Magic 8-ball
 99 Bottles of Beer
 The Name Game (a song)
 The Old lady swallowed a fly
 The Twelve Days of Christmas
Tokenize
 Text between
 Tokenize a string
 Word break problem
 Tokenize a string with escaping
 Split a character string based on change of character
Sequences
 Show ASCII table
 De Bruijn sequences
 Self-referential sequences
 Generate lower case ASCII alphabet



",Python,"import collections, sys
 
def filecharcount(openfile):
    return sorted(collections.Counter(c for l in openfile for c in l).items())
 
f = open(sys.argv[1])
print(filecharcount(f))",181,7,"import unittest
from unittest.mock import mock_open, patch
from collections import Counter
from letter_frequency import filecharcount

class TestFileCharCount(unittest.TestCase):
    def test_empty_file(self):
        mock_file_data = """"
        with patch('builtins.open', mock_open(read_data=mock_file_data)):
            with open('dummy_file.txt') as f:
                result = filecharcount(f)
        expected = []
        self.assertEqual(result, expected)

    def test_file_with_letters_only(self):
        mock_file_data = ""abcABC""
        with patch('builtins.open', mock_open(read_data=mock_file_data)):
            with open('dummy_file.txt') as f:
                result = filecharcount(f)
        expected = sorted(Counter(mock_file_data).items())
        self.assertEqual(result, expected)

    def test_file_with_mixed_characters(self):
        mock_file_data = ""abc123!@#ABC""
        with patch('builtins.open', mock_open(read_data=mock_file_data)):
            with open('dummy_file.txt') as f:
                result = filecharcount(f)
        expected = sorted(Counter(mock_file_data).items())
        self.assertEqual(result, expected)

    def test_file_with_newlines(self):
        mock_file_data = ""a\nb\nc\nA\nB\nC\n""
        with patch('builtins.open', mock_open(read_data=mock_file_data)):
            with open('dummy_file.txt') as f:
                result = filecharcount(f)
        expected = sorted(Counter(mock_file_data).items())
        self.assertEqual(result, expected)

    def test_file_with_repeated_characters(self):
        mock_file_data = ""aaabbbccc""
        with patch('builtins.open', mock_open(read_data=mock_file_data)):
            with open('dummy_file.txt') as f:
                result = filecharcount(f)
        expected = sorted(Counter(mock_file_data).items())
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/letter_frequency/test_gpt_4o_2024_08_06_letter_frequency.py,CompileStatus.OK,0.0,14.89,9.86,0.12,1.67,100.0,0.4827327728271484,12.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_letter_frequency', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/letter_frequency/test_gpt_4o_2024_08_06_letter_frequency.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_letter_frequency', 'obj': 'TestFileCharCount', 'line': 6, 'column': 0, 'endLine': 6, 'endColumn': 23, 'path': 'data/generated/docs_python/letter_frequency/test_gpt_4o_2024_08_06_letter_frequency.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_letter_frequency', 'obj': 'TestFileCharCount.test_empty_file', 'line': 7, 'column': 4, 'endLine': 7, 'endColumn': 23, 'path': 'data/generated/docs_python/letter_frequency/test_gpt_4o_2024_08_06_letter_frequency.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_letter_frequency', 'obj': 'TestFileCharCount.test_empty_file', 'line': 10, 'column': 17, 'endLine': 10, 'endColumn': 39, 'path': 'data/generated/docs_python/letter_frequency/test_gpt_4o_2024_08_06_letter_frequency.py', 'symbol': 'unspecified-encoding', 'message': 'Using open without explicitly specifying an encoding', 'message-id': 'W1514'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_letter_frequency', 'obj': 'TestFileCharCount.test_file_with_letters_only', 'line': 15, 'column': 4, 'endLine': 15, 'endColumn': 35, 'path': 'data/generated/docs_python/letter_frequency/test_gpt_4o_2024_08_06_letter_frequency.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_letter_frequency', 'obj': 'TestFileCharCount.test_file_with_letters_only', 'line': 18, 'column': 17, 'endLine': 18, 'endColumn': 39, 'path': 'data/generated/docs_python/letter_frequency/test_gpt_4o_2024_08_06_letter_frequency.py', 'symbol': 'unspecified-encoding', 'message': 'Using open without explicitly specifying an encoding', 'message-id': 'W1514'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_letter_frequency', 'obj': 'TestFileCharCount.test_file_with_mixed_characters', 'line': 23, 'column': 4, 'endLine': 23, 'endColumn': 39, 'path': 'data/generated/docs_python/letter_frequency/test_gpt_4o_2024_08_06_letter_frequency.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_letter_frequency', 'obj': 'TestFileCharCount.test_file_with_mixed_characters', 'line': 26, 'column': 17, 'endLine': 26, 'endColumn': 39, 'path': 'data/generated/docs_python/letter_frequency/test_gpt_4o_2024_08_06_letter_frequency.py', 'symbol': 'unspecified-encoding', 'message': 'Using open without explicitly specifying an encoding', 'message-id': 'W1514'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_letter_frequency', 'obj': 'TestFileCharCount.test_file_with_newlines', 'line': 31, 'column': 4, 'endLine': 31, 'endColumn': 31, 'path': 'data/generated/docs_python/letter_frequency/test_gpt_4o_2024_08_06_letter_frequency.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_letter_frequency', 'obj': 'TestFileCharCount.test_file_with_newlines', 'line': 34, 'column': 17, 'endLine': 34, 'endColumn': 39, 'path': 'data/generated/docs_python/letter_frequency/test_gpt_4o_2024_08_06_letter_frequency.py', 'symbol': 'unspecified-encoding', 'message': 'Using open without explicitly specifying an encoding', 'message-id': 'W1514'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_letter_frequency', 'obj': 'TestFileCharCount.test_file_with_repeated_characters', 'line': 39, 'column': 4, 'endLine': 39, 'endColumn': 42, 'path': 'data/generated/docs_python/letter_frequency/test_gpt_4o_2024_08_06_letter_frequency.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_letter_frequency', 'obj': 'TestFileCharCount.test_file_with_repeated_characters', 'line': 42, 'column': 17, 'endLine': 42, 'endColumn': 39, 'path': 'data/generated/docs_python/letter_frequency/test_gpt_4o_2024_08_06_letter_frequency.py', 'symbol': 'unspecified-encoding', 'message': 'Using open without explicitly specifying an encoding', 'message-id': 'W1514'}]",False
Levenshtein distance,"

 This page uses content from Wikipedia. The original article was at Levenshtein distance. The list of authors can be seen in the page history. As with Rosetta Code, the text of Wikipedia is available under the GNU FDL. (See links for details on variance)



In information theory and computer science, the Levenshtein distance is a metric for measuring the amount of difference between two sequences (i.e. an edit distance). The Levenshtein distance between two strings is defined as the minimum number of edits needed to transform one string into the other, with the allowable edit operations being insertion, deletion, or substitution of a single character.



Example

The Levenshtein distance between ""kitten"" and ""sitting"" is 3, since the following three edits change one into the other, and there isn't a way to do it with fewer than three edits:

   kitten   sitten   (substitution of 'k' with 's')
   sitten   sittin   (substitution of 'e' with 'i')
   sittin   sitting   (insert 'g' at the end).

The Levenshtein distance between   ""rosettacode"",   ""raisethysword""   is   8.

The distance between two strings is same as that when both strings are reversed.



Task

Implements a Levenshtein distance function, or uses a library function, to show the Levenshtein distance between   ""kitten""   and   ""sitting"".



Related task

   Longest common subsequence



Other tasks related to string operations:

Metrics
 Array length
 String length
 Copy a string
 Empty string  (assignment)
Counting
 Word frequency
 Letter frequency
 Jewels and stones
 I before E except after C
 Bioinformatics/base count
 Count occurrences of a substring
 Count how many vowels and consonants occur in a string
Remove/replace
 XXXX redacted
 Conjugate a Latin verb
 Remove vowels from a string
 String interpolation (included)
 Strip block comments
 Strip comments from a string
 Strip a set of characters from a string
 Strip whitespace from a string -- top and tail
 Strip control codes and extended characters from a string
Anagrams/Derangements/shuffling
 Word wheel
 ABC problem
 Sattolo cycle
 Knuth shuffle
 Ordered words
 Superpermutation minimisation
 Textonyms (using a phone text pad)
 Anagrams
 Anagrams/Deranged anagrams
 Permutations/Derangements
Find/Search/Determine
 ABC words
 Odd words
 Word ladder
 Semordnilap
 Word search
 Wordiff  (game)
 String matching
 Tea cup rim text
 Alternade words
 Changeable words
 State name puzzle
 String comparison
 Unique characters
 Unique characters in each string
 Extract file extension
 Levenshtein distance
 Palindrome detection
 Common list elements
 Longest common suffix
 Longest common prefix
 Compare a list of strings
 Longest common substring
 Find common directory path
 Words from neighbour ones
 Change e letters to i in words
 Non-continuous subsequences
 Longest common subsequence
 Longest palindromic substrings
 Longest increasing subsequence
 Words containing ""the"" substring
 Sum of the digits of n is substring of n
 Determine if a string is numeric
 Determine if a string is collapsible
 Determine if a string is squeezable
 Determine if a string has all unique characters
 Determine if a string has all the same characters
 Longest substrings without repeating characters
 Find words which contains all the vowels
 Find words which contains most consonants
 Find words which contains more than 3 vowels
 Find words which first and last three letters are equals
 Find words which odd letters are consonants and even letters are vowels or vice_versa
Formatting
 Substring
 Rep-string
 Word wrap
 String case
 Align columns
 Literals/String
 Repeat a string
 Brace expansion
 Brace expansion using ranges
 Reverse a string
 Phrase reversals
 Comma quibbling
 Special characters
 String concatenation
 Substring/Top and tail
 Commatizing numbers
 Reverse words in a string
 Suffixation of decimal numbers
 Long literals, with continuations
 Numerical and alphabetical suffixes
 Abbreviations, easy
 Abbreviations, simple
 Abbreviations, automatic
Song lyrics/poems/Mad Libs/phrases
 Mad Libs
 Magic 8-ball
 99 Bottles of Beer
 The Name Game (a song)
 The Old lady swallowed a fly
 The Twelve Days of Christmas
Tokenize
 Text between
 Tokenize a string
 Word break problem
 Tokenize a string with escaping
 Split a character string based on change of character
Sequences
 Show ASCII table
 De Bruijn sequences
 Self-referential sequences
 Generate lower case ASCII alphabet



",Python,"def levenshteinDistance(str1, str2):
    m = len(str1)
    n = len(str2)
    d = [[i] for i in range(1, m + 1)]   # d matrix rows
    d.insert(0, list(range(0, n + 1)))   # d matrix columns
    for j in range(1, n + 1):
        for i in range(1, m + 1):
            if str1[i - 1] == str2[j - 1]:   # Python (string) is 0-based
                substitutionCost = 0
            else:
                substitutionCost = 1
            d[i].insert(j, min(d[i - 1][j] + 1,
                               d[i][j - 1] + 1,
                               d[i - 1][j - 1] + substitutionCost))
    return d[-1][-1]
 
print(levenshteinDistance(""kitten"",""sitting""))
print(levenshteinDistance(""rosettacode"",""raisethysword""))",711,18,"import unittest
from levenshtein_distance import levenshteinDistance

class TestLevenshteinDistance(unittest.TestCase):

    def test_kitten_sitting(self):
        self.assertEqual(levenshteinDistance(""kitten"", ""sitting""), 3)

    def test_rosettacode_raisethysword(self):
        self.assertEqual(levenshteinDistance(""rosettacode"", ""raisethysword""), 8)

    def test_empty_strings(self):
        self.assertEqual(levenshteinDistance("""", """"), 0)

    def test_one_empty_string(self):
        self.assertEqual(levenshteinDistance(""abc"", """"), 3)
        self.assertEqual(levenshteinDistance("""", ""abc""), 3)

    def test_same_strings(self):
        self.assertEqual(levenshteinDistance(""same"", ""same""), 0)

    def test_single_character_difference(self):
        self.assertEqual(levenshteinDistance(""a"", ""b""), 1)

    def test_reversed_strings(self):
        self.assertEqual(levenshteinDistance(""abc"", ""cba""), 2)

    def test_case_sensitivity(self):
        self.assertEqual(levenshteinDistance(""abc"", ""ABC""), 3)

    def test_long_strings(self):
        str1 = ""a"" * 1000
        str2 = ""a"" * 999 + ""b""
        self.assertEqual(levenshteinDistance(str1, str2), 1)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/levenshtein_distance/test_gpt_4o_2024_08_06_levenshtein_distance.py,CompileStatus.OK,0.0,97.5,96.0,0.38,2.0,100.0,0.8676857948303223,11.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_levenshtein_distance', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/levenshtein_distance/test_gpt_4o_2024_08_06_levenshtein_distance.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_levenshtein_distance', 'obj': 'TestLevenshteinDistance', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 29, 'path': 'data/generated/docs_python/levenshtein_distance/test_gpt_4o_2024_08_06_levenshtein_distance.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_levenshtein_distance', 'obj': 'TestLevenshteinDistance.test_kitten_sitting', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 27, 'path': 'data/generated/docs_python/levenshtein_distance/test_gpt_4o_2024_08_06_levenshtein_distance.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_levenshtein_distance', 'obj': 'TestLevenshteinDistance.test_rosettacode_raisethysword', 'line': 9, 'column': 4, 'endLine': 9, 'endColumn': 38, 'path': 'data/generated/docs_python/levenshtein_distance/test_gpt_4o_2024_08_06_levenshtein_distance.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_levenshtein_distance', 'obj': 'TestLevenshteinDistance.test_empty_strings', 'line': 12, 'column': 4, 'endLine': 12, 'endColumn': 26, 'path': 'data/generated/docs_python/levenshtein_distance/test_gpt_4o_2024_08_06_levenshtein_distance.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_levenshtein_distance', 'obj': 'TestLevenshteinDistance.test_one_empty_string', 'line': 15, 'column': 4, 'endLine': 15, 'endColumn': 29, 'path': 'data/generated/docs_python/levenshtein_distance/test_gpt_4o_2024_08_06_levenshtein_distance.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_levenshtein_distance', 'obj': 'TestLevenshteinDistance.test_same_strings', 'line': 19, 'column': 4, 'endLine': 19, 'endColumn': 25, 'path': 'data/generated/docs_python/levenshtein_distance/test_gpt_4o_2024_08_06_levenshtein_distance.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_levenshtein_distance', 'obj': 'TestLevenshteinDistance.test_single_character_difference', 'line': 22, 'column': 4, 'endLine': 22, 'endColumn': 40, 'path': 'data/generated/docs_python/levenshtein_distance/test_gpt_4o_2024_08_06_levenshtein_distance.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_levenshtein_distance', 'obj': 'TestLevenshteinDistance.test_reversed_strings', 'line': 25, 'column': 4, 'endLine': 25, 'endColumn': 29, 'path': 'data/generated/docs_python/levenshtein_distance/test_gpt_4o_2024_08_06_levenshtein_distance.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_levenshtein_distance', 'obj': 'TestLevenshteinDistance.test_case_sensitivity', 'line': 28, 'column': 4, 'endLine': 28, 'endColumn': 29, 'path': 'data/generated/docs_python/levenshtein_distance/test_gpt_4o_2024_08_06_levenshtein_distance.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_levenshtein_distance', 'obj': 'TestLevenshteinDistance.test_long_strings', 'line': 31, 'column': 4, 'endLine': 31, 'endColumn': 25, 'path': 'data/generated/docs_python/levenshtein_distance/test_gpt_4o_2024_08_06_levenshtein_distance.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Levenshtein distance/Alignment,"The Levenshtein distance algorithm returns the number of atomic operations (insertion, deletion or edition) that must be performed on a string in order to obtain an other one, but it does not say anything about the actual operations used or their order.

An alignment is a notation used to describe the operations used to turn a string into an other. At some point in the strings, the minus character ('-') is placed in order to signify that a character must be added at this very place. For instance, an alignment between the words 'place' and 'palace' is:

P-LACE
PALACE



Task

Write a function that shows the alignment of two strings for the corresponding levenshtein distance.

As an example, use the words ""rosettacode"" and ""raisethysword"".

You can either implement an algorithm, or use a dedicated library (thus showing us how it is named in your language).



",Python,"from difflib import ndiff
 
def levenshtein(str1, str2):
    result = """"
    pos, removed = 0, 0
    for x in ndiff(str1, str2):
        if pos<len(str1) and str1[pos] == x[2]:
          pos += 1
          result += x[2]
          if x[0] == ""-"":
              removed += 1
          continue
        else:
          if removed > 0:
            removed -=1
          else:
            result += ""-""
    print(result)
 
levenshtein(""place"",""palace"")
levenshtein(""rosettacode"",""raisethysword"")",491,21,"import unittest
from io import StringIO
import sys
from levenshtein_distance_alignment import levenshtein

class TestLevenshteinAlignment(unittest.TestCase):

    def setUp(self):
        # Redirect stdout to capture print statements
        self.held, sys.stdout = sys.stdout, StringIO()

    def tearDown(self):
        # Restore stdout
        sys.stdout = self.held

    def test_alignment_place_palace(self):
        levenshtein(""place"", ""palace"")
        output = sys.stdout.getvalue().strip()
        expected_output = ""P-LACE""
        self.assertEqual(output, expected_output)

    def test_alignment_rosettacode_raisethysword(self):
        levenshtein(""rosettacode"", ""raisethysword"")
        output = sys.stdout.getvalue().strip()
        expected_output = ""R--OSETTACODE""
        self.assertEqual(output, expected_output)

    def test_alignment_empty_strings(self):
        levenshtein("""", """")
        output = sys.stdout.getvalue().strip()
        expected_output = """"
        self.assertEqual(output, expected_output)

    def test_alignment_one_empty_string(self):
        levenshtein(""abc"", """")
        output = sys.stdout.getvalue().strip()
        expected_output = ""---""
        self.assertEqual(output, expected_output)

        sys.stdout = StringIO()  # Reset stdout capture
        levenshtein("""", ""abc"")
        output = sys.stdout.getvalue().strip()
        expected_output = ""abc""
        self.assertEqual(output, expected_output)

    def test_alignment_identical_strings(self):
        levenshtein(""identical"", ""identical"")
        output = sys.stdout.getvalue().strip()
        expected_output = ""identical""
        self.assertEqual(output, expected_output)

    def test_alignment_completely_different_strings(self):
        levenshtein(""abc"", ""xyz"")
        output = sys.stdout.getvalue().strip()
        expected_output = ""---""
        self.assertEqual(output, expected_output)

    def test_alignment_partial_overlap(self):
        levenshtein(""abcde"", ""abxyz"")
        output = sys.stdout.getvalue().strip()
        expected_output = ""ab---""
        self.assertEqual(output, expected_output)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/levenshtein_distance_alignment/test_gpt_4o_2024_08_06_levenshtein_distance_alignment.py,CompileStatus.OK,0.0,91.18,91.03,0.16,1.33,28.57,0.493131160736084,9.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_levenshtein_distance_alignment', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/levenshtein_distance_alignment/test_gpt_4o_2024_08_06_levenshtein_distance_alignment.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_levenshtein_distance_alignment', 'obj': 'TestLevenshteinAlignment', 'line': 6, 'column': 0, 'endLine': 6, 'endColumn': 30, 'path': 'data/generated/docs_python/levenshtein_distance_alignment/test_gpt_4o_2024_08_06_levenshtein_distance_alignment.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_levenshtein_distance_alignment', 'obj': 'TestLevenshteinAlignment.test_alignment_place_palace', 'line': 16, 'column': 4, 'endLine': 16, 'endColumn': 35, 'path': 'data/generated/docs_python/levenshtein_distance_alignment/test_gpt_4o_2024_08_06_levenshtein_distance_alignment.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_levenshtein_distance_alignment', 'obj': 'TestLevenshteinAlignment.test_alignment_rosettacode_raisethysword', 'line': 22, 'column': 4, 'endLine': 22, 'endColumn': 48, 'path': 'data/generated/docs_python/levenshtein_distance_alignment/test_gpt_4o_2024_08_06_levenshtein_distance_alignment.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_levenshtein_distance_alignment', 'obj': 'TestLevenshteinAlignment.test_alignment_empty_strings', 'line': 28, 'column': 4, 'endLine': 28, 'endColumn': 36, 'path': 'data/generated/docs_python/levenshtein_distance_alignment/test_gpt_4o_2024_08_06_levenshtein_distance_alignment.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_levenshtein_distance_alignment', 'obj': 'TestLevenshteinAlignment.test_alignment_one_empty_string', 'line': 34, 'column': 4, 'endLine': 34, 'endColumn': 39, 'path': 'data/generated/docs_python/levenshtein_distance_alignment/test_gpt_4o_2024_08_06_levenshtein_distance_alignment.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_levenshtein_distance_alignment', 'obj': 'TestLevenshteinAlignment.test_alignment_identical_strings', 'line': 46, 'column': 4, 'endLine': 46, 'endColumn': 40, 'path': 'data/generated/docs_python/levenshtein_distance_alignment/test_gpt_4o_2024_08_06_levenshtein_distance_alignment.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_levenshtein_distance_alignment', 'obj': 'TestLevenshteinAlignment.test_alignment_completely_different_strings', 'line': 52, 'column': 4, 'endLine': 52, 'endColumn': 51, 'path': 'data/generated/docs_python/levenshtein_distance_alignment/test_gpt_4o_2024_08_06_levenshtein_distance_alignment.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_levenshtein_distance_alignment', 'obj': 'TestLevenshteinAlignment.test_alignment_partial_overlap', 'line': 58, 'column': 4, 'endLine': 58, 'endColumn': 38, 'path': 'data/generated/docs_python/levenshtein_distance_alignment/test_gpt_4o_2024_08_06_levenshtein_distance_alignment.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Linear congruential generator,"The linear congruential generator is a very simple example of a random number generator.

All linear congruential generators use this formula:






r

n
+
1


=
a
×

r

n


+
c


(
mod

m
)



{\displaystyle r_{n+1}=a\times r_{n}+c{\pmod {m}}}




Where:






r

0




{\displaystyle r_{0}}

 is a seed.





r

1




{\displaystyle r_{1}}

,




r

2




{\displaystyle r_{2}}

,




r

3




{\displaystyle r_{3}}

, ..., are the random numbers.




a


{\displaystyle a}

,



c


{\displaystyle c}

,



m


{\displaystyle m}

 are constants.


If one chooses the values of



a


{\displaystyle a}

,



c


{\displaystyle c}

 and



m


{\displaystyle m}

 with care, then the generator produces a uniform distribution of integers from



0


{\displaystyle 0}

 to



m
−
1


{\displaystyle m-1}

.

LCG numbers have poor quality.




r

n




{\displaystyle r_{n}}

 and




r

n
+
1




{\displaystyle r_{n+1}}

 are not independent, as true random numbers would be. Anyone who knows




r

n




{\displaystyle r_{n}}

 can predict




r

n
+
1




{\displaystyle r_{n+1}}

, therefore LCG is not cryptographically secure. The LCG is still good enough for simple tasks like Miller-Rabin primality test, or FreeCell deals. Among the benefits of the LCG, one can easily reproduce a sequence of numbers, from the same




r

0




{\displaystyle r_{0}}

. One can also reproduce such sequence with a different programming language, because the formula is so simple.

The task is to replicate two historic random number generators. One is the rand() function from BSD libc, and the other is the rand() function from the Microsoft C Runtime (MSCVRT.DLL). Each replica must yield the same sequence of integers as the original generator, when starting from the same seed.

In these formulas, the seed becomes



s
t
a
t

e

0




{\displaystyle state_{0}}

. The random sequence is



r
a
n

d

1




{\displaystyle rand_{1}}

,



r
a
n

d

2




{\displaystyle rand_{2}}

 and so on.



BSD formula





s
t
a
t

e

n
+
1


=
1103515245
×
s
t
a
t

e

n


+
12345


(
mod


2

31


)



{\displaystyle state_{n+1}=1103515245\times state_{n}+12345{\pmod {2^{31}}}}






r
a
n

d

n


=
s
t
a
t

e

n




{\displaystyle rand_{n}=state_{n}}






r
a
n

d

n




{\displaystyle rand_{n}}

 is in range 0 to 2147483647.


Microsoft formula





s
t
a
t

e

n
+
1


=
214013
×
s
t
a
t

e

n


+
2531011


(
mod


2

31


)



{\displaystyle state_{n+1}=214013\times state_{n}+2531011{\pmod {2^{31}}}}






r
a
n

d

n


=
s
t
a
t

e

n


÷

2

16




{\displaystyle rand_{n}=state_{n}\div 2^{16}}






r
a
n

d

n




{\displaystyle rand_{n}}

 is in range 0 to 32767.


The BSD formula was so awful that FreeBSD switched to a different formula.

More info is at Random number generator (included)#C.



",Python,"def bsd_rand(seed):
   def rand():
      rand.seed = (1103515245*rand.seed + 12345) & 0x7fffffff
      return rand.seed
   rand.seed = seed
   return rand
 
def msvcrt_rand(seed):
   def rand():
      rand.seed = (214013*rand.seed + 2531011) & 0x7fffffff
      return rand.seed >> 16
   rand.seed = seed
   return rand",318,13,"import unittest
from linear_congruential_generator import bsd_rand, msvcrt_rand

class TestLinearCongruentialGenerator(unittest.TestCase):

    def test_bsd_rand(self):
        # Test BSD rand with a known seed
        seed = 12345
        rand = bsd_rand(seed)

        # Expected sequence generated by BSD rand with seed 12345
        expected_sequence = [
            1406932606, 654583775, 1449466924, 229283573, 1109335178
        ]

        for expected_value in expected_sequence:
            self.assertEqual(rand(), expected_value)

    def test_msvcrt_rand(self):
        # Test MSVCRT rand with a known seed
        seed = 12345
        rand = msvcrt_rand(seed)

        # Expected sequence generated by MSVCRT rand with seed 12345
        expected_sequence = [
            0, 26977, 31250, 21504, 23954
        ]

        for expected_value in expected_sequence:
            self.assertEqual(rand(), expected_value)

    def test_bsd_rand_reproducibility(self):
        # Test that BSD rand produces the same sequence with the same seed
        seed = 67890
        rand1 = bsd_rand(seed)
        rand2 = bsd_rand(seed)

        for _ in range(5):
            self.assertEqual(rand1(), rand2())

    def test_msvcrt_rand_reproducibility(self):
        # Test that MSVCRT rand produces the same sequence with the same seed
        seed = 67890
        rand1 = msvcrt_rand(seed)
        rand2 = msvcrt_rand(seed)

        for _ in range(5):
            self.assertEqual(rand1(), rand2())

    def test_bsd_rand_range(self):
        # Test that BSD rand produces numbers in the correct range
        seed = 12345
        rand = bsd_rand(seed)

        for _ in range(100):
            value = rand()
            self.assertGreaterEqual(value, 0)
            self.assertLessEqual(value, 2147483647)

    def test_msvcrt_rand_range(self):
        # Test that MSVCRT rand produces numbers in the correct range
        seed = 12345
        rand = msvcrt_rand(seed)

        for _ in range(100):
            value = rand()
            self.assertGreaterEqual(value, 0)
            self.assertLessEqual(value, 32767)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/linear_congruential_generator/test_gpt_4o_2024_08_06_linear_congruential_generator.py,CompileStatus.OK,0.0,98.18,95.65,0.18,2.0,83.33,0.4793901443481445,16.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_linear_congruential_generator', 'obj': '', 'line': 10, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/linear_congruential_generator/test_gpt_4o_2024_08_06_linear_congruential_generator.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_linear_congruential_generator', 'obj': '', 'line': 15, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/linear_congruential_generator/test_gpt_4o_2024_08_06_linear_congruential_generator.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_linear_congruential_generator', 'obj': '', 'line': 23, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/linear_congruential_generator/test_gpt_4o_2024_08_06_linear_congruential_generator.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_linear_congruential_generator', 'obj': '', 'line': 28, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/linear_congruential_generator/test_gpt_4o_2024_08_06_linear_congruential_generator.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_linear_congruential_generator', 'obj': '', 'line': 37, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/linear_congruential_generator/test_gpt_4o_2024_08_06_linear_congruential_generator.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_linear_congruential_generator', 'obj': '', 'line': 46, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/linear_congruential_generator/test_gpt_4o_2024_08_06_linear_congruential_generator.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_linear_congruential_generator', 'obj': '', 'line': 54, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/linear_congruential_generator/test_gpt_4o_2024_08_06_linear_congruential_generator.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_linear_congruential_generator', 'obj': '', 'line': 64, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/linear_congruential_generator/test_gpt_4o_2024_08_06_linear_congruential_generator.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_linear_congruential_generator', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/linear_congruential_generator/test_gpt_4o_2024_08_06_linear_congruential_generator.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_linear_congruential_generator', 'obj': 'TestLinearCongruentialGenerator', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 37, 'path': 'data/generated/docs_python/linear_congruential_generator/test_gpt_4o_2024_08_06_linear_congruential_generator.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_linear_congruential_generator', 'obj': 'TestLinearCongruentialGenerator.test_bsd_rand', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 21, 'path': 'data/generated/docs_python/linear_congruential_generator/test_gpt_4o_2024_08_06_linear_congruential_generator.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_linear_congruential_generator', 'obj': 'TestLinearCongruentialGenerator.test_msvcrt_rand', 'line': 19, 'column': 4, 'endLine': 19, 'endColumn': 24, 'path': 'data/generated/docs_python/linear_congruential_generator/test_gpt_4o_2024_08_06_linear_congruential_generator.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_linear_congruential_generator', 'obj': 'TestLinearCongruentialGenerator.test_bsd_rand_reproducibility', 'line': 32, 'column': 4, 'endLine': 32, 'endColumn': 37, 'path': 'data/generated/docs_python/linear_congruential_generator/test_gpt_4o_2024_08_06_linear_congruential_generator.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_linear_congruential_generator', 'obj': 'TestLinearCongruentialGenerator.test_msvcrt_rand_reproducibility', 'line': 41, 'column': 4, 'endLine': 41, 'endColumn': 40, 'path': 'data/generated/docs_python/linear_congruential_generator/test_gpt_4o_2024_08_06_linear_congruential_generator.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_linear_congruential_generator', 'obj': 'TestLinearCongruentialGenerator.test_bsd_rand_range', 'line': 50, 'column': 4, 'endLine': 50, 'endColumn': 27, 'path': 'data/generated/docs_python/linear_congruential_generator/test_gpt_4o_2024_08_06_linear_congruential_generator.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_linear_congruential_generator', 'obj': 'TestLinearCongruentialGenerator.test_msvcrt_rand_range', 'line': 60, 'column': 4, 'endLine': 60, 'endColumn': 30, 'path': 'data/generated/docs_python/linear_congruential_generator/test_gpt_4o_2024_08_06_linear_congruential_generator.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
List rooted trees,"You came back from grocery shopping.   After putting away all the goods, you are left with a pile of plastic bags, which you want to save for later use, so you take one bag and stuff all the others into it, and throw it under the sink.   In doing so, you realize that there are various ways of nesting the bags, with all bags viewed as identical.

If we use a matching pair of parentheses to represent a bag, the ways are:

For 1 bag, there's one way:

 ()	<- a bag

for 2 bags, there's one way:

 (())	<- one bag in another

for 3 bags, there are two:

 ((())) <- 3 bags nested Russian doll style
 (()()) <- 2 bags side by side, inside the third

for 4 bags, four:

 (()()())
 ((())())
 ((()()))
 (((())))

Note that because all bags are identical, the two 4-bag strings ((())()) and (()(())) represent the same configuration.

It's easy to see that each configuration for n bags represents a n-node rooted tree, where a bag is a tree node, and a bag with its content forms a subtree. The outermost bag is the tree root. Number of configurations for given n is given by OEIS A81.



Task

Write a program that, when given n, enumerates all ways of nesting n bags.   You can use the parentheses notation above, or any tree representation that's unambiguous and preferably intuitive.

This task asks for enumeration of trees only; for counting solutions without enumeration, that OEIS page lists various formulas, but that's not encouraged by this task, especially if implementing it would significantly increase code size.

As an example output, run 5 bags.   There should be 9 ways.



",Python,"def bags(n,cache={}):
	if not n: return [(0, """")]
 
	upto = sum([bags(x) for x in range(n-1, 0, -1)], [])
	return [(c+1, '('+s+')') for c,s in bagchain((0, """"), n-1, upto)]
 
def bagchain(x, n, bb, start=0):
	if not n: return [x]
 
	out = []
	for i in range(start, len(bb)):
		c,s = bb[i]
		if c <= n: out += bagchain((x[0] + c, x[1] + s), n-c, bb, i)
	return out
 
# Maybe this lessens eye strain. Maybe not.
def replace_brackets(s):
	depth,out = 0,[]
	for c in s:
		if c == '(':
			out.append(""([{""[depth%3])
			depth += 1
		else:
			depth -= 1
			out.append("")]}""[depth%3])
	return """".join(out)
 
for x in bags(5): print(replace_brackets(x[1]))",647,28,"import unittest
from list_rooted_trees import bags, replace_brackets

class TestBagsFunction(unittest.TestCase):
    def test_bags_0(self):
        # Test for 0 bags
        result = bags(0)
        expected = [(0, """")]
        self.assertEqual(result, expected)

    def test_bags_1(self):
        # Test for 1 bag
        result = bags(1)
        expected = [(1, ""()"")]
        self.assertEqual(result, expected)

    def test_bags_2(self):
        # Test for 2 bags
        result = bags(2)
        expected = [(2, ""(())"")]
        self.assertEqual(result, expected)

    def test_bags_3(self):
        # Test for 3 bags
        result = bags(3)
        expected = [(3, ""((()))""), (3, ""(()())"")]
        self.assertEqual(sorted(result), sorted(expected))

    def test_bags_4(self):
        # Test for 4 bags
        result = bags(4)
        expected = [(4, ""(()()())""), (4, ""((())())""), (4, ""((()()))""), (4, ""(((())))"")]
        self.assertEqual(sorted(result), sorted(expected))

    def test_bags_5(self):
        # Test for 5 bags
        result = bags(5)
        expected_count = 9  # As per the problem statement
        self.assertEqual(len(result), expected_count)

class TestReplaceBracketsFunction(unittest.TestCase):
    def test_replace_brackets(self):
        # Test the replace_brackets function
        input_str = ""((()))""
        expected_output = ""[[[]]]""
        self.assertEqual(replace_brackets(input_str), expected_output)

        input_str = ""(()())""
        expected_output = ""[[]()]""
        self.assertEqual(replace_brackets(input_str), expected_output)

        input_str = ""(()()())""
        expected_output = ""[[]()()]""
        self.assertEqual(replace_brackets(input_str), expected_output)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/list_rooted_trees/test_gpt_4o_2024_08_06_list_rooted_trees.py,CompileStatus.OK,0.0,88.52,89.61,0.23,0.82,85.71,0.470120906829834,10.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_list_rooted_trees', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/list_rooted_trees/test_gpt_4o_2024_08_06_list_rooted_trees.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_list_rooted_trees', 'obj': 'TestBagsFunction', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 22, 'path': 'data/generated/docs_python/list_rooted_trees/test_gpt_4o_2024_08_06_list_rooted_trees.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_list_rooted_trees', 'obj': 'TestBagsFunction.test_bags_0', 'line': 5, 'column': 4, 'endLine': 5, 'endColumn': 19, 'path': 'data/generated/docs_python/list_rooted_trees/test_gpt_4o_2024_08_06_list_rooted_trees.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_list_rooted_trees', 'obj': 'TestBagsFunction.test_bags_1', 'line': 11, 'column': 4, 'endLine': 11, 'endColumn': 19, 'path': 'data/generated/docs_python/list_rooted_trees/test_gpt_4o_2024_08_06_list_rooted_trees.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_list_rooted_trees', 'obj': 'TestBagsFunction.test_bags_2', 'line': 17, 'column': 4, 'endLine': 17, 'endColumn': 19, 'path': 'data/generated/docs_python/list_rooted_trees/test_gpt_4o_2024_08_06_list_rooted_trees.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_list_rooted_trees', 'obj': 'TestBagsFunction.test_bags_3', 'line': 23, 'column': 4, 'endLine': 23, 'endColumn': 19, 'path': 'data/generated/docs_python/list_rooted_trees/test_gpt_4o_2024_08_06_list_rooted_trees.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_list_rooted_trees', 'obj': 'TestBagsFunction.test_bags_4', 'line': 29, 'column': 4, 'endLine': 29, 'endColumn': 19, 'path': 'data/generated/docs_python/list_rooted_trees/test_gpt_4o_2024_08_06_list_rooted_trees.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_list_rooted_trees', 'obj': 'TestBagsFunction.test_bags_5', 'line': 35, 'column': 4, 'endLine': 35, 'endColumn': 19, 'path': 'data/generated/docs_python/list_rooted_trees/test_gpt_4o_2024_08_06_list_rooted_trees.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_list_rooted_trees', 'obj': 'TestReplaceBracketsFunction', 'line': 41, 'column': 0, 'endLine': 41, 'endColumn': 33, 'path': 'data/generated/docs_python/list_rooted_trees/test_gpt_4o_2024_08_06_list_rooted_trees.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_list_rooted_trees', 'obj': 'TestReplaceBracketsFunction.test_replace_brackets', 'line': 42, 'column': 4, 'endLine': 42, 'endColumn': 29, 'path': 'data/generated/docs_python/list_rooted_trees/test_gpt_4o_2024_08_06_list_rooted_trees.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Long primes,"

A   long prime   (as defined here)   is a prime number whose reciprocal   (in decimal)   has
a   period length   of one less than the prime number.


Long primes   are also known as:

   base ten cyclic numbers
   full reptend primes
   golden primes
   long period primes
   maximal period primes
   proper primes


Another definition:   primes   p   such that the decimal expansion of   1/p   has period   p-1,   which is the greatest period possible for any integer.



Example

7   is the first long prime,   the reciprocal of seven
is   1/7,   which
is equal to the repeating decimal fraction   0.142857142857···

The length of the   repeating   part of the decimal fraction
is six,   (the underlined part)   which is one less
than the (decimal) prime number   7.

Thus   7   is a long prime.



There are other (more) general definitions of a   long prime   which
include wording/verbiage for bases other than ten.



Task

   Show all long primes up to   500   (preferably on one line).
   Show the   number   of long primes up to         500
   Show the   number   of long primes up to      1,000
   Show the   number   of long primes up to      2,000
   Show the   number   of long primes up to      4,000
   Show the   number   of long primes up to      8,000
   Show the   number   of long primes up to   16,000
   Show the   number   of long primes up to   32,000
   Show the   number   of long primes up to   64,000   (optional)
   Show all output here.


Also see

   Wikipedia: full reptend prime
   MathWorld: full reptend prime
   OEIS: A001913

",Python,"def sieve(limit):
    primes = []
    c = [False] * (limit + 1) # composite = true
    # no need to process even numbers
    p = 3
    while True:
        p2 = p * p
        if p2 > limit: break
        for i in range(p2, limit, 2 * p): c[i] = True
        while True:
            p += 2
            if not c[p]: break
 
    for i in range(3, limit, 2):
        if not c[i]: primes.append(i)
    return primes
 
# finds the period of the reciprocal of n
def findPeriod(n):
    r = 1
    for i in range(1, n): r = (10 * r) % n
    rr = r
    period = 0
    while True:
        r = (10 * r) % n
        period += 1
        if r == rr: break
    return period
 
primes = sieve(64000)
longPrimes = []
for prime in primes:
    if findPeriod(prime) == prime - 1:
        longPrimes.append(prime)
numbers = [500, 1000, 2000, 4000, 8000, 16000, 32000, 64000]
count = 0
index = 0
totals = [0] * len(numbers)
for longPrime in longPrimes:
    if longPrime > numbers[index]:
        totals[index] = count
        index += 1
    count += 1
totals[-1] = count
print('The long primes up to 500 are:')
print(str(longPrimes[:totals[0]]).replace(',', ''))
print('\nThe number of long primes up to:')
for (i, total) in enumerate(totals):
    print('  %5d is %d' % (numbers[i], total))",1265,49,"import unittest
from long_primes import sieve, findPeriod

class TestLongPrimes(unittest.TestCase):

    def test_sieve(self):
        # Test the sieve function to ensure it returns correct prime numbers
        self.assertEqual(sieve(10), [3, 5, 7])
        self.assertEqual(sieve(20), [3, 5, 7, 11, 13, 17, 19])
        self.assertEqual(sieve(30), [3, 5, 7, 11, 13, 17, 19, 23, 29])

    def test_findPeriod(self):
        # Test the findPeriod function to ensure it calculates the correct period
        self.assertEqual(findPeriod(7), 6)  # 1/7 = 0.142857 (period 6)
        self.assertEqual(findPeriod(3), 1)  # 1/3 = 0.3 (period 1)
        self.assertEqual(findPeriod(11), 2) # 1/11 = 0.09 (period 2)

    def test_long_primes(self):
        # Test the overall functionality to ensure it identifies long primes correctly
        primes = sieve(64000)
        longPrimes = [prime for prime in primes if findPeriod(prime) == prime - 1]

        # Check the number of long primes up to various limits
        self.assertEqual(len([p for p in longPrimes if p <= 500]), 6)
        self.assertEqual(len([p for p in longPrimes if p <= 1000]), 16)
        self.assertEqual(len([p for p in longPrimes if p <= 2000]), 37)
        self.assertEqual(len([p for p in longPrimes if p <= 4000]), 60)
        self.assertEqual(len([p for p in longPrimes if p <= 8000]), 109)
        self.assertEqual(len([p for p in longPrimes if p <= 16000]), 186)
        self.assertEqual(len([p for p in longPrimes if p <= 32000]), 324)
        self.assertEqual(len([p for p in longPrimes if p <= 64000]), 564)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/long_primes/test_gpt_4o_2024_08_06_long_primes.py,CompileStatus.OK,,,,0.58,1.17,,,7.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_long_primes', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/long_primes/test_gpt_4o_2024_08_06_long_primes.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_long_primes', 'obj': 'TestLongPrimes', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 20, 'path': 'data/generated/docs_python/long_primes/test_gpt_4o_2024_08_06_long_primes.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_long_primes', 'obj': 'TestLongPrimes.test_sieve', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 18, 'path': 'data/generated/docs_python/long_primes/test_gpt_4o_2024_08_06_long_primes.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_long_primes', 'obj': 'TestLongPrimes.test_findPeriod', 'line': 12, 'column': 4, 'endLine': 12, 'endColumn': 23, 'path': 'data/generated/docs_python/long_primes/test_gpt_4o_2024_08_06_long_primes.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_long_primes', 'obj': 'TestLongPrimes.test_findPeriod', 'line': 12, 'column': 4, 'endLine': 12, 'endColumn': 23, 'path': 'data/generated/docs_python/long_primes/test_gpt_4o_2024_08_06_long_primes.py', 'symbol': 'invalid-name', 'message': 'Method name ""test_findPeriod"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_long_primes', 'obj': 'TestLongPrimes.test_long_primes', 'line': 18, 'column': 4, 'endLine': 18, 'endColumn': 24, 'path': 'data/generated/docs_python/long_primes/test_gpt_4o_2024_08_06_long_primes.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_long_primes', 'obj': 'TestLongPrimes.test_long_primes', 'line': 21, 'column': 8, 'endLine': 21, 'endColumn': 18, 'path': 'data/generated/docs_python/long_primes/test_gpt_4o_2024_08_06_long_primes.py', 'symbol': 'invalid-name', 'message': 'Variable name ""longPrimes"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}]",True
Longest common substring,"Task

Write a function that returns the longest common substring of two strings.

Use it within a program that demonstrates sample output from the function, which will consist of the longest common substring between ""thisisatest"" and ""testing123testing"".

Note that substrings are consecutive characters within a string.   This distinguishes them from subsequences, which is any sequence of characters within a string, even if there are extraneous characters in between them.

Hence, the longest common subsequence between ""thisisatest"" and ""testing123testing"" is ""tsitest"", whereas the longest common substring is just ""test"".




Other tasks related to string operations:

Metrics
 Array length
 String length
 Copy a string
 Empty string  (assignment)
Counting
 Word frequency
 Letter frequency
 Jewels and stones
 I before E except after C
 Bioinformatics/base count
 Count occurrences of a substring
 Count how many vowels and consonants occur in a string
Remove/replace
 XXXX redacted
 Conjugate a Latin verb
 Remove vowels from a string
 String interpolation (included)
 Strip block comments
 Strip comments from a string
 Strip a set of characters from a string
 Strip whitespace from a string -- top and tail
 Strip control codes and extended characters from a string
Anagrams/Derangements/shuffling
 Word wheel
 ABC problem
 Sattolo cycle
 Knuth shuffle
 Ordered words
 Superpermutation minimisation
 Textonyms (using a phone text pad)
 Anagrams
 Anagrams/Deranged anagrams
 Permutations/Derangements
Find/Search/Determine
 ABC words
 Odd words
 Word ladder
 Semordnilap
 Word search
 Wordiff  (game)
 String matching
 Tea cup rim text
 Alternade words
 Changeable words
 State name puzzle
 String comparison
 Unique characters
 Unique characters in each string
 Extract file extension
 Levenshtein distance
 Palindrome detection
 Common list elements
 Longest common suffix
 Longest common prefix
 Compare a list of strings
 Longest common substring
 Find common directory path
 Words from neighbour ones
 Change e letters to i in words
 Non-continuous subsequences
 Longest common subsequence
 Longest palindromic substrings
 Longest increasing subsequence
 Words containing ""the"" substring
 Sum of the digits of n is substring of n
 Determine if a string is numeric
 Determine if a string is collapsible
 Determine if a string is squeezable
 Determine if a string has all unique characters
 Determine if a string has all the same characters
 Longest substrings without repeating characters
 Find words which contains all the vowels
 Find words which contains most consonants
 Find words which contains more than 3 vowels
 Find words which first and last three letters are equals
 Find words which odd letters are consonants and even letters are vowels or vice_versa
Formatting
 Substring
 Rep-string
 Word wrap
 String case
 Align columns
 Literals/String
 Repeat a string
 Brace expansion
 Brace expansion using ranges
 Reverse a string
 Phrase reversals
 Comma quibbling
 Special characters
 String concatenation
 Substring/Top and tail
 Commatizing numbers
 Reverse words in a string
 Suffixation of decimal numbers
 Long literals, with continuations
 Numerical and alphabetical suffixes
 Abbreviations, easy
 Abbreviations, simple
 Abbreviations, automatic
Song lyrics/poems/Mad Libs/phrases
 Mad Libs
 Magic 8-ball
 99 Bottles of Beer
 The Name Game (a song)
 The Old lady swallowed a fly
 The Twelve Days of Christmas
Tokenize
 Text between
 Tokenize a string
 Word break problem
 Tokenize a string with escaping
 Split a character string based on change of character
Sequences
 Show ASCII table
 De Bruijn sequences
 Self-referential sequences
 Generate lower case ASCII alphabet




References

Generalize Suffix Tree
Ukkonen’s Suffix Tree Construction

",Python,"s1 = ""thisisatest""
s2 = ""testing123testing""
len1, len2 = len(s1), len(s2)
ir, jr = 0, -1
for i1 in range(len1):
    i2 = s2.find(s1[i1])
    while i2 >= 0:
        j1, j2 = i1, i2
        while j1 < len1 and j2 < len2 and s2[j2] == s1[j1]:
            if j1-i1 >= jr-ir:
                ir, jr = i1, j1
            j1 += 1; j2 += 1
        i2 = s2.find(s1[i1], i2+1)
print (s1[ir:jr+1])",386,14,"import unittest

def longest_common_substring(s1, s2):
    len1, len2 = len(s1), len(s2)
    ir, jr = 0, -1
    for i1 in range(len1):
        i2 = s2.find(s1[i1])
        while i2 >= 0:
            j1, j2 = i1, i2
            while j1 < len1 and j2 < len2 and s2[j2] == s1[j1]:
                if j1 - i1 >= jr - ir:
                    ir, jr = i1, j1
                j1 += 1
                j2 += 1
            i2 = s2.find(s1[i1], i2 + 1)
    return s1[ir:jr + 1]

class TestLongestCommonSubstring(unittest.TestCase):

    def test_example_case(self):
        self.assertEqual(longest_common_substring(""thisisatest"", ""testing123testing""), ""test"")

    def test_no_common_substring(self):
        self.assertEqual(longest_common_substring(""abc"", ""def""), """")

    def test_identical_strings(self):
        self.assertEqual(longest_common_substring(""abc"", ""abc""), ""abc"")

    def test_one_empty_string(self):
        self.assertEqual(longest_common_substring("""", ""abc""), """")
        self.assertEqual(longest_common_substring(""abc"", """"), """")

    def test_both_empty_strings(self):
        self.assertEqual(longest_common_substring("""", """"), """")

    def test_substring_at_start(self):
        self.assertEqual(longest_common_substring(""abcde"", ""abfgh""), ""ab"")

    def test_substring_at_end(self):
        self.assertEqual(longest_common_substring(""xyzabc"", ""123abc""), ""abc"")

    def test_multiple_common_substrings(self):
        self.assertEqual(longest_common_substring(""abcxyzabc"", ""xyzabcxyz""), ""xyzabc"")

    def test_case_sensitivity(self):
        self.assertEqual(longest_common_substring(""abc"", ""ABC""), """")

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/longest_common_substring/test_gpt_4o_2024_08_06_longest_common_substring.py,CompileStatus.OK,0.0,70.59,65.22,0.27,,100.0,0.4183480739593506,12.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_longest_common_substring', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/longest_common_substring/test_gpt_4o_2024_08_06_longest_common_substring.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_longest_common_substring', 'obj': 'longest_common_substring', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 28, 'path': 'data/generated/docs_python/longest_common_substring/test_gpt_4o_2024_08_06_longest_common_substring.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_longest_common_substring', 'obj': 'TestLongestCommonSubstring', 'line': 18, 'column': 0, 'endLine': 18, 'endColumn': 32, 'path': 'data/generated/docs_python/longest_common_substring/test_gpt_4o_2024_08_06_longest_common_substring.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_longest_common_substring', 'obj': 'TestLongestCommonSubstring.test_example_case', 'line': 20, 'column': 4, 'endLine': 20, 'endColumn': 25, 'path': 'data/generated/docs_python/longest_common_substring/test_gpt_4o_2024_08_06_longest_common_substring.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_longest_common_substring', 'obj': 'TestLongestCommonSubstring.test_no_common_substring', 'line': 23, 'column': 4, 'endLine': 23, 'endColumn': 32, 'path': 'data/generated/docs_python/longest_common_substring/test_gpt_4o_2024_08_06_longest_common_substring.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_longest_common_substring', 'obj': 'TestLongestCommonSubstring.test_identical_strings', 'line': 26, 'column': 4, 'endLine': 26, 'endColumn': 30, 'path': 'data/generated/docs_python/longest_common_substring/test_gpt_4o_2024_08_06_longest_common_substring.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_longest_common_substring', 'obj': 'TestLongestCommonSubstring.test_one_empty_string', 'line': 29, 'column': 4, 'endLine': 29, 'endColumn': 29, 'path': 'data/generated/docs_python/longest_common_substring/test_gpt_4o_2024_08_06_longest_common_substring.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_longest_common_substring', 'obj': 'TestLongestCommonSubstring.test_both_empty_strings', 'line': 33, 'column': 4, 'endLine': 33, 'endColumn': 31, 'path': 'data/generated/docs_python/longest_common_substring/test_gpt_4o_2024_08_06_longest_common_substring.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_longest_common_substring', 'obj': 'TestLongestCommonSubstring.test_substring_at_start', 'line': 36, 'column': 4, 'endLine': 36, 'endColumn': 31, 'path': 'data/generated/docs_python/longest_common_substring/test_gpt_4o_2024_08_06_longest_common_substring.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_longest_common_substring', 'obj': 'TestLongestCommonSubstring.test_substring_at_end', 'line': 39, 'column': 4, 'endLine': 39, 'endColumn': 29, 'path': 'data/generated/docs_python/longest_common_substring/test_gpt_4o_2024_08_06_longest_common_substring.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_longest_common_substring', 'obj': 'TestLongestCommonSubstring.test_multiple_common_substrings', 'line': 42, 'column': 4, 'endLine': 42, 'endColumn': 39, 'path': 'data/generated/docs_python/longest_common_substring/test_gpt_4o_2024_08_06_longest_common_substring.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_longest_common_substring', 'obj': 'TestLongestCommonSubstring.test_case_sensitivity', 'line': 45, 'column': 4, 'endLine': 45, 'endColumn': 29, 'path': 'data/generated/docs_python/longest_common_substring/test_gpt_4o_2024_08_06_longest_common_substring.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Longest increasing subsequence,"Calculate and show here a longest increasing subsequence of the list:





{
3
,
2
,
6
,
4
,
5
,
1
}


{\displaystyle \{3,2,6,4,5,1\}}


And of the list:





{
0
,
8
,
4
,
12
,
2
,
10
,
6
,
14
,
1
,
9
,
5
,
13
,
3
,
11
,
7
,
15
}


{\displaystyle \{0,8,4,12,2,10,6,14,1,9,5,13,3,11,7,15\}}


Note that a list may have more than one subsequence that is of the maximum length.


Other tasks related to string operations:

Metrics
 Array length
 String length
 Copy a string
 Empty string  (assignment)
Counting
 Word frequency
 Letter frequency
 Jewels and stones
 I before E except after C
 Bioinformatics/base count
 Count occurrences of a substring
 Count how many vowels and consonants occur in a string
Remove/replace
 XXXX redacted
 Conjugate a Latin verb
 Remove vowels from a string
 String interpolation (included)
 Strip block comments
 Strip comments from a string
 Strip a set of characters from a string
 Strip whitespace from a string -- top and tail
 Strip control codes and extended characters from a string
Anagrams/Derangements/shuffling
 Word wheel
 ABC problem
 Sattolo cycle
 Knuth shuffle
 Ordered words
 Superpermutation minimisation
 Textonyms (using a phone text pad)
 Anagrams
 Anagrams/Deranged anagrams
 Permutations/Derangements
Find/Search/Determine
 ABC words
 Odd words
 Word ladder
 Semordnilap
 Word search
 Wordiff  (game)
 String matching
 Tea cup rim text
 Alternade words
 Changeable words
 State name puzzle
 String comparison
 Unique characters
 Unique characters in each string
 Extract file extension
 Levenshtein distance
 Palindrome detection
 Common list elements
 Longest common suffix
 Longest common prefix
 Compare a list of strings
 Longest common substring
 Find common directory path
 Words from neighbour ones
 Change e letters to i in words
 Non-continuous subsequences
 Longest common subsequence
 Longest palindromic substrings
 Longest increasing subsequence
 Words containing ""the"" substring
 Sum of the digits of n is substring of n
 Determine if a string is numeric
 Determine if a string is collapsible
 Determine if a string is squeezable
 Determine if a string has all unique characters
 Determine if a string has all the same characters
 Longest substrings without repeating characters
 Find words which contains all the vowels
 Find words which contains most consonants
 Find words which contains more than 3 vowels
 Find words which first and last three letters are equals
 Find words which odd letters are consonants and even letters are vowels or vice_versa
Formatting
 Substring
 Rep-string
 Word wrap
 String case
 Align columns
 Literals/String
 Repeat a string
 Brace expansion
 Brace expansion using ranges
 Reverse a string
 Phrase reversals
 Comma quibbling
 Special characters
 String concatenation
 Substring/Top and tail
 Commatizing numbers
 Reverse words in a string
 Suffixation of decimal numbers
 Long literals, with continuations
 Numerical and alphabetical suffixes
 Abbreviations, easy
 Abbreviations, simple
 Abbreviations, automatic
Song lyrics/poems/Mad Libs/phrases
 Mad Libs
 Magic 8-ball
 99 Bottles of Beer
 The Name Game (a song)
 The Old lady swallowed a fly
 The Twelve Days of Christmas
Tokenize
 Text between
 Tokenize a string
 Word break problem
 Tokenize a string with escaping
 Split a character string based on change of character
Sequences
 Show ASCII table
 De Bruijn sequences
 Self-referential sequences
 Generate lower case ASCII alphabet




Ref

 Dynamic Programming #1: Longest Increasing Subsequence on YouTube
 An efficient solution can be based on Patience sorting.

",Python,"def longest_increasing_subsequence(X):
    """"""Returns the Longest Increasing Subsequence in the Given List/Array""""""
    N = len(X)
    P = [0] * N
    M = [0] * (N+1)
    L = 0
    for i in range(N):
       lo = 1
       hi = L
       while lo <= hi:
           mid = (lo+hi)//2
           if (X[M[mid]] < X[i]):
               lo = mid+1
           else:
               hi = mid-1
 
       newL = lo
       P[i] = M[newL-1]
       M[newL] = i
 
       if (newL > L):
           L = newL
 
    S = []
    k = M[L]
    for i in range(L-1, -1, -1):
        S.append(X[k])
        k = P[k]
    return S[::-1]
 
if __name__ == '__main__':
    for d in [[3,2,6,4,5,1], [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]]:
        print('a L.I.S. of %s is %s' % (d, longest_increasing_subsequence(d)))",799,33,"import unittest
from longest_increasing_subsequence import longest_increasing_subsequence

class TestLongestIncreasingSubsequence(unittest.TestCase):

    def test_example_case_1(self):
        data = [3, 2, 6, 4, 5, 1]
        result = longest_increasing_subsequence(data)
        self.assertEqual(result, [2, 4, 5])  # One possible LIS

    def test_example_case_2(self):
        data = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]
        result = longest_increasing_subsequence(data)
        self.assertEqual(result, [0, 2, 6, 9, 11, 15])  # One possible LIS

    def test_empty_list(self):
        data = []
        result = longest_increasing_subsequence(data)
        self.assertEqual(result, [])

    def test_single_element(self):
        data = [10]
        result = longest_increasing_subsequence(data)
        self.assertEqual(result, [10])

    def test_all_decreasing(self):
        data = [5, 4, 3, 2, 1]
        result = longest_increasing_subsequence(data)
        self.assertEqual(result, [5])  # Any single element is a valid LIS

    def test_all_increasing(self):
        data = [1, 2, 3, 4, 5]
        result = longest_increasing_subsequence(data)
        self.assertEqual(result, [1, 2, 3, 4, 5])

    def test_duplicate_elements(self):
        data = [3, 3, 3, 3, 3]
        result = longest_increasing_subsequence(data)
        self.assertEqual(result, [3])  # Any single element is a valid LIS

    def test_mixed_elements(self):
        data = [10, 22, 9, 33, 21, 50, 41, 60, 80]
        result = longest_increasing_subsequence(data)
        self.assertEqual(result, [10, 22, 33, 50, 60, 80])  # One possible LIS

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/longest_increasing_subsequence/test_gpt_4o_2024_08_06_longest_increasing_subsequence.py,CompileStatus.OK,0.0,95.31,91.25,0.22,1.33,75.0,0.480633020401001,10.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_longest_increasing_subsequence', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/longest_increasing_subsequence/test_gpt_4o_2024_08_06_longest_increasing_subsequence.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_longest_increasing_subsequence', 'obj': 'TestLongestIncreasingSubsequence', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 38, 'path': 'data/generated/docs_python/longest_increasing_subsequence/test_gpt_4o_2024_08_06_longest_increasing_subsequence.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_longest_increasing_subsequence', 'obj': 'TestLongestIncreasingSubsequence.test_example_case_1', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 27, 'path': 'data/generated/docs_python/longest_increasing_subsequence/test_gpt_4o_2024_08_06_longest_increasing_subsequence.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_longest_increasing_subsequence', 'obj': 'TestLongestIncreasingSubsequence.test_example_case_2', 'line': 11, 'column': 4, 'endLine': 11, 'endColumn': 27, 'path': 'data/generated/docs_python/longest_increasing_subsequence/test_gpt_4o_2024_08_06_longest_increasing_subsequence.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_longest_increasing_subsequence', 'obj': 'TestLongestIncreasingSubsequence.test_empty_list', 'line': 16, 'column': 4, 'endLine': 16, 'endColumn': 23, 'path': 'data/generated/docs_python/longest_increasing_subsequence/test_gpt_4o_2024_08_06_longest_increasing_subsequence.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_longest_increasing_subsequence', 'obj': 'TestLongestIncreasingSubsequence.test_single_element', 'line': 21, 'column': 4, 'endLine': 21, 'endColumn': 27, 'path': 'data/generated/docs_python/longest_increasing_subsequence/test_gpt_4o_2024_08_06_longest_increasing_subsequence.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_longest_increasing_subsequence', 'obj': 'TestLongestIncreasingSubsequence.test_all_decreasing', 'line': 26, 'column': 4, 'endLine': 26, 'endColumn': 27, 'path': 'data/generated/docs_python/longest_increasing_subsequence/test_gpt_4o_2024_08_06_longest_increasing_subsequence.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_longest_increasing_subsequence', 'obj': 'TestLongestIncreasingSubsequence.test_all_increasing', 'line': 31, 'column': 4, 'endLine': 31, 'endColumn': 27, 'path': 'data/generated/docs_python/longest_increasing_subsequence/test_gpt_4o_2024_08_06_longest_increasing_subsequence.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_longest_increasing_subsequence', 'obj': 'TestLongestIncreasingSubsequence.test_duplicate_elements', 'line': 36, 'column': 4, 'endLine': 36, 'endColumn': 31, 'path': 'data/generated/docs_python/longest_increasing_subsequence/test_gpt_4o_2024_08_06_longest_increasing_subsequence.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_longest_increasing_subsequence', 'obj': 'TestLongestIncreasingSubsequence.test_mixed_elements', 'line': 41, 'column': 4, 'endLine': 41, 'endColumn': 27, 'path': 'data/generated/docs_python/longest_increasing_subsequence/test_gpt_4o_2024_08_06_longest_increasing_subsequence.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Longest string challenge,"Background

This ""longest string challenge"" is inspired by a problem that used to be given to students learning Icon. Students were expected to try to solve the problem in Icon and another language with which the student was already familiar. The basic problem is quite simple; the challenge and fun part came through the introduction of restrictions. Experience has shown that the original restrictions required some adjustment to bring out the intent of the challenge and make it suitable for Rosetta Code.



Basic problem statement
Write a program that reads lines from standard input and, upon end of file, writes the longest line to standard output.
If there are ties for the longest line, the program writes out all the lines that tie.
If there is no input, the program should produce no output.



Task
Implement a solution to the basic problem that adheres to the spirit of the restrictions (see below).

Describe how you circumvented or got around these 'restrictions' and met the 'spirit' of the challenge. Your supporting description may need to describe any challenges to interpreting the restrictions and how you made this interpretation. You should state any assumptions, warnings, or other relevant points. The central idea here is to make the task a bit more interesting by thinking outside of the box and perhaps by showing off the capabilities of your language in a creative way. Because there is potential for considerable variation between solutions, the description is key to helping others see what you've done.

This task is likely to encourage a variety of different types of solutions. They should be substantially different approaches.

Given the input:

a
bb
ccc
ddd
ee
f
ggg

the output should be (possibly rearranged):

ccc
ddd
ggg



Original list of restrictions
 No comparison operators may be used.
 No arithmetic operations, such as addition and subtraction, may be used.
 The only datatypes you may use are integer and string. In particular, you may not use lists.
 Do not re-read the input file. Avoid using files as a replacement for lists (this restriction became apparent in the discussion).


Intent of restrictions

Because of the variety of languages on Rosetta Code and the wide variety of concepts used in them, there needs to be a bit of clarification and guidance here to get to the spirit of the challenge and the intent of the restrictions.

The basic problem can be solved very conventionally, but that's boring and pedestrian. The original intent here wasn't to unduly frustrate people with interpreting the restrictions, it was to get people to think outside of their particular box and have a bit of fun doing it.

The guiding principle here should be to be creative in demonstrating some of the capabilities of the programming language being used. If you need to bend the restrictions a bit, explain why and try to follow the intent. If you think you've implemented a 'cheat', call out the fragment yourself and ask readers if they can spot why. If you absolutely can't get around one of the restrictions, explain why in your description.

Now having said that, the restrictions require some elaboration.

 In general, the restrictions are meant to avoid the explicit use of these features.
 ""No comparison operators may be used"" - At some level there must be some test that allows the solution to get at the length and determine if one string is longer. Comparison operators, in particular any less/greater comparison should be avoided. Representing the length of any string as a number should also be avoided. Various approaches allow for detecting the end of a string. Some of these involve implicitly using equal/not-equal; however, explicitly using equal/not-equal should be acceptable.
 ""No arithmetic operations"" - Again, at some level something may have to advance through the string. Often there are ways a language can do this implicitly advance a cursor or pointer without explicitly using a +, - , ++, --, add, subtract, etc.
 The datatype restrictions are amongst the most difficult to reinterpret. In the language of the original challenge strings are atomic datatypes and structured datatypes like lists are quite distinct and have many different operations that apply to them. This becomes a bit fuzzier with languages with a different programming paradigm. The intent would be to avoid using an easy structure to accumulate the longest strings and spit them out. There will be some natural reinterpretation here.


To make this a bit more concrete, here are a couple of specific examples:
In C, a string is an array of chars, so using a couple of arrays as strings is in the spirit while using a second array in a non-string like fashion would violate the intent.
In APL or J, arrays are the core of the language so ruling them out is unfair. Meeting the spirit will come down to how they are used.

Please keep in mind these are just examples and you may hit new territory finding a solution. There will be other cases like these. Explain your reasoning. You may want to open a discussion on the talk page as well.

 The added ""No rereading"" restriction is for practical reasons, re-reading stdin should be broken. I haven't outright banned the use of other files but I've discouraged them as it is basically another form of a list. Somewhere there may be a language that just sings when doing file manipulation and where that makes sense; however, for most there should be a way to accomplish without resorting to an externality.


At the end of the day for the implementer this should be a bit of fun. As an implementer you represent the expertise in your language, the reader may have no knowledge of your language. For the reader it should give them insight into how people think outside the box in other languages. Comments, especially for non-obvious (to the reader) bits will be extremely helpful. While the implementations may be a bit artificial in the context of this task, the general techniques may be useful elsewhere.



",Python,"import fileinput
 
# This returns True if the second string has a value on the
# same index as the last index of the first string. It runs
# faster than trimming the strings because it runs len once
# and is a single index lookup versus slicing both strings
# one character at a time.
def longer(a, b):
    try:
        b[len(a)-1]
        return False
    except:
        return True
 
longest, lines = '', ''
for x in fileinput.input():
    if longer(x, longest):
        lines, longest = x, x
    elif not longer(longest, x):
        lines += x
 
print(lines, end='')",572,22,"import unittest
from io import StringIO
import sys

# Assuming the function is refactored to accept input as a list of strings
def longest_string_challenge(input_lines):
    def longer(a, b):
        try:
            b[len(a)-1]
            return False
        except:
            return True

    longest, lines = '', ''
    for x in input_lines:
        if longer(x, longest):
            lines, longest = x, x
        elif not longer(longest, x):
            lines += x

    return lines

class TestLongestStringChallenge(unittest.TestCase):

    def test_single_longest_line(self):
        input_lines = [""a"", ""bb"", ""ccc"", ""d"", ""ee""]
        expected_output = ""ccc""
        self.assertEqual(longest_string_challenge(input_lines), expected_output)

    def test_multiple_longest_lines(self):
        input_lines = [""a"", ""bb"", ""ccc"", ""ddd"", ""ee"", ""f"", ""ggg""]
        expected_output = ""cccdddggg""
        self.assertEqual(longest_string_challenge(input_lines), expected_output)

    def test_no_input(self):
        input_lines = []
        expected_output = """"
        self.assertEqual(longest_string_challenge(input_lines), expected_output)

    def test_all_lines_same_length(self):
        input_lines = [""aa"", ""bb"", ""cc"", ""dd""]
        expected_output = ""aabbccdd""
        self.assertEqual(longest_string_challenge(input_lines), expected_output)

    def test_single_line_input(self):
        input_lines = [""singleline""]
        expected_output = ""singleline""
        self.assertEqual(longest_string_challenge(input_lines), expected_output)

    def test_empty_lines(self):
        input_lines = ["""", """", """"]
        expected_output = """"
        self.assertEqual(longest_string_challenge(input_lines), expected_output)

    def test_mixed_empty_and_non_empty_lines(self):
        input_lines = ["""", ""a"", """", ""bb"", """", ""ccc"", """"]
        expected_output = ""ccc""
        self.assertEqual(longest_string_challenge(input_lines), expected_output)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/longest_string_challenge/test_gpt_4o_2024_08_06_longest_string_challenge.py,CompileStatus.OK,0.0,75.81,71.05,0.15,3.5,100.0,0.4338979721069336,14.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_longest_string_challenge', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/longest_string_challenge/test_gpt_4o_2024_08_06_longest_string_challenge.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_longest_string_challenge', 'obj': 'longest_string_challenge', 'line': 6, 'column': 0, 'endLine': 6, 'endColumn': 28, 'path': 'data/generated/docs_python/longest_string_challenge/test_gpt_4o_2024_08_06_longest_string_challenge.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_longest_string_challenge', 'obj': 'longest_string_challenge.longer', 'line': 11, 'column': 8, 'endLine': 12, 'endColumn': 23, 'path': 'data/generated/docs_python/longest_string_challenge/test_gpt_4o_2024_08_06_longest_string_challenge.py', 'symbol': 'bare-except', 'message': 'No exception type(s) specified', 'message-id': 'W0702'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_longest_string_challenge', 'obj': 'longest_string_challenge.longer', 'line': 9, 'column': 12, 'endLine': 9, 'endColumn': 23, 'path': 'data/generated/docs_python/longest_string_challenge/test_gpt_4o_2024_08_06_longest_string_challenge.py', 'symbol': 'expression-not-assigned', 'message': 'Expression ""b[len(a) - 1]"" is assigned to nothing', 'message-id': 'W0106'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_longest_string_challenge', 'obj': 'TestLongestStringChallenge', 'line': 23, 'column': 0, 'endLine': 23, 'endColumn': 32, 'path': 'data/generated/docs_python/longest_string_challenge/test_gpt_4o_2024_08_06_longest_string_challenge.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_longest_string_challenge', 'obj': 'TestLongestStringChallenge.test_single_longest_line', 'line': 25, 'column': 4, 'endLine': 25, 'endColumn': 32, 'path': 'data/generated/docs_python/longest_string_challenge/test_gpt_4o_2024_08_06_longest_string_challenge.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_longest_string_challenge', 'obj': 'TestLongestStringChallenge.test_multiple_longest_lines', 'line': 30, 'column': 4, 'endLine': 30, 'endColumn': 35, 'path': 'data/generated/docs_python/longest_string_challenge/test_gpt_4o_2024_08_06_longest_string_challenge.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_longest_string_challenge', 'obj': 'TestLongestStringChallenge.test_no_input', 'line': 35, 'column': 4, 'endLine': 35, 'endColumn': 21, 'path': 'data/generated/docs_python/longest_string_challenge/test_gpt_4o_2024_08_06_longest_string_challenge.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_longest_string_challenge', 'obj': 'TestLongestStringChallenge.test_all_lines_same_length', 'line': 40, 'column': 4, 'endLine': 40, 'endColumn': 34, 'path': 'data/generated/docs_python/longest_string_challenge/test_gpt_4o_2024_08_06_longest_string_challenge.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_longest_string_challenge', 'obj': 'TestLongestStringChallenge.test_single_line_input', 'line': 45, 'column': 4, 'endLine': 45, 'endColumn': 30, 'path': 'data/generated/docs_python/longest_string_challenge/test_gpt_4o_2024_08_06_longest_string_challenge.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_longest_string_challenge', 'obj': 'TestLongestStringChallenge.test_empty_lines', 'line': 50, 'column': 4, 'endLine': 50, 'endColumn': 24, 'path': 'data/generated/docs_python/longest_string_challenge/test_gpt_4o_2024_08_06_longest_string_challenge.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_longest_string_challenge', 'obj': 'TestLongestStringChallenge.test_mixed_empty_and_non_empty_lines', 'line': 55, 'column': 4, 'endLine': 55, 'endColumn': 44, 'path': 'data/generated/docs_python/longest_string_challenge/test_gpt_4o_2024_08_06_longest_string_challenge.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_longest_string_challenge', 'obj': '', 'line': 2, 'column': 0, 'endLine': 2, 'endColumn': 23, 'path': 'data/generated/docs_python/longest_string_challenge/test_gpt_4o_2024_08_06_longest_string_challenge.py', 'symbol': 'unused-import', 'message': 'Unused StringIO imported from io', 'message-id': 'W0611'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_longest_string_challenge', 'obj': '', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 10, 'path': 'data/generated/docs_python/longest_string_challenge/test_gpt_4o_2024_08_06_longest_string_challenge.py', 'symbol': 'unused-import', 'message': 'Unused import sys', 'message-id': 'W0611'}]",False
Loops/Increment loop index within loop body,"Sometimes, one may need   (or want)   a loop which
its   iterator   (the index
variable)   is modified within the

loop body    in addition to the normal incrementation by the   (do)   loop structure index.



Goal

Demonstrate the best way to accomplish this.



Task

Write a loop which:

   starts the index (variable) at   42
   (at iteration time)   increments the index by unity
   if the index is prime:
   displays the count of primes found (so far) and the prime   (to the terminal)
   increments the index such that the new index is now the (old) index plus that prime
   terminates the loop when   42   primes are shown


Extra credit:   because of the primes get rather large, use commas
within the displayed primes to ease comprehension.



Show all output here.



Note

Not all programming languages allow the modification of a
loop's index.   If that is the case, then use whatever method that
is appropriate or idiomatic for that language.   Please add a note
if the loop's index isn't modifiable.



Related tasks

   Loop over multiple arrays simultaneously
   Loops/Break
   Loops/Continue
   Loops/Do-while
   Loops/Downward for
   Loops/For
   Loops/For with a specified step
   Loops/Foreach
   Loops/Infinite
   Loops/N plus one half
   Loops/Nested
   Loops/While
   Loops/with multiple ranges
   Loops/Wrong ranges

",Python,"def isPrime(n):
    for x in 2, 3:
        if not n % x:
            return n == x
    d = 5
    while d * d <= n:
        for x in 2, 4:
            if not n % d:
                return False
            d += x
    return True
 
i = 42
n = 0
while n < 42:
    if isPrime(i):
        n += 1
        print('n = {:2} {:20,}'.format(n, i))
        i += i - 1
    i += 1",366,20,"import unittest

def isPrime(n):
    for x in 2, 3:
        if not n % x:
            return n == x
    d = 5
    while d * d <= n:
        for x in 2, 4:
            if not n % d:
                return False
            d += x
    return True

class TestPrimeLoop(unittest.TestCase):

    def test_isPrime(self):
        # Test known primes
        self.assertTrue(isPrime(2))
        self.assertTrue(isPrime(3))
        self.assertTrue(isPrime(5))
        self.assertTrue(isPrime(7))
        self.assertTrue(isPrime(11))
        self.assertTrue(isPrime(13))
        self.assertTrue(isPrime(17))
        self.assertTrue(isPrime(19))
        self.assertTrue(isPrime(23))
        self.assertTrue(isPrime(29))

        # Test known non-primes
        self.assertFalse(isPrime(1))
        self.assertFalse(isPrime(4))
        self.assertFalse(isPrime(6))
        self.assertFalse(isPrime(8))
        self.assertFalse(isPrime(9))
        self.assertFalse(isPrime(10))
        self.assertFalse(isPrime(12))
        self.assertFalse(isPrime(14))
        self.assertFalse(isPrime(15))
        self.assertFalse(isPrime(16))

    def test_prime_loop_output(self):
        # Capture the output of the loop
        import io
        import sys

        captured_output = io.StringIO()
        sys.stdout = captured_output

        i = 42
        n = 0
        while n < 42:
            if isPrime(i):
                n += 1
                print('n = {:2} {:20,}'.format(n, i))
                i += i - 1
            i += 1

        sys.stdout = sys.__stdout__  # Reset redirect.

        # Check if the output contains 42 lines
        output_lines = captured_output.getvalue().strip().split('\n')
        self.assertEqual(len(output_lines), 42)

        # Check the format of the first and last line
        self.assertTrue(output_lines[0].startswith('n =  1'))
        self.assertTrue(output_lines[-1].startswith('n = 42'))

        # Check if the numbers are correctly formatted with commas
        for line in output_lines:
            parts = line.split()
            self.assertEqual(len(parts), 3)
            self.assertTrue(parts[2].replace(',', '').isdigit())

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/loops_increment_loop_index_within_loop_body/test_gpt_4o_2024_08_06_loops_increment_loop_index_within_loop_body.py,CompileStatus.OK,0.0,61.04,57.8,0.43,4.17,,2.1344010829925537,18.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_loops_increment_loop_index_within_loop_body', 'obj': '', 'line': 29, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/loops_increment_loop_index_within_loop_body/test_gpt_4o_2024_08_06_loops_increment_loop_index_within_loop_body.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_loops_increment_loop_index_within_loop_body', 'obj': '', 'line': 41, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/loops_increment_loop_index_within_loop_body/test_gpt_4o_2024_08_06_loops_increment_loop_index_within_loop_body.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_loops_increment_loop_index_within_loop_body', 'obj': '', 'line': 46, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/loops_increment_loop_index_within_loop_body/test_gpt_4o_2024_08_06_loops_increment_loop_index_within_loop_body.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_loops_increment_loop_index_within_loop_body', 'obj': '', 'line': 49, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/loops_increment_loop_index_within_loop_body/test_gpt_4o_2024_08_06_loops_increment_loop_index_within_loop_body.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_loops_increment_loop_index_within_loop_body', 'obj': '', 'line': 58, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/loops_increment_loop_index_within_loop_body/test_gpt_4o_2024_08_06_loops_increment_loop_index_within_loop_body.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_loops_increment_loop_index_within_loop_body', 'obj': '', 'line': 60, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/loops_increment_loop_index_within_loop_body/test_gpt_4o_2024_08_06_loops_increment_loop_index_within_loop_body.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_loops_increment_loop_index_within_loop_body', 'obj': '', 'line': 64, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/loops_increment_loop_index_within_loop_body/test_gpt_4o_2024_08_06_loops_increment_loop_index_within_loop_body.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_loops_increment_loop_index_within_loop_body', 'obj': '', 'line': 68, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/loops_increment_loop_index_within_loop_body/test_gpt_4o_2024_08_06_loops_increment_loop_index_within_loop_body.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_loops_increment_loop_index_within_loop_body', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/loops_increment_loop_index_within_loop_body/test_gpt_4o_2024_08_06_loops_increment_loop_index_within_loop_body.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_loops_increment_loop_index_within_loop_body', 'obj': 'isPrime', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 11, 'path': 'data/generated/docs_python/loops_increment_loop_index_within_loop_body/test_gpt_4o_2024_08_06_loops_increment_loop_index_within_loop_body.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_loops_increment_loop_index_within_loop_body', 'obj': 'isPrime', 'line': 3, 'column': 0, 'endLine': 3, 'endColumn': 11, 'path': 'data/generated/docs_python/loops_increment_loop_index_within_loop_body/test_gpt_4o_2024_08_06_loops_increment_loop_index_within_loop_body.py', 'symbol': 'invalid-name', 'message': 'Function name ""isPrime"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_loops_increment_loop_index_within_loop_body', 'obj': 'TestPrimeLoop', 'line': 15, 'column': 0, 'endLine': 15, 'endColumn': 19, 'path': 'data/generated/docs_python/loops_increment_loop_index_within_loop_body/test_gpt_4o_2024_08_06_loops_increment_loop_index_within_loop_body.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_loops_increment_loop_index_within_loop_body', 'obj': 'TestPrimeLoop.test_isPrime', 'line': 17, 'column': 4, 'endLine': 17, 'endColumn': 20, 'path': 'data/generated/docs_python/loops_increment_loop_index_within_loop_body/test_gpt_4o_2024_08_06_loops_increment_loop_index_within_loop_body.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_loops_increment_loop_index_within_loop_body', 'obj': 'TestPrimeLoop.test_isPrime', 'line': 17, 'column': 4, 'endLine': 17, 'endColumn': 20, 'path': 'data/generated/docs_python/loops_increment_loop_index_within_loop_body/test_gpt_4o_2024_08_06_loops_increment_loop_index_within_loop_body.py', 'symbol': 'invalid-name', 'message': 'Method name ""test_isPrime"" doesn\'t conform to snake_case naming style', 'message-id': 'C0103'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_loops_increment_loop_index_within_loop_body', 'obj': 'TestPrimeLoop.test_prime_loop_output', 'line': 42, 'column': 4, 'endLine': 42, 'endColumn': 30, 'path': 'data/generated/docs_python/loops_increment_loop_index_within_loop_body/test_gpt_4o_2024_08_06_loops_increment_loop_index_within_loop_body.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_loops_increment_loop_index_within_loop_body', 'obj': 'TestPrimeLoop.test_prime_loop_output', 'line': 44, 'column': 8, 'endLine': 44, 'endColumn': 17, 'path': 'data/generated/docs_python/loops_increment_loop_index_within_loop_body/test_gpt_4o_2024_08_06_loops_increment_loop_index_within_loop_body.py', 'symbol': 'import-outside-toplevel', 'message': 'Import outside toplevel (io)', 'message-id': 'C0415'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_loops_increment_loop_index_within_loop_body', 'obj': 'TestPrimeLoop.test_prime_loop_output', 'line': 45, 'column': 8, 'endLine': 45, 'endColumn': 18, 'path': 'data/generated/docs_python/loops_increment_loop_index_within_loop_body/test_gpt_4o_2024_08_06_loops_increment_loop_index_within_loop_body.py', 'symbol': 'import-outside-toplevel', 'message': 'Import outside toplevel (sys)', 'message-id': 'C0415'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_loops_increment_loop_index_within_loop_body', 'obj': 'TestPrimeLoop.test_prime_loop_output', 'line': 55, 'column': 22, 'endLine': 55, 'endColumn': 39, 'path': 'data/generated/docs_python/loops_increment_loop_index_within_loop_body/test_gpt_4o_2024_08_06_loops_increment_loop_index_within_loop_body.py', 'symbol': 'consider-using-f-string', 'message': 'Formatting a regular string which could be an f-string', 'message-id': 'C0209'}]",False
Loops/With multiple ranges,"Loops/With multiple ranges

You are encouraged to solve this task according to the task description, using any language you may know.
Some languages allow multiple loop ranges, such as the PL/I example (snippet) below.

                                       /* all variables are DECLARED as integers. */
          prod=  1;                    /*start with a product of unity.           */
           sum=  0;                    /*  ""     ""  ""   sum    "" zero.            */
             x= +5;
             y= -5;
             z= -2;
           one=  1;
         three=  3;
         seven=  7;
                                       /*(below)  **  is exponentiation:  4**3=64 */
           do j=   -three  to     3**3        by three   ,
                   -seven  to   +seven        by   x     ,
                      555  to      550 - y               ,
                       22  to      -28        by -three  ,
                     1927  to     1939                   ,
                        x  to        y        by   z     ,
                    11**x  to    11**x + one;
                                                        /* ABS(n) = absolute value*/
           sum= sum + abs(j);                           /*add absolute value of J.*/
           if abs(prod)<2**27 & j¬=0  then prod=prod*j; /*PROD is small enough & J*/
           end;                                         /*not 0, then multiply it.*/
                     /*SUM and PROD are used for verification of J incrementation.*/
         display (' sum= ' ||  sum);                    /*display strings to term.*/
         display ('prod= ' || prod);                    /*   ""       ""     ""   ""  */


Task

Simulate/translate the above PL/I program snippet as best as possible in your
language,   with particular emphasis on the   do   loop construct.

The   do   index must be incremented/decremented in the same order shown.

If feasible, add commas to the two output numbers (being displayed).

Show all output here.

      A simple PL/I   DO  loop  (incrementing or decrementing)  has the construct of:
 
            DO variable = start_expression    {TO ending_expression]       {BY increment_expression} ;
                 ---or---
            DO variable = start_expression    {BY increment_expression}    {TO ending_expression]    ;
 
      where it is understood that all expressions will have a value.  The  variable  is normally a
      scaler variable,  but need not be  (but for this task, all variables and expressions are declared
      to be scaler integers).   If the   BY   expression is omitted,  a   BY   value of unity is used.
      All expressions are evaluated before the   DO   loop is executed,  and those values are used
      throughout the   DO   loop execution   (even though, for instance,  the value of   Z   may be
      changed within the   DO   loop.    This isn't the case here for this task.
 
      A multiple-range   DO   loop can be constructed by using a comma (,) to separate additional ranges
      (the use of multiple   TO   and/or   BY   keywords).     This is the construct used in this task.
 
      There are other forms of   DO   loops in PL/I involving the  WHILE  clause,  but those won't be
      needed here.    DO  loops without a   TO   clause might need a   WHILE   clause  or some other
      means of exiting the loop  (such as  LEAVE,  RETURN,  SIGNAL,  GOTO,  or  STOP),  or some other
      (possible error) condition that causes transfer of control outside the  DO  loop.
 
      Also, in PL/I, the check if the   DO   loop index value is outside the range is made at the
      ""head""  (start)  of the   DO  loop,  so it's possible that the   DO   loop isn't executed,  but
      that isn't the case for any of the ranges used in this task.
 
      In the example above, the clause:                    x    to y       by z
      will cause the variable   J   to have to following values  (in this order):  5  3  1  -1  -3  -5
 
      In the example above, the clause:                 -seven  to +seven  by x
      will cause the variable   J   to have to following values  (in this order):  -7  -2   3


Related tasks

   Loop over multiple arrays simultaneously
   Loops/Break
   Loops/Continue
   Loops/Do-while
   Loops/Downward for
   Loops/For
   Loops/For with a specified step
   Loops/Foreach
   Loops/Increment loop index within loop body
   Loops/Infinite
   Loops/N plus one half
   Loops/Nested
   Loops/While
   Loops/with multiple ranges
   Loops/Wrong ranges

",Python,"from itertools import chain
 
prod, sum_, x, y, z, one,three,seven = 1, 0, 5, -5, -2, 1, 3, 7
 
def _range(x, y, z=1):
    return range(x, y + (1 if z > 0 else -1), z)
 
print(f'list(_range(x, y, z)) = {list(_range(x, y, z))}')
print(f'list(_range(-seven, seven, x)) = {list(_range(-seven, seven, x))}')
 
for j in chain(_range(-three, 3**3, three), _range(-seven, seven, x),
               _range(555, 550 - y), _range(22, -28, -three),
               _range(1927, 1939), _range(x, y, z),
               _range(11**x, 11**x + 1)):
    sum_ += abs(j)
    if abs(prod) < 2**27 and (j != 0):
        prod *= j
print(f' sum= {sum_}\nprod= {prod}')",645,18,"import unittest
from itertools import chain

# Assuming the code to be tested is in a module named 'loops_with_multiple_ranges'
# from loops_with_multiple_ranges import _range

class TestLoopsWithMultipleRanges(unittest.TestCase):

    def test_range_positive_step(self):
        self.assertEqual(list(_range(1, 5, 1)), [1, 2, 3, 4, 5])
        self.assertEqual(list(_range(0, 10, 2)), [0, 2, 4, 6, 8, 10])

    def test_range_negative_step(self):
        self.assertEqual(list(_range(5, 1, -1)), [5, 4, 3, 2, 1])
        self.assertEqual(list(_range(10, 0, -2)), [10, 8, 6, 4, 2, 0])

    def test_range_single_value(self):
        self.assertEqual(list(_range(5, 5)), [5])
        self.assertEqual(list(_range(0, 0)), [0])

    def test_range_no_step(self):
        self.assertEqual(list(_range(1, 5)), [1, 2, 3, 4, 5])
        self.assertEqual(list(_range(5, 1)), [5, 4, 3, 2, 1])

    def test_loop_logic(self):
        prod, sum_, x, y, z, one, three, seven = 1, 0, 5, -5, -2, 1, 3, 7

        for j in chain(_range(-three, 3**3, three), _range(-seven, seven, x),
                       _range(555, 550 - y), _range(22, -28, -three),
                       _range(1927, 1939), _range(x, y, z),
                       _range(11**x, 11**x + one)):
            sum_ += abs(j)
            if abs(prod) < 2**27 and (j != 0):
                prod *= j

        self.assertEqual(sum_, 14182)  # Expected sum based on the loop logic
        self.assertEqual(prod, 0)      # Expected product based on the loop logic

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/loops_with_multiple_ranges/test_gpt_4o_2024_08_06_loops_with_multiple_ranges.py,CompileStatus.OK,0.0,41.67,34.78,0.36,5.0,,0.4938991069793701,23.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_loops_with_multiple_ranges', 'obj': '', 'line': 28, 'column': 77, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/loops_with_multiple_ranges/test_gpt_4o_2024_08_06_loops_with_multiple_ranges.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_loops_with_multiple_ranges', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/loops_with_multiple_ranges/test_gpt_4o_2024_08_06_loops_with_multiple_ranges.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_loops_with_multiple_ranges', 'obj': 'TestLoopsWithMultipleRanges', 'line': 7, 'column': 0, 'endLine': 7, 'endColumn': 33, 'path': 'data/generated/docs_python/loops_with_multiple_ranges/test_gpt_4o_2024_08_06_loops_with_multiple_ranges.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_loops_with_multiple_ranges', 'obj': 'TestLoopsWithMultipleRanges.test_range_positive_step', 'line': 9, 'column': 4, 'endLine': 9, 'endColumn': 32, 'path': 'data/generated/docs_python/loops_with_multiple_ranges/test_gpt_4o_2024_08_06_loops_with_multiple_ranges.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_loops_with_multiple_ranges', 'obj': 'TestLoopsWithMultipleRanges.test_range_positive_step', 'line': 10, 'column': 30, 'endLine': 10, 'endColumn': 36, 'path': 'data/generated/docs_python/loops_with_multiple_ranges/test_gpt_4o_2024_08_06_loops_with_multiple_ranges.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable '_range'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_loops_with_multiple_ranges', 'obj': 'TestLoopsWithMultipleRanges.test_range_positive_step', 'line': 11, 'column': 30, 'endLine': 11, 'endColumn': 36, 'path': 'data/generated/docs_python/loops_with_multiple_ranges/test_gpt_4o_2024_08_06_loops_with_multiple_ranges.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable '_range'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_loops_with_multiple_ranges', 'obj': 'TestLoopsWithMultipleRanges.test_range_negative_step', 'line': 13, 'column': 4, 'endLine': 13, 'endColumn': 32, 'path': 'data/generated/docs_python/loops_with_multiple_ranges/test_gpt_4o_2024_08_06_loops_with_multiple_ranges.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_loops_with_multiple_ranges', 'obj': 'TestLoopsWithMultipleRanges.test_range_negative_step', 'line': 14, 'column': 30, 'endLine': 14, 'endColumn': 36, 'path': 'data/generated/docs_python/loops_with_multiple_ranges/test_gpt_4o_2024_08_06_loops_with_multiple_ranges.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable '_range'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_loops_with_multiple_ranges', 'obj': 'TestLoopsWithMultipleRanges.test_range_negative_step', 'line': 15, 'column': 30, 'endLine': 15, 'endColumn': 36, 'path': 'data/generated/docs_python/loops_with_multiple_ranges/test_gpt_4o_2024_08_06_loops_with_multiple_ranges.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable '_range'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_loops_with_multiple_ranges', 'obj': 'TestLoopsWithMultipleRanges.test_range_single_value', 'line': 17, 'column': 4, 'endLine': 17, 'endColumn': 31, 'path': 'data/generated/docs_python/loops_with_multiple_ranges/test_gpt_4o_2024_08_06_loops_with_multiple_ranges.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_loops_with_multiple_ranges', 'obj': 'TestLoopsWithMultipleRanges.test_range_single_value', 'line': 18, 'column': 30, 'endLine': 18, 'endColumn': 36, 'path': 'data/generated/docs_python/loops_with_multiple_ranges/test_gpt_4o_2024_08_06_loops_with_multiple_ranges.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable '_range'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_loops_with_multiple_ranges', 'obj': 'TestLoopsWithMultipleRanges.test_range_single_value', 'line': 19, 'column': 30, 'endLine': 19, 'endColumn': 36, 'path': 'data/generated/docs_python/loops_with_multiple_ranges/test_gpt_4o_2024_08_06_loops_with_multiple_ranges.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable '_range'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_loops_with_multiple_ranges', 'obj': 'TestLoopsWithMultipleRanges.test_range_no_step', 'line': 21, 'column': 4, 'endLine': 21, 'endColumn': 26, 'path': 'data/generated/docs_python/loops_with_multiple_ranges/test_gpt_4o_2024_08_06_loops_with_multiple_ranges.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_loops_with_multiple_ranges', 'obj': 'TestLoopsWithMultipleRanges.test_range_no_step', 'line': 22, 'column': 30, 'endLine': 22, 'endColumn': 36, 'path': 'data/generated/docs_python/loops_with_multiple_ranges/test_gpt_4o_2024_08_06_loops_with_multiple_ranges.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable '_range'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_loops_with_multiple_ranges', 'obj': 'TestLoopsWithMultipleRanges.test_range_no_step', 'line': 23, 'column': 30, 'endLine': 23, 'endColumn': 36, 'path': 'data/generated/docs_python/loops_with_multiple_ranges/test_gpt_4o_2024_08_06_loops_with_multiple_ranges.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable '_range'"", 'message-id': 'E0602'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_loops_with_multiple_ranges', 'obj': 'TestLoopsWithMultipleRanges.test_loop_logic', 'line': 25, 'column': 4, 'endLine': 25, 'endColumn': 23, 'path': 'data/generated/docs_python/loops_with_multiple_ranges/test_gpt_4o_2024_08_06_loops_with_multiple_ranges.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_loops_with_multiple_ranges', 'obj': 'TestLoopsWithMultipleRanges.test_loop_logic', 'line': 28, 'column': 23, 'endLine': 28, 'endColumn': 29, 'path': 'data/generated/docs_python/loops_with_multiple_ranges/test_gpt_4o_2024_08_06_loops_with_multiple_ranges.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable '_range'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_loops_with_multiple_ranges', 'obj': 'TestLoopsWithMultipleRanges.test_loop_logic', 'line': 28, 'column': 52, 'endLine': 28, 'endColumn': 58, 'path': 'data/generated/docs_python/loops_with_multiple_ranges/test_gpt_4o_2024_08_06_loops_with_multiple_ranges.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable '_range'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_loops_with_multiple_ranges', 'obj': 'TestLoopsWithMultipleRanges.test_loop_logic', 'line': 29, 'column': 23, 'endLine': 29, 'endColumn': 29, 'path': 'data/generated/docs_python/loops_with_multiple_ranges/test_gpt_4o_2024_08_06_loops_with_multiple_ranges.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable '_range'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_loops_with_multiple_ranges', 'obj': 'TestLoopsWithMultipleRanges.test_loop_logic', 'line': 29, 'column': 45, 'endLine': 29, 'endColumn': 51, 'path': 'data/generated/docs_python/loops_with_multiple_ranges/test_gpt_4o_2024_08_06_loops_with_multiple_ranges.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable '_range'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_loops_with_multiple_ranges', 'obj': 'TestLoopsWithMultipleRanges.test_loop_logic', 'line': 30, 'column': 23, 'endLine': 30, 'endColumn': 29, 'path': 'data/generated/docs_python/loops_with_multiple_ranges/test_gpt_4o_2024_08_06_loops_with_multiple_ranges.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable '_range'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_loops_with_multiple_ranges', 'obj': 'TestLoopsWithMultipleRanges.test_loop_logic', 'line': 30, 'column': 43, 'endLine': 30, 'endColumn': 49, 'path': 'data/generated/docs_python/loops_with_multiple_ranges/test_gpt_4o_2024_08_06_loops_with_multiple_ranges.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable '_range'"", 'message-id': 'E0602'}, {'type': 'error', 'module': 'test_gpt_4o_2024_08_06_loops_with_multiple_ranges', 'obj': 'TestLoopsWithMultipleRanges.test_loop_logic', 'line': 31, 'column': 23, 'endLine': 31, 'endColumn': 29, 'path': 'data/generated/docs_python/loops_with_multiple_ranges/test_gpt_4o_2024_08_06_loops_with_multiple_ranges.py', 'symbol': 'undefined-variable', 'message': ""Undefined variable '_range'"", 'message-id': 'E0602'}]",False
Loops/Wrong ranges,"Loops/Wrong ranges

You are encouraged to solve this task according to the task description, using any language you may know.
Some languages have syntax or function(s) to generate a range of numeric values from a start value, a stop value, and an increment.

The purpose of this task is to select the range syntax/function that would generate at least two increasing numbers when given a stop value more than the start value and a positive increment of less than half the difference.   You are then to use that same syntax/function but with different parameters; and show, here, what would happen.

Use these values if possible:



start
stop
increment
Comment


 -2
2
1
Normal


 -2
2
0
Zero increment


 -2
2
-1
Increments away from stop value


 -2
2
10
First increment is beyond stop value


2
-2
1
Start more than stop: positive increment


2
2
1
Start equal stop: positive increment


2
2
-1
Start equal stop: negative increment


2
2
0
Start equal stop: zero increment


0
0
0
Start equal stop equal zero: zero increment

Related tasks

   Loop over multiple arrays simultaneously
   Loops/Break
   Loops/Continue
   Loops/Do-while
   Loops/Downward for
   Loops/For
   Loops/For with a specified step
   Loops/Foreach
   Loops/Increment loop index within loop body
   Loops/Infinite
   Loops/N plus one half
   Loops/Nested
   Loops/While
   Loops/with multiple ranges
   Loops/Wrong ranges

",Python,"import re
from itertools import islice # To limit execution if it would generate huge values
# list(islice('ABCDEFG', 2)) --> ['A', 'B']
# list(islice('ABCDEFG', 4)) --> ['A', 'B', 'C', 'D']
 
 
data = '''
start 	stop 	increment 	Comment
-2 	2 	1 	Normal
-2 	2 	0 	Zero increment
-2 	2 	-1 	Increments away from stop value
-2 	2 	10 	First increment is beyond stop value
2 	-2 	1 	Start more than stop: positive increment
2 	2 	1 	Start equal stop: positive increment
2 	2 	-1 	Start equal stop: negative increment
2 	2 	0 	Start equal stop: zero increment
0 	0 	0 	Start equal stop equal zero: zero increment
'''
 
table = [re.split(r'\s\s+', line.strip()) for line in data.strip().split('\n')]
#%%
for _start, _stop, _increment, comment in table[1:]:
    start, stop, increment = [int(x) for x in (_start, _stop, _increment)]
    print(f'{comment.upper()}:\n  range({start}, {stop}, {increment})')
    values = None
    try:
        values = list(islice(range(start, stop, increment), 999))
    except ValueError as e:
        print('  !!ERROR!!', e)
    if values is not None:
        if len(values) < 22:
            print('    =', values)
        else:
            print('    =', str(values[:22])[:-1], '...')
 ",1219,35,"import unittest
from itertools import islice

class TestRangeFunction(unittest.TestCase):

    def test_normal(self):
        start, stop, increment = -2, 2, 1
        expected = [-2, -1, 0, 1]
        result = list(islice(range(start, stop, increment), 999))
        self.assertEqual(result, expected)

    def test_zero_increment(self):
        start, stop, increment = -2, 2, 0
        with self.assertRaises(ValueError):
            list(islice(range(start, stop, increment), 999))

    def test_increments_away_from_stop_value(self):
        start, stop, increment = -2, 2, -1
        expected = []
        result = list(islice(range(start, stop, increment), 999))
        self.assertEqual(result, expected)

    def test_first_increment_beyond_stop_value(self):
        start, stop, increment = -2, 2, 10
        expected = [-2]
        result = list(islice(range(start, stop, increment), 999))
        self.assertEqual(result, expected)

    def test_start_more_than_stop_positive_increment(self):
        start, stop, increment = 2, -2, 1
        expected = []
        result = list(islice(range(start, stop, increment), 999))
        self.assertEqual(result, expected)

    def test_start_equal_stop_positive_increment(self):
        start, stop, increment = 2, 2, 1
        expected = []
        result = list(islice(range(start, stop, increment), 999))
        self.assertEqual(result, expected)

    def test_start_equal_stop_negative_increment(self):
        start, stop, increment = 2, 2, -1
        expected = []
        result = list(islice(range(start, stop, increment), 999))
        self.assertEqual(result, expected)

    def test_start_equal_stop_zero_increment(self):
        start, stop, increment = 2, 2, 0
        with self.assertRaises(ValueError):
            list(islice(range(start, stop, increment), 999))

    def test_start_equal_stop_equal_zero_zero_increment(self):
        start, stop, increment = 0, 0, 0
        with self.assertRaises(ValueError):
            list(islice(range(start, stop, increment), 999))

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/loops_wrong_ranges/test_gpt_4o_2024_08_06_loops_wrong_ranges.py,CompileStatus.OK,0.0,73.02,65.43,0.19,,100.0,0.4371089935302734,11.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_loops_wrong_ranges', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/loops_wrong_ranges/test_gpt_4o_2024_08_06_loops_wrong_ranges.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_loops_wrong_ranges', 'obj': 'TestRangeFunction', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 23, 'path': 'data/generated/docs_python/loops_wrong_ranges/test_gpt_4o_2024_08_06_loops_wrong_ranges.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_loops_wrong_ranges', 'obj': 'TestRangeFunction.test_normal', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 19, 'path': 'data/generated/docs_python/loops_wrong_ranges/test_gpt_4o_2024_08_06_loops_wrong_ranges.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_loops_wrong_ranges', 'obj': 'TestRangeFunction.test_zero_increment', 'line': 12, 'column': 4, 'endLine': 12, 'endColumn': 27, 'path': 'data/generated/docs_python/loops_wrong_ranges/test_gpt_4o_2024_08_06_loops_wrong_ranges.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_loops_wrong_ranges', 'obj': 'TestRangeFunction.test_increments_away_from_stop_value', 'line': 17, 'column': 4, 'endLine': 17, 'endColumn': 44, 'path': 'data/generated/docs_python/loops_wrong_ranges/test_gpt_4o_2024_08_06_loops_wrong_ranges.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_loops_wrong_ranges', 'obj': 'TestRangeFunction.test_first_increment_beyond_stop_value', 'line': 23, 'column': 4, 'endLine': 23, 'endColumn': 46, 'path': 'data/generated/docs_python/loops_wrong_ranges/test_gpt_4o_2024_08_06_loops_wrong_ranges.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_loops_wrong_ranges', 'obj': 'TestRangeFunction.test_start_more_than_stop_positive_increment', 'line': 29, 'column': 4, 'endLine': 29, 'endColumn': 52, 'path': 'data/generated/docs_python/loops_wrong_ranges/test_gpt_4o_2024_08_06_loops_wrong_ranges.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_loops_wrong_ranges', 'obj': 'TestRangeFunction.test_start_equal_stop_positive_increment', 'line': 35, 'column': 4, 'endLine': 35, 'endColumn': 48, 'path': 'data/generated/docs_python/loops_wrong_ranges/test_gpt_4o_2024_08_06_loops_wrong_ranges.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_loops_wrong_ranges', 'obj': 'TestRangeFunction.test_start_equal_stop_negative_increment', 'line': 41, 'column': 4, 'endLine': 41, 'endColumn': 48, 'path': 'data/generated/docs_python/loops_wrong_ranges/test_gpt_4o_2024_08_06_loops_wrong_ranges.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_loops_wrong_ranges', 'obj': 'TestRangeFunction.test_start_equal_stop_zero_increment', 'line': 47, 'column': 4, 'endLine': 47, 'endColumn': 44, 'path': 'data/generated/docs_python/loops_wrong_ranges/test_gpt_4o_2024_08_06_loops_wrong_ranges.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_loops_wrong_ranges', 'obj': 'TestRangeFunction.test_start_equal_stop_equal_zero_zero_increment', 'line': 52, 'column': 4, 'endLine': 52, 'endColumn': 55, 'path': 'data/generated/docs_python/loops_wrong_ranges/test_gpt_4o_2024_08_06_loops_wrong_ranges.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Lucas-Lehmer test,"Lucas-Lehmer Test:

for



p


{\displaystyle p}

 an odd prime, the Mersenne number




2

p


−
1


{\displaystyle 2^{p}-1}

 is prime if and only if




2

p


−
1


{\displaystyle 2^{p}-1}

 divides



S
(
p
−
1
)


{\displaystyle S(p-1)}

 where



S
(
n
+
1
)
=
(
S
(
n
)

)

2


−
2


{\displaystyle S(n+1)=(S(n))^{2}-2}

, and



S
(
1
)
=
4


{\displaystyle S(1)=4}

.



Task

Calculate all Mersenne primes up to the implementation's
maximum precision, or the 47th Mersenne prime   (whichever comes first).



",Python," 
from sys import stdout
from math import sqrt, log
 
def is_prime ( p ):
  if p == 2: return True # Lucas-Lehmer test only works on odd primes
  elif p <= 1 or p % 2 == 0: return False
  else:
    for i in range(3, int(sqrt(p))+1, 2 ):
      if p % i == 0: return False
    return True
 
def is_mersenne_prime ( p ):
  if p == 2:
    return True
  else:
    m_p = ( 1 << p ) - 1
    s = 4
    for i in range(3, p+1):
      s = (s ** 2 - 2) % m_p
    return s == 0
 
precision = 20000   # maximum requested number of decimal places of 2 ** MP-1 #
long_bits_width = precision * log(10, 2)
upb_prime = int( long_bits_width - 1 ) / 2    # no unsigned #
upb_count = 45      # find 45 mprimes if int was given enough bits #
 
print ("" Finding Mersenne primes in M[2..%d]:""%upb_prime)
 
count=0
for p in range(2, int(upb_prime+1)):
  if is_prime(p) and is_mersenne_prime(p):
    print(""M%d""%p),
    stdout.flush()
    count += 1
  if count >= upb_count: break
print
 ",964,38,"import unittest
from lucas_lehmer_test import is_prime, is_mersenne_prime

class TestLucasLehmer(unittest.TestCase):

    def test_is_prime(self):
        # Test known primes
        self.assertTrue(is_prime(2))
        self.assertTrue(is_prime(3))
        self.assertTrue(is_prime(5))
        self.assertTrue(is_prime(7))
        self.assertTrue(is_prime(11))

        # Test known non-primes
        self.assertFalse(is_prime(0))
        self.assertFalse(is_prime(1))
        self.assertFalse(is_prime(4))
        self.assertFalse(is_prime(6))
        self.assertFalse(is_prime(9))
        self.assertFalse(is_prime(15))

        # Test negative numbers
        self.assertFalse(is_prime(-1))
        self.assertFalse(is_prime(-3))
        self.assertFalse(is_prime(-5))

    def test_is_mersenne_prime(self):
        # Test known Mersenne primes
        self.assertTrue(is_mersenne_prime(2))  # Mersenne prime for p=2 is 3
        self.assertTrue(is_mersenne_prime(3))  # Mersenne prime for p=3 is 7
        self.assertTrue(is_mersenne_prime(5))  # Mersenne prime for p=5 is 31
        self.assertTrue(is_mersenne_prime(7))  # Mersenne prime for p=7 is 127

        # Test known non-Mersenne primes
        self.assertFalse(is_mersenne_prime(11))  # Mersenne number for p=11 is not prime
        self.assertFalse(is_mersenne_prime(13))  # Mersenne number for p=13 is not prime

        # Test non-prime p values
        self.assertFalse(is_mersenne_prime(4))
        self.assertFalse(is_mersenne_prime(6))
        self.assertFalse(is_mersenne_prime(8))

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/lucas_lehmer_test/test_gpt_4o_2024_08_06_lucas_lehmer_test.py,CompileStatus.OK,,,,0.77,2.56,,,8.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lucas_lehmer_test', 'obj': '', 'line': 13, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/lucas_lehmer_test/test_gpt_4o_2024_08_06_lucas_lehmer_test.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lucas_lehmer_test', 'obj': '', 'line': 21, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/lucas_lehmer_test/test_gpt_4o_2024_08_06_lucas_lehmer_test.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lucas_lehmer_test', 'obj': '', 'line': 33, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/lucas_lehmer_test/test_gpt_4o_2024_08_06_lucas_lehmer_test.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lucas_lehmer_test', 'obj': '', 'line': 37, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/lucas_lehmer_test/test_gpt_4o_2024_08_06_lucas_lehmer_test.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lucas_lehmer_test', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/lucas_lehmer_test/test_gpt_4o_2024_08_06_lucas_lehmer_test.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lucas_lehmer_test', 'obj': 'TestLucasLehmer', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 21, 'path': 'data/generated/docs_python/lucas_lehmer_test/test_gpt_4o_2024_08_06_lucas_lehmer_test.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lucas_lehmer_test', 'obj': 'TestLucasLehmer.test_is_prime', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 21, 'path': 'data/generated/docs_python/lucas_lehmer_test/test_gpt_4o_2024_08_06_lucas_lehmer_test.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lucas_lehmer_test', 'obj': 'TestLucasLehmer.test_is_mersenne_prime', 'line': 27, 'column': 4, 'endLine': 27, 'endColumn': 30, 'path': 'data/generated/docs_python/lucas_lehmer_test/test_gpt_4o_2024_08_06_lucas_lehmer_test.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",True
Lucky and even lucky numbers,"Note that in the following explanation list indices are assumed to start at one.

Definition of lucky numbers
Lucky numbers are positive integers that are formed by:

 Form a list of all the positive odd integers > 0




1
,
3
,
5
,
7
,
9
,
11
,
13
,
15
,
17
,
19
,
21
,
23
,
25
,
27
,
29
,
31
,
33
,
35
,
37
,
39...


{\displaystyle 1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39...}


 Return the first number from the list (which is 1).
 (Loop begins here)
 Note then return the second number from the list (which is 3).
 Discard every third, (as noted), number from the list to form the new list




1
,
3
,
7
,
9
,
13
,
15
,
19
,
21
,
25
,
27
,
31
,
33
,
37
,
39
,
43
,
45
,
49
,
51
,
55
,
57...


{\displaystyle 1,3,7,9,13,15,19,21,25,27,31,33,37,39,43,45,49,51,55,57...}


 (Expanding the loop a few more times...)
 Note then return the third number from the list (which is 7).
 Discard every 7th, (as noted), number from the list to form the new list




1
,
3
,
7
,
9
,
13
,
15
,
21
,
25
,
27
,
31
,
33
,
37
,
43
,
45
,
49
,
51
,
55
,
57
,
63
,
67...


{\displaystyle 1,3,7,9,13,15,21,25,27,31,33,37,43,45,49,51,55,57,63,67...}


 Note then return the 4th number from the list (which is 9).
 Discard every 9th, (as noted), number from the list to form the new list




1
,
3
,
7
,
9
,
13
,
15
,
21
,
25
,
31
,
33
,
37
,
43
,
45
,
49
,
51
,
55
,
63
,
67
,
69
,
73...


{\displaystyle 1,3,7,9,13,15,21,25,31,33,37,43,45,49,51,55,63,67,69,73...}


 Take the 5th, i.e. 13. Remove every 13th.
 Take the 6th, i.e. 15. Remove every 15th.
 Take the 7th, i.e. 21. Remove every 21th.
 Take the 8th, i.e. 25. Remove every 25th.
 (Rule for the loop)
 Note the



n


{\displaystyle n}

th, which is



m


{\displaystyle m}

.
 Remove every



m


{\displaystyle m}

th.
 Increment



n


{\displaystyle n}

.
Definition of even lucky numbers
This follows the same rules as the definition of lucky numbers above except for the very first step:

 Form a list of all the positive even integers > 0




2
,
4
,
6
,
8
,
10
,
12
,
14
,
16
,
18
,
20
,
22
,
24
,
26
,
28
,
30
,
32
,
34
,
36
,
38
,
40...


{\displaystyle 2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40...}


 Return the first number from the list (which is 2).
 (Loop begins here)
 Note then return the second number from the list (which is 4).
 Discard every 4th, (as noted), number from the list to form the new list




2
,
4
,
6
,
10
,
12
,
14
,
18
,
20
,
22
,
26
,
28
,
30
,
34
,
36
,
38
,
42
,
44
,
46
,
50
,
52...


{\displaystyle 2,4,6,10,12,14,18,20,22,26,28,30,34,36,38,42,44,46,50,52...}


 (Expanding the loop a few more times...)
 Note then return the third number from the list (which is 6).
 Discard every 6th, (as noted), number from the list to form the new list




2
,
4
,
6
,
10
,
12
,
18
,
20
,
22
,
26
,
28
,
34
,
36
,
38
,
42
,
44
,
50
,
52
,
54
,
58
,
60...


{\displaystyle 2,4,6,10,12,18,20,22,26,28,34,36,38,42,44,50,52,54,58,60...}


 Take the 4th, i.e. 10. Remove every 10th.
 Take the 5th, i.e. 12. Remove every 12th.
 (Rule for the loop)
 Note the



n


{\displaystyle n}

th, which is



m


{\displaystyle m}

.
 Remove every



m


{\displaystyle m}

th.
 Increment



n


{\displaystyle n}

.
Task requirements
 Write one or two subroutines (functions) to generate lucky numbers and even lucky numbers
 Write a command-line interface to allow selection of which kind of numbers and which number(s). Since input is from the command line, tests should be made for the common errors:
 missing arguments
 too many arguments
 number (or numbers) aren't legal
 misspelled argument (lucky or evenLucky)
 The command line handling should:
 support mixed case handling of the (non-numeric) arguments
 support printing a particular number
 support printing a range of numbers by their index
 support printing a range of numbers by their values
 The resulting list of numbers should be printed on a single line.

The program should support the arguments:

                             what is displayed  (on a single line)
       argument(s)              (optional verbiage is encouraged)
  ╔═══════════════════╦════════════════════════════════════════════════════╗
  ║  j                ║  Jth       lucky number                            ║
  ║  j  ,      lucky  ║  Jth       lucky number                            ║
  ║  j  ,  evenLucky  ║  Jth  even lucky number                            ║
  ║                   ║                                                    ║
  ║  j  k             ║  Jth  through  Kth (inclusive)       lucky numbers ║
  ║  j  k      lucky  ║  Jth  through  Kth (inclusive)       lucky numbers ║
  ║  j  k  evenLucky  ║  Jth  through  Kth (inclusive)  even lucky numbers ║
  ║                   ║                                                    ║
  ║  j -k             ║  all       lucky numbers in the range  j ──► |k|   ║
  ║  j -k      lucky  ║  all       lucky numbers in the range  j ──► |k|   ║
  ║  j -k  evenLucky  ║  all  even lucky numbers in the range  j ──► |k|   ║
  ╚═══════════════════╩════════════════════════════════════════════════════╝
                           where    |k|    is the absolute value of   k

Demonstrate the program by:

 showing the first twenty lucky numbers
 showing the first twenty even lucky numbers
 showing all lucky numbers between 6,000 and 6,100 (inclusive)
 showing all even lucky numbers in the same range as above
 showing the 10,000th lucky number (extra credit)
 showing the 10,000th even lucky number (extra credit)
See also

 This task is related to the Sieve of Eratosthenes task.
 OEIS Wiki Lucky numbers.
 Sequence A000959 lucky numbers on The On-Line Encyclopedia of Integer Sequences.
 Sequence A045954 even lucky numbers or ELN on The On-Line Encyclopedia of Integer Sequences.
 Entry lucky numbers on The Eric Weisstein's World of Mathematics.

",Python,"from __future__ import print_function
 
def lgen(even=False, nmax=1000000):
    start = 2 if even else 1
    n, lst = 1, list(range(start, nmax + 1, 2))
    lenlst = len(lst)
    yield lst[0]
    while n < lenlst and lst[n] < lenlst:
        yield lst[n]
        n, lst = n + 1, [j for i,j in enumerate(lst, 1) if i % lst[n]]
        lenlst = len(lst)
    # drain
    for i in lst[n:]:
        yield i",401,14,"import unittest
from subprocess import run, PIPE

class TestLuckyNumbersCLI(unittest.TestCase):

    def run_cli(self, *args):
        result = run(['python3', 'lucky_and_even_lucky_numbers.py'] + list(args), stdout=PIPE, stderr=PIPE)
        return result.stdout.decode('utf-8').strip(), result.stderr.decode('utf-8').strip()

    def test_missing_arguments(self):
        stdout, stderr = self.run_cli()
        self.assertIn(""missing arguments"", stderr.lower())

    def test_too_many_arguments(self):
        stdout, stderr = self.run_cli('1', '2', '3', '4', '5')
        self.assertIn(""too many arguments"", stderr.lower())

    def test_illegal_number(self):
        stdout, stderr = self.run_cli('a')
        self.assertIn(""aren't legal"", stderr.lower())

    def test_misspelled_argument(self):
        stdout, stderr = self.run_cli('1', 'evnLucky')
        self.assertIn(""misspelled argument"", stderr.lower())

    def test_mixed_case_handling(self):
        stdout, stderr = self.run_cli('1', 'LUCKY')
        self.assertIn(""1st lucky number"", stdout.lower())

    def test_single_lucky_number(self):
        stdout, stderr = self.run_cli('1', 'lucky')
        self.assertIn(""1st lucky number"", stdout.lower())

    def test_single_even_lucky_number(self):
        stdout, stderr = self.run_cli('1', 'evenLucky')
        self.assertIn(""1st even lucky number"", stdout.lower())

    def test_range_lucky_numbers(self):
        stdout, stderr = self.run_cli('1', '5', 'lucky')
        self.assertIn(""1st through 5th lucky numbers"", stdout.lower())

    def test_range_even_lucky_numbers(self):
        stdout, stderr = self.run_cli('1', '5', 'evenLucky')
        self.assertIn(""1st through 5th even lucky numbers"", stdout.lower())

    def test_value_range_lucky_numbers(self):
        stdout, stderr = self.run_cli('6000', '-6100', 'lucky')
        self.assertIn(""all lucky numbers in the range 6000 ──► 6100"", stdout.lower())

    def test_value_range_even_lucky_numbers(self):
        stdout, stderr = self.run_cli('6000', '-6100', 'evenLucky')
        self.assertIn(""all even lucky numbers in the range 6000 ──► 6100"", stdout.lower())

    def test_10000th_lucky_number(self):
        stdout, stderr = self.run_cli('10000', 'lucky')
        self.assertIn(""10000th lucky number"", stdout.lower())

    def test_10000th_even_lucky_number(self):
        stdout, stderr = self.run_cli('10000', 'evenLucky')
        self.assertIn(""10000th even lucky number"", stdout.lower())

    def test_first_twenty_lucky_numbers(self):
        stdout, stderr = self.run_cli('1', '20', 'lucky')
        self.assertIn(""1st through 20th lucky numbers"", stdout.lower())

    def test_first_twenty_even_lucky_numbers(self):
        stdout, stderr = self.run_cli('1', '20', 'evenLucky')
        self.assertIn(""1st through 20th even lucky numbers"", stdout.lower())

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/lucky_and_even_lucky_numbers/test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers.py,CompileStatus.OK,0.0,83.08,75.34,0.28,2.14,,4.048497915267944,35.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers', 'obj': '', 'line': 7, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/lucky_and_even_lucky_numbers/test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers.py', 'symbol': 'line-too-long', 'message': 'Line too long (107/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/lucky_and_even_lucky_numbers/test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers', 'obj': 'TestLuckyNumbersCLI', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 25, 'path': 'data/generated/docs_python/lucky_and_even_lucky_numbers/test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers', 'obj': 'TestLuckyNumbersCLI.run_cli', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 15, 'path': 'data/generated/docs_python/lucky_and_even_lucky_numbers/test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers', 'obj': 'TestLuckyNumbersCLI.run_cli', 'line': 7, 'column': 17, 'endLine': 7, 'endColumn': 107, 'path': 'data/generated/docs_python/lucky_and_even_lucky_numbers/test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers.py', 'symbol': 'subprocess-run-check', 'message': ""'subprocess.run' used without explicitly defining the value for 'check'."", 'message-id': 'W1510'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers', 'obj': 'TestLuckyNumbersCLI.test_missing_arguments', 'line': 10, 'column': 4, 'endLine': 10, 'endColumn': 30, 'path': 'data/generated/docs_python/lucky_and_even_lucky_numbers/test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers', 'obj': 'TestLuckyNumbersCLI.test_missing_arguments', 'line': 11, 'column': 8, 'endLine': 11, 'endColumn': 14, 'path': 'data/generated/docs_python/lucky_and_even_lucky_numbers/test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers.py', 'symbol': 'unused-variable', 'message': ""Unused variable 'stdout'"", 'message-id': 'W0612'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers', 'obj': 'TestLuckyNumbersCLI.test_too_many_arguments', 'line': 14, 'column': 4, 'endLine': 14, 'endColumn': 31, 'path': 'data/generated/docs_python/lucky_and_even_lucky_numbers/test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers', 'obj': 'TestLuckyNumbersCLI.test_too_many_arguments', 'line': 15, 'column': 8, 'endLine': 15, 'endColumn': 14, 'path': 'data/generated/docs_python/lucky_and_even_lucky_numbers/test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers.py', 'symbol': 'unused-variable', 'message': ""Unused variable 'stdout'"", 'message-id': 'W0612'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers', 'obj': 'TestLuckyNumbersCLI.test_illegal_number', 'line': 18, 'column': 4, 'endLine': 18, 'endColumn': 27, 'path': 'data/generated/docs_python/lucky_and_even_lucky_numbers/test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers', 'obj': 'TestLuckyNumbersCLI.test_illegal_number', 'line': 19, 'column': 8, 'endLine': 19, 'endColumn': 14, 'path': 'data/generated/docs_python/lucky_and_even_lucky_numbers/test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers.py', 'symbol': 'unused-variable', 'message': ""Unused variable 'stdout'"", 'message-id': 'W0612'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers', 'obj': 'TestLuckyNumbersCLI.test_misspelled_argument', 'line': 22, 'column': 4, 'endLine': 22, 'endColumn': 32, 'path': 'data/generated/docs_python/lucky_and_even_lucky_numbers/test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers', 'obj': 'TestLuckyNumbersCLI.test_misspelled_argument', 'line': 23, 'column': 8, 'endLine': 23, 'endColumn': 14, 'path': 'data/generated/docs_python/lucky_and_even_lucky_numbers/test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers.py', 'symbol': 'unused-variable', 'message': ""Unused variable 'stdout'"", 'message-id': 'W0612'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers', 'obj': 'TestLuckyNumbersCLI.test_mixed_case_handling', 'line': 26, 'column': 4, 'endLine': 26, 'endColumn': 32, 'path': 'data/generated/docs_python/lucky_and_even_lucky_numbers/test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers', 'obj': 'TestLuckyNumbersCLI.test_mixed_case_handling', 'line': 27, 'column': 16, 'endLine': 27, 'endColumn': 22, 'path': 'data/generated/docs_python/lucky_and_even_lucky_numbers/test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers.py', 'symbol': 'unused-variable', 'message': ""Unused variable 'stderr'"", 'message-id': 'W0612'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers', 'obj': 'TestLuckyNumbersCLI.test_single_lucky_number', 'line': 30, 'column': 4, 'endLine': 30, 'endColumn': 32, 'path': 'data/generated/docs_python/lucky_and_even_lucky_numbers/test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers', 'obj': 'TestLuckyNumbersCLI.test_single_lucky_number', 'line': 31, 'column': 16, 'endLine': 31, 'endColumn': 22, 'path': 'data/generated/docs_python/lucky_and_even_lucky_numbers/test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers.py', 'symbol': 'unused-variable', 'message': ""Unused variable 'stderr'"", 'message-id': 'W0612'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers', 'obj': 'TestLuckyNumbersCLI.test_single_even_lucky_number', 'line': 34, 'column': 4, 'endLine': 34, 'endColumn': 37, 'path': 'data/generated/docs_python/lucky_and_even_lucky_numbers/test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers', 'obj': 'TestLuckyNumbersCLI.test_single_even_lucky_number', 'line': 35, 'column': 16, 'endLine': 35, 'endColumn': 22, 'path': 'data/generated/docs_python/lucky_and_even_lucky_numbers/test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers.py', 'symbol': 'unused-variable', 'message': ""Unused variable 'stderr'"", 'message-id': 'W0612'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers', 'obj': 'TestLuckyNumbersCLI.test_range_lucky_numbers', 'line': 38, 'column': 4, 'endLine': 38, 'endColumn': 32, 'path': 'data/generated/docs_python/lucky_and_even_lucky_numbers/test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers', 'obj': 'TestLuckyNumbersCLI.test_range_lucky_numbers', 'line': 39, 'column': 16, 'endLine': 39, 'endColumn': 22, 'path': 'data/generated/docs_python/lucky_and_even_lucky_numbers/test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers.py', 'symbol': 'unused-variable', 'message': ""Unused variable 'stderr'"", 'message-id': 'W0612'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers', 'obj': 'TestLuckyNumbersCLI.test_range_even_lucky_numbers', 'line': 42, 'column': 4, 'endLine': 42, 'endColumn': 37, 'path': 'data/generated/docs_python/lucky_and_even_lucky_numbers/test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers', 'obj': 'TestLuckyNumbersCLI.test_range_even_lucky_numbers', 'line': 43, 'column': 16, 'endLine': 43, 'endColumn': 22, 'path': 'data/generated/docs_python/lucky_and_even_lucky_numbers/test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers.py', 'symbol': 'unused-variable', 'message': ""Unused variable 'stderr'"", 'message-id': 'W0612'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers', 'obj': 'TestLuckyNumbersCLI.test_value_range_lucky_numbers', 'line': 46, 'column': 4, 'endLine': 46, 'endColumn': 38, 'path': 'data/generated/docs_python/lucky_and_even_lucky_numbers/test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers', 'obj': 'TestLuckyNumbersCLI.test_value_range_lucky_numbers', 'line': 47, 'column': 16, 'endLine': 47, 'endColumn': 22, 'path': 'data/generated/docs_python/lucky_and_even_lucky_numbers/test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers.py', 'symbol': 'unused-variable', 'message': ""Unused variable 'stderr'"", 'message-id': 'W0612'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers', 'obj': 'TestLuckyNumbersCLI.test_value_range_even_lucky_numbers', 'line': 50, 'column': 4, 'endLine': 50, 'endColumn': 43, 'path': 'data/generated/docs_python/lucky_and_even_lucky_numbers/test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers', 'obj': 'TestLuckyNumbersCLI.test_value_range_even_lucky_numbers', 'line': 51, 'column': 16, 'endLine': 51, 'endColumn': 22, 'path': 'data/generated/docs_python/lucky_and_even_lucky_numbers/test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers.py', 'symbol': 'unused-variable', 'message': ""Unused variable 'stderr'"", 'message-id': 'W0612'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers', 'obj': 'TestLuckyNumbersCLI.test_10000th_lucky_number', 'line': 54, 'column': 4, 'endLine': 54, 'endColumn': 33, 'path': 'data/generated/docs_python/lucky_and_even_lucky_numbers/test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers', 'obj': 'TestLuckyNumbersCLI.test_10000th_lucky_number', 'line': 55, 'column': 16, 'endLine': 55, 'endColumn': 22, 'path': 'data/generated/docs_python/lucky_and_even_lucky_numbers/test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers.py', 'symbol': 'unused-variable', 'message': ""Unused variable 'stderr'"", 'message-id': 'W0612'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers', 'obj': 'TestLuckyNumbersCLI.test_10000th_even_lucky_number', 'line': 58, 'column': 4, 'endLine': 58, 'endColumn': 38, 'path': 'data/generated/docs_python/lucky_and_even_lucky_numbers/test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers', 'obj': 'TestLuckyNumbersCLI.test_10000th_even_lucky_number', 'line': 59, 'column': 16, 'endLine': 59, 'endColumn': 22, 'path': 'data/generated/docs_python/lucky_and_even_lucky_numbers/test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers.py', 'symbol': 'unused-variable', 'message': ""Unused variable 'stderr'"", 'message-id': 'W0612'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers', 'obj': 'TestLuckyNumbersCLI.test_first_twenty_lucky_numbers', 'line': 62, 'column': 4, 'endLine': 62, 'endColumn': 39, 'path': 'data/generated/docs_python/lucky_and_even_lucky_numbers/test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers', 'obj': 'TestLuckyNumbersCLI.test_first_twenty_lucky_numbers', 'line': 63, 'column': 16, 'endLine': 63, 'endColumn': 22, 'path': 'data/generated/docs_python/lucky_and_even_lucky_numbers/test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers.py', 'symbol': 'unused-variable', 'message': ""Unused variable 'stderr'"", 'message-id': 'W0612'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers', 'obj': 'TestLuckyNumbersCLI.test_first_twenty_even_lucky_numbers', 'line': 66, 'column': 4, 'endLine': 66, 'endColumn': 44, 'path': 'data/generated/docs_python/lucky_and_even_lucky_numbers/test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers', 'obj': 'TestLuckyNumbersCLI.test_first_twenty_even_lucky_numbers', 'line': 67, 'column': 16, 'endLine': 67, 'endColumn': 22, 'path': 'data/generated/docs_python/lucky_and_even_lucky_numbers/test_gpt_4o_2024_08_06_lucky_and_even_lucky_numbers.py', 'symbol': 'unused-variable', 'message': ""Unused variable 'stderr'"", 'message-id': 'W0612'}]",False
Ludic numbers,"Ludic numbers   are related to prime numbers as they are generated by a sieve quite like the Sieve of Eratosthenes is used to generate prime numbers.

The first ludic number is   1.

To generate succeeding ludic numbers create an array of increasing integers starting from   2.

2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 ...
(Loop)

 Take the first member of the resultant array as the next ludic number   2.
 Remove every   2nd   indexed item from the array (including the first).
2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 ...
 (Unrolling a few loops...)
 Take the first member of the resultant array as the next ludic number   3.
 Remove every   3rd   indexed item from the array (including the first).
3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 ...
 Take the first member of the resultant array as the next ludic number   5.
 Remove every   5th   indexed item from the array (including the first).
5 7 11 13 17 19 23 25 29 31 35 37 41 43 47 49 53 55 59 61 65 67 71 73 77 ...
 Take the first member of the resultant array as the next ludic number   7.
 Remove every   7th   indexed item from the array (including the first).
7 11 13 17 23 25 29 31 37 41 43 47 53 55 59 61 67 71 73 77 83 85 89 91 97 ...
  ...
 Take the first member of the current array as the next ludic number   L.
 Remove every   Lth   indexed item from the array (including the first).
  ...


Task

 Generate and show here the first 25 ludic numbers.
 How many ludic numbers are there less than or equal to 1000?
 Show the 2000..2005th ludic numbers.


Stretch goal

Show all triplets of ludic numbers < 250.

 A triplet is any three numbers    



x
,


{\displaystyle x,}

  



x
+
2
,


{\displaystyle x+2,}

  



x
+
6


{\displaystyle x+6}

      where all three numbers are also ludic numbers.

",Python,"def ludic(nmax=100000):
    yield 1
    lst = list(range(2, nmax + 1))
    while lst:
        yield lst[0]
        del lst[::lst[0]]
 
ludics = [l for l in ludic()]
 
print('First 25 ludic primes:')
print(ludics[:25])
print(""\nThere are %i ludic numbers <= 1000""
      % sum(1 for l in ludics if l <= 1000))
print(""\n2000'th..2005'th ludic primes:"")
print(ludics[2000-1: 2005])
 
n = 250
triplets = [(x, x+2, x+6)
            for x in ludics
            if x+6 < n and x+2 in ludics and x+6 in ludics]
print('\nThere are %i triplets less than %i:\n  %r'
      % (len(triplets), n, triplets))",592,22,"import unittest
from ludic_numbers import ludic

class TestLudicNumbers(unittest.TestCase):

    def setUp(self):
        # Generate ludic numbers up to a reasonable limit for testing
        self.ludics = [l for l in ludic(10000)]

    def test_first_25_ludic_numbers(self):
        expected_first_25 = [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89]
        self.assertEqual(self.ludics[:25], expected_first_25)

    def test_ludic_numbers_less_than_1000(self):
        count_less_than_1000 = sum(1 for l in self.ludics if l <= 1000)
        self.assertEqual(count_less_than_1000, 370)

    def test_2000th_to_2005th_ludic_numbers(self):
        expected_2000_to_2005 = [14251, 14267, 14269, 14273, 14281, 14287]
        self.assertEqual(self.ludics[1999:2005], expected_2000_to_2005)

    def test_triplets_less_than_250(self):
        n = 250
        triplets = [(x, x+2, x+6)
                    for x in self.ludics
                    if x+6 < n and x+2 in self.ludics and x+6 in self.ludics]
        expected_triplets = [(1, 3, 7), (37, 39, 43), (47, 49, 53), (67, 69, 73), (79, 81, 85), (97, 99, 103), (127, 129, 133), (157, 159, 163), (167, 169, 173), (197, 199, 203), (223, 225, 229)]
        self.assertEqual(triplets, expected_triplets)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/ludic_numbers/test_gpt_4o_2024_08_06_ludic_numbers.py,CompileStatus.OK,0.0,97.22,96.15,0.17,2.0,,0.5179178714752197,9.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_ludic_numbers', 'obj': '', 'line': 11, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/ludic_numbers/test_gpt_4o_2024_08_06_ludic_numbers.py', 'symbol': 'line-too-long', 'message': 'Line too long (123/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_ludic_numbers', 'obj': '', 'line': 27, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/ludic_numbers/test_gpt_4o_2024_08_06_ludic_numbers.py', 'symbol': 'line-too-long', 'message': 'Line too long (195/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_ludic_numbers', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/ludic_numbers/test_gpt_4o_2024_08_06_ludic_numbers.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_ludic_numbers', 'obj': 'TestLudicNumbers', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 22, 'path': 'data/generated/docs_python/ludic_numbers/test_gpt_4o_2024_08_06_ludic_numbers.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'refactor', 'module': 'test_gpt_4o_2024_08_06_ludic_numbers', 'obj': 'TestLudicNumbers.setUp', 'line': 8, 'column': 22, 'endLine': 8, 'endColumn': 47, 'path': 'data/generated/docs_python/ludic_numbers/test_gpt_4o_2024_08_06_ludic_numbers.py', 'symbol': 'unnecessary-comprehension', 'message': 'Unnecessary use of a comprehension, use list(ludic(10000)) instead.', 'message-id': 'R1721'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_ludic_numbers', 'obj': 'TestLudicNumbers.test_first_25_ludic_numbers', 'line': 10, 'column': 4, 'endLine': 10, 'endColumn': 35, 'path': 'data/generated/docs_python/ludic_numbers/test_gpt_4o_2024_08_06_ludic_numbers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_ludic_numbers', 'obj': 'TestLudicNumbers.test_ludic_numbers_less_than_1000', 'line': 14, 'column': 4, 'endLine': 14, 'endColumn': 41, 'path': 'data/generated/docs_python/ludic_numbers/test_gpt_4o_2024_08_06_ludic_numbers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_ludic_numbers', 'obj': 'TestLudicNumbers.test_2000th_to_2005th_ludic_numbers', 'line': 18, 'column': 4, 'endLine': 18, 'endColumn': 43, 'path': 'data/generated/docs_python/ludic_numbers/test_gpt_4o_2024_08_06_ludic_numbers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_ludic_numbers', 'obj': 'TestLudicNumbers.test_triplets_less_than_250', 'line': 22, 'column': 4, 'endLine': 22, 'endColumn': 35, 'path': 'data/generated/docs_python/ludic_numbers/test_gpt_4o_2024_08_06_ludic_numbers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
Lychrel numbers,"   Take an integer n, greater than zero.
   Form the next n of its series by reversing the digits of the current n and adding the result to the current n.
   Stop when n becomes palindromic - i.e. the digits of n in reverse order == n.


The above recurrence relation when applied to most starting numbers n = 1, 2, ... terminates in a palindrome quite quickly.



Example

If n0 = 12 we get

       12
       12 +  21 =  33,   a palindrome!

And if n0 = 55 we get

       55
       55 +  55 = 110
      110 + 011 = 121,   a palindrome!

Notice that the check for a palindrome happens   after   an addition.



Some starting numbers seem to go on forever; the recurrence relation for 196 has been calculated for millions of repetitions forming numbers with millions of digits, without forming a palindrome.

These numbers that do not end in a palindrome are called Lychrel numbers.

For the purposes of this task a Lychrel number is any starting number that does not form a palindrome within 500 (or more) iterations.



Seed and related Lychrel numbers

Any integer produced in the sequence of a Lychrel number is also a Lychrel number.

In general, any sequence from one Lychrel number might converge to join the sequence from a prior Lychrel number candidate; for example the sequences for the numbers 196 and then 689 begin:

        196
        196 +    691 =   887
        887 +    788 =  1675
       1675 +   5761 =  7436
       7436 +   6347 = 13783
      13783 +  38731 = 52514
      52514 +  41525 = 94039
       ...


        689
        689 +    986 =  1675
       1675 +   5761 =  7436
       ...

So we see that the sequence starting with 689 converges to, and continues with the same numbers as that for 196.

Because of this we can further split the Lychrel numbers into true Seed Lychrel number candidates, and Related numbers that produce no palindromes but have integers in their sequence seen as part of the sequence generated from a lower Lychrel number.



Task

   Find the number of seed Lychrel number candidates and related numbers for n in the range 1..10000 inclusive. (With that iteration limit of 500).
   Print the number of seed Lychrels found; the actual seed Lychrels; and just the number of relateds found.
   Print any seed Lychrel or related number that is itself a palindrome.


Show all output here.



References

   What's special about 196? Numberphile video.
   A023108 Positive integers which apparently never result in a palindrome under repeated applications of the function f(x) = x + (x with digits reversed).
   Status of the 196 conjecture? Mathoverflow.

",Python,"from __future__ import print_function
 
def add_reverse(num, max_iter=1000):
    i, nums = 0, {num}
    while True:
        i, num = i+1, num + reverse_int(num)
        nums.add(num)
        if reverse_int(num) == num or i >= max_iter:
            break
    return nums
 
#@functools.lru_cache(maxsize=2**20)
def reverse_int(num):
    return int(str(num)[::-1])
 
def split_roots_from_relateds(roots_and_relateds):
    roots = roots_and_relateds[::]
    i = 1
    while i < len(roots):
        this = roots[i]
        if any(this.intersection(prev) for prev in roots[:i]):
            del roots[i]
        else:
            i += 1
    root = [min(each_set) for each_set in roots]
    related = [min(each_set) for each_set in roots_and_relateds]
    related = [n for n in related if n not in root]
    return root, related
 
def find_lychrel(maxn, max_reversions):
    'Lychrel number generator'
    series = [add_reverse(n, max_reversions*2) for n in range(1, maxn + 1)]
    roots_and_relateds = [s for s in series if len(s) > max_reversions]
    return split_roots_from_relateds(roots_and_relateds)
 
 
if __name__ == '__main__':
    maxn, reversion_limit = 10000, 500
    print(""Calculations using n = 1..%i and limiting each search to 2*%i reverse-digits-and-adds""
          % (maxn, reversion_limit))
    lychrel, l_related = find_lychrel(maxn, reversion_limit)
    print('  Number of Lychrel numbers:', len(lychrel))
    print('    Lychrel numbers:', ', '.join(str(n) for n in lychrel))
    print('  Number of Lychrel related:', len(l_related))
    #print('    Lychrel related:', ', '.join(str(n) for n in l_related))
    pals = [x for x in lychrel + l_related  if x == reverse_int(x)]
    print('  Number of Lychrel palindromes:', len(pals))
    print('    Lychrel palindromes:', ', '.join(str(n) for n in pals))",1818,48,"import unittest
from lychrel_numbers import add_reverse, reverse_int, split_roots_from_relateds, find_lychrel

class TestLychrelNumbers(unittest.TestCase):

    def test_reverse_int(self):
        self.assertEqual(reverse_int(123), 321)
        self.assertEqual(reverse_int(1), 1)
        self.assertEqual(reverse_int(100), 1)
        self.assertEqual(reverse_int(0), 0)

    def test_add_reverse_palindrome(self):
        # Test with a number that quickly becomes a palindrome
        result = add_reverse(12, max_iter=10)
        self.assertIn(33, result)
        self.assertNotIn(34, result)

    def test_add_reverse_lychrel_candidate(self):
        # Test with a known Lychrel candidate
        result = add_reverse(196, max_iter=500)
        self.assertGreater(len(result), 500)

    def test_split_roots_from_relateds(self):
        # Test with a simple case
        roots_and_relateds = [{196, 887, 1675}, {689, 1675}]
        roots, related = split_roots_from_relateds(roots_and_relateds)
        self.assertEqual(roots, [196])
        self.assertEqual(related, [689])

    def test_find_lychrel(self):
        # Test with a small range to ensure it finds known Lychrel numbers
        lychrel, l_related = find_lychrel(100, 10)
        self.assertIn(196, lychrel)
        self.assertIn(689, l_related)

    def test_lychrel_palindromes(self):
        # Test to find palindromic Lychrel numbers
        lychrel, l_related = find_lychrel(10000, 500)
        pals = [x for x in lychrel + l_related if x == reverse_int(x)]
        self.assertTrue(all(x == reverse_int(x) for x in pals))

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/lychrel_numbers/test_gpt_4o_2024_08_06_lychrel_numbers.py,CompileStatus.OK,0.0,83.58,80.61,0.4,0.71,83.33,2.0702121257781982,8.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lychrel_numbers', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/lychrel_numbers/test_gpt_4o_2024_08_06_lychrel_numbers.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lychrel_numbers', 'obj': 'TestLychrelNumbers', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 24, 'path': 'data/generated/docs_python/lychrel_numbers/test_gpt_4o_2024_08_06_lychrel_numbers.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lychrel_numbers', 'obj': 'TestLychrelNumbers.test_reverse_int', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 24, 'path': 'data/generated/docs_python/lychrel_numbers/test_gpt_4o_2024_08_06_lychrel_numbers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lychrel_numbers', 'obj': 'TestLychrelNumbers.test_add_reverse_palindrome', 'line': 12, 'column': 4, 'endLine': 12, 'endColumn': 35, 'path': 'data/generated/docs_python/lychrel_numbers/test_gpt_4o_2024_08_06_lychrel_numbers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lychrel_numbers', 'obj': 'TestLychrelNumbers.test_add_reverse_lychrel_candidate', 'line': 18, 'column': 4, 'endLine': 18, 'endColumn': 42, 'path': 'data/generated/docs_python/lychrel_numbers/test_gpt_4o_2024_08_06_lychrel_numbers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lychrel_numbers', 'obj': 'TestLychrelNumbers.test_split_roots_from_relateds', 'line': 23, 'column': 4, 'endLine': 23, 'endColumn': 38, 'path': 'data/generated/docs_python/lychrel_numbers/test_gpt_4o_2024_08_06_lychrel_numbers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lychrel_numbers', 'obj': 'TestLychrelNumbers.test_find_lychrel', 'line': 30, 'column': 4, 'endLine': 30, 'endColumn': 25, 'path': 'data/generated/docs_python/lychrel_numbers/test_gpt_4o_2024_08_06_lychrel_numbers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_lychrel_numbers', 'obj': 'TestLychrelNumbers.test_lychrel_palindromes', 'line': 36, 'column': 4, 'endLine': 36, 'endColumn': 32, 'path': 'data/generated/docs_python/lychrel_numbers/test_gpt_4o_2024_08_06_lychrel_numbers.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
MAC Vendor Lookup,"Every connected device around the world comes with a unique Media Access Control address, or a   MAC address.

A common task a network administrator may come across is being able to identify a network device's manufacturer when given only a MAC address.



Task

Interface with one (or numerous) APIs that exist on the internet and retrieve the device manufacturer based on a supplied MAC address.

A MAC address that does not return a valid result should return the String ""N/A"".   An error related to the network connectivity or the API should return a null result.

Many implementations on this page use http://api.macvendors.com/ which, as of 19th September 2021, is throttling requests. After only 2 calls, the following response is returned for all subsequent requests. If you are planning to use the same provider or going to run the examples on this page, consider building in a delay between two calls.

{""errors"":{""detail"":""Too Many Requests"",""message"":""Please slow down your requests or upgrade your plan at https://macvendors.com""}}
",Python,"import requests
 
for addr in ['88:53:2E:67:07:BE', 'FC:FB:FB:01:FA:21',
        'D4:F4:6F:C9:EF:8D', '23:45:67']:
    vendor = requests.get('http://api.macvendors.com/' + addr).text
    print(addr, vendor)",206,6,"import unittest
from unittest.mock import patch, Mock
import requests

class TestMacVendorLookup(unittest.TestCase):

    @patch('requests.get')
    def test_valid_mac_address(self, mock_get):
        # Mocking a successful response for a valid MAC address
        mock_get.return_value = Mock(status_code=200, text='Apple, Inc.')

        addr = '88:53:2E:67:07:BE'
        response = requests.get('http://api.macvendors.com/' + addr)
        self.assertEqual(response.text, 'Apple, Inc.')

    @patch('requests.get')
    def test_invalid_mac_address(self, mock_get):
        # Mocking a response for an invalid MAC address
        mock_get.return_value = Mock(status_code=404, text='N/A')

        addr = '23:45:67'
        response = requests.get('http://api.macvendors.com/' + addr)
        self.assertEqual(response.text, 'N/A')

    @patch('requests.get')
    def test_network_error(self, mock_get):
        # Mocking a network error
        mock_get.side_effect = requests.exceptions.ConnectionError

        addr = '88:53:2E:67:07:BE'
        try:
            response = requests.get('http://api.macvendors.com/' + addr)
        except requests.exceptions.ConnectionError:
            response = None
        self.assertIsNone(response)

    @patch('requests.get')
    def test_api_throttling(self, mock_get):
        # Mocking a throttling response
        mock_get.return_value = Mock(status_code=429, text='{""errors"":{""detail"":""Too Many Requests"",""message"":""Please slow down your requests or upgrade your plan at https://macvendors.com""}}')

        addr = '88:53:2E:67:07:BE'
        response = requests.get('http://api.macvendors.com/' + addr)
        self.assertIn('Too Many Requests', response.text)

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/mac_vendor_lookup/test_gpt_4o_2024_08_06_mac_vendor_lookup.py,CompileStatus.OK,0.0,86.49,80.49,0.12,,100.0,0.5247647762298584,15.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_mac_vendor_lookup', 'obj': '', 'line': 11, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/mac_vendor_lookup/test_gpt_4o_2024_08_06_mac_vendor_lookup.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_mac_vendor_lookup', 'obj': '', 'line': 20, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/mac_vendor_lookup/test_gpt_4o_2024_08_06_mac_vendor_lookup.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_mac_vendor_lookup', 'obj': '', 'line': 29, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/mac_vendor_lookup/test_gpt_4o_2024_08_06_mac_vendor_lookup.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_mac_vendor_lookup', 'obj': '', 'line': 40, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/mac_vendor_lookup/test_gpt_4o_2024_08_06_mac_vendor_lookup.py', 'symbol': 'line-too-long', 'message': 'Line too long (193/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_mac_vendor_lookup', 'obj': '', 'line': 41, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/mac_vendor_lookup/test_gpt_4o_2024_08_06_mac_vendor_lookup.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_mac_vendor_lookup', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/mac_vendor_lookup/test_gpt_4o_2024_08_06_mac_vendor_lookup.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_mac_vendor_lookup', 'obj': 'TestMacVendorLookup', 'line': 5, 'column': 0, 'endLine': 5, 'endColumn': 25, 'path': 'data/generated/docs_python/mac_vendor_lookup/test_gpt_4o_2024_08_06_mac_vendor_lookup.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_mac_vendor_lookup', 'obj': 'TestMacVendorLookup.test_valid_mac_address', 'line': 8, 'column': 4, 'endLine': 8, 'endColumn': 30, 'path': 'data/generated/docs_python/mac_vendor_lookup/test_gpt_4o_2024_08_06_mac_vendor_lookup.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_mac_vendor_lookup', 'obj': 'TestMacVendorLookup.test_valid_mac_address', 'line': 13, 'column': 19, 'endLine': 13, 'endColumn': 68, 'path': 'data/generated/docs_python/mac_vendor_lookup/test_gpt_4o_2024_08_06_mac_vendor_lookup.py', 'symbol': 'missing-timeout', 'message': ""Missing timeout argument for method 'requests.get' can cause your program to hang indefinitely"", 'message-id': 'W3101'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_mac_vendor_lookup', 'obj': 'TestMacVendorLookup.test_invalid_mac_address', 'line': 17, 'column': 4, 'endLine': 17, 'endColumn': 32, 'path': 'data/generated/docs_python/mac_vendor_lookup/test_gpt_4o_2024_08_06_mac_vendor_lookup.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_mac_vendor_lookup', 'obj': 'TestMacVendorLookup.test_invalid_mac_address', 'line': 22, 'column': 19, 'endLine': 22, 'endColumn': 68, 'path': 'data/generated/docs_python/mac_vendor_lookup/test_gpt_4o_2024_08_06_mac_vendor_lookup.py', 'symbol': 'missing-timeout', 'message': ""Missing timeout argument for method 'requests.get' can cause your program to hang indefinitely"", 'message-id': 'W3101'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_mac_vendor_lookup', 'obj': 'TestMacVendorLookup.test_network_error', 'line': 26, 'column': 4, 'endLine': 26, 'endColumn': 26, 'path': 'data/generated/docs_python/mac_vendor_lookup/test_gpt_4o_2024_08_06_mac_vendor_lookup.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_mac_vendor_lookup', 'obj': 'TestMacVendorLookup.test_network_error', 'line': 32, 'column': 23, 'endLine': 32, 'endColumn': 72, 'path': 'data/generated/docs_python/mac_vendor_lookup/test_gpt_4o_2024_08_06_mac_vendor_lookup.py', 'symbol': 'missing-timeout', 'message': ""Missing timeout argument for method 'requests.get' can cause your program to hang indefinitely"", 'message-id': 'W3101'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_mac_vendor_lookup', 'obj': 'TestMacVendorLookup.test_api_throttling', 'line': 38, 'column': 4, 'endLine': 38, 'endColumn': 27, 'path': 'data/generated/docs_python/mac_vendor_lookup/test_gpt_4o_2024_08_06_mac_vendor_lookup.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'warning', 'module': 'test_gpt_4o_2024_08_06_mac_vendor_lookup', 'obj': 'TestMacVendorLookup.test_api_throttling', 'line': 43, 'column': 19, 'endLine': 43, 'endColumn': 68, 'path': 'data/generated/docs_python/mac_vendor_lookup/test_gpt_4o_2024_08_06_mac_vendor_lookup.py', 'symbol': 'missing-timeout', 'message': ""Missing timeout argument for method 'requests.get' can cause your program to hang indefinitely"", 'message-id': 'W3101'}]",False
MD5/Implementation,"The purpose of this task to code and validate an implementation of the MD5 Message Digest Algorithm by coding the algorithm directly (not using a call to a built-in or external hashing library). For details of the algorithm refer to MD5 on Wikipedia or the MD5 definition in IETF RFC (1321).

 The implementation needs to implement the key functionality namely producing a correct message digest for an input string. It is not necessary to mimic all of the calling modes such as adding to a digest one block at a time over subsequent calls.
 In addition to coding and verifying your implementation, note any challenges your language presented implementing the solution, implementation choices made, or limitations of your solution.
 Solutions on this page should implement MD5 directly and NOT use built in (MD5) functions, call outs to operating system calls or library routines written in other languages as is common in the original MD5 task.
 The following are acceptable:
 An original implementation from the specification, reference implementation, or pseudo-code
 A translation of a correct implementation from another language
 A library routine in the same language; however, the source must be included here.


The solutions shown here will provide practical illustrations of bit manipulation, unsigned integers, working with little-endian data. Additionally, the task requires an attention to details such as boundary conditions since being out by even 1 bit will produce dramatically different results. Subtle implementation bugs can result in some hashes being correct while others are wrong. Not only is it critical to get the individual sub functions working correctly, even small errors in padding, endianness, or data layout will result in failure.

RFC 1321
                            hash code <== string
   0xd41d8cd98f00b204e9800998ecf8427e <== """"
   0x0cc175b9c0f1b6a831c399e269772661 <== ""a""
   0x900150983cd24fb0d6963f7d28e17f72 <== ""abc""
   0xf96b697d7cb7938d525a2f31aaf161d0 <== ""message digest""
   0xc3fcd3d76192e4007dfb496cca67e13b <== ""abcdefghijklmnopqrstuvwxyz""
   0xd174ab98d277d9f5a5611c2c9f419d9f <== ""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789""
   0x57edf4a22be3c955ac49da2e2107b67a <== ""12345678901234567890123456789012345678901234567890123456789012345678901234567890""
In addition, intermediate outputs to aid in developing an implementation can be found here.

The MD5 Message-Digest Algorithm was developed by RSA Data Security, Inc. in 1991.



 Warning
Rosetta Code is not a place you should rely on for examples of code in critical roles, including security.
Also, note that MD5 has been broken and should not be used in applications requiring security. For these consider SHA2 or the upcoming SHA3.
",Python,"import math
 
rotate_amounts = [7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22,
                  5,  9, 14, 20, 5,  9, 14, 20, 5,  9, 14, 20, 5,  9, 14, 20,
                  4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23,
                  6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21]
 
constants = [int(abs(math.sin(i+1)) * 2**32) & 0xFFFFFFFF for i in range(64)]
 
init_values = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476]
 
functions = 16*[lambda b, c, d: (b & c) | (~b & d)] + \
            16*[lambda b, c, d: (d & b) | (~d & c)] + \
            16*[lambda b, c, d: b ^ c ^ d] + \
            16*[lambda b, c, d: c ^ (b | ~d)]
 
index_functions = 16*[lambda i: i] + \
                  16*[lambda i: (5*i + 1)%16] + \
                  16*[lambda i: (3*i + 5)%16] + \
                  16*[lambda i: (7*i)%16]
 
def left_rotate(x, amount):
    x &= 0xFFFFFFFF
    return ((x<<amount) | (x>>(32-amount))) & 0xFFFFFFFF
 
def md5(message):
 
    message = bytearray(message) #copy our input into a mutable buffer
    orig_len_in_bits = (8 * len(message)) & 0xffffffffffffffff
    message.append(0x80)
    while len(message)%64 != 56:
        message.append(0)
    message += orig_len_in_bits.to_bytes(8, byteorder='little')
 
    hash_pieces = init_values[:]
 
    for chunk_ofst in range(0, len(message), 64):
        a, b, c, d = hash_pieces
        chunk = message[chunk_ofst:chunk_ofst+64]
        for i in range(64):
            f = functions[i](b, c, d)
            g = index_functions[i](i)
            to_rotate = a + f + constants[i] + int.from_bytes(chunk[4*g:4*g+4], byteorder='little')
            new_b = (b + left_rotate(to_rotate, rotate_amounts[i])) & 0xFFFFFFFF
            a, b, c, d = d, new_b, b, c
        for i, val in enumerate([a, b, c, d]):
            hash_pieces[i] += val
            hash_pieces[i] &= 0xFFFFFFFF
 
    return sum(x<<(32*i) for i, x in enumerate(hash_pieces))
 
def md5_to_hex(digest):
    raw = digest.to_bytes(16, byteorder='little')
    return '{:032x}'.format(int.from_bytes(raw, byteorder='big'))
 
if __name__=='__main__':
    demo = [b"""", b""a"", b""abc"", b""message digest"", b""abcdefghijklmnopqrstuvwxyz"",
            b""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"",
            b""12345678901234567890123456789012345678901234567890123456789012345678901234567890""]
    for message in demo:
        print(md5_to_hex(md5(message)),' <= ""',message.decode('ascii'),'""', sep='')
 ",2488,62,"import unittest
from md5_implementation import md5, md5_to_hex

class TestMD5Implementation(unittest.TestCase):

    def test_empty_string(self):
        self.assertEqual(md5_to_hex(md5(b"""")), ""d41d8cd98f00b204e9800998ecf8427e"")

    def test_single_character(self):
        self.assertEqual(md5_to_hex(md5(b""a"")), ""0cc175b9c0f1b6a831c399e269772661"")

    def test_simple_string(self):
        self.assertEqual(md5_to_hex(md5(b""abc"")), ""900150983cd24fb0d6963f7d28e17f72"")

    def test_message_digest(self):
        self.assertEqual(md5_to_hex(md5(b""message digest"")), ""f96b697d7cb7938d525a2f31aaf161d0"")

    def test_alphabet(self):
        self.assertEqual(md5_to_hex(md5(b""abcdefghijklmnopqrstuvwxyz"")), ""c3fcd3d76192e4007dfb496cca67e13b"")

    def test_alphanumeric(self):
        self.assertEqual(md5_to_hex(md5(b""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"")), ""d174ab98d277d9f5a5611c2c9f419d9f"")

    def test_repeated_numbers(self):
        self.assertEqual(md5_to_hex(md5(b""12345678901234567890123456789012345678901234567890123456789012345678901234567890"")), ""57edf4a22be3c955ac49da2e2107b67a"")

if __name__ == '__main__':
    unittest.main()
",./data/generated/docs_python/md5_implementation/test_gpt_4o_2024_08_06_md5_implementation.py,CompileStatus.OK,0.0,92.86,89.74,0.37,0.88,100.0,0.451580286026001,13.0,"[{'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_md5_implementation', 'obj': '', 'line': 5, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/md5_implementation/test_gpt_4o_2024_08_06_md5_implementation.py', 'symbol': 'trailing-whitespace', 'message': 'Trailing whitespace', 'message-id': 'C0303'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_md5_implementation', 'obj': '', 'line': 19, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/md5_implementation/test_gpt_4o_2024_08_06_md5_implementation.py', 'symbol': 'line-too-long', 'message': 'Line too long (108/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_md5_implementation', 'obj': '', 'line': 22, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/md5_implementation/test_gpt_4o_2024_08_06_md5_implementation.py', 'symbol': 'line-too-long', 'message': 'Line too long (144/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_md5_implementation', 'obj': '', 'line': 25, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/md5_implementation/test_gpt_4o_2024_08_06_md5_implementation.py', 'symbol': 'line-too-long', 'message': 'Line too long (162/100)', 'message-id': 'C0301'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_md5_implementation', 'obj': '', 'line': 1, 'column': 0, 'endLine': None, 'endColumn': None, 'path': 'data/generated/docs_python/md5_implementation/test_gpt_4o_2024_08_06_md5_implementation.py', 'symbol': 'missing-module-docstring', 'message': 'Missing module docstring', 'message-id': 'C0114'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_md5_implementation', 'obj': 'TestMD5Implementation', 'line': 4, 'column': 0, 'endLine': 4, 'endColumn': 27, 'path': 'data/generated/docs_python/md5_implementation/test_gpt_4o_2024_08_06_md5_implementation.py', 'symbol': 'missing-class-docstring', 'message': 'Missing class docstring', 'message-id': 'C0115'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_md5_implementation', 'obj': 'TestMD5Implementation.test_empty_string', 'line': 6, 'column': 4, 'endLine': 6, 'endColumn': 25, 'path': 'data/generated/docs_python/md5_implementation/test_gpt_4o_2024_08_06_md5_implementation.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_md5_implementation', 'obj': 'TestMD5Implementation.test_single_character', 'line': 9, 'column': 4, 'endLine': 9, 'endColumn': 29, 'path': 'data/generated/docs_python/md5_implementation/test_gpt_4o_2024_08_06_md5_implementation.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_md5_implementation', 'obj': 'TestMD5Implementation.test_simple_string', 'line': 12, 'column': 4, 'endLine': 12, 'endColumn': 26, 'path': 'data/generated/docs_python/md5_implementation/test_gpt_4o_2024_08_06_md5_implementation.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_md5_implementation', 'obj': 'TestMD5Implementation.test_message_digest', 'line': 15, 'column': 4, 'endLine': 15, 'endColumn': 27, 'path': 'data/generated/docs_python/md5_implementation/test_gpt_4o_2024_08_06_md5_implementation.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_md5_implementation', 'obj': 'TestMD5Implementation.test_alphabet', 'line': 18, 'column': 4, 'endLine': 18, 'endColumn': 21, 'path': 'data/generated/docs_python/md5_implementation/test_gpt_4o_2024_08_06_md5_implementation.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_md5_implementation', 'obj': 'TestMD5Implementation.test_alphanumeric', 'line': 21, 'column': 4, 'endLine': 21, 'endColumn': 25, 'path': 'data/generated/docs_python/md5_implementation/test_gpt_4o_2024_08_06_md5_implementation.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}, {'type': 'convention', 'module': 'test_gpt_4o_2024_08_06_md5_implementation', 'obj': 'TestMD5Implementation.test_repeated_numbers', 'line': 24, 'column': 4, 'endLine': 24, 'endColumn': 29, 'path': 'data/generated/docs_python/md5_implementation/test_gpt_4o_2024_08_06_md5_implementation.py', 'symbol': 'missing-function-docstring', 'message': 'Missing function or method docstring', 'message-id': 'C0116'}]",False
