import unittest
from additive_primes import is_prime, digit_sum, main

class TestAdditivePrimes(unittest.TestCase):

    def test_is_prime(self):
        self.assertTrue(is_prime(2))
        self.assertTrue(is_prime(3))
        self.assertFalse(is_prime(4))
        self.assertTrue(is_prime(5))
        self.assertFalse(is_prime(6))
        self.assertTrue(is_prime(7))
        self.assertFalse(is_prime(8))
        self.assertFalse(is_prime(9))
        self.assertFalse(is_prime(10))
        self.assertTrue(is_prime(11))
        self.assertFalse(is_prime(12))
        self.assertTrue(is_prime(13))
        self.assertFalse(is_prime(14))
        self.assertFalse(is_prime(15))
        self.assertFalse(is_prime(16))
        self.assertTrue(is_prime(17))
        self.assertFalse(is_prime(18))
        self.assertTrue(is_prime(19))
        self.assertFalse(is_prime(20))
        self.assertTrue(is_prime(23))
        self.assertFalse(is_prime(25))
        self.assertTrue(is_prime(29))
        self.assertTrue(is_prime(31))
        self.assertTrue(is_prime(37))
        self.assertTrue(is_prime(41))
        self.assertTrue(is_prime(43))
        self.assertTrue(is_prime(47))
        self.assertTrue(is_prime(53))
        self.assertTrue(is_prime(59))
        self.assertTrue(is_prime(61))
        self.assertTrue(is_prime(67))
        self.assertTrue(is_prime(71))
        self.assertTrue(is_prime(73))
        self.assertTrue(is_prime(79))
        self.assertTrue(is_prime(83))
        self.assertTrue(is_prime(89))
        self.assertTrue(is_prime(97))
        self.assertTrue(is_prime(101))
        self.assertTrue(is_prime(103))
        self.assertTrue(is_prime(107))
        self.assertTrue(is_prime(109))
        self.assertTrue(is_prime(113))
        self.assertTrue(is_prime(127))
        self.assertTrue(is_prime(131))
        self.assertTrue(is_prime(137))
        self.assertTrue(is_prime(139))
        self.assertTrue(is_prime(149))
        self.assertTrue(is_prime(151))
        self.assertTrue(is_prime(157))
        self.assertTrue(is_prime(163))
        self.assertTrue(is_prime(167))
        self.assertTrue(is_prime(173))
        self.assertTrue(is_prime(179))
        self.assertTrue(is_prime(181))
        self.assertTrue(is_prime(191))
        self.assertTrue(is_prime(193))
        self.assertTrue(is_prime(197))
        self.assertTrue(is_prime(199))
        self.assertTrue(is_prime(211))
        self.assertTrue(is_prime(223))
        self.assertTrue(is_prime(227))
        self.assertTrue(is_prime(229))
        self.assertTrue(is_prime(233))
        self.assertTrue(is_prime(239))
        self.assertTrue(is_prime(241))
        self.assertTrue(is_prime(251))
        self.assertTrue(is_prime(257))
        self.assertTrue(is_prime(263))
        self.assertTrue(is_prime(269))
        self.assertTrue(is_prime(271))
        self.assertTrue(is_prime(277))
        self.assertTrue(is_prime(281))
        self.assertTrue(is_prime(283))
        self.assertTrue(is_prime(293))
        self.assertTrue(is_prime(307))
        self.assertTrue(is_prime(311))
        self.assertTrue(is_prime(313))
        self.assertTrue(is_prime(317))
        self.assertTrue(is_prime(331))
        self.assertTrue(is_prime(337))
        self.assertTrue(is_prime(347))
        self.assertTrue(is_prime(349))
        self.assertTrue(is_prime(353))
        self.assertTrue(is_prime(359))
        self.assertTrue(is_prime(367))
        self.assertTrue(is_prime(373))
        self.assertTrue(is_prime(379))
        self.assertTrue(is_prime(383))
        self.assertTrue(is_prime(389))
        self.assertTrue(is_prime(397))
        self.assertTrue(is_prime(401))
        self.assertTrue(is_prime(409))
        self.assertTrue(is_prime(419))
        self.assertTrue(is_prime(421))
        self.assertTrue(is_prime(431))
        self.assertTrue(is_prime(433))
        self.assertTrue(is_prime(439))
        self.assertTrue(is_prime(443))
        self.assertTrue(is_prime(449))
        self.assertTrue(is_prime(457))
        self.assertTrue(is_prime(461))
        self.assertTrue(is_prime(463))
        self.assertTrue(is_prime(467))
        self.assertTrue(is_prime(479))
        self.assertTrue(is_prime(487))
        self.assertTrue(is_prime(491))
        self.assertTrue(is_prime(499))

    def test_digit_sum(self):
        self.assertEqual(digit_sum(123), 6)
        self.assertEqual(digit_sum(456), 15)
        self.assertEqual(digit_sum(789), 24)
        self.assertEqual(digit_sum(101), 2)
        self.assertEqual(digit_sum(999), 27)
        self.assertEqual(digit_sum(1), 1)
        self.assertEqual(digit_sum(0), 0)
        self.assertEqual(digit_sum(1000), 1)
        self.assertEqual(digit_sum(987654321), 45)

    def test_main(self):
        # Since main() prints to stdout, we need to capture the output
        import io
        import sys
        from contextlib import redirect_stdout

        captured_output = io.StringIO()
        with redirect_stdout(captured_output):
            main()

        output = captured_output.getvalue().strip()
        expected_output = (
            "2 3 5 7 11 23 29 41 43 47 61 67 83 89 101 113 131 137 139 151 157 173 179 191 193 197 199 223 227 229 241 263 269 281 283 311 313 317 331 337 353 359 373 379 397 401 409 421 443 449 461 463 467 487 "
            "\nFound 54 additive primes less than 500"
        )
        self.assertEqual(output, expected_output)

if __name__ == "__main__":
    unittest.main()
